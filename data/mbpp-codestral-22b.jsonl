{"task_id": "MBPP/1", "prompt": "\n\ndef min_cost(cost, m, n):\n\t\"\"\"\n\tWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n\t>>> min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n\t8\n\t>>> min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n\t12\n\t>>> min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n\t16\n\t\"\"\"\n", "solution": "\tR = 3\n\tC = 3\n\t \n\ttc = [[0 for x in range(C)] for x in range(R)] \n\ttc[0][0] = cost[0][0] \n\tfor i in range(1, m+1): \n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \n\tfor j in range(1, n+1): \n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \n\tfor i in range(1, m+1): \n\t\tfor j in range(1, n+1): \n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \n\treturn tc[m][n]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_cost(cost, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "code_2": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = cost[0][0]\n    for j in range(1, n + 1):\n        dp[j] = dp[j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        dp[0] += cost[i][0]\n        for j in range(1, n + 1):\n            dp[j] = cost[i][j] + min(dp[j], dp[j - 1])\n    return dp[n]", "code_3": "def min_cost(cost, m, n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(m + 1):\n        new_dp = [0] * (n + 1)\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                new_dp[j] = cost[i][j]\n            elif i == 0:\n                new_dp[j] = new_dp[j - 1] + cost[i][j]\n            elif j == 0:\n                new_dp[j] = dp[j] + cost[i][j]\n            else:\n                new_dp[j] = cost[i][j] + min(dp[j], new_dp[j - 1])\n        dp = new_dp\n    return dp[n]", "code_4": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + min(dp[j], dp[j - 1])\n    return dp[n]", "code_5": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        prev = dp[0]\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j], prev = cost[i][j] + min(dp[j], prev), dp[j]\n    return dp[n]", "code_6": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + min(dp[j - 1], dp[j])\n    return dp[n]", "code_7": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + min(dp[j - 1], dp[j])\n                for k in range(j - 1, -1, -1):\n                    dp[k] = cost[i][k] + min(dp[k], dp[k - 1])\n    return dp[n]", "code_8": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + min(dp[j - 1], dp[j])\n                for k in range(j - 1, -1, -1):\n                    dp[k] = min(dp[k], dp[k - 1]) + cost[i][k]\n    return dp[n]", "code_9": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + min(dp[j - 1], dp[j])\n                for k in range(j - 1, i - 1, -1):\n                    dp[k] = min(dp[k], dp[k - 1]) + cost[i][k]\n    return dp[n]", "code_10": "def min_cost(cost, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[j] = dp[j - 1] + cost[i][j]\n            elif j == 0:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + min(dp[j - 1], dp[j])\n                for k in range(j - 1, i - 1, -1):\n                    dp[k] = min(dp[k], dp[k - 1] + cost[i][k])\n    return dp[n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/2", "prompt": "\n\ndef similar_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to find the similar elements from the given two tuple lists.\n  >>> similar_elements((3, 4, 5, 6),(5, 7, 4, 10))\n  (4, 5)\n  >>> similar_elements((1, 2, 3, 4),(5, 4, 3, 7))\n  (3, 4)\n  >>> similar_elements((11, 12, 14, 13),(17, 15, 14, 13))\n  (13, 14)\n  \"\"\"\n", "solution": "  \n  res = tuple(set(test_tup1) & set(test_tup2))\n  return (res) ", "results": [1, 0, 0, 1, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def similar_elements(t1, t2): return tuple(set(t1) & set(t2))", "code_2": "def similar_elements(t1, t2): return tuple(filter(lambda x: x in t2, t1))", "code_3": "def similar_elements(t1, t2): return tuple(i for i in t1 if i in t2)", "code_4": "import numpy as np\ndef similar_elements(t1, t2): return tuple(np.intersect1d(t1, t2))", "code_5": "def similar_elements(t1, t2): return tuple(sorted(set(t1) & set(t2)))", "code_6": "def similar_elements(t1, t2): return tuple(set(t1).intersection(t2))", "code_7": "def similar_elements(t1, t2): return tuple(i for i in t1 if i in set(t2))", "code_8": "def similar_elements(t1, t2): return tuple(set(t1).symmetric_difference(set(t2) - set(t1)))", "code_9": "def similar_elements(t1, t2): return tuple(sorted(set(t1) & set(t2), reverse=True))", "code_10": "def similar_elements(t1, t2): return tuple(sorted(set(t1).intersection(t2), key=t1.index))", "pass@3": 0.8333333333333334, "nDCG@10": 0.47842151728792737}
{"task_id": "MBPP/3", "prompt": "\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    >>> is_not_prime(2)\n    False\n    >>> is_not_prime(10)\n    True\n    >>> is_not_prime(35)\n    True\n    \"\"\"\n", "solution": "    import math\n    \n    result = False\n    for i in range(2,int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_not_prime(n):\n    if n < 2: return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0: return True\n    return False", "code_2": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2 or n == 3: return False\n    if n % 2 == 0 or n % 3 == 0: return True\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0: return True\n        i += w\n        w = 6 - w\n    return False", "code_3": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    max_div = int(n**0.5) + 1\n    for div in range(3, max_div, 2):\n        if n % div == 0: return True\n    return False", "code_4": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    max_div = int(n**0.5) + 1\n    return not all(n % div for div in range(3, max_div, 2))", "code_5": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    return any(n % div == 0 for div in range(3, int(n**0.5) + 1, 2))", "code_6": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    div = 3\n    while div * div <= n:\n        if n % div == 0: return True\n        div += 2\n    return False", "code_7": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    div = 3\n    while div * div <= n:\n        if n % div:\n            div += 2\n        else:\n            return True\n    return False", "code_8": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    div = 3\n    while div * div <= n:\n        if n % div == 0: return True\n        div += 2\n    return False", "code_9": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    div = 3\n    while div * div <= n:\n        if n % div:\n            div += 2\n        else:\n            return True\n    return False", "code_10": "def is_not_prime(n):\n    if n < 2: return True\n    if n == 2: return False\n    if n % 2 == 0: return True\n    div = 3\n    while div * div <= n:\n        if n % div == 0: return True\n        div += 2\n    return False", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/4", "prompt": "\n\ndef heap_queue_largest(nums,n):\n  \"\"\"\n  Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)\n  [85, 75, 65]\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)\n  [85, 75]\n  >>> heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)\n  [85, 75, 65, 58, 35]\n  \"\"\"\n", "solution": "  import heapq as hq\n  \n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import heapq\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)", "code_2": "import heapq\ndef heap_queue_largest(nums, n):\n    return sorted(nums, reverse=True)[:n]", "code_3": "def heap_queue_largest(nums, n):\n    nums.sort(reverse=True)\n    return nums[:n]", "code_4": "import heapq\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)", "code_5": "import heapq\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)", "code_6": "def heap_queue_largest(nums, n):\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums[:n]", "code_7": "def heap_queue_largest(nums, n):\n    for i in range(n, len(nums)):\n        if nums[i] > min(nums[:n]):\n            nums[nums.index(min(nums[:n]))] = nums[i]\n    return sorted(nums[:n], reverse=True)", "code_8": "def heap_queue_largest(nums, n):\n    largest = []\n    for _ in range(n):\n        max_num = max(nums)\n        largest.append(max_num)\n        nums.remove(max_num)\n    return largest", "code_9": "def heap_queue_largest(nums, n):\n    return [sorted(nums, reverse=True)[i] for i in range(n)]", "code_10": "def heap_queue_largest(nums, n):\n    largest = []\n    while len(largest) < n:\n        max_num = nums[0]\n        for num in nums:\n            if num > max_num:\n                max_num = num\n        largest.append(max_num)\n        nums.remove(max_num)\n    return largest", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/5", "prompt": "\n\ndef count_ways(n):\n\t\"\"\"\n\tWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n\t>>> count_ways(2)\n\t3\n\t>>> count_ways(8)\n\t153\n\t>>> count_ways(12)\n\t2131\n\t\"\"\"\n", "solution": "\t \n\tA = [0] * (n + 1) \n\tB = [0] * (n + 1) \n\tA[0] = 1\n\tA[1] = 0\n\tB[0] = 0\n\tB[1] = 1\n\tfor i in range(2, n+1): \n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \n\t\tB[i] = A[i - 1] + B[i - 2] \n\treturn A[n] ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_ways(n):\n\ta, b = 1, 2\n\tfor _ in range(n - 1):\n\t\ta, b = b, a + b\n\treturn a", "code_2": "def count_ways(n):\n\tways = [0] * (n + 1)\n\tways[0] = 1\n\tways[1] = 1\n\tfor i in range(2, n + 1):\n\t\tways[i] = ways[i - 1] + ways[i - 2]\n\treturn ways[n]", "code_3": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [0] * (n + 1)\n\tdp[0] = dp[1] = 1\n\tfor i in range(2, n + 1):\n\t\tdp[i] = dp[i - 1] + dp[i - 2]\n\treturn dp[n]", "code_4": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\ta, b = 1, 1\n\tfor _ in range(2, n + 1):\n\t\ta, b = b, a + b\n\treturn b", "code_5": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [1, 1] + [0] * (n - 1)\n\tfor i in range(2, n + 1):\n\t\tdp[i] = dp[i - 1] + dp[i - 2]\n\treturn dp[n]", "code_6": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [0] * (n + 1)\n\tdp[0] = dp[1] = 1\n\tfor i in range(2, n + 1):\n\t\tdp[i] = dp[i - 1] + dp[i - 2]\n\treturn dp[n]", "code_7": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [1, 1]\n\tfor _ in range(2, n + 1):\n\t\tdp.append(dp[-1] + dp[-2])\n\treturn dp[n]", "code_8": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [1, 1]\n\tfor _ in range(2, n + 1):\n\t\tdp.append(sum(dp[-2:]))\n\treturn dp[n]", "code_9": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [1, 1]\n\tfor _ in range(2, n + 1):\n\t\tdp.append(dp[-1] + dp[-2])\n\treturn dp[-1]", "code_10": "def count_ways(n):\n\tif n <= 1:\n\t\treturn 1\n\tdp = [1, 1]\n\tfor _ in range(2, n + 1):\n\t\tdp.append(dp[-1] + dp[-2])\n\treturn dp[n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/6", "prompt": "\n\ndef differ_At_One_Bit_Pos(a,b):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    >>> differ_At_One_Bit_Pos(13,9)\n    True\n    >>> differ_At_One_Bit_Pos(15,8)\n    False\n    >>> differ_At_One_Bit_Pos(2,4)\n    False\n    \"\"\"\n", "solution": "    def is_Power_Of_Two (x): \n        return x and (not(x & (x - 1))) \n     \n    return is_Power_Of_Two(a ^ b)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def differ_At_One_Bit_Pos(a, b):\n    return bin(a ^ b).count('1') == 1", "code_2": "def differ_At_One_Bit_Pos(a, b):\n    return sum(1 for i in range(32) if (a >> i) & 1 != (b >> i) & 1) == 1", "code_3": "def differ_At_One_Bit_Pos(a, b):\n    return len([i for i in range(32) if (a >> i) & 1 != (b >> i) & 1]) == 1", "code_4": "def differ_At_One_Bit_Pos(a, b):\n    xor = a ^ b\n    return xor != 0 and (xor & (xor - 1)) == 0", "code_5": "def differ_At_One_Bit_Pos(a, b):\n    xor = a ^ b\n    return xor and not (xor & (xor - 1))", "code_6": "def differ_At_One_Bit_Pos(a, b):\n    return f'{a:032b}' != f'{b:032b}' and f'{a:032b}'.count('1') == f'{b:032b}'.count('1') + 1", "code_7": "def differ_At_One_Bit_Pos(a, b):\n    return sum(map(lambda x: x[0] != x[1], zip(f'{a:032b}', f'{b:032b}'))) == 1", "code_8": "def differ_At_One_Bit_Pos(a, b):\n    return sum(1 for i in range(32) if a & (1 << i) != b & (1 << i)) == 1", "code_9": "def differ_At_One_Bit_Pos(a, b):\n    return sum(1 for i in range(32) if bool(a & (1 << i)) != bool(b & (1 << i))) == 1", "code_10": "def differ_At_One_Bit_Pos(a, b):\n    return sum(1 for i in range(32) if (a >> i) & 1 != (b >> i) & 1) == 1", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/7", "prompt": "\n\ndef find_char_long(text):\n  \"\"\"\n  Write a function to find all words which are at least 4 characters long in a string by using regex.\n  >>> find_char_long('Please move back to stream')\n  ['Please', 'move', 'back', 'stream']\n  >>> find_char_long('Jing Eco and Tech')\n  ['Jing', 'Tech']\n  >>> find_char_long('Jhingai wulu road Zone 3')\n  ['Jhingai', 'wulu', 'road', 'Zone']\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)", "code_2": "import re\ndef find_char_long(text):\n    return [word for word in re.split(r'\\s', text) if len(word) >= 4]", "code_3": "def find_char_long(text):\n    return [word for word in text.split() if len(word) >= 4]", "code_4": "import re\ndef find_char_long(text):\n    return list(filter(lambda word: len(word) >= 4, re.split(r'\\s', text)))", "code_5": "def find_char_long(text):\n    return list(filter(lambda word: len(word) >= 4, text.split()))", "code_6": "import re\ndef find_char_long(text):\n    return [match.group() for match in re.finditer(r'\\b\\w{4,}\\b', text)]", "code_7": "def find_char_long(text):\n    return [word for word in text.split() if word.isalpha() and len(word) >= 4]", "code_8": "import re\ndef find_char_long(text):\n    return [word for word in re.findall(r'\\w+', text) if len(word) >= 4]", "code_9": "def find_char_long(text):\n    return [word for word in text.split() if word.isalnum() and len(word) >= 4]", "code_10": "import re\ndef find_char_long(text):\n    return [word for word in re.findall(r'\\b[a-zA-Z0-9_]{4,}\\b', text)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/8", "prompt": "\n\ndef square_nums(nums):\n \"\"\"\n Write a function to find squares of individual elements in a list using lambda function.\n >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n >>> square_nums([10,20,30])\n ([100,400,900])\n >>> square_nums([12,15])\n ([144,225])\n \"\"\"\n", "solution": " \n square_nums = list(map(lambda x: x ** 2, nums))\n return square_nums", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "square_nums = lambda nums: [num ** 2 for num in nums]", "code_2": "square_nums = lambda nums: list(map(lambda num: num ** 2, nums))", "code_3": "from functools import reduce\nsquare_nums = lambda nums: reduce(lambda acc, num: acc + [num ** 2], nums, [])", "code_4": "import numpy as np\nsquare_nums = lambda nums: np.square(nums).tolist()", "code_5": "square_nums = lambda nums: [pow(num, 2) for num in nums]", "code_6": "square_nums = lambda nums: list(pow(num, 2) for num in nums)", "code_7": "square_nums = lambda nums: [num * num for num in nums]", "code_8": "square_nums = lambda nums: [num << 1 for num in nums]", "code_9": "square_nums = lambda nums: [num | (num << 1) for num in nums]", "code_10": "square_nums = lambda nums: [num + num + (num << 2) for num in nums]", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/9", "prompt": "\n\ndef find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"ab\")\n    2\n    >>> find_Rotations(\"abc\")\n    3\n    \"\"\"\n", "solution": "     \n    tmp = str + str\n    n = len(str) \n    for i in range(1,n + 1): \n        substring = tmp[i: i+n] \n        if (str == substring): \n            return i \n    return n ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Rotations(s):\n    n = len(s)\n    concat = s + s\n    for i in range(1, n + 1):\n        if concat[i: i + n] == s:\n            return i\n    return n", "code_2": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "code_3": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if all(s[i:] + s[:i][j] == s[j] for j in range(n)):\n            return i\n    return n", "code_4": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "code_5": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "code_6": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "code_7": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "code_8": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "code_9": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "code_10": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/10", "prompt": "\n\ndef small_nnum(list1,n):\n  \"\"\"\n  Write a function to get the n smallest items from a dataset.\n  >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n  [10,20]\n  >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)\n  [10,20,20,40,50]\n  >>> small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)\n  [10,20,20]\n  \"\"\"\n", "solution": "  import heapq\n  \n  smallest=heapq.nsmallest(n,list1)\n  return smallest", "results": [1, 1, 1, 0, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def small_nnum(list1, n):\n    return sorted(list1)[:n]", "code_2": "import heapq\ndef small_nnum(list1, n):\n    return heapq.nsmallest(n, list1)", "code_3": "def small_nnum(list1, n):\n    list1.sort()\n    return list1[:n]", "code_4": "def small_nnum(list1, n):\n    return [x for x in sorted(list1) if n > 0 and not (n -= 1)]", "code_5": "def small_nnum(list1, n):\n    return [x for x in sorted(list1[:n]) + sorted(list1[n:]) if x < list1[n-1]]", "code_6": "def small_nnum(list1, n):\n    return [x for i, x in enumerate(sorted(list1)) if i < n]", "code_7": "def small_nnum(list1, n):\n    return [x for x in sorted(list1) if list1.index(x) < n]", "code_8": "def small_nnum(list1, n):\n    return list(dict.fromkeys(sorted(list1))[:n])", "code_9": "def small_nnum(list1, n):\n    return list(set(sorted(list1)[:n]))", "code_10": "def small_nnum(list1, n):\n    return list({x for x in sorted(list1) if n > 0 and not (n -= 1)})", "pass@3": 0.8333333333333334, "nDCG@10": 0.5473983622993503}
{"task_id": "MBPP/11", "prompt": "\n\ndef remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    >>> remove_Occ(\"hello\",\"l\")\n    \"heo\"\n    >>> remove_Occ(\"abcda\",\"a\")\n    \"bcd\"\n    >>> remove_Occ(\"PHP\",\"P\")\n    \"H\"\n    \"\"\"\n", "solution": "     \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "results": [0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_Occ(s, ch):\n    return s[1:s.rfind(ch)] if ch in s else s", "code_2": "def remove_Occ(s, ch):\n    i = s.find(ch)\n    j = s.rfind(ch)\n    return s[:i] + s[i+1:j] + s[j+1:] if i != -1 and j != -1 else s", "code_3": "def remove_Occ(s, ch):\n    return s.replace(ch, '', 1).replace(ch, '', -1) if ch in s else s", "code_4": "def remove_Occ(s, ch):\n    i = s.find(ch)\n    j = s.rfind(ch)\n    return s[:i] + s[i+1:j] + s[j+1:] if i != j != -1 else s", "code_5": "def remove_Occ(s, ch):\n    return ''.join(s[:i] + s[i+1:] for i in (s.find(ch), s.rfind(ch)) if i != -1)", "code_6": "def remove_Occ(s, ch):\n    i = s.find(ch)\n    if i != -1:\n        j = s.rfind(ch)\n        return s[:i] + s[i+1:j] + s[j+1:]\n    return s", "code_7": "def remove_Occ(s, ch):\n    i = s.find(ch)\n    j = s.rfind(ch)\n    return s[:i] + s[i+1:j] + s[j+1:] if i != j and i != -1 else s", "code_8": "def remove_Occ(s, ch):\n    return s[:s.find(ch)] + s[s.find(ch)+1:s.rfind(ch)] + s[s.rfind(ch)+1:] if ch in s else s", "code_9": "def remove_Occ(s, ch):\n    i = s.find(ch)\n    j = s.rfind(ch)\n    return s[:i] + s[i+1:j] + s[j+1:] if i != -1 and j != i else s", "code_10": "def remove_Occ(s, ch):\n    i = s.find(ch)\n    j = s.rfind(ch)\n    return s[:i] + s[i+1:j] + s[j+1:] if i != j > -1 else s", "pass@3": 1.0, "nDCG@10": 0.694765116060299}
{"task_id": "MBPP/12", "prompt": "\n\ndef sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    >>> sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n    [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    >>> sort_matrix([[5,8,9],[6,4,3],[2,1,4]])\n    [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n    \"\"\"\n", "solution": "    \n    result = sorted(M, key=sum)\n    return result", "results": [1, 1, 0, 0, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def sort_matrix(M):\n    return sorted(M, key=sum)", "code_2": "def sort_matrix(M):\n    M.sort(key=sum)\n    return M", "code_3": "import numpy as np\ndef sort_matrix(M):\n    return M[np.argsort(np.sum(M, axis=1))]", "code_4": "import operator\ndef sort_matrix(M):\n    return sorted(M, key=operator.itemgetter(0, 1, 2))", "code_5": "def sort_matrix(M):\n    return sorted(M, key=lambda x: x[0] + x[1] + x[2])", "code_6": "def sort_matrix(M):\n    return sorted(M, key=lambda x: sum(x))", "code_7": "def sort_matrix(M):\n    M.sort(key=lambda x: sum(x))\n    return M", "code_8": "import heapq\ndef sort_matrix(M):\n    return [x for x, _ in sorted(zip(M, map(sum, M)), key=lambda x: x[1])]", "code_9": "def sort_matrix(M):\n    return [x for _, x in sorted((sum(row), row) for row in M)]", "code_10": "def sort_matrix(M):\n    return [x for _, x in sorted((sum(row), i, row) for i, row in enumerate(M))][2::3]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7315449642824575}
{"task_id": "MBPP/13", "prompt": "\n\ndef count_common(words):\n  \"\"\"\n  Write a function to count the most common words in a dictionary.\n  >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n  [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n  >>> count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])\n  [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n  >>> count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])\n  [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n  \"\"\"\n", "solution": "  from collections import Counter\n  \n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef count_common(words):\n    return Counter(words).most_common()", "code_2": "def count_common(words):\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "code_3": "import heapq\ndef count_common(words):\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    return heapq.nlargest(len(counts), counts.items(), key=lambda x: x[1])", "code_4": "def count_common(words):\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    return sorted(counts.items(), key=lambda x: (-x[1], x[0]))", "code_5": "from operator import itemgetter\ndef count_common(words):\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    return sorted(counts.items(), key=itemgetter(1), reverse=True)", "code_6": "def count_common(words):\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    return sorted(counts.items(), key=lambda x: (-x[1], x[0]))", "code_7": "from collections import defaultdict\ndef count_common(words):\n    counts = defaultdict(int)\n    for word in words:\n        counts[word] += 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "code_8": "def count_common(words):\n    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "code_9": "from collections import Counter\ndef count_common(words):\n    counts = Counter(words)\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "code_10": "def count_common(words):\n    counts = {}\n    for word in words:\n        counts[word] = counts.setdefault(word, 0) + 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/14", "prompt": "\n\ndef find_Volume(l,b,h) :\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    >>> find_Volume(10,8,6)\n    240\n    >>> find_Volume(3,2,2)\n    6\n    >>> find_Volume(1,2,1)\n    1\n    \"\"\"\n", "solution": "     \n    return ((l * b * h) / 2) ", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_Volume(l, b, h): return l * b * h / 2", "code_2": "find_Volume = lambda l, b, h: l * b * h / 2", "code_3": "import operator\ndef find_Volume(l, b, h): return operator.mul(l, b, h) / 2", "code_4": "from functools import reduce\nfrom operator import mul\ndef find_Volume(l, b, h): return reduce(mul, (l, b, h)) / 2", "code_5": "def find_Volume(l, b, h): return (l * b * h) >> 1", "code_6": "def find_Volume(l, b, h): return l * b * h // 2", "code_7": "def find_Volume(l, b, h): return (l * b * h) / 2.0", "code_8": "def find_Volume(l, b, h): return float(l * b * h) / 2", "code_9": "def find_Volume(l, b, h): return divmod(l * b * h, 2)[0]", "code_10": "def find_Volume(l, b, h): return int(l * b * h / 2)", "pass@3": 1.0, "nDCG@10": 0.88995411685096}
{"task_id": "MBPP/15", "prompt": "\n\ndef split_lowerstring(text):\n \"\"\"\n Write a function to split a string at lowercase letters.\n >>> split_lowerstring(\"AbCd\")\n ['bC','d']\n >>> split_lowerstring(\"Python\")\n ['y', 't', 'h', 'o', 'n']\n >>> split_lowerstring(\"Programming\")\n ['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n \"\"\"\n", "solution": " import re\n \n return (re.findall('[a-z][^a-z]*', text))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef split_lowerstring(text):\n return [s for s in re.findall('[A-Z][a-z]*', text)]", "code_2": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([0]+[i+1 for i, c in enumerate(text) if c.isupper()], [i for i, c in enumerate(text) if c.isupper()])]", "code_3": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([0]+[i for i, c in enumerate(text) if c.isupper()], [i for i, c in enumerate(text) if i == len(text)-1 or c.islower()])]", "code_4": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if i == 0 or c.isupper()], [i for i, c in enumerate(text) if i == len(text)-1 or c.islower()])]", "code_5": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if c.isupper()], [i for i, c in enumerate(text) if i == len(text)-1 or c.isupper()])]", "code_6": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if i == 0 or c.isupper()], [i+1 for i, c in enumerate(text) if i < len(text)-1 and c.islower()])]", "code_7": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if i == 0 or c.isupper()], [i for i, c in enumerate(text) if i == len(text)-1 or text[i+1].isupper()])]", "code_8": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if i == 0 or c.isupper()], [i+1 for i, c in enumerate(text) if i < len(text)-1 and text[i+1].isupper()])]", "code_9": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if i == 0 or c.isupper()], [i+1 for i, c in enumerate(text) if i < len(text)-1 and text[i+1].islower()])]", "code_10": "def split_lowerstring(text):\n return [text[i:j] for i, j in zip([i for i, c in enumerate(text) if i == 0 or c.isupper()], [i+1 for i, c in enumerate(text) if i < len(text)-1 and text[i+1].isupper() or i == len(text)-2 and text[-1].islower()])]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/16", "prompt": "\n\ndef text_lowercase_underscore(text):\n        \"\"\"\n        Write a function to find sequences of lowercase letters joined with an underscore.\n        >>> text_lowercase_underscore(\"aab_cbbbc\")\n        ('Found a match!')\n        >>> text_lowercase_underscore(\"aab_Abbbc\")\n        ('Not matched!')\n        >>> text_lowercase_underscore(\"Aaab_abbbc\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef text_lowercase_underscore(text):\n    return 'Found a match!' if re.fullmatch(r'[a-z]+_[a-z]+', text) else 'Not matched!'", "code_2": "def text_lowercase_underscore(text):\n    parts = text.split('_')\n    return 'Found a match!' if len(parts) == 2 and parts[0].islower() and parts[1].islower() else 'Not matched!'", "code_3": "def text_lowercase_underscore(text):\n    i = text.find('_')\n    return 'Found a match!' if i > 0 and i < len(text) - 1 and text[:i].islower() and text[i+1:].islower() else 'Not matched!'", "code_4": "def text_lowercase_underscore(text):\n    return 'Found a match!' if all(c == '_' if i == text.index('_') else c.islower() for i, c in enumerate(text)) else 'Not matched!'", "code_5": "def text_lowercase_underscore(text):\n    lowercase = set('abcdefghijklmnopqrstuvwxyz')\n    underscore_found = False\n    for char in text:\n        if char == '_':\n            if underscore_found or not text.index('_'):\n                return 'Not matched!'\n            underscore_found = True\n        elif char not in lowercase:\n            return 'Not matched!'\n    return 'Found a match!' if underscore_found else 'Not matched!'", "code_6": "def text_lowercase_underscore(text):\n    try:\n        first, second = text.split('_')\n        return 'Found a match!' if first.islower() and second.islower() else 'Not matched!'\n    except ValueError:\n        return 'Not matched!'", "code_7": "def text_lowercase_underscore(text):\n    return 'Found a match!' if text.replace('_', '').islower() and text.count('_') == 1 else 'Not matched!'", "code_8": "def text_lowercase_underscore(text):\n    return 'Found a match!' if text[1:-1].replace('_', '').islower() and text[1:-1].count('_') == 1 else 'Not matched!'", "code_9": "def text_lowercase_underscore(text):\n    return 'Found a match!' if all(map(str.islower, text.split('_'))) and text.count('_') == 1 else 'Not matched!'", "code_10": "def text_lowercase_underscore(text):\n    return 'Found a match!' if text.lower() == text and text.count('_') == 1 else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/17", "prompt": "\n\ndef square_perimeter(a):\n  \"\"\"\n  Write a function to find the perimeter of a square.\n  >>> square_perimeter(10)\n  40\n  >>> square_perimeter(5)\n  20\n  >>> square_perimeter(4)\n  16\n  \"\"\"\n", "solution": "  \n  perimeter=4*a\n  return perimeter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def square_perimeter(a): return 4 * a`", "code_2": "`square_perimeter = lambda a: 4 * a`", "code_3": "`def square_perimeter(a): return a << 2`", "code_4": "`def square_perimeter(a): return a * 0b100`", "code_5": "`def square_perimeter(a): return a * 4.0`", "code_6": "`def square_perimeter(a): return a * 2 + a * 2`", "code_7": "`def square_perimeter(a): return sum([a, a, a, a])`", "code_8": "`def square_perimeter(a): return reduce(lambda x, y: x + y, [a, a, a, a])`", "code_9": "`def square_perimeter(a): return sum(itertools.repeat(a, 4))`", "code_10": "`def square_perimeter(a): return functools.reduce(operator.add, itertools.repeat(a, 4))`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/18", "prompt": "\n\ndef remove_dirty_chars(string, second_string):\n\t\"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t>>> remove_dirty_chars(\"probasscurve\", \"pros\")\n\t'bacuve'\n\t>>> remove_dirty_chars(\"digitalindia\", \"talent\")\n\t'digiidi'\n\t>>> remove_dirty_chars(\"exoticmiles\", \"toxic\")\n\t'emles'\n\t\"\"\"\n", "solution": "\tNO_OF_CHARS = 256\n\tdef str_to_list(string): \n\t\ttemp = [] \n\t\tfor x in string: \n\t\t\ttemp.append(x) \n\t\treturn temp \n\tdef lst_to_string(List): \n\t\treturn ''.join(List) \n\tdef get_char_count_array(string): \n\t\tcount = [0] * NO_OF_CHARS \n\t\tfor i in string: \n\t\t\tcount[ord(i)] += 1\n\t\treturn count \n\t \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in s2)", "code_2": "def remove_dirty_chars(s1, s2):\n    return ''.join(filter(lambda c: c not in s2, s1))", "code_3": "def remove_dirty_chars(s1, s2):\n    return s1.translate(str.maketrans('', '', s2))", "code_4": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if all(c != d for d in s2))", "code_5": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if s2.find(c) == -1)", "code_6": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if not any(c == d for d in s2))", "code_7": "def remove_dirty_chars(s1, s2):\n    return ''.join(re.sub(f'[{re.escape(s2)}]', '', s1))", "code_8": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if not c in set(s2))", "code_9": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if not c in s2)", "code_10": "def remove_dirty_chars(s1, s2):\n    return ''.join(c for c in s1 if c not in list(s2))", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/19", "prompt": "\n\ndef test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    >>> test_duplicate(([1,2,3,4,5]))\n    False\n    >>> test_duplicate(([1,2,3,4, 4]))\n    True\n    >>> test_duplicate([1,1,2,2,3,3,4,4,5])\n    True\n    \"\"\"\n", "solution": "    \n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))", "code_2": "def test_duplicate(arraynums):\n    return any(arraynums.count(x) > 1 for x in arraynums)", "code_3": "def test_duplicate(arraynums):\n    return len([i for i in set(arraynums) if arraynums.count(i) > 1]) > 0", "code_4": "def test_duplicate(arraynums):\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False", "code_5": "def test_duplicate(arraynums):\n    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        num_dict[num] = 1\n    return False", "code_6": "def test_duplicate(arraynums):\n    arraynums.sort()\n    for i in range(1, len(arraynums)):\n        if arraynums[i] == arraynums[i-1]:\n            return True\n    return False", "code_7": "def test_duplicate(arraynums):\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return len(num_set) != len(arraynums)", "code_8": "def test_duplicate(arraynums):\n    return sum(arraynums.count(i) for i in arraynums) > len(arraynums)", "code_9": "def test_duplicate(arraynums):\n    return len(arraynums) > len({}.fromkeys(arraynums))", "code_10": "def test_duplicate(arraynums):\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return len(num_set) < len(arraynums)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/20", "prompt": "\n\ndef is_woodall(x):\n\t\"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\t>>> is_woodall(383)\n\tTrue\n\t>>> is_woodall(254)\n\tFalse\n\t>>> is_woodall(200)\n\tFalse\n\t\"\"\"\n", "solution": "\t \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_woodall(x):\n\treturn (1 << x + 1) - 2 == x", "code_2": "def is_woodall(x):\n\treturn (2 ** (x + 1) - 2) == x", "code_3": "def is_woodall(x):\n\treturn pow(2, x + 1) - 2 == x", "code_4": "def is_woodall(x):\n\treturn (2 << x) - 1 == x", "code_5": "def is_woodall(x):\n\treturn (2 ** (x + 1) - 1) == x + 1", "code_6": "def is_woodall(x):\n\treturn (1 << (x + 1)) - 1 == x + 1", "code_7": "def is_woodall(x):\n\treturn (2 ** x * 2 - 2) == x", "code_8": "def is_woodall(x):\n\treturn (2 * (1 << x) - 2) == x", "code_9": "def is_woodall(x):\n\treturn (2 ** x << 1) - 2 == x", "code_10": "def is_woodall(x):\n\treturn (1 << x + 2) - 3 == x", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/21", "prompt": "\n\ndef multiples_of_num(m,n):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    >>> multiples_of_num(4,3)\n    [3,6,9,12]\n    >>> multiples_of_num(2,5)\n    [5,10]\n    >>> multiples_of_num(9,2)\n    [2,4,6,8,10,12,14,16,18]\n    \"\"\"\n", "solution": "     \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)", "results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def multiples_of_num(m, n):\n    return [n * i for i in range(1, m + 1)]", "code_2": "def multiples_of_num(m, n):\n    return list(map(lambda x: x * n, range(1, m + 1)))", "code_3": "def multiples_of_num(m, n):\n    return [i for i in range(n, m * n + 1, n)]", "code_4": "def multiples_of_num(m, n):\n    return list(range(n, m * n + 1, n))", "code_5": "def multiples_of_num(m, n):\n    return [i * n for i in itertools.islice(itertools.count(1), m)]", "code_6": "def multiples_of_num(m, n):\n    return list(itertools.islice(itertools.count(n, n), m))", "code_7": "def multiples_of_num(m, n):\n    return numpy.arange(n, m * n + 1, n)", "code_8": "def multiples_of_num(m, n):\n    return pandas.Series(range(1, m + 1)) * n", "code_9": "def multiples_of_num(m, n):\n    return [i for i in range(n, m * n + 1) if i % n == 0]", "code_10": "def multiples_of_num(m, n):\n    return filter(lambda x: x % n == 0, range(1, m * n + 1))", "pass@3": 0.9166666666666666, "nDCG@10": 0.6300426811446147}
{"task_id": "MBPP/22", "prompt": "\n\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    >>> find_first_duplicate(([1, 2, 3, 4, 4, 5]))\n    4\n    >>> find_first_duplicate([1, 2, 3, 4])\n    -1\n    >>> find_first_duplicate([1, 1, 2, 3, 3, 2, 2])\n    1\n    \"\"\"\n", "solution": "    \n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "code_2": "def find_first_duplicate(nums):\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1", "code_3": "def find_first_duplicate(nums):\n    for i in range(len(nums)):\n        index = abs(nums[i]) - 1\n        if nums[index] < 0:\n            return abs(nums[i])\n        nums[index] = -nums[index]\n    return -1", "code_4": "def find_first_duplicate(nums):\n    for i in range(len(nums)):\n        while nums[i] != i + 1:\n            if nums[i] == nums[nums[i] - 1]:\n                return nums[i]\n            nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n    return -1", "code_5": "def find_first_duplicate(nums):\n    slow, fast = nums[0], nums[nums[0]]\n    while slow != fast:\n        slow, fast = nums[slow], nums[nums[fast]]\n    slow = 0\n    while slow != fast:\n        slow, fast = nums[slow], nums[fast]\n    return slow", "code_6": "def find_first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[abs(nums[i])] < 0:\n            return abs(nums[i])\n        nums[abs(nums[i])] = -nums[abs(nums[i])]\n    return -1", "code_7": "def find_first_duplicate(nums):\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1", "code_8": "def find_first_duplicate(nums):\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            return num\n        nums_set.add(num)\n    return -1", "code_9": "def find_first_duplicate(nums):\n    for i in range(len(nums)):\n        index = abs(nums[i]) - 1\n        if nums[index] < 0:\n            return abs(nums[i])\n        nums[index] = -nums[index]\n    return -1", "code_10": "def find_first_duplicate(nums):\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            return num\n        nums_dict[num] = 1\n    return -1", "pass@3": 1.0, "nDCG@10": 0.8364586133797037}
{"task_id": "MBPP/23", "prompt": "\n\ndef maximum_Sum(list1):\n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    >>> maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])\n    33\n    >>> maximum_Sum([[0,1,1],[1,1,2],[3,2,1]])\n    6\n    >>> maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])\n    19\n    \"\"\"\n", "solution": "     \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def maximum_Sum(list1):\n    return max(map(sum, list1))", "code_2": "def maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)", "code_3": "import numpy as np\ndef maximum_Sum(list1):\n    return np.max(np.sum(list1, axis=1))", "code_4": "def maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)", "code_5": "def maximum_Sum(list1):\n    return max(sum(i) for i in list1)", "code_6": "def maximum_Sum(list1):\n    return max(sum(x) for x in list1)", "code_7": "def maximum_Sum(list1):\n    return max(sum(i) for i in list1)", "code_8": "def maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)", "code_9": "def maximum_Sum(list1):\n    return max(sum(i) for i in list1)", "code_10": "def maximum_Sum(list1):\n    return max(sum(sublist) for sublist in list1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/24", "prompt": "\n\ndef binary_to_decimal(binary):\n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    >>> binary_to_decimal(100)\n    4\n    >>> binary_to_decimal(1011)\n    11\n    >>> binary_to_decimal(1101101)\n    109\n    \"\"\"\n", "solution": "     \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)", "results": [1, 1, 1, 0, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def binary_to_decimal(binary):\n    return int(str(binary), 2)", "code_2": "def binary_to_decimal(binary):\n    return sum(int(bit) * (2 ** i) for i, bit in enumerate(str(binary)[::-1]))", "code_3": "def binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary != 0:\n        decimal += (binary % 10) * (2 ** i)\n        binary //= 10\n        i += 1\n    return decimal", "code_4": "def binary_to_decimal(binary):\n    return reduce(lambda x, y: (x << 1) + y, map(int, str(binary)))", "code_5": "def binary_to_decimal(binary):\n    return functools.reduce(lambda x, y: x*2 + y, map(int, str(binary)))", "code_6": "def binary_to_decimal(binary):\n    return sum(val*(2**idx) for idx, val in enumerate(reversed(list(map(int, str(binary))))))", "code_7": "def binary_to_decimal(binary):\n    return int(''.join(str(int(bit)) for bit in str(binary)), 2)", "code_8": "def binary_to_decimal(binary):\n    return sum(int(bit) * 2**i for i, bit in enumerate(reversed(str(binary))))", "code_9": "def binary_to_decimal(binary):\n    return int(''.join(str(int(bit)) for bit in str(binary)), 2)", "code_10": "def binary_to_decimal(binary):\n    return int(bin(binary).replace(\"0b\", \"\"))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7564477297898766}
{"task_id": "MBPP/25", "prompt": "\n\ndef find_Product(arr,n):\n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    >>> find_Product([1,1,2,3],4)\n    6\n    >>> find_Product([1,2,3,1,1],5)\n    6\n    >>> find_Product([1,1,4,5,6],5)\n    120\n    \"\"\"\n", "solution": "     \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef find_Product(arr,n):\n    c = Counter(arr)\n    p = 1\n    for k, v in c.items():\n        if v == 1:\n            p *= k\n    return p", "code_2": "def find_Product(arr,n):\n    s = set()\n    p = 1\n    for i in arr:\n        if i not in s:\n            s.add(i)\n            p *= i\n        elif i in s:\n            s.remove(i)\n            p //= i\n    return p", "code_3": "def find_Product(arr,n):\n    arr.sort()\n    p = 1\n    for i in range(n-1):\n        if arr[i] != arr[i+1]:\n            p *= arr[i]\n    if arr[-1] != arr[-2]:\n        p *= arr[-1]\n    return p", "code_4": "import numpy as np\ndef find_Product(arr,n):\n    return np.prod(np.unique(arr, return_counts=True)[0][np.unique(arr, return_counts=True)[1] == 1])", "code_5": "from functools import reduce\nfrom operator import mul\ndef find_Product(arr,n):\n    return reduce(mul, (k for k, v in Counter(arr).items() if v == 1), 1)", "code_6": "def find_Product(arr,n):\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    return eval('*'.join(str(k) for k, v in d.items() if v == 1))", "code_7": "def find_Product(arr,n):\n    return prod(set(arr) - set(i for i in arr if arr.count(i) > 1))", "code_8": "def find_Product(arr,n):\n    return math.prod(k for k, v in Counter(arr).items() if v == 1)", "code_9": "def find_Product(arr,n):\n    return prod(k for k, v in groupby(sorted(arr)) if len(list(v)) == 1)", "code_10": "def find_Product(arr,n):\n    return prod(k for k, v in sorted(Counter(arr).items()) if v == 1)", "pass@3": 0.9166666666666666, "nDCG@10": 0.6421867266689011}
{"task_id": "MBPP/26", "prompt": "\n\ndef check_k_elements(test_list, K):\n  \"\"\"\n  Write a function to check if the given tuple list has all k elements.\n  >>> check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4)\n  True\n  >>> check_k_elements([(7, 7, 7), (7, 7)], 7)\n  True\n  >>> check_k_elements([(9, 9), (9, 9, 9, 9)], 7)\n  False\n  \"\"\"\n", "solution": "  \n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res) ", "results": [1, 0, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_k_elements(test_list, K):\n  return all(K in t for t in test_list)", "code_2": "def check_k_elements(test_list, K):\n  return sum(t.count(K) for t in test_list) == len(test_list)", "code_3": "def check_k_elements(test_list, K):\n  return len([t for t in test_list if K in t]) == len(test_list)", "code_4": "def check_k_elements(test_list, K):\n  return all(map(lambda t: K in t, test_list))", "code_5": "def check_k_elements(test_list, K):\n  return reduce(lambda x, y: x and y, [K in t for t in test_list])", "code_6": "def check_k_elements(test_list, K):\n  for t in test_list:\n    if K not in t:\n      return False\n  return True", "code_7": "def check_k_elements(test_list, K):\n  return not any(K not in t for t in test_list)", "code_8": "def check_k_elements(test_list, K):\n  return set(K in t for t in test_list) == {True}", "code_9": "def check_k_elements(test_list, K):\n  return min(t.count(K) for t in test_list) > 0", "code_10": "def check_k_elements(test_list, K):\n  return sum(map(lambda t: K in t, test_list)) == len(test_list)", "pass@3": 1.0, "nDCG@10": 0.7759944384848245}
{"task_id": "MBPP/27", "prompt": "\n\ndef remove(list):\n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    >>> remove(['4words', '3letters', '4digits'])\n    ['words', 'letters', 'digits']\n    >>> remove(['28Jan','12Jan','11Jan'])\n    ['Jan','Jan','Jan']\n    >>> remove(['wonder1','wonder2','wonder3'])\n    ['wonder','wonder','wonder']\n    \"\"\"\n", "solution": "    import re  \n     \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove(lst):\n    return [\"\".join(filter(str.isalpha, s)) for s in lst]", "code_2": "def remove(lst):\n    return [''.join(c for c in s if c.isalpha()) for s in lst]", "code_3": "import re\ndef remove(lst):\n    return [re.sub('\\d', '', s) for s in lst]", "code_4": "def remove(lst):\n    return [\"\".join(c for c in s if not c.isdigit()) for s in lst]", "code_5": "def remove(lst):\n    return [\"\".join(i for i in s if i.isalpha()) for s in lst]", "code_6": "def remove(lst):\n    return [\"\".join([i for i in s if i.isalpha()]) for s in lst]", "code_7": "def remove(lst):\n    return [\"\".join(ch for ch in s if ch.isalpha()) for s in lst]", "code_8": "def remove(lst):\n    return [\"\".join(c for c in s if c.isalpha()) for s in lst]", "code_9": "def remove(lst):\n    return [''.join([i for i in s if i.isalpha()]) for s in lst]", "code_10": "def remove(lst):\n    return [\"\".join(ch for ch in s if ch.isalpha()) for s in lst]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/28", "prompt": "\n\ndef binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    >>> binomial_Coeff(5,2)\n    10\n    >>> binomial_Coeff(4,3)\n    4\n    >>> binomial_Coeff(3,2)\n    3\n    \"\"\"\n", "solution": "     \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def binomial_Coeff(n, k):\n    if k > n - k: k = n - k\n    res = 1\n    for i in range(k): res = res * (n - i) // (i + 1)\n    return res", "code_2": "import math\ndef binomial_Coeff(n, k):\n    return math.comb(n, k)", "code_3": "from math import factorial\ndef binomial_Coeff(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))", "code_4": "def binomial_Coeff(n, k):\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, k)+1):\n            if j == 0 or j == i: C[i][j] = 1\n            else: C[i][j] = C[i-1][j-1] + C[i-1][j]\n    return C[n][k]", "code_5": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef binomial_Coeff(n, k):\n    if k > n - k: k = n - k\n    if k == 0: return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)", "code_6": "def binomial_Coeff(n, k):\n    C = [0 for _ in range(k+1)]\n    C[0] = 1\n    for i in range(1, n+1):\n        j = min(i, k)\n        while j > 0:\n            C[j] = C[j] + C[j-1]\n            j -= 1\n    return C[k]", "code_7": "def binomial_Coeff(n, k):\n    if k > n - k: k = n - k\n    res = 1\n    for i in range(k): res = res * (n - i) / (i + 1)\n    return int(res)", "code_8": "from scipy.special import comb\ndef binomial_Coeff(n, k):\n    return comb(n, k, exact=True)", "code_9": "def binomial_Coeff(n, k):\n    if k > n - k: k = n - k\n    res = 1\n    for i in range(k): res = res * (n - i) // (i + 1)\n    return int(res)", "code_10": "def binomial_Coeff(n, k):\n    C = [0 for _ in range(k+1)]\n    C[0] = 1\n    for i in range(1, n+1):\n        j = min(i, k)\n        while j > 0:\n            C[j] = C[j] + C[j-1]\n            j -= 1\n        C[0] = 1\n    return C[k]", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/29", "prompt": "\n\ndef get_Odd_Occurrence(arr,arr_size):\n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    >>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n    1\n    >>> get_Odd_Occurrence([1,2,3,2,3,1,3],7)\n    3\n    >>> get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13)\n    5\n    \"\"\"\n", "solution": "       \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "results": [0, 1, 0, 1, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def get_Odd_Occurrence(arr, arr_size):\n    return reduce(lambda x, y: x ^ y, arr)", "code_2": "def get_Odd_Occurrence(arr, arr_size):\n    res = 0\n    for i in arr:\n        res ^= i\n    return res", "code_3": "def get_Odd_Occurrence(arr, arr_size):\n    return sum(set(arr)) * 2 - sum(arr)", "code_4": "def get_Odd_Occurrence(arr, arr_size):\n    return [x for x in arr if arr.count(x) % 2 != 0][0]", "code_5": "def get_Odd_Occurrence(arr, arr_size):\n    return next(x for x in arr if arr.count(x) % 2)", "code_6": "def get_Odd_Occurrence(arr, arr_size):\n    return Counter(arr).most_common()[-1][0]", "code_7": "def get_Odd_Occurrence(arr, arr_size):\n    return sorted(arr)[len(arr)//2]", "code_8": "def get_Odd_Occurrence(arr, arr_size):\n    return max(set(arr), key=arr.count)", "code_9": "def get_Odd_Occurrence(arr, arr_size):\n    return list(filter(lambda x: arr.count(x) % 2, arr))[0]", "code_10": "def get_Odd_Occurrence(arr, arr_size):\n    return list(dict.fromkeys(arr))[0]", "pass@3": 0.8333333333333334, "nDCG@10": 0.3850481493391154}
{"task_id": "MBPP/30", "prompt": "\n\ndef count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    >>> count_Substring_With_Equal_Ends(\"abc\")\n    3\n    >>> count_Substring_With_Equal_Ends(\"abcda\")\n    6\n    >>> count_Substring_With_Equal_Ends(\"ab\")\n    2\n    \"\"\"\n", "solution": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n     \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ", "results": [1, 1, 0, 1, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def count_Substring_With_Equal_Ends(s):\n    n, res = len(s), 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                res += 1\n    return res", "code_2": "def count_Substring_With_Equal_Ends(s):\n    return sum((s[i] == s[j] for i in range(len(s)) for j in range(i, len(s))))", "code_3": "def count_Substring_With_Equal_Ends(s):\n    return sum(s[i:j+1].count(s[i]) for i in range(len(s)) for j in range(i, len(s)))", "code_4": "def count_Substring_With_Equal_Ends(s):\n    return sum(s[i] == s[j] for i in range(len(s)) for j in range(i, len(s)))", "code_5": "def count_Substring_With_Equal_Ends(s):\n    return sum(map(lambda i: sum(map(lambda j: s[i] == s[j], range(i, len(s)))), range(len(s))))", "code_6": "def count_Substring_With_Equal_Ends(s):\n    return sum(s.count(s[i]) for i in range(len(s)))", "code_7": "def count_Substring_With_Equal_Ends(s):\n    return len([1 for i in range(len(s)) for j in range(i, len(s)) if s[i] == s[j]])", "code_8": "def count_Substring_With_Equal_Ends(s):\n    return sum(s.count(c) for c in s)", "code_9": "def count_Substring_With_Equal_Ends(s):\n    return sum(s[i:].count(s[i]) for i in range(len(s)))", "code_10": "def count_Substring_With_Equal_Ends(s):\n    return sum(s[i:j+1].count(s[i]) for i in range(len(s)) for j in range(i, len(s)))", "pass@3": 0.9666666666666667, "nDCG@10": 0.6785038377365556}
{"task_id": "MBPP/31", "prompt": "\n\ndef func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)\n    [5, 7, 1]\n    >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)\n    [1]\n    >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)\n    [6, 5, 7, 8, 1]\n    \"\"\"\n", "solution": "    \n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\nfrom collections import Counter\ndef func(nums, k):\n    c = Counter(x for sublist in nums for x in sublist)\n    return heapq.nlargest(k, c, key=c.get)", "code_2": "import heapq\ndef func(nums, k):\n    d = {}\n    for l in nums:\n        for i in l:\n            d[i] = d.get(i, 0) + 1\n    return heapq.nlargest(k, d, key=d.get)", "code_3": "import heapq\ndef func(nums, k):\n    d = {}\n    for l in nums:\n        for i in l:\n            d[i] = d.get(i, 0) - 1\n    return heapq.nsmallest(k, d, key=d.get)", "code_4": "import heapq\nfrom collections import defaultdict\ndef func(nums, k):\n    d = defaultdict(int)\n    for l in nums:\n        for i in l:\n            d[i] += 1\n    return heapq.nlargest(k, d.keys(), key=d.get)", "code_5": "import heapq\ndef func(nums, k):\n    d = {}\n    for l in nums:\n        for i in l:\n            d[i] = d.get(i, 0) + 1\n    return [i[1] for i in heapq.nlargest(k, d.items(), key=lambda x: x[1])]", "code_6": "import heapq\ndef func(nums, k):\n    d = {}\n    for l in nums:\n        for i in l:\n            d[i] = d.get(i, 0) + 1\n    return [i for i, _ in heapq.nlargest(k, ((v, k) for k, v in d.items()))]", "code_7": "import heapq\nfrom collections import Counter\ndef func(nums, k):\n    c = Counter(x for sublist in nums for x in sublist)\n    return [i[0] for i in heapq.nlargest(k, c.items(), key=lambda x: x[1])]", "code_8": "import heapq\ndef func(nums, k):\n    d = {}\n    for l in nums:\n        for i in l:\n            d[i] = d.get(i, 0) + 1\n    return [i for i, _ in sorted(d.items(), key=lambda x: -x[1])[:k]]", "code_9": "import heapq\nfrom collections import Counter\ndef func(nums, k):\n    c = Counter(x for sublist in nums for x in sublist)\n    return [i for i, _ in c.most_common(k)]", "code_10": "import heapq\ndef func(nums, k):\n    d = {}\n    for l in nums:\n        for i in l:\n            d[i] = d.get(i, 0) + 1\n    return sorted(d, key=d.get, reverse=True)[:k]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/32", "prompt": "\n\ndef max_Prime_Factors (n):\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    >>> max_Prime_Factors(15)\n    5\n    >>> max_Prime_Factors(6)\n    3\n    >>> max_Prime_Factors(2)\n    2\n    \"\"\"\n", "solution": "    import math \n     \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)", "results": [1, 0, 1, 1, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "code_2": "def max_Prime_Factors(n):\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n / i\n    if n > 2:\n        return n\n    else:\n        return i", "code_3": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return max(n, i)", "code_4": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return i if n == 1 else n", "code_5": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return i if i > n else n", "code_6": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return max(i, n)", "code_7": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return i if i > 2 else n", "code_8": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if n > 2 else i", "code_9": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return max(i, n) if i > 2 else n", "code_10": "def max_Prime_Factors(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n if i == 2 else i", "pass@3": 0.9916666666666667, "nDCG@10": 0.7241528458281337}
{"task_id": "MBPP/33", "prompt": "\n\ndef decimal_To_Binary(N):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    >>> decimal_To_Binary(10)\n    1010\n    >>> decimal_To_Binary(1)\n    1\n    >>> decimal_To_Binary(20)\n    10100\n    \"\"\"\n", "solution": "     \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def decimal_To_Binary(N): return bin(N)[2:]", "code_2": "def decimal_To_Binary(N): return format(N, 'b')", "code_3": "def decimal_To_Binary(N): return '{0:b}'.format(N)", "code_4": "def decimal_To_Binary(N): return ''.join(format(N, 'b'))", "code_5": "def decimal_To_Binary(N): return ''.join(str(1 & int(N) >> i) for i in range(N.bit_length() - 1, -1, -1))", "code_6": "def decimal_To_Binary(N): return ''.join(str((N >> i) & 1) for i in range(N.bit_length() - 1, -1, -1))", "code_7": "def decimal_To_Binary(N): return ''.join(str(int(digit)) for digit in bin(N)[2:])", "code_8": "def decimal_To_Binary(N): return ''.join(str(int(bit)) for bit in '{:032b}'.format(N))", "code_9": "def decimal_To_Binary(N): return ''.join(str(int(bit)) for bit in f'{N:032b}')", "code_10": "def decimal_To_Binary(N): return ''.join(str(int(bit)) for bit in f'{N:#034b}'[2:])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/34", "prompt": "\n\ndef find_missing(ar,N):\n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    >>> find_missing([1,2,3,5],4)\n    4\n    >>> find_missing([1,3,4,5],4)\n    2\n    >>> find_missing([1,2,3,5,6,7],5)\n    4\n    \"\"\"\n", "solution": "     \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ", "results": [0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_missing(ar, N):\n    return sum(range(ar[0], N+1)) - sum(ar)", "code_2": "def find_missing(ar, N):\n    return set(range(ar[0], N+1)).difference(ar).pop()", "code_3": "def find_missing(ar, N):\n    return [x for x in range(ar[0], N+1) if x not in ar][0]", "code_4": "def find_missing(ar, N):\n    return next(x for x in range(ar[0], N+1) if x not in ar)", "code_5": "def find_missing(ar, N):\n    return reduce(lambda x, y: x ^ y, range(1, N+1)) ^ reduce(lambda x, y: x ^ y, ar)", "code_6": "def find_missing(ar, N):\n    return list(set(range(ar[0], N+1)) - set(ar))[0]", "code_7": "def find_missing(ar, N):\n    return list(filter(lambda x: x not in ar, range(ar[0], N+1)))[0]", "code_8": "def find_missing(ar, N):\n    return [x for x in range(ar[0], N+1) if ar.count(x) == 0][0]", "code_9": "def find_missing(ar, N):\n    return list(set(range(ar[0], N+1)).symmetric_difference(set(ar)))[0]", "code_10": "def find_missing(ar, N):\n    return list(set(range(ar[0], N+1)).intersection(set(range(ar[0], N+1)) - set(ar)))[0]", "pass@3": 1.0, "nDCG@10": 0.694765116060299}
{"task_id": "MBPP/35", "prompt": "\n\ndef find_rect_num(n):\n  \"\"\"\n  Write a function to find the n-th rectangular number.\n  >>> find_rect_num(4)\n  20\n  >>> find_rect_num(5)\n  30\n  >>> find_rect_num(6)\n  42\n  \"\"\"\n", "solution": "  \n  return n*(n + 1) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_rect_num(n): return n*(n+1)//2", "code_2": "find_rect_num = lambda n: n*(n+1)//2", "code_3": "import math\ndef find_rect_num(n): return int(n*(n+1)/2)", "code_4": "from operator import mul\ndef find_rect_num(n): return mul(n, n+1)//2", "code_5": "def find_rect_num(n): return sum(range(1, n+1))", "code_6": "def find_rect_num(n): return sum(i for i in range(1, n+1))", "code_7": "def find_rect_num(n): return sum(list(range(1, n+1)))", "code_8": "def find_rect_num(n): return sum(range(n+1)) - n", "code_9": "def find_rect_num(n): return (n**2 + n) // 2", "code_10": "def find_rect_num(n): return (n*(n+1)) >> 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/36", "prompt": "\n\ndef find_Nth_Digit(p,q,N) :\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    >>> find_Nth_Digit(1,2,1)\n    5\n    >>> find_Nth_Digit(3,5,1)\n    6\n    >>> find_Nth_Digit(5,6,5)\n    3\n    \"\"\"\n", "solution": "      \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;  ", "results": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Nth_Digit(p, q, N):\n    from decimal import Decimal, getcontext\n    getcontext().prec = N + 1\n    return int(str(Decimal(p) / Decimal(q))[2 + N])", "code_2": "def find_Nth_Digit(p, q, N):\n    return int(str(p * 10 ** N // q)[-1])", "code_3": "def find_Nth_Digit(p, q, N):\n    return (p * pow(10, N, q) // q) % 10", "code_4": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N, q)) // q % 10", "code_5": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N - 1, q)) // q % 10", "code_6": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N - 1, q)) % 10", "code_7": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N - 1, q)) % 10", "code_8": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N - 1, q)) % 10", "code_9": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N - 1, q)) % 10", "code_10": "def find_Nth_Digit(p, q, N):\n    return ((p * pow(10, N, q)) % q * pow(10, N - 1, q)) % 10", "pass@3": 0.30000000000000004, "nDCG@10": 0.13886244387355456}
{"task_id": "MBPP/37", "prompt": "\n\ndef sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    \"\"\"\n", "solution": "    \n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "results": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))", "code_2": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (type(x) == str, x))", "code_3": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (str(type(x)), x))", "code_4": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (type(x).__name__, x))", "code_5": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (x.__class__.__name__, x))", "code_6": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (x.isalpha(), x))", "code_7": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (x.isdigit(), x))", "code_8": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (not x.isalpha(), x))", "code_9": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (not x.isdigit(), x))", "code_10": "def sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: (x.isnumeric(), x))", "pass@3": 0.9166666666666666, "nDCG@10": 0.6489315753318466}
{"task_id": "MBPP/38", "prompt": "\n\ndef div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    >>> div_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> div_even_odd([1,2,3,4,5,6,7,8,9,10])\n    2\n    >>> div_even_odd([1,5,7,9,10])\n    10\n    \"\"\"\n", "solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def div_even_odd(lst):\n    even, odd = None, None\n    for num in lst:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n        else:\n            if odd is None:\n                odd = num\n        if even is not None and odd is not None:\n            return even / odd\n    return even if odd is None else odd", "code_2": "def div_even_odd(lst):\n    even = next((num for num in lst if num % 2 == 0), None)\n    odd = next((num for num in lst if num % 2 != 0), None)\n    return even / odd if even and odd else even or odd", "code_3": "def div_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    return even[0] / odd[0] if even and odd else even[0] if even else odd[0]", "code_4": "def div_even_odd(lst):\n    even = list(filter(lambda x: x % 2 == 0, lst))\n    odd = list(filter(lambda x: x % 2 != 0, lst))\n    return even[0] / odd[0] if even and odd else even[0] if even else odd[0]", "code_5": "def div_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    return (even + odd)[0] / (odd + even)[0] if even and odd else (even + odd)[0]", "code_6": "def div_even_odd(lst):\n    even = odd = None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n            if odd is not None:\n                return even / odd\n        else:\n            odd = num\n            if even is not None:\n                return even / odd\n    return even or odd", "code_7": "def div_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    return (even[0] / odd[0] if even and odd else even[0] if even else odd[0]) if even or odd else None", "code_8": "def div_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    return (even + [None])[0] / (odd + [None])[0] if even or odd else None", "code_9": "def div_even_odd(lst):\n    even = next((num for num in lst if num % 2 == 0), None)\n    odd = next((num for num in lst if num % 2 != 0), None)\n    return even / odd if even is not None and odd is not None else even or odd", "code_10": "def div_even_odd(lst):\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2 != 0]\n    return (even[0] / odd[0] if even and odd else even[0] if even else odd[0]) if even or odd else None", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/39", "prompt": "\n\ndef rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    >>> rearange_string(\"aab\")\n    ('aba')\n    >>> rearange_string(\"aabb\")\n    ('abab')\n    >>> rearange_string(\"abccdd\")\n    ('cdabcd')\n    \"\"\"\n", "solution": "    import heapq\n    from collections import Counter\n    \n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef rearange_string(S):\n    count = collections.Counter(S)\n    heap = [-cnt for cnt in count.values()]\n    heapq.heapify(heap)\n    prev_char, prev_cnt = '', 0\n    res = []\n    while heap:\n        cnt = -heapq.heappop(heap)\n        res.append(count.keys()[cnt-1])\n        if prev_cnt < 0:\n            heapq.heappush(heap, prev_cnt)\n        prev_char, prev_cnt = res[-1], cnt-1\n    return ''.join(res) if len(res) == len(S) else ''", "code_2": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    prev_char, prev_freq = '', 0\n    res = []\n    while heap:\n        freq, char = heapq.heappop(heap)\n        res.append(char)\n        if prev_freq < 0:\n            heapq.heappush(heap, (prev_freq, prev_char))\n        prev_char, prev_freq = char, freq+1\n    return ''.join(res) if len(res) == len(S) else ''", "code_3": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        freq, char = heapq.heappop(heap)\n        if res and res[-1] == char:\n            freq2, char2 = heapq.heappop(heap)\n            res.append(char2)\n            if freq2 < -1:\n                heapq.heappush(heap, (freq2+1, char2))\n            heapq.heappush(heap, (freq, char))\n        else:\n            res.append(char)\n            if freq < -1:\n                heapq.heappush(heap, (freq+1, char))\n    return ''.join(res) if len(res) == len(S) else ''", "code_4": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        for _ in range(2):\n            if heap:\n                freq, char = heapq.heappop(heap)\n                res.append(char)\n                if freq < -1:\n                    temp.append((freq+1, char))\n        for item in temp:\n            heapq.heappush(heap, item)\n    return ''.join(res) if len(res) == len(S) else ''", "code_5": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        k = 2 if heap else 1\n        for _ in range(k):\n            if heap:\n                freq, char = heapq.heappop(heap)\n                res.append(char)\n                if freq < -1:\n                    temp.append((freq+1, char))\n        for item in temp:\n            heapq.heappush(heap, item)\n    return ''.join(res) if len(res) == len(S) else ''", "code_6": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        k = len(heap) if len(heap) < 2 else 2\n        for _ in range(k):\n            freq, char = heapq.heappop(heap)\n            res.append(char)\n            if freq < -1:\n                temp.append((freq+1, char))\n        for item in temp:\n            heapq.heappush(heap, item)\n    return ''.join(res) if len(res) == len(S) else ''", "code_7": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        k = len(heap) if len(heap) < 2 else 2\n        for _ in range(k):\n            freq, char = heapq.heappop(heap)\n            res.append(char)\n            if freq < -1:\n                temp.append((freq+1, char))\n        heap.extend(temp)\n        heapq.heapify(heap)\n    return ''.join(res) if len(res) == len(S) else ''", "code_8": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        k = len(heap) if len(heap) < 2 else 2\n        for _ in range(k):\n            freq, char = heapq.heappop(heap)\n            res.append(char)\n            if freq < -1:\n                temp.append((freq+1, char))\n        heap += temp\n        heapq.heapify(heap)\n    return ''.join(res) if len(res) == len(S) else ''", "code_9": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        k = len(heap) if len(heap) < 2 else 2\n        for _ in range(k):\n            freq, char = heapq.heappop(heap)\n            res.append(char)\n            if freq < -1:\n                temp.append((freq+1, char))\n        heap += temp\n        heapq.heapify(heap)\n        if len(res) == len(S):\n            return ''.join(res)\n    return ''", "code_10": "def rearange_string(S):\n    count = collections.Counter(S)\n    heap = [(-freq, char) for char, freq in count.items()]\n    heapq.heapify(heap)\n    res = []\n    while heap:\n        temp = []\n        k = len(heap) if len(heap) < 2 else 2\n        for _ in range(k):\n            if heap:\n                freq, char = heapq.heappop(heap)\n                res.append(char)\n                if freq < -1:\n                    temp.append((freq+1, char))\n        heap += temp\n        heapq.heapify(heap)\n    return ''.join(res) if len(res) == len(S) else ''", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/40", "prompt": "\n\ndef freq_element(nums):\n  \"\"\"\n  Write a function to find frequency of the elements in a given list of lists using collections module.\n  >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n  ({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n  >>> freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n  ({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n  >>> freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])\n  ({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\n  \"\"\"\n", "solution": "  from collections import Counter\n  from itertools import chain\n  \n  result = Counter(chain.from_iterable(nums))\n  return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(x for sublist in nums for x in sublist))", "code_2": "from collections import defaultdict\ndef freq_element(nums):\n freq = defaultdict(int)\n for sublist in nums:\n  for num in sublist:\n   freq[num] += 1\n return dict(freq)", "code_3": "from itertools import chain\nfrom collections import Counter\ndef freq_element(nums):\n return dict(Counter(chain.from_iterable(nums)))", "code_4": "from collections import Counter\nimport numpy as np\ndef freq_element(nums):\n return dict(Counter(np.concatenate(nums)))", "code_5": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(sum(nums, [])))", "code_6": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(i for sub in nums for i in sub))", "code_7": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(item for sublist in nums for item in sublist))", "code_8": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(i for sub in nums for i in sub))", "code_9": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(num for sublist in nums for num in sublist))", "code_10": "from collections import Counter\ndef freq_element(nums):\n return dict(Counter(i for sub in nums for i in sub))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/41", "prompt": "\n\ndef filter_evennumbers(nums):\n \"\"\"\n Write a function to filter even numbers using lambda function.\n >>> filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [2, 4, 6, 8, 10]\n >>> filter_evennumbers([10,20,45,67,84,93])\n [10,20,84]\n >>> filter_evennumbers([5,7,9,8,6,4,3])\n [8,6,4]\n \"\"\"\n", "solution": " \n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "filter_evennumbers = lambda nums: [num for num in nums if num % 2 == 0]", "code_2": "filter_evennumbers = lambda nums: list(filter(lambda num: num % 2 == 0, nums))", "code_3": "filter_evennumbers = lambda nums: [num for num in nums if not num & 1]", "code_4": "filter_evennumbers = lambda nums: list(filter(lambda num: not num & 1, nums))", "code_5": "filter_evennumbers = lambda nums: [num for num in nums if num >> 1 << 1 == num]", "code_6": "filter_evennumbers = lambda nums: list(filter(lambda num: num >> 1 << 1 == num, nums))", "code_7": "filter_evennumbers = lambda nums: [num for num in nums if bin(num)[-1] == '0']", "code_8": "filter_evennumbers = lambda nums: list(filter(lambda num: bin(num)[-1] == '0', nums))", "code_9": "filter_evennumbers = lambda nums: [num for num in nums if num & -num == num]", "code_10": "filter_evennumbers = lambda nums: list(filter(lambda num: num & -num == num, nums))", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/42", "prompt": "\n\ndef find_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    >>> find_Sum([1,2,3,1,1,4,5,6],8)\n    3\n    >>> find_Sum([1,2,3,1,1],5)\n    3\n    >>> find_Sum([1,1,2],3)\n    2\n    \"\"\"\n", "solution": "     \n    return sum([x for x in arr if arr.count(x) > 1])", "results": [1, 1, 1, 1, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return sum(v for v in count.values() if v > 1)", "code_2": "def find_Sum(arr, n):\n    count = [0] * 1000\n    for i in arr:\n        count[i] += 1\n    return sum(i for i in count if i > 1)", "code_3": "from collections import Counter\ndef find_Sum(arr, n):\n    count = Counter(arr)\n    return sum(v for v in count.values() if v > 1)", "code_4": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    return sum(v for v in count.values() if v > 1)", "code_5": "def find_Sum(arr, n):\n    count = [0] * (max(arr) + 1)\n    for i in arr:\n        count[i] += 1\n    return sum(i for i in count if i > 1)", "code_6": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    return sum(count[i] for i in count if count[i] > 1)", "code_7": "def find_Sum(arr, n):\n    count = [0] * 1000\n    for i in arr:\n        count[i] += 1\n    return sum(i * (count[i] - 1) for i in range(1000) if count[i] > 1)", "code_8": "from collections import defaultdict\ndef find_Sum(arr, n):\n    count = defaultdict(int)\n    for i in arr:\n        count[i] += 1\n    return sum(v for v in count.values() if v > 1)", "code_9": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    return sum(count[i] * (count[i] - 1) // 2 for i in count if count[i] > 1)", "code_10": "def find_Sum(arr, n):\n    count = [0] * (max(arr) + 1)\n    for i in arr:\n        count[i] += 1\n    return sum(i * (count[i] - 1) for i in range(max(arr) + 1) if count[i] > 1)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7967610662472993}
{"task_id": "MBPP/43", "prompt": "\n\ndef text_match(text):\n  \"\"\"\n  Write a function to find sequences of lowercase letters joined with an underscore using regex.\n  >>> text_match(\"aab_cbbbc\")\n  'Found a match!'\n  >>> text_match(\"aab_Abbbc\")\n  'Not matched!'\n  >>> text_match(\"Aaab_abbbc\")\n  'Not matched!'\n  \"\"\"\n", "solution": "  import re\n  \n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef text_match(text):\n    return 'Found a match!' if re.search(r'^[a-z]+_[a-z]+$', text) else 'Not matched!'", "code_2": "import re\ndef text_match(text):\n    return 'Found a match!' if re.fullmatch(r'[a-z]+_[a-z]+', text) else 'Not matched!'", "code_3": "def text_match(text):\n    parts = text.split('_')\n    return 'Found a match!' if len(parts) == 2 and parts[0].islower() and parts[1].islower() else 'Not matched!'", "code_4": "def text_match(text):\n    parts = text.split('_')\n    return 'Found a match!' if all(part.islower() for part in parts) and len(parts) == 2 else 'Not matched!'", "code_5": "def text_match(text):\n    if '_' in text:\n        first, second = text.split('_')\n        return 'Found a match!' if first.isalpha() and first.islower() and second.isalpha() and second.islower() else 'Not matched!'\n    return 'Not matched!'", "code_6": "def text_match(text):\n    if text.count('_') == 1:\n        first, second = text.split('_')\n        return 'Found a match!' if first.isalpha() and first.islower() and second.isalpha() and second.islower() else 'Not matched!'\n    return 'Not matched!'", "code_7": "def text_match(text):\n    if text.count('_') != 1:\n        return 'Not matched!'\n    first, second = text.split('_')\n    return 'Found a match!' if first.isalpha() and first.islower() and second.isalpha() and second.islower() else 'Not matched!'", "code_8": "def text_match(text):\n    if text.count('_') != 1:\n        return 'Not matched!'\n    first, second = text.split('_')\n    return 'Found a match!' if first.islower() and second.islower() else 'Not matched!'", "code_9": "def text_match(text):\n    if text.count('_') != 1:\n        return 'Not matched!'\n    first, second = text.split('_')\n    return 'Found a match!' if first.isalpha() and first == first.lower() and second.isalpha() and second == second.lower() else 'Not matched!'", "code_10": "def text_match(text):\n    if text.count('_') != 1:\n        return 'Not matched!'\n    first, second = text.split('_')\n    return 'Found a match!' if first.isalpha() and first.lower() == first and second.isalpha() and second.lower() == second else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/44", "prompt": "\n\ndef text_match_string(text):\n        \"\"\"\n        Write a function that matches a word at the beginning of a string.\n        >>> text_match_string(\" python\")\n        ('Not matched!')\n        >>> text_match_string(\"python\")\n        ('Found a match!')\n        >>> text_match_string(\"  lang\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "results": [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def text_match_string(text):\n    return 'Found a match!' if text.strip().startswith('python') else 'Not matched!'", "code_2": "def text_match_string(text):\n    return ['Not matched!', 'Found a match!'][text.lstrip().startswith('python')]", "code_3": "def text_match_string(text):\n    return 'Found a match!' if text[0:6] == 'python' else 'Not matched!'", "code_4": "def text_match_string(text):\n    return 'Found a match!' if text[:6] == 'python' else 'Not matched!'", "code_5": "def text_match_string(text):\n    return 'Found a match!' if text.lstrip().startswith('python') else 'Not matched!'", "code_6": "def text_match_string(text):\n    return 'Found a match!' if text.replace(' ', '', 1).startswith('python') else 'Not matched!'", "code_7": "def text_match_string(text):\n    return 'Found a match!' if text.lstrip(' ').startswith('python') else 'Not matched!'", "code_8": "def text_match_string(text):\n    return 'Found a match!' if text.strip(' ').startswith('python') else 'Not matched!'", "code_9": "def text_match_string(text):\n    return 'Found a match!' if text.lstrip().startswith('python') else 'Not matched!'", "code_10": "def text_match_string(text):\n    return 'Found a match!' if text.strip().startswith('python') else 'Not matched!'", "pass@3": 0.5333333333333333, "nDCG@10": 0.20483424751859092}
{"task_id": "MBPP/45", "prompt": "\n\ndef get_gcd(l):\n  \"\"\"\n  Write a function to find the gcd of the given array elements.\n  >>> get_gcd([2, 4, 6, 8, 16])\n  2\n  >>> get_gcd([1, 2, 3])\n  1\n  >>> get_gcd([2, 4, 6, 8])\n  2\n  \"\"\"\n", "solution": "  def find_gcd(x, y): \n  \twhile(y): \n  \t\tx, y = y, x % y \n  \treturn x \n  \n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from math import gcd\nfrom functools import reduce\ndef get_gcd(l):\n return reduce(gcd, l)", "code_2": "import math\ndef get_gcd(l):\n return math.gcd(*l)", "code_3": "def get_gcd(l):\n g = l[0]\n for i in l[1:]:\n  g = math.gcd(g, i)\n return g", "code_4": "def get_gcd(l):\n def gcd(a, b):\n  while b != 0:\n   a, b = b, a % b\n  return a\n return reduce(gcd, l)", "code_5": "def get_gcd(l):\n def gcd(a, b):\n  if b == 0:\n   return a\n  else:\n   return gcd(b, a % b)\n return reduce(gcd, l)", "code_6": "def get_gcd(l):\n def gcd(a, b):\n  return a if b == 0 else gcd(b, a % b)\n return reduce(gcd, l)", "code_7": "def get_gcd(l):\n def gcd(a, b):\n  while a != b:\n   if a > b:\n    a -= b\n   else:\n    b -= a\n  return a\n return reduce(gcd, l)", "code_8": "def get_gcd(l):\n def gcd(a, b):\n  while b:\n   a, b = b, a % b\n  return a\n return reduce(gcd, l)", "code_9": "def get_gcd(l):\n def gcd(a, b):\n  while b:\n   a, b = b, a % b\n  return a\n return reduce(lambda x, y: gcd(x, y), l)", "code_10": "def get_gcd(l):\n def gcd(a, b):\n  return gcd(b, a % b) if b else a\n return reduce(gcd, l)", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/46", "prompt": "\n\ndef test_distinct(data):\n  \"\"\"\n  Write a python function to determine whether all the numbers are different from each other are not.\n  >>> test_distinct([1,5,7,9])\n  True\n  >>> test_distinct([2,4,5,5,7,9])\n  False\n  >>> test_distinct([1,2,3])\n  True\n  \"\"\"\n", "solution": "  \n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def test_distinct(data):\n    return len(data) == len(set(data))", "code_2": "def test_distinct(data):\n    return all(data.count(i) == 1 for i in data)", "code_3": "def test_distinct(data):\n    return sorted(data) == sorted(set(data))", "code_4": "def test_distinct(data):\n    return len(set(data)) == sum(1 for _ in data)", "code_5": "def test_distinct(data):\n    return all(map(lambda x: data.count(x) == 1, data))", "code_6": "def test_distinct(data):\n    return all(data.count(i) == 1 for i in set(data))", "code_7": "def test_distinct(data):\n    return len(data) == sum(map(lambda x: data.count(x), set(data)))", "code_8": "def test_distinct(data):\n    return all(data.count(i) == 1 for i in sorted(data))", "code_9": "def test_distinct(data):\n    return len(data) == len({i: None for i in data})", "code_10": "def test_distinct(data):\n    return all(data.count(i) == 1 for i in reversed(data))", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/47", "prompt": "\n\ndef compute_Last_Digit(A,B):\n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    >>> compute_Last_Digit(2,4)\n    2\n    >>> compute_Last_Digit(6,8)\n    6\n    >>> compute_Last_Digit(1,2)\n    2\n    \"\"\"\n", "solution": "     \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "results": [1, 0, 1, 1, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def compute_Last_Digit(A,B):\n    if A > B: return pow(0, B, 10)\n    p = 1\n    for i in range(A+1, B+1): p = (p * i) % 10\n    return p", "code_2": "def compute_Last_Digit(A,B):\n    if A > B: return 0\n    return reduce(lambda x, y: (x * y) % 10, range(A+1, B+1), 1)", "code_3": "from functools import reduce\ndef compute_Last_Digit(A,B):\n    if A > B: return 0\n    return reduce(int.__mul__, range(A+1, B+1), 1) % 10", "code_4": "import math\ndef compute_Last_Digit(A,B):\n    if A > B: return 0\n    return math.prod(range(A+1, B+1)) % 10", "code_5": "def compute_Last_Digit(A,B):\n    if A > B: return 0\n    return eval('*'.join(map(str, range(A+1, B+1)))) % 10", "code_6": "import numpy\ndef compute_Last_Digit(A,B):\n    if A > B: return 0\n    return numpy.prod(range(A+1, B+1)) % 10", "code_7": "def compute_Last_Digit(A,B):\n    if A > B: return 0\n    return int(''.join(map(str, range(A+1, B+1)))) % 10", "code_8": "def compute_Last_Digit(A,B):\n    if A > B: return 0\n    return eval('*'.join(map(str, range(max(1, A+1), B+1)))) % 10", "code_9": "def compute_Last_Digit(A,B):\n    if A > B: return 0\n    return pow(eval('*'.join(map(str, range(max(1, A+1), B+1)))), 1, 10)", "code_10": "def compute_Last_Digit(A,B):\n    if A > B: return 0\n    return pow(reduce(int.__mul__, range(max(1, A+1), B+1), 1), 1, 10)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7241528458281337}
{"task_id": "MBPP/48", "prompt": "\n\ndef odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    >>> odd_bit_set_number(10)\n    15\n    >>> odd_bit_set_number(20)\n    21\n    >>> odd_bit_set_number(30)\n    31\n    \"\"\"\n", "solution": "    \n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)", "results": [0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 8, "code_1": "def odd_bit_set_number(n):\n    return n | 0xAAAAAAAA", "code_2": "def odd_bit_set_number(n):\n    return n | 0x55555555", "code_3": "def odd_bit_set_number(n):\n    return n | 0x5555555555555555", "code_4": "def odd_bit_set_number(n):\n    return n | 0x55555555555555555555555555555555", "code_5": "def odd_bit_set_number(n):\n    return n | 0x5555555555555555555555555555555555555555555555555555555555555555", "code_6": "def odd_bit_set_number(n):\n    return n | 0x55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", "code_7": "def odd_bit_set_number(n):\n    return n | 0x5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555", "code_8": "def odd_bit_set_number(n):\n    return n | pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/49", "prompt": "\n\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)\n    [2,5,1]\n    \"\"\"\n", "solution": "    \n    result = [i[N] for i in nums]\n    return result\n    ", "results": [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def specified_element(nums, N):\n    return [row[N] for row in nums]", "code_2": "def specified_element(nums, N):\n    return list(map(lambda row: row[N], nums))", "code_3": "def specified_element(nums, N):\n    return [*map(itemgetter(N), nums)]", "code_4": "def specified_element(nums, N):\n    return list(zip(*nums))[N]", "code_5": "def specified_element(nums, N):\n    return [col for col in zip(*nums)][N]", "code_6": "def specified_element(nums, N):\n    return reduce(lambda x, y: x + [y[N]], nums, [])", "code_7": "def specified_element(nums, N):\n    return [next(islice(row, N, None)) for row in nums]", "code_8": "def specified_element(nums, N):\n    return [row.pop(N) for row in nums]", "code_9": "def specified_element(nums, N):\n    return [row[N] for row in nums if len(row) > N]", "code_10": "def specified_element(nums, N):\n    return [row[N] if N < len(row) else None for row in nums]", "pass@3": 0.9166666666666666, "nDCG@10": 0.5582604437617529}
{"task_id": "MBPP/50", "prompt": "\n\ndef min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    >>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (1, [0])\n    >>> min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n    (1,[1])\n    >>> min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])\n    (2,[1,2])\n    \"\"\"\n", "solution": "    \n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "min_length_list = lambda lst: min(lst, key=len)", "code_2": "min_length_list = lambda lst: sorted(lst, key=len)[0]", "code_3": "min_length_list = lambda lst: reduce(lambda x, y: x if len(x) < len(y) else y, lst)", "code_4": "min_length_list = lambda lst: next(iter(sorted(lst, key=len)))", "code_5": "min_length_list = lambda lst: heapq.nsmallest(1, lst, key=len)[0]", "code_6": "min_length_list = lambda lst: functools.reduce(lambda x, y: x if len(x) <= len(y) else y, lst)", "code_7": "min_length_list = lambda lst: min(lst, key=lambda x: len(x))", "code_8": "min_length_list = lambda lst: sorted(lst, key=lambda x: len(x))[0]", "code_9": "min_length_list = lambda lst: next(iter(sorted(lst, key=lambda x: len(x))))", "code_10": "min_length_list = lambda lst: heapq.heappop(heapq.nsmallest(1, ((len(x), x) for x in lst)))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/51", "prompt": "\n\ndef check_equilateral(x,y,z):\n  \"\"\"\n  Write a function to print check if the triangle is equilateral or not.\n  >>> check_equilateral(6,8,12)\n  False\n  >>> check_equilateral(6,6,12)\n  False\n  >>> check_equilateral(6,6,6)\n  True\n  \"\"\"\n", "solution": "  \n  if x == y == z:\n\t   return True\n  else:\n     return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_equilateral(x, y, z):\n    return x == y == z", "code_2": "def check_equilateral(x, y, z):\n    if x == y and y == z:\n        return True\n    return False", "code_3": "def check_equilateral(x, y, z):\n    return all(side == x for side in (y, z))", "code_4": "def check_equilateral(x, y, z):\n    return set((x, y, z)) == {x}", "code_5": "def check_equilateral(x, y, z):\n    return len(set((x, y, z))) == 1", "code_6": "def check_equilateral(x, y, z):\n    return (x, y, z).count(x) == 3", "code_7": "def check_equilateral(x, y, z):\n    return not (x != y or y != z)", "code_8": "def check_equilateral(x, y, z):\n    return sum((x, y, z)) / 3 == x", "code_9": "def check_equilateral(x, y, z):\n    return min(x, y, z) == max(x, y, z)", "code_10": "def check_equilateral(x, y, z):\n    return sorted((x, y, z))[0] == sorted((x, y, z))[2]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/52", "prompt": "\n\ndef parallelogram_area(b,h):\n  \"\"\"\n  Write a function to caluclate area of a parallelogram.\n  >>> parallelogram_area(10,20)\n  200\n  >>> parallelogram_area(15,20)\n  300\n  >>> parallelogram_area(8,9)\n  72\n  \"\"\"\n", "solution": "  \n  area=b*h\n  return area", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def parallelogram_area(b, h): return b * h", "code_2": "parallelogram_area = lambda b, h: b * h", "code_3": "def parallelogram_area(b, h):\n    return abs(b * h)", "code_4": "def parallelogram_area(b, h):\n    return max(b, h) * min(b, h)", "code_5": "def parallelogram_area(b, h):\n    return b * h if b >= 0 and h >= 0 else None", "code_6": "def parallelogram_area(b, h):\n    return b * h if b * h >= 0 else None", "code_7": "def parallelogram_area(b, h):\n    return abs(b) * abs(h)", "code_8": "def parallelogram_area(b, h):\n    return b * h if b > 0 and h > 0 else 0", "code_9": "def parallelogram_area(b, h):\n    return b * h if b >= h else h * b", "code_10": "def parallelogram_area(b, h):\n    return b * h if b * h > 0 else 0", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/53", "prompt": "\n\ndef check_Equality(str):\n  \"\"\"\n  Write a python function to check whether the first and last characters of a given string are equal or not.\n  >>> check_Equality(\"abcda\")\n  \"Equal\"\n  >>> check_Equality(\"ab\")\n  \"Not Equal\"\n  >>> check_Equality(\"mad\")\n  \"Not Equal\"\n  \"\"\"\n", "solution": "  \n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def check_Equality(s): return \"Equal\" if s[0] == s[-1] else \"Not Equal\"", "code_2": "def check_Equality(s): return [\"Not Equal\", \"Equal\"][s[0] == s[-1]]", "code_3": "def check_Equality(s): return \"Equal\" if len(s) > 1 and s[0] == s[-1] else \"Not Equal\"", "code_4": "def check_Equality(s): return \"Equal\" if s and s[0] == s[-1] else \"Not Equal\"", "code_5": "def check_Equality(s): return \"Equal\" if s[0:1] == s[-1:] else \"Not Equal\"", "code_6": "def check_Equality(s): return \"Equal\" if s.startswith(s[-1]) else \"Not Equal\"", "code_7": "def check_Equality(s): return \"Equal\" if s.endswith(s[0]) else \"Not Equal\"", "code_8": "def check_Equality(s): return \"Equal\" if s.count(s[0]) > 1 and s.count(s[-1]) > 1 else \"Not Equal\"", "code_9": "def check_Equality(s): return \"Equal\" if s.index(s[0]) == s.rindex(s[-1]) else \"Not Equal\"", "code_10": "def check_Equality(s): return \"Equal\" if all(x == s[0] for x in s[-1:]) else \"Not Equal\"", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/54", "prompt": "\n\ndef counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    >>> counting_sort([1,23,4,5,6,7,8])\n    [1, 4, 5, 6, 7, 8, 23]\n    >>> counting_sort([12, 9, 28, 33, 69, 45])\n    [9, 12, 28, 33, 45, 69]\n    >>> counting_sort([8, 4, 14, 3, 2, 1])\n    [1, 2, 3, 4, 8, 14]\n    \"\"\"\n", "solution": "    \n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, num in enumerate(count):\n        sorted_list.extend([i] * num)\n    return sorted_list", "code_2": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    i = 0\n    for num, freq in enumerate(count):\n        for _ in range(freq):\n            my_list[i] = num\n            i += 1\n    return my_list", "code_3": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    i = 0\n    for num, freq in enumerate(count):\n        while freq > 0:\n            my_list[i] = num\n            i += 1\n            freq -= 1\n    return my_list", "code_4": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    i = 0\n    for num, freq in enumerate(count):\n        for _ in range(freq):\n            my_list[i] = num\n            i += 1\n    return my_list", "code_5": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    i = 0\n    for num, freq in enumerate(count):\n        while freq > 0:\n            my_list[i] = num\n            i += 1\n            freq -= 1\n    return my_list", "code_6": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, freq in enumerate(count):\n        sorted_list.extend([i] * freq)\n    return sorted_list", "code_7": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, freq in enumerate(count):\n        while freq > 0:\n            sorted_list.append(i)\n            freq -= 1\n    return sorted_list", "code_8": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, freq in enumerate(count):\n        for _ in range(freq):\n            sorted_list.append(i)\n    return sorted_list", "code_9": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, freq in enumerate(count):\n        while freq > 0:\n            sorted_list.append(i)\n            freq -= 1\n    return sorted_list", "code_10": "def counting_sort(my_list):\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n    for num in my_list:\n        count[num] += 1\n    sorted_list = []\n    for i, freq in enumerate(count):\n        for _ in range(freq):\n            sorted_list.append(i)\n    return sorted_list", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/55", "prompt": "\n\ndef tn_gp(a,n,r):\n  \"\"\"\n  Write a function to find t-nth term of geometric series.\n  >>> tn_gp(1,5,2)\n  16\n  >>> tn_gp(1,5,4)\n  256\n  >>> tn_gp(2,6,3)\n  486\n  \"\"\"\n", "solution": "  import math\n  \n  tn = a * (math.pow(r, n - 1))\n  return tn", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def tn_gp(a, n, r): return a * r ** (n - 1)", "code_2": "tn_gp = lambda a, n, r: a * r ** (n - 1)", "code_3": "import math\ndef tn_gp(a, n, r): return a * math.pow(r, n - 1)", "code_4": "from operator import pow\ndef tn_gp(a, n, r): return a * pow(r, n - 1)", "code_5": "def tn_gp(a, n, r):\n  tn = a\n  for _ in range(1, n):\n    tn *= r\n  return tn", "code_6": "def tn_gp(a, n, r):\n  if n == 1:\n    return a\n  else:\n    return r * tn_gp(a, n - 1, r)", "code_7": "def tn_gp(a, n, r):\n  tn = a\n  while n > 1:\n    tn *= r\n    n -= 1\n  return tn", "code_8": "def tn_gp(a, n, r):\n  return reduce(lambda x, _: x * r, range(1, n), a)", "code_9": "def tn_gp(a, n, r):\n  return functools.reduce(lambda x, _: x * r, range(1, n), a)", "code_10": "def tn_gp(a, n, r):\n  return next(a * r ** i for i in range(n))", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/56", "prompt": "\n\ndef check(n):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    >>> check(70)\n    False\n    >>> check(23)\n    False\n    >>> check(73)\n    True\n    \"\"\"\n", "solution": "    def rev(num):    \n        rev_num = 0\n        while (num > 0):  \n            rev_num = (rev_num * 10 + num % 10) \n            num = num // 10  \n        return rev_num  \n        \n    return (2 * rev(n) == n + 1)  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check(n): return n == 2 * int(str(n)[::-1]) - 1", "code_2": "def check(n): return n == int(str(n)[::-1]) * 2 - 1", "code_3": "def check(n): return n == int(''.join(reversed(str(n)))) * 2 - 1", "code_4": "def check(n): return n == int(str(n)[::-1]) * 2 - 1", "code_5": "def check(n): return n == 2 * int(''.join(reversed(str(n)))) - 1", "code_6": "def check(n): return n == 2 * int(str(n)[::-1]) - 1", "code_7": "def check(n): return n == int(str(n)[::-1]) * 2 - 1", "code_8": "def check(n): return n == int(''.join(reversed(str(n)))) * 2 - 1", "code_9": "def check(n): return n == 2 * int(''.join(reversed(str(n)))) - 1", "code_10": "def check(n): return n == int(str(n)[::-1]) * 2 - 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/57", "prompt": "\n\ndef find_Max_Num(arr,n) :\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    >>> find_Max_Num([1,2,3],3)\n    321\n    >>> find_Max_Num([4,5,6,1],4)\n    6541\n    >>> find_Max_Num([1,2,3,9],4)\n    9321\n    \"\"\"\n", "solution": "     \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_Max_Num(arr,n): return int(''.join(sorted(map(str,arr),reverse=True)))", "code_2": "def find_Max_Num(arr,n): return int(''.join(sorted(map(str,arr),key=lambda x: -int(x))))", "code_3": "from functools import cmp_to_key\ndef find_Max_Num(arr,n): return int(''.join(sorted(map(str,arr),key=cmp_to_key(lambda x,y: int(y+x)-int(x+y)))))", "code_4": "import heapq\ndef find_Max_Num(arr,n): return int(''.join(map(str,heapq.nlargest(n,arr))))", "code_5": "def find_Max_Num(arr,n):\n    arr.sort(reverse=True)\n    return int(''.join(map(str,arr)))", "code_6": "def find_Max_Num(arr,n):\n    arr = [str(i) for i in arr]\n    arr.sort(reverse=True)\n    return int(''.join(arr))", "code_7": "def find_Max_Num(arr,n):\n    arr.sort(key=lambda x: str(x)*10, reverse=True)\n    return int(''.join(map(str,arr)))", "code_8": "def find_Max_Num(arr,n):\n    arr = sorted(arr, reverse=True)\n    return int(''.join(map(str,arr)))", "code_9": "def find_Max_Num(arr,n):\n    arr = sorted(arr, key=str, reverse=True)\n    return int(''.join(map(str,arr)))", "code_10": "def find_Max_Num(arr,n):\n    arr = sorted(arr, key=lambda x: str(x)*n, reverse=True)\n    return int(''.join(map(str,arr)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/58", "prompt": "\n\ndef opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    >>> opposite_Signs(1,-2)\n    True\n    >>> opposite_Signs(3,2)\n    False\n    >>> opposite_Signs(-10,-10)\n    False\n    \"\"\"\n", "solution": "     \n    return ((x ^ y) < 0); ", "results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def opposite_Signs(x, y):\n    return (x < 0) != (y < 0)", "code_2": "def opposite_Signs(x, y):\n    return (x ^ y) < 0", "code_3": "def opposite_Signs(x, y):\n    return x * y < 0", "code_4": "def opposite_Signs(x, y):\n    return (x >= 0) ^ (y >= 0)", "code_5": "def opposite_Signs(x, y):\n    return bool(x ^ y) < 0", "code_6": "def opposite_Signs(x, y):\n    return (x >= 0) != (y >= 0)", "code_7": "def opposite_Signs(x, y):\n    return (x < 0) ^ (y < 0)", "code_8": "def opposite_Signs(x, y):\n    return (x * y) < 0", "code_9": "def opposite_Signs(x, y):\n    return (x < 0) != (y >= 0)", "code_10": "def opposite_Signs(x, y):\n    return (x >= 0) ^ (y < 0)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7849818707050383}
{"task_id": "MBPP/59", "prompt": "\n\ndef is_octagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth octagonal number.\n\t>>> is_octagonal(5)\n\t65\n\t>>> is_octagonal(10)\n\t280\n\t>>> is_octagonal(15)\n\t645\n\t\"\"\"\n", "solution": "\t \n\treturn 3 * n * n - 2 * n ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_octagonal(n): return 3*n*(n-1)+2*n", "code_2": "def is_octagonal(n): return n*(4*n-3)", "code_3": "is_octagonal = lambda n: n*(4*n-3)", "code_4": "def is_octagonal(n): return n*n*4 - n*3", "code_5": "def is_octagonal(n): return n*(4*n - 3)", "code_6": "is_octagonal = lambda n: n*(4*n-3)", "code_7": "def is_octagonal(n): return n*(4*n - 3)", "code_8": "is_octagonal = lambda n: n*(4*n-3)", "code_9": "def is_octagonal(n): return n*(4*n - 3)", "code_10": "is_octagonal = lambda n: n*(4*n-3)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/60", "prompt": "\n\ndef max_len_sub( arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\t>>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n\t5\n\t>>> max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)\n\t4\n\t>>> max_len_sub([9, 11, 13, 15, 18], 5)\n\t1\n\t\"\"\"\n", "solution": "\t \n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n\t\t\t\tmls[i] = mls[j] + 1\n\tfor i in range(n): \n\t\tif (max < mls[i]): \n\t\t\tmax = mls[i] \n\treturn max", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_2": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = max((dp[j] + 1 for j in range(i) if arr[i] > arr[j]), default=1)\n    return max(dp)", "code_3": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = max((dp[j] for j in range(i) if arr[i] > arr[j]), default=0) + 1\n    return max(dp)", "code_4": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = max(dp[j] + 1 for j in range(i) if arr[i] > arr[j])\n    return max(dp)", "code_5": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = max(dp[j] for j in range(i) if arr[i] > arr[j]) + 1\n    return max(dp)", "code_6": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = max(dp[j] for j in range(i) if arr[i] > arr[j])\n        dp[i] += 1\n    return max(dp)", "code_7": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = 1 + max((dp[j] for j in range(i) if arr[i] > arr[j]), default=0)\n    return max(dp)", "code_8": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = 1 + max(dp[j] for j in range(i) if arr[i] > arr[j])\n    return max(dp)", "code_9": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = max(dp[j] for j in range(i) if arr[i] > arr[j])\n        dp[i] += 1\n    return max(dp)", "code_10": "def max_len_sub(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        dp[i] = 1 + max(dp[j] for j in range(i) if arr[i] > arr[j])\n    return max(dp)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/61", "prompt": "\n\ndef count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    >>> count_Substrings('112112',6)\n    6\n    >>> count_Substrings('111',3)\n    6\n    >>> count_Substrings('1101112',7)\n    12\n    \"\"\"\n", "solution": "    from collections import defaultdict\n    \n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(c) for c in s[i:j+1]) == j - i + 1:\n                count += 1\n    return count", "code_2": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count", "code_3": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n            if total > j - i + 1:\n                break\n    return count", "code_4": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total > j - i + 1:\n                break\n            if total == j - i + 1:\n                count += 1\n    return count", "code_5": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total > j - i + 1 or total < j - i + 1:\n                break\n            if total == j - i + 1:\n                count += 1\n    return count", "code_6": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total > j - i + 1:\n                break\n            elif total == j - i + 1:\n                count += 1\n    return count", "code_7": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total > j - i + 1:\n                break\n            count += total == j - i + 1\n    return count", "code_8": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            count += total == j - i + 1\n            if total > j - i + 1:\n                break\n    return count", "code_9": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total > j - i + 1:\n                break\n            count += 1 if total == j - i + 1 else 0\n    return count", "code_10": "def count_Substrings(s,n):\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total > j - i + 1:\n                break\n            count += (total == j - i + 1)\n    return count", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/62", "prompt": "\n\ndef smallest_num(xs):\n  \"\"\"\n  Write a python function to find smallest number in a list.\n  >>> smallest_num([10, 20, 1, 45, 99])\n  1\n  >>> smallest_num([1, 2, 3])\n  1\n  >>> smallest_num([45, 46, 50, 60])\n  45\n  \"\"\"\n", "solution": "  \n  return min(xs)\n", "results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def smallest_num(xs):\n    return min(xs)", "code_2": "def smallest_num(xs):\n    return sorted(xs)[0]", "code_3": "def smallest_num(xs):\n    return reduce(lambda a, b: a if a < b else b, xs)", "code_4": "def smallest_num(xs):\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest", "code_5": "def smallest_num(xs):\n    return heapq.nsmallest(1, xs)[0]", "code_6": "def smallest_num(xs):\n    return next(iter(sorted(xs)))", "code_7": "def smallest_num(xs):\n    return list(sorted(set(xs)))[0]", "code_8": "def smallest_num(xs):\n    return min(xs, key=int)", "code_9": "def smallest_num(xs):\n    return sorted(xs, reverse=True)[-1]", "code_10": "def smallest_num(xs):\n    return functools.reduce(min, xs)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7411902110103873}
{"task_id": "MBPP/63", "prompt": "\n\ndef max_difference(test_list):\n  \"\"\"\n  Write a function to find the maximum difference between available pairs in the given tuple list.\n  >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n  7\n  >>> max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\n  15\n  >>> max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\n  23\n  \"\"\"\n", "solution": "  \n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "results": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_difference(test_list):\n    return max(b - a for a, b in test_list)", "code_2": "def max_difference(test_list):\n    return max(map(lambda x: x[1] - x[0], test_list))", "code_3": "def max_difference(test_list):\n    return max(b - a for a, b in test_list if b > a)", "code_4": "def max_difference(test_list):\n    return max(abs(a - b) for a, b in test_list)", "code_5": "def max_difference(test_list):\n    return max(reduce(lambda x, y: y - x, t) for t in test_list)", "code_6": "def max_difference(test_list):\n    return max(itertools.starmap(operator.sub, test_list))", "code_7": "def max_difference(test_list):\n    return max(map(itemgetter(1), test_list)) - min(map(itemgetter(0), test_list))", "code_8": "def max_difference(test_list):\n    return max(chain.from_iterable(combinations(t, 2) for t in test_list), key=lambda x: x[1] - x[0])[1] - min(chain.from_iterable(test_list))", "code_9": "def max_difference(test_list):\n    return max(heapq.nlargest(2, chain.from_iterable(test_list))[1] - min(chain.from_iterable(test_list)))", "code_10": "def max_difference(test_list):\n    return max(sorted(chain.from_iterable(test_list), reverse=True)[:2]) - min(chain.from_iterable(test_list))", "pass@3": 0.30000000000000004, "nDCG@10": 0.09478836436955079}
{"task_id": "MBPP/64", "prompt": "\n\ndef subject_marks(subjectmarks):\n\"\"\"\nWrite a function to sort a list of tuples using lambda.\n>>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n>>> subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])\n([('Social',33),('Telugu',49),('Hindhi',54)])\n>>> subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])\n([('Biology',45),('Physics',96),('Chemistry',97)])\n\"\"\"\n", "solution": "\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "subject_marks = lambda x: sorted(x, key=lambda y: y[1])", "code_2": "subject_marks = lambda x: sorted(x, key=itemgetter(1))", "code_3": "subject_marks = lambda x: sorted(x, key=lambda y: y[-1])", "code_4": "subject_marks = lambda x: sorted(x, key=itemgetter(-1))", "code_5": "subject_marks = lambda x: sorted(x, key=lambda y: y[1:])", "code_6": "subject_marks = lambda x: sorted(x, key=itemgetter(slice(1, None)))", "code_7": "subject_marks = lambda x: sorted(x, key=lambda y: (y[1], y[0]))", "code_8": "subject_marks = lambda x: sorted(x, key=itemgetter(1, 0))", "code_9": "subject_marks = lambda x: sorted(x, key=lambda y: (y[1], y[0]), reverse=True)", "code_10": "subject_marks = lambda x: sorted(x, key=itemgetter(1, 0), reverse=True)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/65", "prompt": "\n\ndef recursive_list_sum(data_list):\n\t\"\"\"\n\tWrite a function of recursion list sum.\n\t>>> recursive_list_sum(([1, 2, [3,4],[5,6]]))\n\t21\n\t>>> recursive_list_sum(([7, 10, [15,14],[19,41]]))\n\t106\n\t>>> recursive_list_sum(([10, 20, [30,40],[50,60]]))\n\t210\n\t\"\"\"\n", "solution": "\t\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def recursive_list_sum(data_list):\n    return sum(i if not isinstance(i, list) else recursive_list_sum(i) for i in data_list)", "code_2": "def recursive_list_sum(data_list):\n    total = 0\n    for i in data_list:\n        total += i if not isinstance(i, list) else recursive_list_sum(i)\n    return total", "code_3": "def recursive_list_sum(data_list):\n    return sum(map(lambda x: recursive_list_sum(x) if isinstance(x, list) else x, data_list))", "code_4": "def recursive_list_sum(data_list):\n    def helper(lst):\n        if not lst:\n            return 0\n        elif isinstance(lst[0], list):\n            return helper(lst[0]) + helper(lst[1:])\n        else:\n            return lst[0] + helper(lst[1:])\n    return helper(data_list)", "code_5": "def recursive_list_sum(data_list):\n    return sum(recursive_list_sum(i) if isinstance(i, list) else i for i in data_list)", "code_6": "def recursive_list_sum(data_list):\n    total = 0\n    for i in data_list:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total", "code_7": "def recursive_list_sum(data_list):\n    return sum(recursive_list_sum(i) if type(i) == list else i for i in data_list)", "code_8": "def recursive_list_sum(data_list):\n    return sum(recursive_list_sum(i) if isinstance(i, list) else i for i in data_list)", "code_9": "def recursive_list_sum(data_list):\n    return sum(recursive_list_sum(i) if type(i) is list else i for i in data_list)", "code_10": "def recursive_list_sum(data_list):\n    return sum(recursive_list_sum(i) if isinstance(i, list) else i for i in data_list)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/66", "prompt": "\n\ndef pos_count(list):\n  \"\"\"\n  Write a python function to count positive numbers in a list.\n  >>> pos_count([1,-2,3,-4])\n  2\n  >>> pos_count([3,4,5,-1])\n  3\n  >>> pos_count([1,2,3,4])\n  4\n  \"\"\"\n", "solution": "  \n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def pos_count(lst):\n    return sum(1 for i in lst if i > 0)", "code_2": "def pos_count(lst):\n    return len([i for i in lst if i > 0])", "code_3": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count", "code_4": "def pos_count(lst):\n    return len(list(filter(lambda x: x > 0, lst)))", "code_5": "def pos_count(lst):\n    return sum(map(lambda x: x > 0, lst))", "code_6": "def pos_count(lst):\n    return len(list(i for i in lst if i > 0))", "code_7": "def pos_count(lst):\n    return sum(i > 0 for i in lst)", "code_8": "def pos_count(lst):\n    return len(list(filter(lambda x: x > 0, lst)))", "code_9": "def pos_count(lst):\n    return len([i for i in lst if i > 0])", "code_10": "def pos_count(lst):\n    return sum(i > 0 for i in lst)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/67", "prompt": "\n\ndef bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    >>> bell_number(2)\n    2\n    >>> bell_number(10)\n    115975\n    >>> bell_number(56)\n    6775685320645824322581483068371419745979053216268760300\n    \"\"\"\n", "solution": "       \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "code_2": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        prev = bell[0]\n        for j in range(1, i+1):\n            temp = bell[j]\n            bell[j] = prev + bell[j]\n            prev = temp\n    return bell[n]", "code_3": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        temp = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += temp\n            temp = bell[j-1]\n    return bell[n]", "code_4": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "code_5": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        temp = bell[i-1]\n        for j in range(i, 0, -1):\n            bell[j] = bell[j-1] + temp\n    return bell[n]", "code_6": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n        bell[0] = bell[i-1]\n    return bell[n]", "code_7": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n        bell[0] = bell[i]\n    return bell[n]", "code_8": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        temp = bell[0]\n        for j in range(1, i+1):\n            temp, bell[j] = bell[j], temp + bell[j]\n    return bell[n]", "code_9": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n        bell[0] = bell[i]\n        bell[i] = bell[0]\n    return bell[n]", "code_10": "def bell_number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        temp = bell[i-1]\n        for j in range(i, 0, -1):\n            bell[j] = bell[j-1] + temp\n        bell[0] = temp\n    return bell[n]", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/68", "prompt": "\n\ndef is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    >>> is_Monotonic([6, 5, 4, 4])\n    True\n    >>> is_Monotonic([1, 2, 2, 3])\n    True\n    >>> is_Monotonic([1, 3, 2])\n    False\n    \"\"\"\n", "solution": "     \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))", "code_2": "def is_Monotonic(A):\n    return (all(x >= y for x, y in zip(A, A[1:])) or all(x <= y for x, y in zip(A, A[1:])))", "code_3": "def is_Monotonic(A):\n    return len(set(x - y for x, y in zip(A, A[1:]))) <= 1", "code_4": "def is_Monotonic(A):\n    diff = [x - y for x, y in zip(A, A[1:])]\n    return all(i >= 0 for i in diff) or all(i <= 0 for i in diff)", "code_5": "def is_Monotonic(A):\n    return sorted(A) == A or sorted(A, reverse=True) == A", "code_6": "def is_Monotonic(A):\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n    return increasing or decreasing", "code_7": "def is_Monotonic(A):\n    return A == sorted(A) or A == sorted(A, reverse=True)", "code_8": "def is_Monotonic(A):\n    return all(map(lambda x: x >= 0, [x - y for x, y in zip(A, A[1:])])) or all(map(lambda x: x <= 0, [x - y for x, y in zip(A, A[1:])]))", "code_9": "def is_Monotonic(A):\n    return (A[0] <= A[-1] and all(A[i] <= A[i + 1] for i in range(len(A) - 1))) or (A[0] >= A[-1] and all(A[i] >= A[i + 1] for i in range(len(A) - 1)))", "code_10": "def is_Monotonic(A):\n    return reduce(lambda x, y: x * (y >= 0), [x - y for x, y in zip(A, A[1:])], 1) in [0, 1]", "pass@3": 1.0, "nDCG@10": 0.8263333286520084}
{"task_id": "MBPP/69", "prompt": "\n\ndef is_sublist(l, s):\n\t\"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t>>> is_sublist([2,4,3,5,7],[3,7])\n\tFalse\n\t>>> is_sublist([2,4,3,5,7],[4,3])\n\tTrue\n\t>>> is_sublist([2,4,3,5,7],[1,6])\n\tFalse\n\t\"\"\"\n", "solution": "\t\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "results": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_sublist(l, s):\n    return any(l[i:i + len(s)] == s for i in range(len(l) - len(s) + 1))", "code_2": "def is_sublist(l, s):\n    return ''.join(map(str, s)) in ''.join(map(str, l))", "code_3": "def is_sublist(l, s):\n    return any(l[i:i + len(s)] == s for i in xrange(len(l) - len(s) + 1))", "code_4": "def is_sublist(l, s):\n    return ''.join(map(str, l)).find(''.join(map(str, s))) != -1", "code_5": "def is_sublist(l, s):\n    return reduce(lambda a, b: a and b, (l[i:i + len(s)] == s for i in range(len(l) - len(s) + 1)), False)", "code_6": "def is_sublist(l, s):\n    return sum(l[i:i + len(s)] == s for i in range(len(l) - len(s) + 1)) > 0", "code_7": "def is_sublist(l, s):\n    return any(l[i:i + len(s)] == s for i in xrange(len(l) - len(s) + 1))", "code_8": "def is_sublist(l, s):\n    return ''.join(map(str, s)) in ''.join(map(str, l))", "code_9": "def is_sublist(l, s):\n    return ''.join(map(str, l)).count(''.join(map(str, s))) > 0", "code_10": "def is_sublist(l, s):\n    return any(l[i:i + len(s)] == s for i in range(len(l) - len(s) + 1))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7314470771099789}
{"task_id": "MBPP/70", "prompt": "\n\ndef get_equal(Input, k):\n  \"\"\"\n  Write a function to find whether all the given tuples have equal length or not.\n  >>> get_equal([(11, 22, 33), (44, 55, 66)], 3)\n  'All tuples have same length'\n  >>> get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)\n  'All tuples do not have same length'\n  >>> get_equal([(1, 2), (3, 4)], 2)\n  'All tuples have same length'\n  \"\"\"\n", "solution": "  def find_equal_tuple(Input, k):\n    flag = 1\n    for tuple in Input:\n      if len(tuple) != k:\n        flag = 0\n        break\n    return flag\n  \n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def get_equal(Input, k):\n  return 'All tuples have same length' if all(len(t) == k for t in Input) else 'All tuples do not have same length'", "code_2": "def get_equal(Input, k):\n  return ['All tuples do not have same length', 'All tuples have same length'][all(len(t) == k for t in Input)]", "code_3": "def get_equal(Input, k):\n  return 'All tuples have same length' if sum(len(t) == k for t in Input) == len(Input) else 'All tuples do not have same length'", "code_4": "def get_equal(Input, k):\n  return 'All tuples have same length' if len(set(len(t) for t in Input)) == 1 and len(Input[0]) == k else 'All tuples do not have same length'", "code_5": "def get_equal(Input, k):\n  return 'All tuples have same length' if len(Input) == sum(1 for t in Input if len(t) == k) else 'All tuples do not have same length'", "code_6": "def get_equal(Input, k):\n  return 'All tuples have same length' if not any(len(t) != k for t in Input) else 'All tuples do not have same length'", "code_7": "def get_equal(Input, k):\n  return 'All tuples have same length' if max(len(t) for t in Input) == min(len(t) for t in Input) == k else 'All tuples do not have same length'", "code_8": "def get_equal(Input, k):\n  return 'All tuples have same length' if len(set(map(len, Input))) == 1 and len(Input[0]) == k else 'All tuples do not have same length'", "code_9": "def get_equal(Input, k):\n  return 'All tuples have same length' if all(map(lambda t: len(t) == k, Input)) else 'All tuples do not have same length'", "code_10": "def get_equal(Input, k):\n  return 'All tuples have same length' if reduce(lambda x, y: x and y, (len(t) == k for t in Input)) else 'All tuples do not have same length'", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/71", "prompt": "\n\ndef comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([41, 32, 15, 19, 22])\n    [15, 19, 22, 32, 41]\n    >>> comb_sort([99, 15, 13, 47])\n    [13, 15, 47, 99]\n    \"\"\"\n", "solution": "    \n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "results": [1, 1, 1, 1, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums", "code_2": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    return nums", "code_3": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = max(1, int(gap / shrink))\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums", "code_4": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return sorted(nums)", "code_5": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = max(1, int(gap / shrink))\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return sorted(nums)", "code_6": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return nums.sort()", "code_7": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = max(1, int(gap / shrink))\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    nums.sort()\n    return nums", "code_8": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    return sorted(nums, reverse=True)[::-1]", "code_9": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = max(1, int(gap / shrink))\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    nums.reverse()\n    return nums", "code_10": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    while gap > 1:\n        gap = int(gap / shrink)\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    nums[:] = sorted(nums)\n    return nums", "pass@3": 1.0, "nDCG@10": 0.8553475075669357}
{"task_id": "MBPP/72", "prompt": "\n\ndef dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    >>> dif_Square(5)\n    True\n    >>> dif_Square(10)\n    False\n    >>> dif_Square(15)\n    True\n    \"\"\"\n", "solution": "     \n    if (n % 4 != 2): \n        return True\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = (n + i * i) ** 0.5\n        if j == int(j):\n            return True\n        i += 1\n    return False", "code_2": "def dif_Square(n):\n    return any((n + i * i) ** 0.5 % 1 == 0 for i in range(1, int(n ** 0.5) + 1))", "code_3": "import math\ndef dif_Square(n):\n    return any(math.isqrt(n + i * i) ** 2 == n + i * i for i in range(1, int(n ** 0.5) + 1))", "code_4": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        if ((n + i * i) ** 0.5).is_integer():\n            return True\n        i += 1\n    return False", "code_5": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        if int((n + i * i) ** 0.5) ** 2 == n + i * i:\n            return True\n        i += 1\n    return False", "code_6": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = int((n + i * i) ** 0.5)\n        if j * j == n + i * i:\n            return True\n        i += 1\n    return False", "code_7": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = (n + i * i) ** 0.5\n        if j.is_integer():\n            return True\n        i += 1\n    return False", "code_8": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = (n + i * i) ** 0.5\n        if j == int(j):\n            return True\n        i += 1\n    return False", "code_9": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = (n + i * i) ** 0.5\n        if j == round(j):\n            return True\n        i += 1\n    return False", "code_10": "def dif_Square(n):\n    i = 1\n    while i * i <= n:\n        j = (n + i * i) ** 0.5\n        if j % 1 == 0:\n            return True\n        i += 1\n    return False", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/73", "prompt": "\n\ndef multiple_split(text):\n  \"\"\"\n  Write a function to split the given string with multiple delimiters by using regex.\n  >>> multiple_split('Forces of the \\ndarkness*are coming into the play.')\n  ['Forces of the ', 'darkness', 'are coming into the play.']\n  >>> multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')\n  ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n  >>> multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')\n  ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.split('; |, |\\*|\\n',text))", "results": [0, 1, 1, 0, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef multiple_split(text):\n    return re.split(r'\\n|\\\\*', text)", "code_2": "import re\ndef multiple_split(text):\n    return re.split('[\\n*]', text)", "code_3": "import re\ndef multiple_split(text):\n    return re.split('\\\\n|\\\\*', text)", "code_4": "import re\ndef multiple_split(text):\n    return re.split('(\\\\n|\\\\*)', text)", "code_5": "import re\ndef multiple_split(text):\n    return re.split('(\\\\n|\\\\*)', text).strip()", "code_6": "import re\ndef multiple_split(text):\n    return [i for i in re.split('[\\n*]', text) if i]", "code_7": "import re\ndef multiple_split(text):\n    return list(filter(None, re.split('[\\n*]', text)))", "code_8": "import re\ndef multiple_split(text):\n    return [s for s in re.split('[\\n*]', text) if s != '']", "code_9": "import re\ndef multiple_split(text):\n    return [s for s in re.split('[\\n*]', text) if s.strip()]", "code_10": "import re\ndef multiple_split(text):\n    return [s for s in re.split('[\\n*]', text) if s.strip(' ')]", "pass@3": 0.9916666666666667, "nDCG@10": 0.599976751690748}
{"task_id": "MBPP/74", "prompt": "\n\ndef is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    >>> is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])\n    True\n    >>> is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])\n    False\n    >>> is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])\n    False\n    \"\"\"\n", "solution": "        \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "results": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(patterns)) == len(set(colors)) == len(colors) == len(patterns)", "code_2": "def is_samepatterns(colors, patterns):\n    return len(colors) == len(patterns) == len(set(colors)) == len(set(patterns)) == len(set(zip(colors, patterns)))", "code_3": "def is_samepatterns(colors, patterns):\n    return len(set(colors)) == len(set(patterns)) == len(set(zip(colors, patterns))) == len(colors) == len(patterns)", "code_4": "def is_samepatterns(colors, patterns):\n    return len(set(colors)) == len(set(patterns)) == len(set(zip(colors, patterns))) and len(colors) == len(patterns)", "code_5": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(colors)) == len(set(patterns)) and len(colors) == len(patterns)", "code_6": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(colors)) and len(set(colors)) == len(set(patterns)) and len(colors) == len(patterns)", "code_7": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(colors)) == len(set(patterns)) and len(colors) == len(patterns)", "code_8": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(colors)) == len(set(patterns)) and len(colors) == len(patterns)", "code_9": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(colors)) and len(set(colors)) == len(set(patterns)) and len(colors) == len(patterns)", "code_10": "def is_samepatterns(colors, patterns):\n    return len(set(zip(colors, patterns))) == len(set(colors)) == len(set(patterns)) and len(colors) == len(patterns)", "pass@3": 0.9916666666666667, "nDCG@10": 0.5309999066793253}
{"task_id": "MBPP/75", "prompt": "\n\ndef find_tuples(test_list, K):\n  \"\"\"\n  Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n  >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n  '[(6, 24, 12)]'\n  >>> find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)\n  '[(5, 25, 30)]'\n  >>> find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)\n  '[(8, 16, 4)]'\n  \"\"\"\n", "solution": "  \n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_tuples(test_list, K):\n    return [t for t in test_list if all(i % K == 0 for i in t)]", "code_2": "def find_tuples(test_list, K):\n    return list(filter(lambda t: all(i % K == 0 for i in t), test_list))", "code_3": "def find_tuples(test_list, K):\n    return [t for t in test_list if not any(i % K for i in t)]", "code_4": "def find_tuples(test_list, K):\n    return [t for t in test_list if sum(i % K for i in t) == 0]", "code_5": "def find_tuples(test_list, K):\n    return [t for t in test_list if max(i % K for i in t) == 0]", "code_6": "def find_tuples(test_list, K):\n    return [t for t in test_list if all(map(lambda i: i % K == 0, t))]", "code_7": "def find_tuples(test_list, K):\n    return list(filter(lambda t: not any(map(lambda i: i % K, t)), test_list))", "code_8": "def find_tuples(test_list, K):\n    return [t for t in test_list if not any(map(lambda i: i % K, t))]", "code_9": "def find_tuples(test_list, K):\n    return [t for t in test_list if sum(map(lambda i: i % K, t)) == 0]", "code_10": "def find_tuples(test_list, K):\n    return [t for t in test_list if max(map(lambda i: i % K, t)) == 0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/76", "prompt": "\n\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(2,2)\n    5\n    >>> count_Squares(1,1)\n    1\n    \"\"\"\n", "solution": "    \n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Squares(m,n):\n    return sum((m-i)*(n-i) for i in range(min(m,n))) + min(m,n)", "code_2": "def count_Squares(m,n):\n    return sum(i*j for i in range(1, m+1) for j in range(1, n+1))", "code_3": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_4": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1) if i == j or i < j)", "code_5": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(min(i, n), 0, -1))", "code_6": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(i, 0, -1) if i <= n)", "code_7": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(min(i, n), 0, -1) if i >= j)", "code_8": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(i if i <= n else n, 0, -1))", "code_9": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(i, 0, -1)) - sum(i*j for i in range(m, n, -1) for j in range(i, n, -1))", "code_10": "def count_Squares(m,n):\n    return (m*(m+1)*(2*m+1)//6)*(n*(n+1)//2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/77", "prompt": "\n\ndef is_Diff(n):\n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    >>> is_Diff (12345)\n    False\n    >>> is_Diff(1212112)\n    True\n    >>> is_Diff(1212)\n    False\n    \"\"\"\n", "solution": "     \n    return (n % 11 == 0) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_Diff(n):\n    s = str(n)\n    return sum(int(c) for c in s[::2]) != sum(int(c) for c in s[1::2])", "code_2": "def is_Diff(n):\n    even, odd = 0, 0\n    for i, digit in enumerate(str(n)):\n        if i % 2 == 0:\n            even += int(digit)\n        else:\n            odd += int(digit)\n    return even != odd", "code_3": "def is_Diff(n):\n    return sum(int(digit) for i, digit in enumerate(str(n)) if i % 2 == 0) != sum(int(digit) for i, digit in enumerate(str(n)) if i % 2 != 0)", "code_4": "def is_Diff(n):\n    digits = [int(d) for d in str(n)]\n    return sum(digits[::2]) != sum(digits[1::2])", "code_5": "def is_Diff(n):\n    return sum(map(int, str(n)[::2])) != sum(map(int, str(n)[1::2]))", "code_6": "def is_Diff(n):\n    s = str(n)\n    return sum(int(s[i]) for i in range(0, len(s), 2)) != sum(int(s[i]) for i in range(1, len(s), 2))", "code_7": "def is_Diff(n):\n    s = str(n)\n    return sum(int(s[i]) for i in range(len(s)) if i % 2 == 0) != sum(int(s[i]) for i in range(len(s)) if i % 2 != 0)", "code_8": "def is_Diff(n):\n    even = sum(int(digit) for digit in str(n)[::2])\n    odd = sum(int(digit) for digit in str(n)[1::2])\n    return even != odd", "code_9": "def is_Diff(n):\n    s = str(n)\n    return sum(map(int, s[::2])) != sum(map(int, s[1::2]))", "code_10": "def is_Diff(n):\n    s = str(n)\n    return sum(int(s[i]) for i in range(0, len(s), 2)) != sum(int(s[i]) for i in range(1, len(s), 2))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/78", "prompt": "\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    >>> count_With_Odd_SetBits(5)\n    3\n    >>> count_With_Odd_SetBits(10)\n    5\n    >>> count_With_Odd_SetBits(15)\n    8\n    \"\"\"\n", "solution": "     \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans ", "results": [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def count_With_Odd_SetBits(n):\n    return 2 ** (n.bit_length() - 1)", "code_2": "def count_With_Odd_SetBits(n):\n    return 1 << (n.bit_length() - 1)", "code_3": "def count_With_Odd_SetBits(n):\n    return 2 ** (len(bin(n)) - 3)", "code_4": "def count_With_Odd_SetBits(n):\n    return 1 << (len(bin(n)) - 3)", "code_5": "def count_With_Odd_SetBits(n):\n    return sum(1 for i in range(n + 1) if bin(i).count('1') % 2)", "code_6": "def count_With_Odd_SetBits(n):\n    return len([i for i in range(n + 1) if bin(i).count('1') % 2])", "code_7": "def count_With_Odd_SetBits(n):\n    return sum(bin(i).count('1') % 2 for i in range(n + 1))", "code_8": "def count_With_Odd_SetBits(n):\n    return sum(1 for i in range(n + 1) if i & (i - 1) == 0)", "code_9": "def count_With_Odd_SetBits(n):\n    return sum(1 for i in range(n + 1) if bin(i).count('1') & 1)", "code_10": "def count_With_Odd_SetBits(n):\n    return sum(1 for i in range(n + 1) if i & 1 == 1 and bin(i).count('1') & 1 == 1)", "pass@3": 0.8333333333333334, "nDCG@10": 0.30315953217404545}
{"task_id": "MBPP/79", "prompt": "\n\ndef word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    >>> word_len(\"Hadoop\")\n    False\n    >>> word_len(\"great\")\n    True\n    >>> word_len(\"structure\")\n    True\n    \"\"\"\n", "solution": "     \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def word_len(s): return len(s) % 2 != 0", "code_2": "def word_len(s): return bool(len(s) & 1)", "code_3": "def word_len(s): return not len(s) % 2 == 0", "code_4": "def word_len(s): return len(s) >> 1 << 1 != len(s)", "code_5": "def word_len(s): return ~len(s) & 1", "code_6": "def word_len(s): return len(s) ^ 1 < len(s)", "code_7": "def word_len(s): return len(s) & 1", "code_8": "def word_len(s): return len(s) - (len(s) // 2 * 2) != 0", "code_9": "def word_len(s): return len(s) % 2", "code_10": "def word_len(s): return len(s) & 1 == 1", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/80", "prompt": "\n\ndef tetrahedral_number(n):\n\t\"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t>>> tetrahedral_number(5)\n\t35.0\n\t>>> tetrahedral_number(6)\n\t56.0\n\t>>> tetrahedral_number(7)\n\t84.0\n\t\"\"\"\n", "solution": "\t \n\treturn (n * (n + 1) * (n + 2)) / 6", "results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def tetrahedral_number(n):\n\treturn n * (n + 1) * (n + 2) / 6", "code_2": "tetrahedral_number = lambda n: n * (n + 1) * (n + 2) / 6", "code_3": "def tetrahedral_number(n):\n\treturn sum(range(1, n + 1))", "code_4": "def tetrahedral_number(n):\n\treturn (n ** 3 + 3 * n ** 2 + 2 * n) / 6", "code_5": "def tetrahedral_number(n):\n\treturn (n * (n + 1) * (n + 2)) >> 1", "code_6": "def tetrahedral_number(n):\n\treturn (n ** 2 + n) * (n + 1) / 2", "code_7": "def tetrahedral_number(n):\n\treturn (n ** 3 + 3 * n ** 2 + 2 * n) >> 1", "code_8": "def tetrahedral_number(n):\n\treturn sum(i for i in range(1, n + 1))", "code_9": "def tetrahedral_number(n):\n\treturn (n * (n + 1) * (n + 2)) / 2.0", "code_10": "def tetrahedral_number(n):\n\treturn (n * (n + 1) * (n + 2)) // 6", "pass@3": 0.8333333333333334, "nDCG@10": 0.5173633627401373}
{"task_id": "MBPP/81", "prompt": "\n\ndef zip_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to zip the two given tuples.\n  >>> zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) )\n  [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n  >>> zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) )\n  [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n  >>> zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) )\n  [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n  \"\"\"\n", "solution": "  \n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def zip_tuples(t1, t2):\n    return [(t1[i%len(t1)], t2[i%len(t2)]) for i in range(max(len(t1), len(t2)))]", "code_2": "def zip_tuples(t1, t2):\n    return list(zip(t1, t2 + t2[:len(t1) - len(t2)]))", "code_3": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_4": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_5": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_6": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_7": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_8": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_9": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "code_10": "def zip_tuples(t1, t2):\n    return [(t1[i], t2[i % len(t2)]) for i in range(len(t1))]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/82", "prompt": "\n\ndef volume_sphere(r):\n  \"\"\"\n  Write a function to find the volume of a sphere.\n  >>> volume_sphere(10)\n  4188.790204786391\n  >>> volume_sphere(25)\n  65449.84694978735\n  >>> volume_sphere(20)\n  33510.32163829113\n  \"\"\"\n", "solution": "  import math\n  \n  volume=(4/3)*math.pi*r*r*r\n  return volume", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3", "code_2": "from math import pi\ndef volume_sphere(r):\n    return (4/3) * pi * r**3", "code_3": "import math\ndef volume_sphere(r):\n    return 4 * math.pi * r**3 / 3", "code_4": "from math import pi\ndef volume_sphere(r):\n    return 4 * pi * r**3 / 3", "code_5": "import math\ndef volume_sphere(r):\n    return math.pi * r**3 * 4 / 3", "code_6": "from math import pi\ndef volume_sphere(r):\n    return pi * r**3 * 4 / 3", "code_7": "import math\ndef volume_sphere(r):\n    return math.pi * 4 * r**3 / 3", "code_8": "from math import pi\ndef volume_sphere(r):\n    return pi * 4 * r**3 / 3", "code_9": "import math\ndef volume_sphere(r):\n    return (4/3) * math.pi * pow(r, 3)", "code_10": "from math import pi, pow\ndef volume_sphere(r):\n    return (4/3) * pi * pow(r, 3)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/83", "prompt": "\n\ndef get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    >>> get_Char(\"abc\")\n    \"f\"\n    >>> get_Char(\"gfg\")\n    \"t\"\n    >>> get_Char(\"ab\")\n    \"c\"\n    \"\"\"\n", "solution": "      \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_Char(strr): return chr(sum(ord(c) for c in strr))", "code_2": "def get_Char(strr): return chr(reduce(lambda x, y: x + y, map(ord, strr)))", "code_3": "def get_Char(strr): return chr(functools.reduce(operator.add, map(ord, strr)))", "code_4": "def get_Char(strr): return chr(sum(map(ord, strr)))", "code_5": "def get_Char(strr): return chr(sum(map(lambda c: ord(c), strr)))", "code_6": "def get_Char(strr): return chr(sum(map(ord, list(strr))))", "code_7": "def get_Char(strr): return chr(sum(map(ord, tuple(strr))))", "code_8": "def get_Char(strr): return chr(sum(map(ord, iter(strr))))", "code_9": "def get_Char(strr): return chr(sum(map(ord, strr[i] for i in range(len(strr)))))", "code_10": "def get_Char(strr): return chr(sum(map(ord, [c for c in strr])))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/84", "prompt": "\n\ndef sequence(n):\n\t\"\"\"\n\tWrite a function to find the n-th number in newman conway sequence.\n\t>>> sequence(10)\n\t6\n\t>>> sequence(2)\n\t1\n\t>>> sequence(3)\n\t2\n\t\"\"\"\n", "solution": "\t \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tnext_num = seq[-1]\n\t\tcount = 0\n\t\tfor i in reversed(range(len(seq) - 1)):\n\t\t\tif seq[i] == next_num:\n\t\t\t\tcount = len(seq) - i\n\t\t\t\tbreak\n\t\tseq.append(count)\n\treturn seq[n - 1]", "code_2": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[-1] if seq[-1] != seq[-2] else len(seq) - seq[:-1][::-1].index(seq[-1]) - 1)\n\treturn seq[n - 1]", "code_3": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else 1)\n\treturn seq[n - 1]", "code_4": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[:-1][::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else 1)\n\treturn seq[n - 1]", "code_5": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(next((i for i in reversed(range(len(seq) - 1)) if seq[i] == seq[-1]), 0) + 1)\n\treturn seq[n - 1]", "code_6": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[:-1][::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else len(seq))\n\treturn seq[n - 1]", "code_7": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else len(seq))\n\treturn seq[n - 1]", "code_8": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[:-1][::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else len(seq))\n\treturn seq[n - 1]", "code_9": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else len(seq))\n\treturn seq[n - 1]", "code_10": "def sequence(n):\n\tseq = [1, 1]\n\twhile len(seq) < n:\n\t\tseq.append(seq[:-1][::-1].index(seq[-1]) + 1 if seq[-1] in seq[:-1] else len(seq))\n\treturn seq[n - 1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/85", "prompt": "\n\ndef surfacearea_sphere(r):\n  \"\"\"\n  Write a function to find the surface area of a sphere.\n  >>> surfacearea_sphere(10)\n  1256.6370614359173\n  >>> surfacearea_sphere(15)\n  2827.4333882308138\n  >>> surfacearea_sphere(20)\n  5026.548245743669\n  \"\"\"\n", "solution": "  import math\n  \n  surfacearea=4*math.pi*r*r\n  return surfacearea", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r * r", "code_2": "from math import pi\ndef surfacearea_sphere(r):\n    return 4 * pi * r ** 2", "code_3": "def surfacearea_sphere(r):\n    return 12.566370614359172 * r * r", "code_4": "def surfacearea_sphere(r):\n    return 12.566370614359172 * r ** 2", "code_5": "def surfacearea_sphere(r):\n    return 4 * 3.141592653589793 * r * r", "code_6": "def surfacearea_sphere(r):\n    return 4 * 3.141592653589793 * r ** 2", "code_7": "def surfacearea_sphere(r):\n    return 12.566370614359172 * r * r if r >= 0 else None", "code_8": "def surfacearea_sphere(r):\n    return 12.566370614359172 * r ** 2 if r >= 0 else None", "code_9": "def surfacearea_sphere(r):\n    return 4 * math.pi * r * r if isinstance(r, (int, float)) else None", "code_10": "def surfacearea_sphere(r):\n    return 4 * math.pi * r ** 2 if isinstance(r, (int, float)) else None", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/86", "prompt": "\n\ndef centered_hexagonal_number(n):\n  \"\"\"\n  Write a function to find nth centered hexagonal number.\n  >>> centered_hexagonal_number(10)\n  271\n  >>> centered_hexagonal_number(2)\n  7\n  >>> centered_hexagonal_number(9)\n  217\n  \"\"\"\n", "solution": "  \n  return 3 * n * (n - 1) + 1", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def centered_hexagonal_number(n): return 6 * n * (n - 1) + 1", "code_2": "centered_hexagonal_number = lambda n: 6 * n * (n - 1) + 1", "code_3": "def centered_hexagonal_number(n): return 6 * (n ** 2 - n)", "code_4": "centered_hexagonal_number = lambda n: 6 * (n ** 2 - n)", "code_5": "def centered_hexagonal_number(n): return 6 * (n - 1) * n + 1", "code_6": "centered_hexagonal_number = lambda n: 6 * (n - 1) * n + 1", "code_7": "def centered_hexagonal_number(n): return 6 * n * (n - 1) + 1", "code_8": "centered_hexagonal_number = lambda n: 6 * n * (n - 1) + 1", "code_9": "def centered_hexagonal_number(n): return 6 * (n * n - n)", "code_10": "centered_hexagonal_number = lambda n: 6 * (n * n - n)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/87", "prompt": "\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})\n    {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })\n    {'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n    \"\"\"\n", "solution": "    import collections as ct\n    \n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}", "code_2": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return dict(dict1, **dict2, **dict3)", "code_3": "def merge_dictionaries_three(dict1, dict2, dict3):\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1", "code_4": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return dict(list(dict1.items()) + list(dict2.items()) + list(dict3.items()))", "code_5": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {k: v for d in (dict1, dict2, dict3) for k, v in d.items()}", "code_6": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return ChainMap(dict1, dict2, dict3)", "code_7": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged", "code_8": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return reduce(lambda a, b: {**a, **b}, [dict1, dict2, dict3])", "code_9": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return dict(itertools.chain(dict1.items(), dict2.items(), dict3.items()))", "code_10": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return collections.ChainMap(dict1, dict2, dict3).new_child()", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/88", "prompt": "\n\ndef freq_count(list1):\n  \"\"\"\n  Write a function to get the frequency of the elements in a list.\n  >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n  ({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n  >>> freq_count([1,2,3,4,3,2,4,1,3,1,4])\n  ({1:3, 2:2,3:3,4:3})\n  >>> freq_count([5,6,7,4,9,10,4,5,6,7,9,5])\n  ({10:1,5:3,6:2,7:2,4:2,9:2})\n  \"\"\"\n", "solution": "  import collections\n  \n  freq_count= collections.Counter(list1)\n  return freq_count", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef freq_count(list1):\n return dict(Counter(list1))", "code_2": "def freq_count(list1):\n return {i: list1.count(i) for i in list1}", "code_3": "import numpy as np\ndef freq_count(list1):\n return dict(zip(*np.unique(list1, return_counts=True)))", "code_4": "def freq_count(list1):\n freq = {}\n for item in list1:\n  freq[item] = freq.get(item, 0) + 1\n return freq", "code_5": "def freq_count(list1):\n freq = {}\n for item in list1:\n  if item in freq:\n   freq[item] += 1\n  else:\n   freq[item] = 1\n return freq", "code_6": "def freq_count(list1):\n freq = {}\n for item in set(list1):\n  freq[item] = list1.count(item)\n return freq", "code_7": "def freq_count(list1):\n freq = {}\n for item in list1:\n  freq[item] = freq[item] + 1 if item in freq else 1\n return freq", "code_8": "def freq_count(list1):\n freq = {}\n for item in list1:\n  freq[item] = freq.setdefault(item, 0) + 1\n return freq", "code_9": "def freq_count(list1):\n freq = {}\n for item in list1:\n  try:\n   freq[item] += 1\n  except KeyError:\n   freq[item] = 1\n return freq", "code_10": "def freq_count(list1):\n freq = {}\n for item in list1:\n  freq[item] = freq.get(item, 0) + 1\n return {k: v for k, v in sorted(freq.items(), key=lambda item: item[1], reverse=True)}", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/89", "prompt": "\n\ndef closest_num(N):\n  \"\"\"\n  Write a function to find the closest smaller number than n.\n  >>> closest_num(11)\n  10\n  >>> closest_num(7)\n  6\n  >>> closest_num(12)\n  11\n  \"\"\"\n", "solution": "  \n  return (N - 1)", "results": [1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], "no_of_codes": 11, "code_1": "def closest_num(N): return N - 1", "code_2": "closest_num = lambda N: N - 1", "code_3": "def closest_num(N):\n    return subtract(N, 1)", "code_4": "def subtract(a, b):\n    return a - b", "code_5": "def closest_num(N):\n    result = 0\n    result = N - 1\n    return result", "code_6": "def closest_num(N):\n    result = N\n    result -= 1\n    return result", "code_7": "def closest_num(N):\n    result = N\n    result = result - 1\n    return result", "code_8": "def closest_num(N):\n    result = N\n    result = result.bit_length() - 1\n    return result", "code_9": "def closest_num(N):\n    return N.__sub__(1)", "code_10": "def closest_num(N):\n    return N.__rsub__(1)", "code_11": "def closest_num(N):\n    return N.__sub__.__call__(1)", "pass@3": 0.9916666666666667, "nDCG@10": 0.6621137423456802}
{"task_id": "MBPP/90", "prompt": "\n\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    >>> len_log([\"python\",\"PHP\",\"bigdata\"])\n    7\n    >>> len_log([\"a\",\"ab\",\"abc\"])\n    3\n    >>> len_log([\"small\",\"big\",\"tall\"])\n    5\n    \"\"\"\n", "solution": "    \n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def len_log(list1):\n    return max(len(word) for word in list1)", "code_2": "def len_log(list1):\n    return max(map(len, list1))", "code_3": "def len_log(list1):\n    return len(max(list1, key=len))", "code_4": "def len_log(list1):\n    return len(sorted(list1, key=len)[-1])", "code_5": "def len_log(list1):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, list1, \"\").__len__()", "code_6": "def len_log(list1):\n    return len(sorted(list1, key=len, reverse=True)[0])", "code_7": "def len_log(list1):\n    return len(heapq.nlargest(1, list1, key=len)[0])", "code_8": "def len_log(list1):\n    return len(sorted(list1, key=len)[-1])", "code_9": "def len_log(list1):\n    return len(max(list1, key=lambda x: len(x)))", "code_10": "def len_log(list1):\n    return len(sorted(list1, key=len)[~0])", "pass@3": 1.0, "nDCG@10": 0.841492960259019}
{"task_id": "MBPP/91", "prompt": "\n\ndef find_substring(str1, sub_str):\n   \"\"\"\n   Write a function to check if a substring is present in a given list of string values.\n   >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")\n   True\n   >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")\n   False\n   >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")\n   True\n   \"\"\"\n", "solution": "   \n   if any(sub_str in s for s in str1):\n       return True\n   return False", "results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_substring(str_list, sub_str):\n    return any(sub_str in s for s in str_list)", "code_2": "def find_substring(str_list, sub_str):\n    return sum(s.count(sub_str) for s in str_list) > 0", "code_3": "def find_substring(str_list, sub_str):\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False", "code_4": "def find_substring(str_list, sub_str):\n    return len([s for s in str_list if sub_str in s]) > 0", "code_5": "def find_substring(str_list, sub_str):\n    return bool(filter(lambda s: sub_str in s, str_list))", "code_6": "def find_substring(str_list, sub_str):\n    return sub_str in ''.join(str_list)", "code_7": "def find_substring(str_list, sub_str):\n    return reduce(lambda x, y: x or sub_str in y, str_list, False)", "code_8": "def find_substring(str_list, sub_str):\n    return next((True for s in str_list if sub_str in s), False)", "code_9": "def find_substring(str_list, sub_str):\n    return sub_str in ' '.join(str_list)", "code_10": "def find_substring(str_list, sub_str):\n    return any(map(lambda s: sub_str in s, str_list))", "pass@3": 1.0, "nDCG@10": 0.841492960259019}
{"task_id": "MBPP/92", "prompt": "\n\ndef is_undulating(n):\n\t\"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t>>> is_undulating(\"1212121\")\n\tTrue\n\t>>> is_undulating(\"1991\")\n\tFalse\n\t>>> is_undulating(\"121\")\n\tTrue\n\t\"\"\"\n", "solution": "\t \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "results": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def is_undulating(n):\n    return all(n[i] != n[i + 1] for i in range(0, len(n) - 1, 2))", "code_2": "def is_undulating(n):\n    return all(a != b for a, b in zip(n[::2], n[1::2]))", "code_3": "def is_undulating(n):\n    return len(set(n[i] + n[i + 1] for i in range(0, len(n) - 1, 2))) == len(n) // 2", "code_4": "def is_undulating(n):\n    return len(set(n[i:i + 2] for i in range(0, len(n), 2))) == len(n) // 2", "code_5": "def is_undulating(n):\n    return sum(a != b for a, b in zip(n, n[1:])) == len(n) // 2", "code_6": "def is_undulating(n):\n    return sum(1 for i in range(len(n) - 1) if i % 2 == 0 and n[i] != n[i + 1]) == len(n) // 2", "code_7": "def is_undulating(n):\n    return sum(a != b for a, b in zip(n, n[1:])) == len(n[::2])", "code_8": "def is_undulating(n):\n    return sum(1 for i in range(0, len(n) - 1, 2) if n[i] == n[i + 1]) == 0", "code_9": "def is_undulating(n):\n    return not any(a == b for a, b in zip(n, n[1:])) and len(n) % 2 == 1", "code_10": "def is_undulating(n):\n    return all(a != b for a, b in zip(n[::2], n[1::2])) and len(n) % 2 == 1", "pass@3": 0.5333333333333333, "nDCG@10": 0.12987501165334078}
{"task_id": "MBPP/93", "prompt": "\n\ndef power(a,b):\n\t\"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t>>> power(3,4)\n\t81\n\t>>> power(2,3)\n\t8\n\t>>> power(5,5)\n\t3125\n\t\"\"\"\n", "solution": "\t\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "results": [1, 1, 1, 1, 1, 0, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def power(a, b):\n    return a ** b", "code_2": "def power(a, b):\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result", "code_3": "from functools import reduce\ndef power(a, b):\n    return reduce(lambda x, y: x * y, [a] * b)", "code_4": "def power(a, b):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)", "code_5": "def power(a, b):\n    if b == 0:\n        return 1\n    temp = power(a, b // 2)\n    if b % 2 == 0:\n        return temp * temp\n    else:\n        return a * temp * temp", "code_6": "import math\ndef power(a, b):\n    return math.exp(b * math.log(a))", "code_7": "import numpy as np\ndef power(a, b):\n    return np.power(a, b)", "code_8": "from operator import mul\nfrom itertools import repeat\ndef power(a, b):\n    return mul(*repeat(a, b))", "code_9": "def power(a, b):\n    return eval(f\"{a}**{b}\")", "code_10": "import operator\ndef power(a, b):\n    return operator.pow(a, b)", "pass@3": 1.0, "nDCG@10": 0.8521705090845474}
{"task_id": "MBPP/94", "prompt": "\n\ndef index_minimum(test_list):\n  \"\"\"\n  Write a function to extract the index minimum value record from the given tuples.\n  >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n  'Varsha'\n  >>> index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])\n  'Dawood'\n  >>> index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])\n  'Ayesha'\n  \"\"\"\n", "solution": "  from operator import itemgetter \n  \n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0]", "code_2": "def index_minimum(test_list):\n    return sorted(test_list, key=lambda x: x[1])[0][0]", "code_3": "def index_minimum(test_list):\n    return [name for name, value in test_list if value == min(test_list, key=lambda x: x[1])[1]][0]", "code_4": "def index_minimum(test_list):\n    return [name for name, value in sorted(test_list, key=lambda x: x[1])][0]", "code_5": "def index_minimum(test_list):\n    return next(name for name, value in sorted(test_list, key=lambda x: x[1]))", "code_6": "def index_minimum(test_list):\n    return [name for name, value in test_list if value == min(value for name, value in test_list)][0]", "code_7": "def index_minimum(test_list):\n    return [name for name, value in test_list if all(value <= v for n, v in test_list)][0]", "code_8": "def index_minimum(test_list):\n    return [name for name, value in test_list if not any(value > v for n, v in test_list)][0]", "code_9": "def index_minimum(test_list):\n    return reduce(lambda a, b: a if a[1] < b[1] else b, test_list)[0]", "code_10": "def index_minimum(test_list):\n    return heapq.nsmallest(1, test_list, key=lambda x: x[1])[0][0]", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/95", "prompt": "\n\ndef Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    >>> Find_Min_Length([[1],[1,2]])\n    1\n    >>> Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]])\n    2\n    >>> Find_Min_Length([[3,3,3],[4,4,4,4]])\n    3\n    \"\"\"\n", "solution": "      \n    minLength = min(len(x) for x in lst )\n    return minLength ", "results": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def Find_Min_Length(lst):\n    return min(len(sublist) for sublist in lst)", "code_2": "def Find_Min_Length(lst):\n    return sorted(lst, key=len)[0]", "code_3": "def Find_Min_Length(lst):\n    return min(map(len, lst))", "code_4": "def Find_Min_Length(lst):\n    return min(lst, key=len)", "code_5": "def Find_Min_Length(lst):\n    return len(min(lst, key=len))", "code_6": "def Find_Min_Length(lst):\n    return len(sorted(lst, key=len)[0])", "code_7": "def Find_Min_Length(lst):\n    return len(min(lst, key=lambda x: len(x)))", "code_8": "def Find_Min_Length(lst):\n    return len(sorted(lst, key=lambda x: len(x))[0])", "code_9": "def Find_Min_Length(lst):\n    return len(min(lst, key=lambda sublist: len(sublist)))", "code_10": "def Find_Min_Length(lst):\n    return len(sorted(lst, key=lambda sublist: len(sublist))[0])", "pass@3": 1.0, "nDCG@10": 0.7663491917568949}
{"task_id": "MBPP/96", "prompt": "\n\ndef divisor(n):\n  \"\"\"\n  Write a python function to find the number of divisors of a given integer.\n  >>> divisor(15)\n  4\n  >>> divisor(12)\n  6\n  >>> divisor(9)\n  3\n  \"\"\"\n", "solution": "  \n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "results": [1, 0, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count", "code_2": "def divisor(n):\n    return sum(2 for i in range(1, int(n**0.5) + 1) if n % i == 0) + (1 if n**0.5 == int(n**0.5) else 0)", "code_3": "def divisor(n):\n    return len([i for i in range(1, n + 1) if n % i == 0])", "code_4": "def divisor(n):\n    return sum(1 for i in range(1, n + 1) if n % i == 0)", "code_5": "def divisor(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n        i += 1\n    return count", "code_6": "def divisor(n):\n    count = 0\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i * i == n:\n        count += 1\n    return count", "code_7": "def divisor(n):\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count", "code_8": "def divisor(n):\n    count = 0\n    i = 1\n    while i <= n // 2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count + 1", "code_9": "def divisor(n):\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 2\n    return count", "code_10": "def divisor(n):\n    count = 0\n    i = 1\n    while i <= n // 2:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if n % i == 0:\n        count += 1\n    return count", "pass@3": 0.9916666666666667, "nDCG@10": 0.7312625444731049}
{"task_id": "MBPP/97", "prompt": "\n\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    >>> frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    >>> frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])\n    {20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n    \"\"\"\n", "solution": "    \n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "results": [1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef frequency_lists(lst):\n    return Counter(x for sublist in lst for x in sublist)", "code_2": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for num in sublist:\n            freq[num] = freq.get(num, 0) + 1\n    return freq", "code_3": "import itertools\ndef frequency_lists(lst):\n    return dict(collections.Counter(itertools.chain.from_iterable(lst)))", "code_4": "def frequency_lists(lst):\n    return {num: sum(num in sublist for sublist in lst) for num in set(itertools.chain(*lst))}", "code_5": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        freq.update(collections.Counter(sublist))\n    return freq", "code_6": "def frequency_lists(lst):\n    return dict(collections.Counter(sum(lst, [])))", "code_7": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for num in sublist:\n            freq[num] = freq[num] + 1 if num in freq else 1\n    return freq", "code_8": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for num in sublist:\n            freq[num] = freq.setdefault(num, 0) + 1\n    return freq", "code_9": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for num in sublist:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    return freq", "code_10": "def frequency_lists(lst):\n    freq = {}\n    for sublist in lst:\n        for num in sublist:\n            try:\n                freq[num] += 1\n            except KeyError:\n                freq[num] = 1\n    return freq", "pass@3": 0.9666666666666667, "nDCG@10": 0.6316243658611128}
{"task_id": "MBPP/98", "prompt": "\n\ndef multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    >>> multiply_num((8, 2, 3, -1, 7))\n    -67.2\n    >>> multiply_num((-10,-20,-30))\n    -2000.0\n    >>> multiply_num((19,15,18))\n    1710.0\n    \"\"\"\n", "solution": "      \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from functools import reduce\nfrom operator import mul\ndef multiply_num(numbers):\n    return reduce(mul, numbers, 1) / len(numbers)", "code_2": "import numpy as np\ndef multiply_num(numbers):\n    return np.prod(numbers) / len(numbers)", "code_3": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)", "code_4": "import math\ndef multiply_num(numbers):\n    return math.exp(sum(math.log(num) for num in numbers)) / len(numbers)", "code_5": "def multiply_num(numbers):\n    return eval('*'.join(map(str, numbers))) ** (1.0 / len(numbers))", "code_6": "def multiply_num(numbers):\n    return pow(abs(reduce(mul, numbers)), 1.0 / len(numbers)) * (-1 if sum(x < 0 for x in numbers) % 2 else 1)", "code_7": "def multiply_num(numbers):\n    return pow(abs(reduce(lambda x, y: x * y, numbers)), 1.0 / len(numbers)) * (-1 if sum(x < 0 for x in numbers) % 2 else 1)", "code_8": "def multiply_num(numbers):\n    return pow(reduce(lambda x, y: x * y, map(abs, numbers)), 1.0 / len(numbers)) * (-1 if sum(x < 0 for x in numbers) % 2 else 1)", "code_9": "def multiply_num(numbers):\n    return pow(reduce(lambda x, y: x * y, (abs(num) for num in numbers)), 1.0 / len(numbers)) * (-1 if sum(x < 0 for x in numbers) % 2 else 1)", "code_10": "def multiply_num(numbers):\n    return pow(reduce(lambda x, y: x * y, (abs(num) for num in numbers)), 1.0 / len(numbers)) * (-1 if len([num for num in numbers if num < 0]) % 2 else 1)", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/99", "prompt": "\n\ndef decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(18)\n    '10010'\n    >>> decimal_to_binary(7)\n    '111'\n    \"\"\"\n", "solution": "     \n    return bin(n).replace(\"0b\",\"\") ", "results": [1, 1, 1, 0, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def decimal_to_binary(n):\n    return bin(n)[2:]", "code_2": "def decimal_to_binary(n):\n    return format(n, 'b')", "code_3": "def decimal_to_binary(n):\n    return '{0:b}'.format(n)", "code_4": "def decimal_to_binary(n):\n    return n and (n % 2 + 10 * decimal_to_binary(n // 2))", "code_5": "def decimal_to_binary(n):\n    return ''.join(str(1 & int(n) >> i) for i in range(n.bit_length())[::-1])", "code_6": "def decimal_to_binary(n):\n    return ''.join(str((n >> i) & 1) for i in range(n.bit_length())[::-1])", "code_7": "def decimal_to_binary(n):\n    return ''.join(str(int(digit)) for digit in bin(n)[2:])", "code_8": "def decimal_to_binary(n):\n    return ''.join(str(int(c)) for c in '{:032b}'.format(n))", "code_9": "def decimal_to_binary(n):\n    return ''.join(str(int(b)) for b in f'{n:032b}')", "code_10": "def decimal_to_binary(n):\n    return ''.join(str(int(c)) for c in f'{n:032b}')", "pass@3": 0.9666666666666667, "nDCG@10": 0.7059054020403313}
{"task_id": "MBPP/100", "prompt": "\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    >>> next_smallest_palindrome(99)\n    101\n    >>> next_smallest_palindrome(1221)\n    1331\n    >>> next_smallest_palindrome(120)\n    121\n    \"\"\"\n", "solution": "    import sys\n    \n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 17, "code_1": "def next_smallest_palindrome(num):\n    while str(num) != str(num)[::-1]:\n        num -= 1\n    return num", "code_2": "def next_smallest_palindrome(num):\n    while not all(str(num)[i] == str(num)[-i-1] for i in range(len(str(num))//2)):\n        num -= 1\n    return num", "code_3": "def next_smallest_palindrome(num):\n    while True:\n        s = str(num)\n        if s == s[::-1]:\n            return num\n        num -= 1", "code_4": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_5": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]", "code_6": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_7": "def is_palindrome(n):\n    return str(n) == ''.join(reversed(str(n)))", "code_8": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_9": "def is_palindrome(n):\n    s = str(n)\n    return all(s[i] == s[-i-1] for i in range(len(s)//2))", "code_10": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_11": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]", "code_12": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_13": "def is_palindrome(n):\n    s = str(n)\n    return s == s[::-1]", "code_14": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_15": "def is_palindrome(n):\n    return str(n) == ''.join(reversed(str(n)))", "code_16": "def next_smallest_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_17": "def is_palindrome(n):\n    s = str(n)\n    return all(s[i] == s[-i-1] for i in range(len(s)//2))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/101", "prompt": "\n\ndef kth_element(arr, n, k):\n  \"\"\"\n  Write a function to find the kth element in the given array.\n  >>> kth_element([12,3,5,7,19], 5, 2)\n  3\n  >>> kth_element([17,24,8,23], 4, 3)\n  8\n  >>> kth_element([16,21,25,36,4], 5, 4)\n  36\n  \"\"\"\n", "solution": "  \n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 22, "code_1": "def kth_element(arr, n, k):\n  arr.sort()\n  return arr[k-1]", "code_2": "import heapq\ndef kth_element(arr, n, k):\n  return heapq.nsmallest(k, arr)[-1]", "code_3": "def kth_element(arr, n, k):\n  return sorted(arr)[k-1]", "code_4": "def kth_element(arr, n, k):\n  return quickselect(arr, 0, n-1, k-1)", "code_5": "def quickselect(arr, low, high, k):\n  if low == high:\n    return arr[low]\n  pivot = partition(arr, low, high)\n  if k == pivot:\n    return arr[k]\n  elif k < pivot:\n    return quickselect(arr, low, pivot-1, k)\n  else:\n    return quickselect(arr, pivot+1, high, k)", "code_6": "def partition(arr, low, high):\n  pivot = arr[high]\n  i = low - 1\n  for j in range(low, high):\n    if arr[j] <= pivot:\n      i += 1\n      arr[i], arr[j] = arr[j], arr[i]\n  arr[i+1], arr[high] = arr[high], arr[i+1]\n  return i + 1", "code_7": "import random\ndef kth_element(arr, n, k):\n  return randomized_select(arr, 0, n-1, k-1)", "code_8": "def randomized_select(arr, low, high, k):\n  if low == high:\n    return arr[low]\n  pivot = randomized_partition(arr, low, high)\n  if k == pivot:\n    return arr[k]\n  elif k < pivot:\n    return randomized_select(arr, low, pivot-1, k)\n  else:\n    return randomized_select(arr, pivot+1, high, k)", "code_9": "def randomized_partition(arr, low, high):\n  i = random.randint(low, high)\n  arr[i], arr[high] = arr[high], arr[i]\n  return partition(arr, low, high)", "code_10": "def partition(arr, low, high):\n  pivot = arr[high]\n  i = low - 1\n  for j in range(low, high):\n    if arr[j] <= pivot:\n      i += 1\n      arr[i], arr[j] = arr[j], arr[i]\n  arr[i+1], arr[high] = arr[high], arr[i+1]\n  return i + 1", "code_11": "def kth_element(arr, n, k):\n  return median_of_medians(arr, k-1)", "code_12": "def median_of_medians(arr, k):\n  if len(arr) <= 5:\n    return sorted(arr)[k]\n  medians = [sorted(arr[i:i+5])[2] for i in range(0, len(arr), 5)]\n  pivot = median_of_medians(medians, len(medians) // 2)\n  left = [x for x in arr if x < pivot]\n  right = [x for x in arr if x > pivot]\n  if k < len(left):\n    return median_of_medians(left, k)\n  elif k < len(arr) - len(right):\n    return pivot\n  else:\n    return median_of_medians(right, k - (len(arr) - len(right)))", "code_13": "def kth_element(arr, n, k):\n  return bf_prt(arr, k-1)", "code_14": "def bf_prt(arr, k):\n  def partition(arr, low, high, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n    store_index = low\n    for i in range(low, high):\n      if arr[i] < pivot_value:\n        arr[store_index], arr[i] = arr[i], arr[store_index]\n        store_index += 1\n    arr[high], arr[store_index] = arr[store_index], arr[high]\n    return store_index", "code_15": "def select(arr, low, high, k):\n    if low == high:\n      return arr[low]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(arr, low, high, pivot_index)\n    if k == pivot_index:\n      return arr[k]\n    elif k < pivot_index:\n      return select(arr, low, pivot_index - 1, k)\n    else:\n      return select(arr, pivot_index + 1, high, k)", "code_16": "return select(arr, 0, n - 1, k)", "code_17": "def kth_element(arr, n, k):\n  return counting_sort(arr, k-1)", "code_18": "def counting_sort(arr, k):\n  max_val = max(arr)\n  count = [0] * (max_val + 1)\n  for num in arr:\n    count[num] += 1\n  i = 0\n  for num in range(max_val + 1):\n    k -= count[num]\n    if k < 0:\n      return num", "code_19": "def kth_element(arr, n, k):\n  return bucket_sort(arr, k-1)", "code_20": "def bucket_sort(arr, k):\n  max_val = max(arr)\n  size = max_val / len(arr)\n  buckets = [[] for _ in range(len(arr))]\n  for i in range(len(arr)):\n    j = int(arr[i] / size)\n    if j != len(arr):\n      buckets[j].append(arr[i])\n    else:\n      buckets[len(arr) - 1].append(arr[i])\n  for i in range(len(arr)):\n    buckets[i] = sorted(buckets[i])\n  for i in range(len(arr)):\n    for j in range(len(buckets[i])):\n      k -= 1\n      if k == 0:\n        return buckets[i][j]", "code_21": "def kth_element(arr, n, k):\n  return radix_sort(arr, k-1)", "code_22": "def radix_sort(arr, k):\n  RADIX = 10\n  placement = 1\n  max_digit = max(arr)\n  while placement < max_digit:\n    buckets = [list() for _ in range(RADIX)]\n    for i in arr:\n      tmp = int((i / placement) % RADIX)\n      buckets[tmp].append(i)\n    a = 0\n    for b in range(RADIX):\n      buck = buckets[b]\n      for i in buck:\n        arr[a] = i\n        a += 1\n    placement *= RADIX\n  return arr[k]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/102", "prompt": "\n\ndef snake_to_camel(word):\n        \"\"\"\n        Write a function to convert snake case string to camel case string.\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n        >>> snake_to_camel('python_language')\n        ('PythonLanguage')\n        >>> snake_to_camel('programming_language')\n        ('ProgrammingLanguage')\n        \"\"\"\n", "solution": "        \n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "results": [1, 1, 0, 1, 0, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "def snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))", "code_2": "def snake_to_camel(word):\n    return word.title().replace('_', '')", "code_3": "import re\ndef snake_to_camel(word):\n    return re.sub('_(.)', lambda m: m.group(1).upper(), word)", "code_4": "def snake_to_camel(word):\n    return ''.join(map(str.capitalize, word.split('_')))", "code_5": "def snake_to_camel(word):\n    return ''.join(word.split('_')).capitalize()", "code_6": "def snake_to_camel(word):\n    return ''.join(x.title() for x in word.split('_'))", "code_7": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "code_8": "def snake_to_camel(word):\n    return ''.join(x if i == 0 else x.capitalize() for i, x in enumerate(word.split('_')))", "code_9": "def snake_to_camel(word):\n    return word[0] + word.title()[1:].replace('_', '')", "code_10": "def snake_to_camel(word):\n    return ''.join(map(lambda x: x.capitalize() if '_' not in x else '', word.split('_')))", "pass@3": 0.9666666666666667, "nDCG@10": 0.6691255538181727}
{"task_id": "MBPP/103", "prompt": "\n\ndef eulerian_num(n, m):\n\t\"\"\"\n\tWrite a function to find eulerian number a(n, m).\n\t>>> eulerian_num(3, 1)\n\t4\n\t>>> eulerian_num(4, 1)\n\t11\n\t>>> eulerian_num(5, 3)\n\t26\n\t\"\"\"\n", "solution": "\t \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def eulerian_num(n, m):\n\ta = [[0] * (m + 1) for _ in range(n + 1)]\n\ta[0][0] = 1\n\tfor i in range(1, n + 1):\n\t\ta[i][0] = 1\n\t\tfor j in range(1, min(i, m) + 1):\n\t\t\ta[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n\treturn a[n][m]", "code_2": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tb = [0] * (m + 1)\n\t\tb[0] = 1\n\t\tfor j in range(1, min(i, m) + 1):\n\t\t\tb[j] = (i - j) * a[j - 1] + (j + 1) * a[j]\n\t\ta = b\n\treturn a[m]", "code_3": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] = (i - j + 1) * a[j - 1] + (j + 1) * a[j]\n\t\ta[0] = 1\n\treturn a[m]", "code_4": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] += a[j - 1]\n\t\t\ta[j] += (j + 1) * a[j]\n\treturn a[m]", "code_5": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] = a[j - 1] + (j + 1) * a[j]\n\t\ta[0] = 1\n\treturn a[m]", "code_6": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] += (j + 1) * a[j]\n\t\t\ta[j] += a[j - 1]\n\treturn a[m]", "code_7": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] = a[j - 1] + (j + 1) * a[j]\n\t\ta[0] = 1\n\treturn a[m]", "code_8": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] += a[j - 1]\n\t\t\ta[j] += (j + 1) * a[j]\n\treturn a[m]", "code_9": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] = a[j - 1] + (j + 1) * a[j]\n\t\ta[0] = 1\n\treturn a[m]", "code_10": "def eulerian_num(n, m):\n\ta = [0] * (m + 1)\n\ta[0] = 1\n\tfor i in range(1, n + 1):\n\t\tfor j in range(min(i, m), 0, -1):\n\t\t\ta[j] += (j + 1) * a[j]\n\t\t\ta[j] += a[j - 1]\n\treturn a[m]", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/104", "prompt": "\n\ndef sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    >>> sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))\n    [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    >>> sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))\n    [['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n    \"\"\"\n", "solution": "    \n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result", "results": [0, 1, 1, 1, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.strip()) for sublist in input_list]", "code_2": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]", "code_3": "def sort_sublists(input_list):\n    return list(map(sorted, input_list))", "code_4": "def sort_sublists(input_list):\n    return list(map(lambda sublist: sorted(sublist), input_list))", "code_5": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list if sublist]", "code_6": "def sort_sublists(input_list):\n    return [sorted(sublist, key=str.strip) for sublist in input_list]", "code_7": "def sort_sublists(input_list):\n    return [sorted(sublist, key=str) for sublist in input_list]", "code_8": "def sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.lstrip()) for sublist in input_list]", "code_9": "def sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.rstrip()) for sublist in input_list]", "code_10": "def sort_sublists(input_list):\n    return [sorted(sublist, key=lambda x: x.replace(\" \", \"\")) for sublist in input_list]", "pass@3": 0.9666666666666667, "nDCG@10": 0.5684579545875156}
{"task_id": "MBPP/105", "prompt": "\n\ndef count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    >>> count([True,False,True])\n    2\n    >>> count([False,False])\n    0\n    >>> count([True,True,True])\n    3\n    \"\"\"\n", "solution": "       \n    return sum(lst) ", "results": [1, 1, 1, 0, 0, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def count(lst):\n    return sum(lst)", "code_2": "def count(lst):\n    return lst.count(True)", "code_3": "def count(lst):\n    return len([i for i in lst if i])", "code_4": "def count(lst):\n    return len(filter(None, lst))", "code_5": "def count(lst):\n    return reduce(lambda x, y: x + y, lst)", "code_6": "def count(lst):\n    return sum(1 for i in lst if i)", "code_7": "def count(lst):\n    return sum(map(int, lst))", "code_8": "def count(lst):\n    return sum(i == True for i in lst)", "code_9": "def count(lst):\n    return len(list(itertools.compress(lst, lst)))", "code_10": "def count(lst):\n    return sum(i is True for i in lst)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7538142945344394}
{"task_id": "MBPP/106", "prompt": "\n\ndef add_lists(test_list, test_tup):\n  \"\"\"\n  Write a function to add the given list to the given tuples.\n  >>> add_lists([5, 6, 7], (9, 10))\n  (9, 10, 5, 6, 7)\n  >>> add_lists([6, 7, 8], (10, 11))\n  (10, 11, 6, 7, 8)\n  >>> add_lists([7, 8, 9], (11, 12))\n  (11, 12, 7, 8, 9)\n  \"\"\"\n", "solution": "  \n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "results": [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def add_lists(test_list, test_tup):\n  return test_tup + tuple(test_list)", "code_2": "def add_lists(test_list, test_tup):\n  return tuple(list(test_tup) + test_list)", "code_3": "def add_lists(test_list, test_tup):\n  return tuple(i for sub in (test_tup, test_list) for i in sub)", "code_4": "def add_lists(test_list, test_tup):\n  return tuple(chain(test_tup, test_list))", "code_5": "def add_lists(test_list, test_tup):\n  return tuple(test_tup) + tuple(test_list)", "code_6": "def add_lists(test_list, test_tup):\n  return tuple(test_tup).__add__(tuple(test_list))", "code_7": "def add_lists(test_list, test_tup):\n  return tuple(itertools.chain(test_tup, test_list))", "code_8": "def add_lists(test_list, test_tup):\n  return tuple(list(test_tup) + list(test_list))", "code_9": "def add_lists(test_list, test_tup):\n  return tuple(test_tup).__add__(tuple(i for i in test_list))", "code_10": "def add_lists(test_list, test_tup):\n  return tuple(list(test_tup).extend(test_list) or test_tup)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7682269253321375}
{"task_id": "MBPP/107", "prompt": "\n\ndef count_Hexadecimal(L,R) :\n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    >>> count_Hexadecimal(10,15)\n    6\n    >>> count_Hexadecimal(2,4)\n    0\n    >>> count_Hexadecimal(15,16)\n    1\n    \"\"\"\n", "solution": "      \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Hexadecimal(L, R): return sum(1 for i in range(L, R+1) if isinstance(hex(i), str))", "code_2": "def count_Hexadecimal(L, R): return sum(1 for i in range(L, R+1) if hex(i)[2:].isdigit())", "code_3": "def count_Hexadecimal(L, R): return len([i for i in range(L, R+1) if hex(i)[2:].isdigit()])", "code_4": "def count_Hexadecimal(L, R): return sum(hex(i)[2:].isdigit() for i in range(L, R+1))", "code_5": "def count_Hexadecimal(L, R): return len(list(filter(lambda x: hex(x)[2:].isdigit(), range(L, R+1))))", "code_6": "def count_Hexadecimal(L, R): return len([hex(i) for i in range(L, R+1) if set(hex(i)[2:]).issubset(set(\"0123456789abcdefABCDEF\"))])", "code_7": "def count_Hexadecimal(L, R): return sum(all(c in '0123456789abcdefABCDEF' for c in hex(i)[2:]) for i in range(L, R+1))", "code_8": "def count_Hexadecimal(L, R): return len([i for i in range(L, R+1) if all(c in '0123456789abcdefABCDEF' for c in hex(i)[2:])])", "code_9": "def count_Hexadecimal(L, R): return sum(hex(i)[2:].isalnum() for i in range(L, R+1))", "code_10": "def count_Hexadecimal(L, R): return len([i for i in range(L, R+1) if hex(i)[2:].isalnum()])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/108", "prompt": "\n\ndef merge_sorted_list(num1,num2,num3):\n  \"\"\"\n  Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n  >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n  [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n  >>> merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n  [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n  >>> merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])\n  [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n  \"\"\"\n", "solution": "  import heapq\n  \n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "import heapq\ndef merge_sorted_list(*lists):\n    return sorted(heapq.merge(*lists))", "code_2": "import heapq\ndef merge_sorted_list(*lists):\n    return list(heapq.merge(*lists))", "code_3": "import heapq\ndef merge_sorted_list(*lists):\n    return list(heapq.merge(*map(iter, lists)))", "code_4": "import heapq\ndef merge_sorted_list(*lists):\n    return list(heapq.merge(*(iter(l) for l in lists)))", "code_5": "import heapq\ndef merge_sorted_list(*lists):\n    return list(heapq.merge(*(iter(sorted(l)) for l in lists)))", "code_6": "import heapq\ndef merge_sorted_list(*lists):\n    return [i for i in heapq.merge(*lists)]", "code_7": "import heapq\ndef merge_sorted_list(*lists):\n    return [i for i in heapq.merge(*map(iter, lists))]", "code_8": "import heapq\ndef merge_sorted_list(*lists):\n    return [i for i in heapq.merge(*(iter(l) for l in lists))]", "code_9": "import heapq\ndef merge_sorted_list(*lists):\n    return [i for i in heapq.merge(*(iter(sorted(l)) for l in lists))]", "code_10": "from itertools import chain\nimport heapq\ndef merge_sorted_list(*lists):\n    return list(heapq.merge(*(sorted(l) for l in lists)))", "pass@3": 0.8333333333333334, "nDCG@10": 0.435109895593042}
{"task_id": "MBPP/109", "prompt": "\n\ndef odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    >>> odd_Equivalent(\"011001\",6)\n    3\n    >>> odd_Equivalent(\"11011\",5)\n    4\n    >>> odd_Equivalent(\"1010\",4)\n    2\n    \"\"\"\n", "solution": "     \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def odd_Equivalent(s,n):\n    return sum(int(s[i:]+s[:i], 2) % 2 for i in range(n))", "code_2": "def odd_Equivalent(s,n):\n    return sum(1 for i in range(n) if int(s[i:]+s[:i], 2) % 2)", "code_3": "def odd_Equivalent(s,n):\n    return sum(bin(int(s[i:]+s[:i], 2))[-1] == '1' for i in range(n))", "code_4": "def odd_Equivalent(s,n):\n    return sum(int(s[i:]+s[:i], 2) & 1 for i in range(n))", "code_5": "def odd_Equivalent(s,n):\n    return len([i for i in range(n) if int(s[i:]+s[:i], 2) % 2])", "code_6": "def odd_Equivalent(s,n):\n    return sum(map(lambda i: int(s[i:]+s[:i], 2) % 2, range(n)))", "code_7": "def odd_Equivalent(s,n):\n    return sum(1 for i in range(n) if bin(int(s[i:]+s[:i], 2)).endswith('1'))", "code_8": "def odd_Equivalent(s,n):\n    return sum(1 for i in range(n) if int(s[i:]+s[:i], 2) & 1)", "code_9": "def odd_Equivalent(s,n):\n    return len([1 for i in range(n) if int(s[i:]+s[:i], 2) % 2])", "code_10": "def odd_Equivalent(s,n):\n    return sum(int(s[i:]+s[:i], 2) & 1 for i in range(n))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/110", "prompt": "\n\ndef extract_missing(test_list, strt_val, stop_val):\n  \"\"\"\n  Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n  >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n  [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n  >>> extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)\n  [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n  >>> extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)\n  [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n  \"\"\"\n", "solution": "  \n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_missing(lst, start, end):\n    missing = [(start, lst[0][0])] + [(lst[i][1], lst[i+1][0]) for i in range(len(lst)-1)] + [(lst[-1][1], end)]\n    return [(s, e) for s, e in missing if s < e]", "code_2": "def extract_missing(lst, start, end):\n    return [(max(start, lst[i-1][1]), min(end, lst[i][0])) for i in range(len(lst)) if max(start, lst[i-1][1]) < min(end, lst[i][0])]", "code_3": "def extract_missing(lst, start, end):\n    return [(a, b) for a, b in zip([start] + [i[1] for i in lst], [i[0] for i in lst] + [end]) if a < b]", "code_4": "def extract_missing(lst, start, end):\n    return [(a, b) for a, b in ((start, lst[0][0]), *((i[1], j[0]) for i, j in zip(lst, lst[1:])), (lst[-1][1], end)) if a < b]", "code_5": "def extract_missing(lst, start, end):\n    return [(a, b) for a, b in ((start, lst[0][0]), *((i[1], j[0]) for i, j in zip(lst[:-1], lst[1:])), (lst[-1][1], end)) if a < b]", "code_6": "def extract_missing(lst, start, end):\n    return [(max(start, lst[i-1][1]), min(end, lst[i][0])) for i in range(len(lst)) if max(start, lst[i-1][1]) < min(end, lst[i][0])]", "code_7": "def extract_missing(lst, start, end):\n    return [(a, b) for a, b in zip([start] + [i[1] for i in lst], [i[0] for i in lst] + [end]) if a < b]", "code_8": "def extract_missing(lst, start, end):\n    return [(a, b) for a, b in ((start, lst[0][0]), *((i[1], j[0]) for i, j in zip(lst, lst[1:])), (lst[-1][1], end)) if a < b]", "code_9": "def extract_missing(lst, start, end):\n    return [(a, b) for a, b in ((start, lst[0][0]), *((i[1], j[0]) for i, j in zip(lst[:-1], lst[1:])), (lst[-1][1], end)) if a < b]", "code_10": "def extract_missing(lst, start, end):\n    return [(max(start, lst[i-1][1]), min(end, lst[i][0])) for i in range(len(lst)) if max(start, lst[i-1][1]) < min(end, lst[i][0])]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/111", "prompt": "\n\ndef common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [18, 12]\n    >>> common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n    [5,23]\n    >>> common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])\n    [4]\n    \"\"\"\n", "solution": "    \n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "results": [1, 0, 0, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def common_in_nested_lists(nestedlist):\n    return list(set.intersection(*map(set, nestedlist)))", "code_2": "def common_in_nested_lists(nestedlist):\n    return list(filter(lambda x: all(x in sublist for sublist in nestedlist), nestedlist[0]))", "code_3": "def common_in_nested_lists(nestedlist):\n    return [item for item in nestedlist[0] if all(item in sublist for sublist in nestedlist)]", "code_4": "def common_in_nested_lists(nestedlist):\n    return list(reduce(lambda x, y: set(x) & set(y), nestedlist))", "code_5": "def common_in_nested_lists(nestedlist):\n    return list(set(nestedlist[0]).intersection(*nestedlist))", "code_6": "def common_in_nested_lists(nestedlist):\n    return [item for item in nestedlist[0] if all(item in sublist for sublist in nestedlist[1:])]", "code_7": "def common_in_nested_lists(nestedlist):\n    return [item for item in nestedlist[0] if all(item in sublist for sublist in nestedlist[1:])]", "code_8": "def common_in_nested_lists(nestedlist):\n    return list(set(nestedlist[0]).intersection(*map(set, nestedlist[1:])))", "code_9": "def common_in_nested_lists(nestedlist):\n    return list(reduce(set.intersection, map(set, nestedlist)))", "code_10": "def common_in_nested_lists(nestedlist):\n    return [item for item in nestedlist[0] if all(item in sublist for sublist in nestedlist[1:])]", "pass@3": 0.7083333333333333, "nDCG@10": 0.37466610587647853}
{"task_id": "MBPP/112", "prompt": "\n\ndef perimeter(diameter,height) :\n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    >>> perimeter(2,4)\n    12\n    >>> perimeter(1,2)\n    6\n    >>> perimeter(3,1)\n    8\n    \"\"\"\n", "solution": "     \n    return 2*(diameter+height)  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def perimeter(d, h): return 2 * 3.141592653589793 * d + 2 * h", "code_2": "import math\ndef perimeter(d, h): return 2 * math.pi * d + 2 * h", "code_3": "from math import pi\ndef perimeter(d, h): return 2 * pi * d + 2 * h", "code_4": "def perimeter(d, h): return 2 * (3.141592653589793 * d + h)", "code_5": "def perimeter(d, h): return 2 * (d + h) * 3.141592653589793", "code_6": "def perimeter(d, h): return 2 * (d + h) * 3.14", "code_7": "def perimeter(d, h): return 2 * (d + h) * 3.1416", "code_8": "def perimeter(d, h): return 2 * (d + h) * 3.14159", "code_9": "def perimeter(d, h): return 2 * (d + h) * 3.14159265359", "code_10": "def perimeter(d, h): return 2 * (d + h) * 3.14159265358979323846", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/113", "prompt": "\n\ndef check_integer(text):\n \"\"\"\n Write a function to check if a string represents an integer or not.\n >>> check_integer(\"python\")\n False\n >>> check_integer(\"1\")\n True\n >>> check_integer(\"12345\")\n True\n \"\"\"\n", "solution": " \n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_integer(text):\n    return text.isdigit()", "code_2": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "code_3": "import re\ndef check_integer(text):\n    return bool(re.match(r'^-?\\d+$', text))", "code_4": "def check_integer(text):\n    return text.strip('-').isdigit()", "code_5": "def check_integer(text):\n    return text.replace('-', '', 1).isdigit()", "code_6": "def check_integer(text):\n    return all(char.isdigit() for char in text)", "code_7": "def check_integer(text):\n    return text.lstrip('-').isdigit()", "code_8": "def check_integer(text):\n    return text[1:].isdigit() if text.startswith('-') else text.isdigit()", "code_9": "def check_integer(text):\n    return text.count('-') <= 1 and text.replace('-', '').isdigit()", "code_10": "def check_integer(text):\n    return text.replace('-', '', 1).isdigit() if text.startswith('-') else text.isdigit()", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/114", "prompt": "\n\ndef assign_freq(test_list):\n  \"\"\"\n  Write a function to assign frequency to each tuple in the given tuple list.\n  >>> assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] )\n  '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n  >>> assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] )\n  '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n  >>> assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] )\n  '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n  \"\"\"\n", "solution": "  from collections import Counter \n  \n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef assign_freq(test_list):\n    return [t + (c,) for t, c in Counter(test_list).items()]", "code_2": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    return [t + (c,) for t, c in freq.items()]", "code_3": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    return [t + (c,) for t, c in freq.items()]", "code_4": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq[t] + 1 if t in freq else 1\n    return [t + (c,) for t, c in freq.items()]", "code_5": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.setdefault(t, 0) + 1\n    return [t + (c,) for t, c in freq.items()]", "code_6": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        try:\n            freq[t] += 1\n        except KeyError:\n            freq[t] = 1\n    return [t + (c,) for t, c in freq.items()]", "code_7": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    return [t + (freq[t],) for t in set(test_list)]", "code_8": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    return [t + (c,) for t, c in sorted(freq.items())]", "code_9": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    return sorted([t + (c,) for t, c in freq.items()])", "code_10": "def assign_freq(test_list):\n    freq = {}\n    for t in test_list:\n        freq[t] = freq.get(t, 0) + 1\n    return sorted([t + (c,) for t, c in freq.items()], key=lambda x: (-x[-1], x))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/115", "prompt": "\n\ndef empty_dit(list1):\n \"\"\"\n Write a function to check whether all dictionaries in a list are empty or not.\n >>> empty_dit([{},{},{}])\n True\n >>> empty_dit([{1,2},{},{}])\n False\n >>> empty_dit({})\n True\n \"\"\"\n", "solution": " \n empty_dit=all(not d for d in list1)\n return empty_dit", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def empty_dit(lst):\n    return all(not d for d in lst)", "code_2": "def empty_dit(lst):\n    return all(map(lambda d: not d, lst))", "code_3": "def empty_dit(lst):\n    return len([d for d in lst if d]) == 0", "code_4": "def empty_dit(lst):\n    return sum(bool(d) for d in lst) == 0", "code_5": "def empty_dit(lst):\n    return not any(d for d in lst)", "code_6": "def empty_dit(lst):\n    return not any(map(bool, lst))", "code_7": "def empty_dit(lst):\n    return all(len(d) == 0 for d in lst)", "code_8": "def empty_dit(lst):\n    return sum(len(d) for d in lst) == 0", "code_9": "def empty_dit(lst):\n    return not any(len(d) > 0 for d in lst)", "code_10": "def empty_dit(lst):\n    return all(d == {} for d in lst)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/116", "prompt": "\n\ndef tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    >>> tuple_to_int((1,2,3))\n    123\n    >>> tuple_to_int((4,5,6))\n    456\n    >>> tuple_to_int((5,6,7))\n    567\n    \"\"\"\n", "solution": "    \n    result = int(''.join(map(str,nums)))\n    return result", "results": [1, 1, 1, 0, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def tuple_to_int(nums):\n    return int(''.join(map(str, nums)))", "code_2": "def tuple_to_int(nums):\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result", "code_3": "def tuple_to_int(nums):\n    return sum(digit * 10**i for i, digit in enumerate(nums[::-1]))", "code_4": "def tuple_to_int(nums):\n    return reduce(lambda x, y: x * 10 + y, nums)", "code_5": "def tuple_to_int(nums):\n    return int(''.join(str(num) for num in nums))", "code_6": "def tuple_to_int(nums):\n    return int(''.join(str(i) for i in nums))", "code_7": "def tuple_to_int(nums):\n    return int(''.join(map(str, reversed(nums))))", "code_8": "def tuple_to_int(nums):\n    return int(''.join(str(i) for i in reversed(nums)))", "code_9": "def tuple_to_int(nums):\n    return int(''.join(str(num) for num in reversed(nums)))", "code_10": "def tuple_to_int(nums):\n    return int(''.join(str(i) for i in nums[::-1]))", "pass@3": 0.9166666666666666, "nDCG@10": 0.6325414799409712}
{"task_id": "MBPP/117", "prompt": "\n\ndef list_to_float(test_list):\n  \"\"\"\n  Write a function to convert all possible convertible elements in the list to float.\n  >>> list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )\n  '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n  >>> list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] )\n  '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n  >>> list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] )\n  '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n  \"\"\"\n", "solution": "  \n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def list_to_float(test_list):\n    return [(float(i), float(j)) for i, j in test_list]", "code_2": "def list_to_float(test_list):\n    return list(map(lambda x: (float(x[0]), float(x[1])), test_list))", "code_3": "def list_to_float(test_list):\n    return [tuple(float(i) for i in t) for t in test_list]", "code_4": "def list_to_float(test_list):\n    return [tuple(map(float, t)) for t in test_list]", "code_5": "def list_to_float(test_list):\n    return [(float(t[0]), float(t[1])) for t in test_list]", "code_6": "def list_to_float(test_list):\n    return [tuple(map(float, t)) for t in test_list]", "code_7": "def list_to_float(test_list):\n    return [(float(i), float(j)) for (i, j) in test_list]", "code_8": "def list_to_float(test_list):\n    return [(float(t[0]), float(t[1])) for t in test_list]", "code_9": "def list_to_float(test_list):\n    return [tuple(map(float, t)) for t in test_list]", "code_10": "def list_to_float(test_list):\n    return [(float(i), float(j)) for i, j in test_list]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/118", "prompt": "\n\ndef string_to_list(string):\n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    >>> string_to_list(\"python programming\")\n    ['python','programming']\n    >>> string_to_list(\"lists tuples strings\")\n    ['lists','tuples','strings']\n    >>> string_to_list(\"write a program\")\n    ['write','a','program']\n    \"\"\"\n", "solution": "     \n    lst = list(string.split(\" \")) \n    return lst", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using the `split()` method:\n      def string_to_list(string): return string.split()", "code_2": "Using list comprehension:\n      def string_to_list(string): return [word for word in string.split()]", "code_3": "Using the `map()` function:\n      def string_to_list(string): return list(map(str, string.split()))", "code_4": "Using the `re.split()` function from the `re` module:\n      import re\n   def string_to_list(string): return re.split('\\s', string)", "code_5": "Using the `shlex.split()` function from the `shlex` module:\n      import shlex\n   def string_to_list(string): return shlex.split(string)", "code_6": "Using the `str.partition()` method in a loop:\n      def string_to_list(string):\n       lst = []\n       while string:\n           word, _, string = string.partition(' ')\n           lst.append(word)\n       return lst", "code_7": "Using the `itertools.groupby()` function:\n      import itertools\n   def string_to_list(string):\n       return [''.join(group) for k, group in itertools.groupby(string, key=' '.__ne__) if k]", "code_8": "Using the `nltk.word_tokenize()` function from the `nltk` module:\n      import nltk\n   def string_to_list(string): return nltk.word_tokenize(string)", "code_9": "Using the `textwrap.wrap()` function from the `textwrap` module:\n      import textwrap\n   def string_to_list(string): return textwrap.wrap(string)", "code_10": "Using the `ast.literal_eval()` function from the `ast` module:\n      import ast\n   def string_to_list(string): return ast.literal_eval('[\"' + '\",\"'.join(string.split()) + '\"]')", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/119", "prompt": "\n\ndef search(arr,n) :\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    >>> search([1,1,2,2,3],5)\n    3\n    >>> search([1,1,3,3,4,4,5,5,7,7,8],11)\n    8\n    >>> search([1,2,2,3,3,4,4],7)\n    1\n    \"\"\"\n", "solution": "    \n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "results": [1, 1, 1, 0, 0, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def search(arr, n):\n    for i in range(0, n - 1, 2):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]", "code_2": "def search(arr, n):\n    return [x for x in arr if arr.count(x) == 1][0]", "code_3": "def search(arr, n):\n    return next(x for x in arr if arr.count(x) == 1)", "code_4": "def search(arr, n):\n    return reduce(lambda x, y: x ^ y, arr)", "code_5": "def search(arr, n):\n    return set(arr).difference(*[arr[i::2] for i in range(2)])", "code_6": "def search(arr, n):\n    return list(filter(lambda x: arr.count(x) == 1, arr))[0]", "code_7": "def search(arr, n):\n    return list(set(arr) - set(arr[::2]))[0]", "code_8": "def search(arr, n):\n    return list(set(arr) - set(arr[1::2]))[0]", "code_9": "def search(arr, n):\n    return list(set(arr) - set(arr[::-2]))[0]", "code_10": "def search(arr, n):\n    return list(set(arr) - set(arr[1::-2]))[0]", "pass@3": 0.9166666666666666, "nDCG@10": 0.6168295842361275}
{"task_id": "MBPP/120", "prompt": "\n\ndef max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    36\n    >>> max_product_tuple([(10,20), (15,2), (5,10)] )\n    200\n    >>> max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\n    484\n    \"\"\"\n", "solution": "    \n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "results": [1, 1, 1, 0, 0, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_product_tuple(lst):\n    return max(a*b for a, b in lst)", "code_2": "def max_product_tuple(lst):\n    return max(map(lambda x: x[0]*x[1], lst))", "code_3": "def max_product_tuple(lst):\n    return max(prod for prod in map(lambda x: x[0]*x[1], lst))", "code_4": "def max_product_tuple(lst):\n    return max(reduce(lambda x, y: x*y, t) for t in lst)", "code_5": "def max_product_tuple(lst):\n    return max(functools.reduce(operator.mul, t) for t in lst)", "code_6": "def max_product_tuple(lst):\n    return max(math.prod(t) for t in lst)", "code_7": "def max_product_tuple(lst):\n    return max(np.prod(t) for t in lst)", "code_8": "def max_product_tuple(lst):\n    return max(a*b for t in lst for a, b in [t])", "code_9": "def max_product_tuple(lst):\n    return max(a*b for t in lst for a, b in (t,))", "code_10": "def max_product_tuple(lst):\n    return max(a*b for t in lst for a, b in [t])", "pass@3": 0.9666666666666667, "nDCG@10": 0.668306326910793}
{"task_id": "MBPP/121", "prompt": "\n\ndef check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    >>> check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n    True\n    >>> check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n    False\n    >>> check_triplet([10, 4, 2, 3, 5], 5, 15, 0)\n    True\n    \"\"\"\n", "solution": "    \n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n-2):\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n    return False", "code_2": "def check_triplet(A, n, sum):\n    s = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = sum - (A[i] + A[j])\n            if x in s:\n                return True\n            else:\n                s.add(A[j])\n    return False", "code_3": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n    return False", "code_4": "def check_triplet(A, n, sum):\n    s = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = sum - (A[i] + A[j])\n            if x in s and x != A[i] and x != A[j]:\n                return True\n            else:\n                s.add(A[j])\n    return False", "code_5": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n                while l < r and A[l] == A[l - 1]:\n                    l += 1\n            else:\n                r -= 1\n                while l < r and A[r] == A[r + 1]:\n                    r -= 1\n    return False", "code_6": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n            while l < r and A[l] == A[l - 1]:\n                l += 1\n            while l < r and A[r] == A[r + 1]:\n                r -= 1\n    return False", "code_7": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n                while l < r and A[l] == A[l - 1]:\n                    l += 1\n            else:\n                r -= 1\n                while l < r and A[r] == A[r + 1]:\n                    r -= 1\n    return False", "code_8": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n            while l < r and A[l] == A[l - 1]:\n                l += 1\n            while l < r and A[r] == A[r + 1]:\n                r -= 1\n    return False", "code_9": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n            while l < r and A[l] == A[l - 1]:\n                l += 1\n            while l < r and A[r] == A[r + 1]:\n                r -= 1\n    return False", "code_10": "def check_triplet(A, n, sum):\n    A.sort()\n    for i in range(n - 2):\n        if i > 0 and A[i] == A[i - 1]:\n            continue\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                return True\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n            while l < r and A[l] == A[l - 1]:\n                l += 1\n            while l < r and A[r] == A[r + 1]:\n                r -= 1\n    return False", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/122", "prompt": "\n\ndef smartNumber(n):\n\t\"\"\"\n\tWrite a function to find n\u2019th smart number.\n\t>>> smartNumber(1)\n\t30\n\t>>> smartNumber(50)\n\t273\n\t>>> smartNumber(1000)\n\t2664\n\t\"\"\"\n", "solution": "\tMAX = 3000 \n\t \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1] ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def smartNumber(n):\n\ti, num, cnt = 1, 1, 0\n\twhile cnt < n:\n\t\tif all(num % j != 0 for j in range(2, int(num**0.5) + 1)):\n\t\t\tcnt += 1\n\t\tnum += 1\n\treturn num - 1", "code_2": "def smartNumber(n):\n\tprimes = [2]\n\ti, num = 3, 30\n\twhile len(primes) < n:\n\t\tif all(num % p != 0 for p in primes):\n\t\t\tprimes.append(num)\n\t\tnum += 2\n\treturn primes[-1]", "code_3": "def smartNumber(n):\n\tdef is_prime(num):\n\t\tif num < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(num**0.5) + 1):\n\t\t\tif num % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\tcnt, num = 0, 1\n\twhile cnt < n:\n\t\tif is_prime(num):\n\t\t\tcnt += 1\n\t\tnum += 1\n\treturn num - 1", "code_4": "def smartNumber(n):\n\tfrom sympy import isprime\n\tcnt, num = 0, 1\n\twhile cnt < n:\n\t\tif isprime(num):\n\t\t\tcnt += 1\n\t\tnum += 1\n\treturn num - 1", "code_5": "def smartNumber(n):\n\tfrom itertools import count, islice\n\tdef is_prime(num):\n\t\treturn num > 1 and all(num % i for i in islice(count(2), int(num**0.5) - 1))\n\treturn next(islice(filter(is_prime, count(1)), n - 1, None))", "code_6": "def smartNumber(n):\n\tfrom sympy import primerange\n\treturn list(primerange(1, n * 10))[n - 1]", "code_7": "def smartNumber(n):\n\tfrom sympy import primepi\n\treturn int(primepi(n * 10))", "code_8": "def smartNumber(n):\n\tfrom sympy import prime\n\treturn prime(n)", "code_9": "def smartNumber(n):\n\tfrom math import log\n\tfrom itertools import count, islice\n\tdef is_prime(num):\n\t\treturn num > 1 and all(num % i for i in islice(count(2), int(log(num, i)) - 1))\n\treturn next(islice(filter(is_prime, count(1)), n - 1, None))", "code_10": "def smartNumber(n):\n\tfrom sympy import primerange\n\treturn list(primerange(1, n * 15))[n - 1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/123", "prompt": "\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    >>> amicable_numbers_sum(999)\n    504\n    >>> amicable_numbers_sum(9999)\n    31626\n    >>> amicable_numbers_sum(99)\n    0\n    \"\"\"\n", "solution": "    \n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n    return sum(i for i in range(1, limit) if sum_divisors(sum_divisors(i)) == i and i != sum_divisors(i))", "code_2": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        return sum(i for i in range(1, n//2+1) if n % i == 0)\n    return sum(i for i in range(1, limit) if sum_divisors(i) < i and sum_divisors(sum_divisors(i)) == i)", "code_3": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        return sum(i for i in range(2, int(n**0.5)+1) if n % i == 0) * 2 + 1 if n > 1 else 0\n    return sum(i for i in range(1, limit) if sum_divisors(i) < i and sum_divisors(sum_divisors(i)) == i)", "code_4": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                s += i + n//i\n        return s\n    return sum(i for i in range(1, limit) if sum_divisors(i) < i and sum_divisors(sum_divisors(i)) == i)", "code_5": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if i == n//i:\n                    s += i\n                else:\n                    s += i + n//i\n        return s\n    return sum(i for i in range(1, limit) if sum_divisors(i) < i and sum_divisors(sum_divisors(i)) == i)", "code_6": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                s += i + n//i\n        return s if s < n else 0\n    return sum(i for i in range(1, limit) if sum_divisors(sum_divisors(i)) == i)", "code_7": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                s += i\n                if i != n//i:\n                    s += n//i\n        return s\n    return sum(i for i in range(1, limit) if sum_divisors(i) < i and sum_divisors(sum_divisors(i)) == i)", "code_8": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                s += i + n//i\n        return s if s < n else 0\n    sum_divisors = [sum_divisors(i) for i in range(limit)]\n    return sum(i for i in range(1, limit) if sum_divisors[i] < i and sum_divisors[sum_divisors[i]] == i)", "code_9": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                s += i\n                if i != n//i:\n                    s += n//i\n        return s if s < n else 0\n    sum_divisors = [sum_divisors(i) for i in range(limit)]\n    return sum(i for i in range(1, limit) if sum_divisors[sum_divisors[i]] == i)", "code_10": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        s = 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                s += i\n                if i != n//i:\n                    s += n//i\n        return s\n    sum_divisors = [sum_divisors(i) for i in range(limit)]\n    return sum(i for i in range(1, limit) if sum_divisors[i] < i and sum_divisors[sum_divisors[i]] == i)", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/124", "prompt": "\n\ndef angle_complex(a,b):\n  \"\"\"\n  Write a function to get the angle of a complex number.\n  >>> angle_complex(0,1j)\n  1.5707963267948966\n  >>> angle_complex(2,1j)\n  0.4636476090008061\n  >>> angle_complex(0,2j)\n  1.5707963267948966\n  \"\"\"\n", "solution": "  import cmath\n  \n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import cmath\ndef angle_complex(a, b):\n    return cmath.phase(complex(a, b))", "code_2": "import math\ndef angle_complex(a, b):\n    return math.atan2(b, a)", "code_3": "def angle_complex(a, b):\n    return (b / ((a ** 2 + b ** 2) ** 0.5)) if a > 0 else (math.pi - b / ((a ** 2 + b ** 2) ** 0.5)) if a < 0 else (math.pi / 2 if b > 0 else -math.pi / 2 if b < 0 else 0)", "code_4": "def angle_complex(a, b):\n    return math.acos(a / ((a ** 2 + b ** 2) ** 0.5)) if b >= 0 else -math.acos(a / ((a ** 2 + b ** 2) ** 0.5))", "code_5": "def angle_complex(a, b):\n    return math.asin(b / ((a ** 2 + b ** 2) ** 0.5)) if a >= 0 else (math.pi - math.asin(b / ((a ** 2 + b ** 2) ** 0.5))) if a < 0 else (math.pi / 2 if b > 0 else -math.pi / 2)", "code_6": "def angle_complex(a, b):\n    return math.atan(b / a) if a > 0 else (math.pi + math.atan(b / a)) if a < 0 else (math.pi / 2 if b > 0 else -math.pi / 2 if b < 0 else 0)", "code_7": "def angle_complex(a, b):\n    return math.log((a ** 2 + b ** 2) ** 0.5) + 1j * math.atan2(b, a)", "code_8": "def angle_complex(a, b):\n    return 2 * math.atan(b / (math.sqrt(a ** 2 + b ** 2) + a))", "code_9": "def angle_complex(a, b):\n    return math.copysign(1, b) * math.acos(a / ((a ** 2 + b ** 2) ** 0.5))", "code_10": "def angle_complex(a, b):\n    return math.copysign(1, b) * math.asin(b / ((a ** 2 + b ** 2) ** 0.5))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/125", "prompt": "\n\ndef find_length(string, n):\n\t\"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t>>> find_length(\"11000010001\", 11)\n\t6\n\t>>> find_length(\"10111\", 5)\n\t1\n\t>>> find_length(\"11011101100101\", 14)\n\t2\n\t\"\"\"\n", "solution": "\t \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0", "results": [0, 1, 0, 0, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_length(string, n):\n    count = [0] * n\n    count[0] = -1 if string[0] == '1' else 1\n    for i in range(1, n):\n        count[i] = count[i - 1] + (-1 if string[i] == '1' else 1)\n    return max(count) - min(count)", "code_2": "def find_length(string, n):\n    count = 0\n    max_diff = 0\n    min_count = 0\n    for i in range(n):\n        count += -1 if string[i] == '1' else 1\n        max_diff = max(max_diff, count - min_count)\n        min_count = min(min_count, count)\n    return max_diff", "code_3": "def find_length(string, n):\n    count = [0] * (2 * n + 1)\n    count[n] = 0\n    max_diff = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += -1 if string[i] == '1' else 1\n        max_diff = max(max_diff, curr_sum - count[n + curr_sum])\n        if count[n + curr_sum] == 0:\n            count[n + curr_sum] = i + 1\n    return max_diff", "code_4": "def find_length(string, n):\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + (-1 if string[i - 1] == '1' else 1)\n    return max(prefix_sum) - min(prefix_sum)", "code_5": "def find_length(string, n):\n    count = 0\n    max_diff = 0\n    min_count = 0\n    for i in range(n):\n        count += -1 if string[i] == '1' else 1\n        if count < min_count:\n            min_count = count\n        elif count - min_count > max_diff:\n            max_diff = count - min_count\n    return max_diff", "code_6": "def find_length(string, n):\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        count[i] = count[i - 1] + (-1 if string[i - 1] == '1' else 1)\n    return max(count) - min(count)", "code_7": "def find_length(string, n):\n    count = 0\n    max_diff = 0\n    min_count = 0\n    for i in range(n):\n        count += -1 if string[i] == '1' else 1\n        if count < min_count:\n            min_count = count\n        max_diff = max(max_diff, count - min_count)\n    return max_diff", "code_8": "def find_length(string, n):\n    count = [0] * (2 * n + 1)\n    count[n] = -1\n    max_diff = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += -1 if string[i] == '1' else 1\n        if count[n + curr_sum] != -1:\n            max_diff = max(max_diff, i + 1 - count[n + curr_sum])\n        else:\n            count[n + curr_sum] = i + 1\n    return max_diff", "code_9": "def find_length(string, n):\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        count[i] = count[i - 1] + (-1 if string[i - 1] == '1' else 1)\n    return max(count) - min(count[1:])", "code_10": "def find_length(string, n):\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        count[i] = count[i - 1] + (-1 if string[i - 1] == '1' else 1)\n    return max(count) - min(count[:-1])", "pass@3": 0.7083333333333333, "nDCG@10": 0.29736948361453563}
{"task_id": "MBPP/126", "prompt": "\n\ndef sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    >>> sum(10,15)\n    6\n    >>> sum(100,150)\n    93\n    >>> sum(4,6)\n    3\n    \"\"\"\n", "solution": "     \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0)", "code_2": "def sum(a, b):\n    return sum(set(i for i in range(1, a + 1) if a % i == 0) & set(i for i in range(1, b + 1) if b % i == 0))", "code_3": "def sum(a, b):\n    return sum(filter(lambda i: a % i == 0 and b % i == 0, range(1, min(a, b) + 1)))", "code_4": "def sum(a, b):\n    return sum(reduce(list.__add__, ([i, b // i] for i in range(1, int(b**0.5) + 1) if b % i == 0 and a % i == 0)))", "code_5": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if not a % i and not b % i)", "code_6": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if all(x % i == 0 for x in (a, b)))", "code_7": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if not (a % i or b % i))", "code_8": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if a % i == b % i == 0)", "code_9": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if not (a % i * b % i))", "code_10": "def sum(a, b):\n    return sum(i for i in range(1, min(a, b) + 1) if not (a % i * b % i))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/127", "prompt": "\n\ndef multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    >>> multiply_int(10,20)\n    200\n    >>> multiply_int(5,10)\n    50\n    >>> multiply_int(4,8)\n    32\n    \"\"\"\n", "solution": "    \n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "results": [1, 1, 1, 1, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def multiply_int(x, y):\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    return result if (x > 0) == (y > 0) else -result", "code_2": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "code_3": "def multiply_int(x, y):\n    result = 0\n    while y != 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result", "code_4": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    else:\n        return sum(x for _ in range(y))", "code_5": "def multiply_int(x, y):\n    result = 0\n    while x != 0:\n        if x & 1:\n            result += y\n        x >>= 1\n        y <<= 1\n    return result", "code_6": "def multiply_int(x, y):\n    return int(bin(x & 0xffffffff)[2:] * y, 2)", "code_7": "def multiply_int(x, y):\n    return functools.reduce(lambda a, b: a + b, [x] * y)", "code_8": "def multiply_int(x, y):\n    return sum(itertools.repeat(x, y))", "code_9": "def multiply_int(x, y):\n    return sum(map(lambda _: x, range(y)))", "code_10": "def multiply_int(x, y):\n    return sum(operator.mul([x], [y])[0])", "pass@3": 0.9666666666666667, "nDCG@10": 0.7151857987862358}
{"task_id": "MBPP/128", "prompt": "\n\ndef long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    >>> long_words(3,\"python is a programming language\")\n    ['python','programming','language']\n    >>> long_words(2,\"writing a program\")\n    ['writing','program']\n    >>> long_words(5,\"sorting list\")\n    ['sorting']\n    \"\"\"\n", "solution": "    \n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n]", "code_2": "def long_words(n, str):\n    return list(filter(lambda word: len(word) > n, str.split()))", "code_3": "def long_words(n, str):\n    words = str.split()\n    return [words[i] for i in range(len(words)) if len(words[i]) > n]", "code_4": "def long_words(n, str):\n    return [word for word in str.split() if word.__len__() > n]", "code_5": "def long_words(n, str):\n    return [word for word in str.split() if word.__gt__(n)]", "code_6": "def long_words(n, str):\n    return [word for word in str.split() if word.__len__() > n.__int__()]", "code_7": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n.__index__()]", "code_8": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n.__float__()]", "code_9": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n.__trunc__()]", "code_10": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n.__round__()]", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/129", "prompt": "\n\ndef magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n    True\n    >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    True\n    >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n    False\n    \"\"\"\n", "solution": "    \n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def magic_square_test(m):\n    s = sum(m[0])\n    return all(sum(row) == s for row in m) and all(sum(col) == s for col in zip(*m)) and sum(m[i][i] for i in range(len(m))) == s and sum(m[i][len(m)-i-1] for i in range(len(m))) == s", "code_2": "def magic_square_test(m):\n    s = sum(m[0])\n    return all(map(lambda x: sum(x) == s, m)) and all(map(lambda x: sum(x) == s, zip(*m))) and sum(m[i][i] for i in range(len(m))) == s and sum(m[i][len(m)-i-1] for i in range(len(m))) == s", "code_3": "def magic_square_test(m):\n    s = sum(m[0])\n    return (all(sum(row) == s for row in m) and\n            all(sum(col) == s for col in zip(*m)) and\n            sum(m[i][i] for i in range(len(m))) == s and\n            sum(m[i][len(m)-i-1] for i in range(len(m))) == s)", "code_4": "def magic_square_test(m):\n    s = sum(m[0])\n    return (sum(map(sum, m)) == s * len(m) and\n            sum(map(sum, zip(*m))) == s * len(m) and\n            sum(m[i][i] for i in range(len(m))) == s and\n            sum(m[i][len(m)-i-1] for i in range(len(m))) == s)", "code_5": "def magic_square_test(m):\n    s = sum(m[0])\n    return (sum(map(sum, m)) == sum(map(sum, zip(*m))) == s * len(m) and\n            sum(m[i][i] for i in range(len(m))) == sum(m[i][len(m)-i-1] for i in range(len(m))) == s)", "code_6": "def magic_square_test(m):\n    s = sum(m[0])\n    return (all(sum(row) == s for row in m + list(zip(*m))) and\n            sum(m[i][i] for i in range(len(m))) == sum(m[i][len(m)-i-1] for i in range(len(m))) == s)", "code_7": "def magic_square_test(m):\n    s = sum(m[0])\n    return (all(sum(row) == s for row in m + [col for col in zip(*m)]) and\n            sum(m[i][i] for i in range(len(m))) == sum(m[i][len(m)-i-1] for i in range(len(m))) == s)", "code_8": "def magic_square_test(m):\n    s = sum(m[0])\n    return (all(sum(row) == s for row in m + [list(col) for col in zip(*m)]) and\n            sum(m[i][i] for i in range(len(m))) == sum(m[i][len(m)-i-1] for i in range(len(m))) == s)", "code_9": "def magic_square_test(m):\n    s = sum(m[0])\n    return (all(sum(row) == s for row in m + [list(col) for col in zip(*m)]) and\n            all(sum(m[i][i] for i in range(len(m))) == sum(m[i][len(m)-i-1] for i in range(len(m))) == s))", "code_10": "def magic_square_test(m):\n    s = sum(m[0])\n    return (all(sum(row) == s for row in m + [list(col) for col in zip(*m)]) and\n            all(sum(m[i][i] for i in range(len(m))) == sum(m[i][len(m)-i-1] for i in range(len(m))) == s) and\n            len(set(sum(row) for row in m)) == 1)", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/130", "prompt": "\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    (2, 5)\n    >>> max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])\n    (8, 2)\n    >>> max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])\n    (20, 3)\n    \"\"\"\n", "solution": "    from collections import defaultdict\n    \n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef max_occurrences(nums):\n    return Counter(nums).most_common(1)[0]", "code_2": "def max_occurrences(nums):\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return max(counts.items(), key=lambda x: x[1])", "code_3": "import heapq\ndef max_occurrences(nums):\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return heapq.nlargest(1, counts.items(), key=lambda x: x[1])[0]", "code_4": "def max_occurrences(nums):\n    counts = [0] * (max(nums) + 1)\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "code_5": "def max_occurrences(nums):\n    counts = [0] * 101\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "code_6": "def max_occurrences(nums):\n    counts = [0] * 10001\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "code_7": "def max_occurrences(nums):\n    counts = [0] * 100001\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "code_8": "def max_occurrences(nums):\n    counts = [0] * 1000001\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "code_9": "def max_occurrences(nums):\n    counts = [0] * 10000001\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "code_10": "def max_occurrences(nums):\n    counts = [0] * (10**6 + 1)\n    for num in nums:\n        counts[num] += 1\n    return (counts.index(max(counts)), max(counts))", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/131", "prompt": "\n\ndef reverse_vowels(str1):\n\t\"\"\"\n\tWrite a python function to reverse only the vowels of a given string.\n\t>>> reverse_vowels(\"Python\")\n\t\"Python\"\n\t>>> reverse_vowels(\"USA\")\n\t\"ASU\"\n\t>>> reverse_vowels(\"ab\")\n\t\"ab\"\n\t\"\"\"\n", "solution": "\t\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "results": [1, 1, 1, 0, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)", "code_2": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n        elif s[i] in vowels:\n            j -= 1\n        elif s[j] in vowels:\n            i += 1\n        else:\n            i, j = i + 1, j - 1\n    return ''.join(s)", "code_3": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)", "code_4": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "code_5": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "code_6": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "code_7": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "code_8": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "code_9": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "code_10": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n        if s[i] not in vowels:\n            i += 1\n        if s[j] not in vowels:\n            j -= 1\n    return ''.join(s)", "pass@3": 1.0, "nDCG@10": 0.8318477135310892}
{"task_id": "MBPP/132", "prompt": "\n\ndef tup_string(tup1):\n  \"\"\"\n  Write a function to convert tuple to a string.\n  >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n  (\"exercises\")\n  >>> tup_string(('p','y','t','h','o','n'))\n  (\"python\")\n  >>> tup_string(('p','r','o','g','r','a','m'))\n  (\"program\")\n  \"\"\"\n", "solution": "  \n  str =  ''.join(tup1)\n  return str", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def tup_string(tup1):\n    return ''.join(tup1)", "code_2": "def tup_string(tup1):\n    return str(tup1).replace(', ', '').replace(\"'\", '').replace('(', '').replace(')', '')", "code_3": "def tup_string(tup1):\n    return ''.join(map(str, tup1))", "code_4": "def tup_string(tup1):\n    return ''.join([i for i in tup1])", "code_5": "def tup_string(tup1):\n    return ''.join(i for i in tup1)", "code_6": "def tup_string(tup1):\n    return ''.join(list(tup1))", "code_7": "def tup_string(tup1):\n    return ''.join(tup1).strip('()')", "code_8": "def tup_string(tup1):\n    return eval(''.join(tup1))", "code_9": "def tup_string(tup1):\n    return ''.join(tup1).strip('()').replace(',', '')", "code_10": "def tup_string(tup1):\n    return ''.join(tup1).replace('(', '').replace(')', '').replace(', ', '')", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/133", "prompt": "\n\ndef sum_negativenum(nums):\n  \"\"\"\n  Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n  >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n  -32\n  >>> sum_negativenum([10,15,-14,13,-18,12,-20])\n  -52\n  >>> sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])\n  -894\n  \"\"\"\n", "solution": "  \n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "sum_negativenum = lambda nums: sum(filter(lambda x: x < 0, nums))", "code_2": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_3": "sum_negativenum = lambda nums: sum(map(lambda x: x if x < 0 else 0, nums))", "code_4": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_5": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_6": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_7": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_8": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_9": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "code_10": "sum_negativenum = lambda nums: sum(x for x in nums if x < 0)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/134", "prompt": "\n\ndef check_last (arr,n,p):\n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    >>> check_last([5,7,10],3,1)\n    \"ODD\"\n    >>> check_last([2,3],2,3)\n    \"EVEN\"\n    >>> check_last([1,2,3],3,1)\n    \"ODD\"\n    \"\"\"\n", "solution": "     \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"\n      ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_last(arr, n, p):\n    return 'EVEN' if (arr[-1] >> p) % 2 == 0 else 'ODD'", "code_2": "def check_last(arr, n, p):\n    return ['ODD', 'EVEN'][(arr[-1] >> p) & 1]", "code_3": "def check_last(arr, n, p):\n    return 'EVEN' if bin(arr[-1] >> p)[-1] == '0' else 'ODD'", "code_4": "def check_last(arr, n, p):\n    return 'EVEN' if (arr[-1] >> p) & 1 == 0 else 'ODD'", "code_5": "def check_last(arr, n, p):\n    return 'EVEN' if not (arr[-1] >> p) & 1 else 'ODD'", "code_6": "def check_last(arr, n, p):\n    return 'EVEN' if not arr[-1] & (1 << p) else 'ODD'", "code_7": "def check_last(arr, n, p):\n    return 'EVEN' if not arr[-1] >> p & 1 else 'ODD'", "code_8": "def check_last(arr, n, p):\n    return 'EVEN' if not arr[-1] >> p & 1 else 'ODD'", "code_9": "def check_last(arr, n, p):\n    return 'EVEN' if not (arr[-1] >> p) & 1 else 'ODD'", "code_10": "def check_last(arr, n, p):\n    return 'EVEN' if not arr[-1] & (1 << p) else 'ODD'", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/135", "prompt": "\n\ndef hexagonal_num(n):\n\t\"\"\"\n\tWrite a function to find the nth hexagonal number.\n\t>>> hexagonal_num(10)\n\t190\n\t>>> hexagonal_num(5)\n\t45\n\t>>> hexagonal_num(7)\n\t91\n\t\"\"\"\n", "solution": "\t \n\treturn n*(2*n - 1) ", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def hexagonal_num(n): return n * (2 * n - 1)", "code_2": "hexagonal_num = lambda n: n * (2 * n - 1)", "code_3": "def hexagonal_num(n): return 2 * n ** 2 - n", "code_4": "hexagonal_num = (lambda n: n * (2 * n - 1)).__get__(None, int)", "code_5": "from operator import mul\nhexagonal_num = lambda n: mul(n, 2 * n - 1)", "code_6": "hexagonal_num = lambda n: n << 2 - n", "code_7": "hexagonal_num = lambda n: n * (n << 1 - 1)", "code_8": "hexagonal_num = lambda n: n * (n * 2 - 1)", "code_9": "hexagonal_num = lambda n: n * (n * 2 - 1)", "code_10": "hexagonal_num = lambda n: n * (n * 2 - 1)", "pass@3": 1.0, "nDCG@10": 0.8482378089219648}
{"task_id": "MBPP/136", "prompt": "\n\ndef cal_electbill(units):\n \"\"\"\n Write a function to calculate electricity bill.\n >>> cal_electbill(75)\n 246.25\n >>> cal_electbill(265)\n 1442.75\n >>> cal_electbill(100)\n 327.5\n \"\"\"\n", "solution": " \n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def cal_electbill(units):\n    if units <= 100:\n        return units * 3.25\n    elif units <= 200:\n        return 325 + (units - 100) * 4.5\n    else:\n        return 325 + 100 * 4.5 + (units - 200) * 5.75", "code_2": "def cal_electbill(units):\n    rates = [3.25, 4.5, 5.75]\n    brackets = [100, 200]\n    bill = 0\n    for i in range(len(brackets)):\n        if units > brackets[i]:\n            bill += (brackets[i] - (0 if i == 0 else brackets[i - 1])) * rates[i]\n        else:\n            bill += (units - (0 if i == 0 else brackets[i - 1])) * rates[i]\n            break\n    return bill", "code_3": "def cal_electbill(units):\n    return (min(units, 100) * 3.25 +\n            max(min(units - 100, 100), 0) * 4.5 +\n            max(units - 200, 0) * 5.75)", "code_4": "def cal_electbill(units):\n    return sum((min(units, bracket) - sum(brackets[:i])) * rate\n               for i, (bracket, rate) in enumerate([(100, 3.25), (200, 4.5), (float('inf'), 5.75)]))", "code_5": "def cal_electbill(units):\n    return sum(map(lambda x: min(x[0], units) * x[1], [(100, 3.25), (200, 4.5), (float('inf'), 5.75)])) - sum(map(lambda x: x[0] * x[1], [(100, 3.25), (200, 4.5)]))", "code_6": "def cal_electbill(units):\n    return sum(map(lambda x: x[0] * x[1], zip([min(units, 100), min(units - 100, 100), max(units - 200, 0)], [3.25, 4.5, 5.75])))", "code_7": "def cal_electbill(units):\n    return sum(map(lambda x: x[0] * x[1], [(units if units < 100 else 100, 3.25), ((units - 100) if units < 200 else 100, 4.5), (units - 200 if units > 200 else 0, 5.75)]))", "code_8": "def cal_electbill(units):\n    return sum(map(lambda x: x[0] * x[1], [(min(units, 100), 3.25), (min(units - 100, 100), 4.5), (max(units - 200, 0), 5.75)]))", "code_9": "def cal_electbill(units):\n    return sum(map(lambda x: x[0] * x[1], [(units if units <= 100 else 100, 3.25), (units - 100 if 100 < units <= 200 else 100, 4.5), (units - 200 if units > 200 else 0, 5.75)]))", "code_10": "def cal_electbill(units):\n    return sum(map(lambda x: x[0] * x[1], [(min(units, 100), 3.25), (min(units - 100, 100), 4.5), (units - 200, 5.75)])) if units > 200 else sum(map(lambda x: x[0] * x[1], [(min(units, 100), 3.25), (units - 100, 4.5)]))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/137", "prompt": "\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.15\n    >>> zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.00\n    >>> zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.00\n    \"\"\"\n", "solution": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def zero_count(nums):\n    return nums.count(0) / len(nums)", "code_2": "def zero_count(nums):\n    zeros = sum(1 for num in nums if num == 0)\n    return zeros / len(nums)", "code_3": "def zero_count(nums):\n    zeros = [num for num in nums if num == 0]\n    return len(zeros) / len(nums)", "code_4": "def zero_count(nums):\n    zeros = filter(lambda x: x == 0, nums)\n    return len(list(zeros)) / len(nums)", "code_5": "def zero_count(nums):\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return zeros / len(nums)", "code_6": "def zero_count(nums):\n    zeros = 0\n    i = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            zeros += 1\n        i += 1\n    return zeros / len(nums)", "code_7": "def zero_count(nums):\n    zeros = 0\n    i = 0\n    while i < len(nums):\n        zeros += nums[i] == 0\n        i += 1\n    return zeros / len(nums)", "code_8": "def zero_count(nums):\n    zeros = 0\n    i = 0\n    while i < len(nums):\n        zeros += 1 if nums[i] == 0 else 0\n        i += 1\n    return zeros / len(nums)", "code_9": "def zero_count(nums):\n    zeros = 0\n    i = 0\n    while i < len(nums):\n        zeros += nums[i] == 0\n        i += 1\n    return zeros / len(nums)", "code_10": "def zero_count(nums):\n    zeros = 0\n    i = 0\n    while i < len(nums):\n        zeros += int(nums[i] == 0)\n        i += 1\n    return zeros / len(nums)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/138", "prompt": "\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    >>> is_Sum_Of_Powers_Of_Two(10)\n    True\n    >>> is_Sum_Of_Powers_Of_Two(7)\n    False\n    >>> is_Sum_Of_Powers_Of_Two(14)\n    True\n    \"\"\"\n", "solution": "     \n    if (n % 2 == 1): \n        return False\n    else: \n        return True", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_Sum_Of_Powers_Of_Two(n):\n    return n & (n - 1) == 0", "code_2": "def is_Sum_Of_Powers_Of_Two(n):\n    return bin(n).count('1') == 1", "code_3": "def is_Sum_Of_Powers_Of_Two(n):\n    return n != 0 and (n & (n - 1)) == 0", "code_4": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & -n) == n", "code_5": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and not (n & (n - 1))", "code_6": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & (n - 1)) == 0", "code_7": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & -n) == n", "code_8": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and not (n & (n - 1))", "code_9": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & (n - 1)) == 0", "code_10": "def is_Sum_Of_Powers_Of_Two(n):\n    return n > 0 and (n & -n) == n", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/139", "prompt": "\n\ndef circle_circumference(r):\n  \"\"\"\n  Write a function to find the circumference of a circle.\n  >>> circle_circumference(10)\n  62.830000000000005\n  >>> circle_circumference(5)\n  31.415000000000003\n  >>> circle_circumference(4)\n  25.132\n  \"\"\"\n", "solution": "  \n  perimeter=2*3.1415*r\n  return perimeter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef circle_circumference(r): return 2 * math.pi * r", "code_2": "from math import pi\ndef circle_circumference(r): return 2 * pi * r", "code_3": "def circle_circumference(r): return 6.283185307179586 * r", "code_4": "def circle_circumference(r): return r * (2 * 3.141592653589793)", "code_5": "def circle_circumference(r): return r * 2 * 3.14159", "code_6": "def circle_circumference(r): return r * 6.28319", "code_7": "def circle_circumference(r): return r * 2 * 3.14", "code_8": "def circle_circumference(r): return r * 6.28", "code_9": "def circle_circumference(r): return r * 2 * 3.1416", "code_10": "def circle_circumference(r): return r * 6.2832", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/140", "prompt": "\n\ndef extract_singly(test_list):\n  \"\"\"\n  Write a function to extract elements that occur singly in the given tuple list.\n  >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n  [3, 4, 5, 7, 1]\n  >>> extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])\n  [1, 2, 3, 4, 7, 8]\n  >>> extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])\n  [7, 8, 9, 10, 11, 12]\n  \"\"\"\n", "solution": "  \n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_singly(test_list):\n    return list(set(sum(test_list, ())))", "code_2": "def extract_singly(test_list):\n    return list({i for sub in test_list for i in sub})", "code_3": "from collections import Counter\ndef extract_singly(test_list):\n    return [k for k, v in Counter(sum(test_list, ())).items() if v == 1]", "code_4": "def extract_singly(test_list):\n    counts = {}\n    for sub in test_list:\n        for i in sub:\n            counts[i] = counts.get(i, 0) + 1\n    return [k for k, v in counts.items() if v == 1]", "code_5": "import itertools\ndef extract_singly(test_list):\n    return [k for k, g in itertools.groupby(sorted(sum(test_list, ()))) if len(list(g)) == 1]", "code_6": "def extract_singly(test_list):\n    counts = [0] * 10000\n    for sub in test_list:\n        for i in sub:\n            counts[i] += 1\n    return [i for i, count in enumerate(counts) if count == 1]", "code_7": "def extract_singly(test_list):\n    counts = [0] * (max(sum(test_list, ())) + 1)\n    for sub in test_list:\n        for i in sub:\n            counts[i] += 1\n    return [i for i, count in enumerate(counts) if count == 1]", "code_8": "def extract_singly(test_list):\n    counts = {}\n    for sub in test_list:\n        for i in sub:\n            if i in counts:\n                counts[i] += 1\n            else:\n                counts[i] = 1\n    return [k for k, v in counts.items() if v == 1]", "code_9": "def extract_singly(test_list):\n    counts = {}\n    for sub in test_list:\n        for i in sub:\n            counts[i] = counts.get(i, 0) + 1\n    return [k for k, v in sorted(counts.items())]", "code_10": "def extract_singly(test_list):\n    counts = {}\n    for sub in test_list:\n        for i in sub:\n            counts[i] = counts.get(i, 0) + 1\n    return sorted(k for k, v in counts.items() if v == 1)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/141", "prompt": "\n\ndef pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    >>> pancake_sort([98, 12, 54, 36, 85])\n    [12, 36, 54, 85, 98]\n    >>> pancake_sort([41, 42, 32, 12, 23])\n    [12, 23, 32, 41, 42]\n    \"\"\"\n", "solution": "    \n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 19, "code_1": "def pancake_sort(nums):\n    for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        nums = nums[:max_idx:-1] + nums[max_idx+1:i] + nums[:max_idx]\n    return nums", "code_2": "def pancake_sort(nums):\n    def flip(end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1", "code_3": "for i in range(len(nums), 0, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_4": "def pancake_sort(nums):\n    def flip(k):\n        i = 0\n        while i < k:\n            nums[i], nums[k] = nums[k], nums[i]\n            i += 1\n            k -= 1", "code_5": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_6": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = nums[:k+1][::-1]", "code_7": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_8": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = nums[k::-1] + nums[k+1:]", "code_9": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_10": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = [nums[i] for i in range(k, -1, -1)]", "code_11": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_12": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = list(reversed(nums[:k+1]))", "code_13": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_14": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = list(nums[i] for i in range(k, -1, -1))", "code_15": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_16": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = [nums[k-i] for i in range(k+1)]", "code_17": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "code_18": "def pancake_sort(nums):\n    def flip(k):\n        nums[:k+1] = [nums[k-i] for i in range(k, -1, -1)]", "code_19": "for i in range(len(nums), 1, -1):\n        max_idx = nums.index(max(nums[:i]))\n        flip(max_idx)\n        flip(i-1)\n    return nums", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/142", "prompt": "\n\ndef count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n    3\n    >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\n    4\n    >>> count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\n    5\n    \"\"\"\n", "solution": "    \n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_samepair(l1, l2, l3):\n    return sum(a == b == c for a, b, c in zip(l1, l2, l3))", "code_2": "def count_samepair(l1, l2, l3):\n    return len([i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]])", "code_3": "def count_samepair(l1, l2, l3):\n    return sum(map(lambda x: x[0] == x[1] == x[2], zip(l1, l2, l3)))", "code_4": "def count_samepair(l1, l2, l3):\n    return sum(1 for a, b, c in zip(l1, l2, l3) if a == b == c)", "code_5": "def count_samepair(l1, l2, l3):\n    return len([i for i, j, k in zip(l1, l2, l3) if i == j == k])", "code_6": "def count_samepair(l1, l2, l3):\n    return sum(i == j and j == k for i, j, k in zip(l1, l2, l3))", "code_7": "def count_samepair(l1, l2, l3):\n    return sum(a == b and b == c for a, b, c in zip(l1, l2, l3))", "code_8": "def count_samepair(l1, l2, l3):\n    return sum(1 for i in range(len(l1)) if l1[i] == l2[i] == l3[i])", "code_9": "def count_samepair(l1, l2, l3):\n    return len([1 for a, b, c in zip(l1, l2, l3) if a == b == c])", "code_10": "def count_samepair(l1, l2, l3):\n    return sum(map(lambda x: x[0] == x[1] and x[1] == x[2], zip(l1, l2, l3)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/143", "prompt": "\n\ndef find_lists(Input):\n\t\"\"\"\n\tWrite a function to find number of lists present in the given tuple.\n\t>>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n\t2\n\t>>> find_lists(([1, 2], [3, 4], [5, 6]))\n\t3\n\t>>> find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1]))\n\t1\n\t\"\"\"\n", "solution": "\t \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_lists(Input):\n    return sum(isinstance(i, list) for i in Input)", "code_2": "def find_lists(Input):\n    return len([i for i in Input if type(i) is list])", "code_3": "def find_lists(Input):\n    return sum(1 for i in Input if isinstance(i, list))", "code_4": "def find_lists(Input):\n    return len(filter(lambda x: isinstance(x, list), Input))", "code_5": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count", "code_6": "def find_lists(Input):\n    return sum(map(lambda x: isinstance(x, list), Input))", "code_7": "def find_lists(Input):\n    return len([i for i in Input if type(i) == list])", "code_8": "def find_lists(Input):\n    return sum(1 for i in Input if type(i) is list)", "code_9": "def find_lists(Input):\n    return len(list(filter(lambda x: type(x) is list, Input)))", "code_10": "def find_lists(Input):\n    return sum(map(lambda x: type(x) is list, Input))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/144", "prompt": "\n\ndef sum_Pairs(arr,n):\n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    >>> sum_Pairs([1,8,9,15,16],5)\n    74\n    >>> sum_Pairs([1,2,3,4],4)\n    10\n    >>> sum_Pairs([1,2,3,4,5,7,9,11,14],9)\n    188\n    \"\"\"\n", "solution": "     \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum", "results": [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_Pairs(arr,n):\n    return sum(abs(arr[i]-arr[j]) for i in range(n) for j in range(i+1,n))", "code_2": "def sum_Pairs(arr,n):\n    return sum(map(lambda i: sum(abs(arr[i]-arr[j]) for j in range(i+1,n)), range(n)))", "code_3": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for j in range(i+1,n)) for i in range(n))", "code_4": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(j)) for j in range(n))", "code_5": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(n)) for j in range(n))//2", "code_6": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(n)) for j in range(n))-sum(arr)", "code_7": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(j+1,n)) for j in range(n-1))", "code_8": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(n-j)) for j in range(n))", "code_9": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(n-j-1)) for j in range(n-1))", "code_10": "def sum_Pairs(arr,n):\n    return sum(sum(abs(arr[i]-arr[j]) for i in range(n-j-1)) for j in range(n-1))*2", "pass@3": 0.9666666666666667, "nDCG@10": 0.7222954974312067}
{"task_id": "MBPP/145", "prompt": "\n\ndef max_Abs_Diff(arr,n):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    >>> max_Abs_Diff((2,1,5,3),4)\n    4\n    >>> max_Abs_Diff((9,3,2,5,1),5)\n    8\n    >>> max_Abs_Diff((3,2,1),3)\n    2\n    \"\"\"\n", "solution": "     \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_Abs_Diff(arr,n):\n    return max(arr) - min(arr)", "code_2": "def max_Abs_Diff(arr,n):\n    min_val = float('inf')\n    max_val = float('-inf')\n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n    return max_val - min_val", "code_3": "def max_Abs_Diff(arr,n):\n    return sorted(arr)[-1] - sorted(arr)[0]", "code_4": "def max_Abs_Diff(arr,n):\n    return abs(max(arr, key=lambda x: abs(x)) - min(arr, key=lambda x: abs(x)))", "code_5": "def max_Abs_Diff(arr,n):\n    return max(map(lambda x: abs(x - min(arr)), arr))", "code_6": "def max_Abs_Diff(arr,n):\n    return max(x - y for x in arr for y in arr)", "code_7": "def max_Abs_Diff(arr,n):\n    return max(max(arr) - num for num in arr)", "code_8": "def max_Abs_Diff(arr,n):\n    return max(num - min(arr) for num in arr)", "code_9": "def max_Abs_Diff(arr,n):\n    return max(abs(x - y) for x in arr for y in arr)", "code_10": "def max_Abs_Diff(arr,n):\n    return max(x - y for x in arr for y in arr if x > y)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/146", "prompt": "\n\ndef ascii_value_string(str1):\n  \"\"\"\n  Write a function to find the ascii value of total characters in a string.\n  >>> ascii_value_string(\"python\")\n  112\n  >>> ascii_value_string(\"Program\")\n  80\n  >>> ascii_value_string(\"Language\")\n  76\n  \"\"\"\n", "solution": "  \n  for i in range(len(str1)):\n   return ord(str1[i])", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def ascii_value_string(str1):\n    return sum(ord(c) for c in str1)", "code_2": "def ascii_value_string(str1):\n    return sum(map(ord, str1))", "code_3": "import functools\ndef ascii_value_string(str1):\n    return functools.reduce(lambda x, y: x + y, map(ord, str1))", "code_4": "def ascii_value_string(str1):\n    total = 0\n    for c in str1:\n        total += ord(c)\n    return total", "code_5": "def ascii_value_string(str1):\n    return sum(ord(c) for c in str1 if c.isalpha())", "code_6": "def ascii_value_string(str1):\n    return sum(ord(c) for c in str1 if c.isalnum())", "code_7": "def ascii_value_string(str1):\n    return sum(ord(c) for c in str1 if c.isascii())", "code_8": "def ascii_value_string(str1):\n    return sum(ord(c) for c in str1 if 32 <= ord(c) <= 126)", "code_9": "def ascii_value_string(str1):\n    return sum(map(lambda c: ord(c) if c.isalpha() else 0, str1))", "code_10": "def ascii_value_string(str1):\n    return sum(map(lambda c: ord(c) if c.isalnum() else 0, str1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/147", "prompt": "\n\ndef max_path_sum(tri, m, n):\n\t\"\"\"\n\tWrite a function to find the maximum total path sum in the given triangle.\n\t>>> max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n\t14\n\t>>> max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n\t24\n\t>>> max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n\t53\n\t\"\"\"\n", "solution": "\t \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_2": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_3": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_4": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_5": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_6": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_7": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_8": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_9": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_10": "def max_path_sum(tri, m, n):\n\tfor i in range(m, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tif j < i:\n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/148", "prompt": "\n\ndef sum_digits_twoparts(N) :\n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    >>> sum_digits_twoparts(35)\n    17\n    >>> sum_digits_twoparts(7)\n    7\n    >>> sum_digits_twoparts(100)\n    19\n    \"\"\"\n", "solution": "    def sum_digits_single(x) : \n        ans = 0\n        while x : \n            ans += x % 10\n            x //= 10  \n        return ans \n    def closest(x) : \n        ans = 0\n        while (ans * 10 + 9 <= x) : \n            ans = ans * 10 + 9  \n        return ans   \n     \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_digits_twoparts(N):\n    s = str(N)\n    return sum(int(d) for d in s[:len(s)//2]) + sum(int(d) for d in s[len(s)//2:])", "code_2": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(map(int, s[:mid])) + sum(map(int, s[mid:]))", "code_3": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(int(d) for d in s[:mid]) + sum(int(d) for d in s[mid:])", "code_4": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(map(int, s[:mid])) + sum(map(int, s[mid:]))", "code_5": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(int(d) for d in s[:mid]) + sum(int(d) for d in s[mid:])", "code_6": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(map(int, s[:mid])) + sum(map(int, s[mid:]))", "code_7": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(int(d) for d in s[:mid]) + sum(int(d) for d in s[mid:])", "code_8": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(map(int, s[:mid])) + sum(map(int, s[mid:]))", "code_9": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(int(d) for d in s[:mid]) + sum(int(d) for d in s[mid:])", "code_10": "def sum_digits_twoparts(N):\n    s = str(N)\n    mid = len(s) // 2\n    return sum(map(int, s[:mid])) + sum(map(int, s[mid:]))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/149", "prompt": "\n\ndef longest_subseq_with_diff_one(arr, n):\n\t\"\"\"\n\tWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\t>>> longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n\t6\n\t>>> longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)\n\t3\n\t>>> longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)\n\t7\n\t\"\"\"\n", "solution": "\t \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "results": [1, 0, 0, 0, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_2": "def longest_subseq_with_diff_one(arr, n):\n    freq = [0] * 10001\n    for i in range(n):\n        freq[arr[i]] += 1\n    dp = [0] * 10001\n    dp[0] = freq[0]\n    for i in range(1, 10001):\n        dp[i] = max(dp[i - 1], dp[i - 2] + freq[i] * i)\n    return dp[10000]", "code_3": "def longest_subseq_with_diff_one(arr, n):\n    dp = {}\n    for i in range(n):\n        dp[arr[i]] = dp.get(arr[i] - 1, 0) + 1\n    return max(dp.values())", "code_4": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        if arr[i] - 1 in arr[:i]:\n            dp[i] = max(dp[i], dp[arr.index(arr[i] - 1)] + 1)\n        if arr[i] + 1 in arr[:i]:\n            dp[i] = max(dp[i], dp[arr.index(arr[i] + 1)] + 1)\n    return max(dp)", "code_5": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n                break\n    return max(dp)", "code_6": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n                break\n    return max(dp)", "code_7": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = dp[j] + 1\n                break\n    return max(dp)", "code_8": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = dp[j] + 1\n                break\n    return max(dp)", "code_9": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_10": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "pass@3": 0.9166666666666666, "nDCG@10": 0.4977962688668736}
{"task_id": "MBPP/150", "prompt": "\n\ndef does_Contain_B(a,b,c):\n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    >>> does_Contain_B(1,7,3)\n    True\n    >>> does_Contain_B(1,-3,5)\n    False\n    >>> does_Contain_B(3,2,5)\n    False\n    \"\"\"\n", "solution": "     \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def does_Contain_B(a, b, c):\n    return (b - a) % c == 0", "code_2": "def does_Contain_B(a, b, c):\n    return b >= a and (b - a) % c == 0", "code_3": "def does_Contain_B(a, b, c):\n    if b < a:\n        return False\n    return (b - a) % c == 0", "code_4": "def does_Contain_B(a, b, c):\n    return b >= a and not (b - a) % c", "code_5": "def does_Contain_B(a, b, c):\n    if b < a:\n        return False\n    return not (b - a) % c", "code_6": "def does_Contain_B(a, b, c):\n    return b >= a and (b - a) // c * c == b - a", "code_7": "def does_Contain_B(a, b, c):\n    if b < a:\n        return False\n    return (b - a) // c * c == b - a", "code_8": "def does_Contain_B(a, b, c):\n    return b >= a and not (b - a) // c * c - (b - a)", "code_9": "def does_Contain_B(a, b, c):\n    if b < a:\n        return False\n    return not (b - a) // c * c - (b - a)", "code_10": "def does_Contain_B(a, b, c):\n    return b >= a and (b - a) / c == (b - a) // c", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/151", "prompt": "\n\ndef is_coprime(x,y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    >>> is_coprime(17,13)\n    True\n    >>> is_coprime(15,21)\n    False\n    >>> is_coprime(25,45)\n    False\n    \"\"\"\n", "solution": "    def gcd(p,q):\n        while q != 0:\n            p, q = q,p%q\n        return p\n    \n    return gcd(x,y) == 1", "results": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 11, "code_1": "def is_coprime(x, y):\n    return math.gcd(x, y) == 1", "code_2": "def is_coprime(x, y):\n    while y:\n        x, y = y, x % y\n    return x == 1", "code_3": "def is_coprime(x, y):\n    return fractions.gcd(x, y) == 1", "code_4": "def is_coprime(x, y):\n    return all(x % i != 0 or y % i != 0 for i in range(2, min(x, y) + 1))", "code_5": "def is_coprime(x, y):\n    return set(primefactors(x)).isdisjoint(primefactors(y))", "code_6": "def is_coprime(x, y):\n    return len(set(primefactors(x)) & set(primefactors(y))) == 0", "code_7": "def is_coprime(x, y):\n    return not any(i in primefactors(x) for i in primefactors(y))", "code_8": "def is_coprime(x, y):\n    return not bool(set(primefactors(x)) & set(primefactors(y)))", "code_9": "def is_coprime(x, y):\n    return not set(primefactors(x)).intersection(primefactors(y))", "code_10": "def is_coprime(x, y):\n    return len(set(primefactors(x)).intersection(primefactors(y))) == 0", "code_11": "Note: The `primefactors` function is not defined in the provided code snippets. It should be a helper function that returns the prime factors of a given number.", "pass@3": 0.5333333333333333, "nDCG@10": 0.23365080824310536}
{"task_id": "MBPP/152", "prompt": "\n\ndef merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    >>> merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n    [1, 2, 3, 4, 5, 6, 7, 9]\n    >>> merge_sort([7, 25, 45, 78, 11, 33, 19])\n    [7, 11, 19, 25, 33, 45, 78]\n    >>> merge_sort([3, 1, 4, 9, 8])\n    [1, 3, 4, 8, 9]\n    \"\"\"\n", "solution": "    def merge(a,b):\n        c = []\n        while len(a) != 0 and len(b) != 0:\n            if a[0] < b[0]:\n                c.append(a[0])\n                a.remove(a[0])\n            else:\n                c.append(b[0])\n                b.remove(b[0])\n        if len(a) == 0:\n            c += b\n        else:\n            c += a\n        return c\n    \n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n", "results": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 18, "code_1": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_2": "def merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result", "code_3": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = x[:mid]\n    right = x[mid:]\n    merge_sort(left)\n    merge_sort(right)\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            x[k] = left[i]\n            i += 1\n        else:\n            x[k] = right[j]\n            j += 1\n        k += 1\n    while i < len(left):\n        x[k] = left[i]\n        i += 1\n        k += 1\n    while j < len(right):\n        x[k] = right[j]\n        j += 1\n        k += 1", "code_4": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return sorted(left + right)", "code_5": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = x[:mid]\n    right = x[mid:]\n    merge_sort(left)\n    merge_sort(right)\n    x[:] = merge(left, right)", "code_6": "def merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result", "code_7": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_8": "def merge(left, right):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result", "code_9": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_10": "def merge(left, right):\n    result = []\n    while left and right:\n        if left[-1] > right[-1]:\n            result.append(left.pop())\n        else:\n            result.append(right.pop())\n    result.extend(left[::-1])\n    result.extend(right[::-1])\n    return result[::-1]", "code_11": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_12": "def merge(left, right):\n    result = []\n    while left and right:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left or right)\n    return result", "code_13": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_14": "def merge(left, right):\n    result = []\n    while left and right:\n        if left[-1] > right[-1]:\n            result.append(left.pop())\n        else:\n            result.append(right.pop())\n    result.extend(left or right)\n    return result[::-1]", "code_15": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_16": "def merge(left, right):\n    result = []\n    while left and right:\n        if left[0] <= right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result", "code_17": "def merge_sort(x):\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)", "code_18": "def merge(left, right):\n    result = []\n    while left and right:\n        if left[-1] >= right[-1]:\n            result.append(left.pop())\n        else:\n            result.append(right.pop())\n    result.extend(left or right)\n    return result[::-1]", "pass@3": 0.30000000000000004, "nDCG@10": 0.09478836436955079}
{"task_id": "MBPP/153", "prompt": "\n\ndef parabola_vertex(a, b, c):\n  \"\"\"\n  Write a function to find the vertex of a parabola.\n  >>> parabola_vertex(5,3,2)\n  (-0.3, 1.55)\n  >>> parabola_vertex(9,8,4)\n  (-0.4444444444444444, 2.2222222222222223)\n  >>> parabola_vertex(2,4,6)\n  (-1.0, 4.0)\n  \"\"\"\n", "solution": "   \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (x, y)", "code_2": "def parabola_vertex(a, b, c):\n    return (-b / (2 * a), a * (-b / (2 * a))**2 + b * (-b / (2 * a)) + c)", "code_3": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    return (x, a * x**2 + b * x + c)", "code_4": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    return (x, (4 * a * c - b**2) / (4 * a))", "code_5": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    return (x, c - b**2 / (4 * a))", "code_6": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = (4 * a * c - b**2) / (4 * a)\n    return (x, y)", "code_7": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x * x + b * x + c\n    return (x, y)", "code_8": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x * x + b * x + c\n    return (round(x, 2), round(y, 2))", "code_9": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = a * x**2 + b * x + c\n    return (float('%.2f' % x), float('%.2f' % y))", "code_10": "def parabola_vertex(a, b, c):\n    x = -b / (2 * a)\n    y = c - b**2 / (4 * a)\n    return (x, y)", "pass@3": 1.0, "nDCG@10": 0.8643145546088339}
{"task_id": "MBPP/154", "prompt": "\n\ndef specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)\n    [2,2,5]\n    \"\"\"\n", "solution": "    \n    result = [i[N] for i in nums]\n    return result", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def specified_element(nums, N):\n    return [row[N] for row in nums]", "code_2": "def specified_element(nums, N):\n    return list(map(lambda row: row[N], nums))", "code_3": "def specified_element(nums, N):\n    return [*map(itemgetter(N), nums)]", "code_4": "def specified_element(nums, N):\n    return [*map(operator.itemgetter(N), nums)]", "code_5": "def specified_element(nums, N):\n    return [*itertools.starmap(operator.getitem, zip(nums, itertools.repeat(N)))]", "code_6": "def specified_element(nums, N):\n    return [*itertools.chain.from_iterable(itertools.islice(row, N, N+1) for row in nums)]", "code_7": "def specified_element(nums, N):\n    return [*itertools.compress(itertools.chain.from_iterable(nums), itertools.cycle([0]*N + [1] + [0]*(len(nums[0])-N-1)))]", "code_8": "def specified_element(nums, N):\n    return [*itertools.compress(itertools.chain.from_iterable(nums), itertools.islice(itertools.cycle([0]*N + [1]), len(nums)*len(nums[0])))]", "code_9": "def specified_element(nums, N):\n    return [*itertools.compress(itertools.chain.from_iterable(nums), itertools.chain.from_iterable(itertools.repeat([0]*N + [1], len(nums))))]", "code_10": "def specified_element(nums, N):\n    return [*itertools.compress(itertools.chain.from_iterable(nums), itertools.chain.from_iterable(itertools.repeat(itertools.chain.from_iterable([[0]*N, [1], [0]*(len(nums[0])-N-1)]), len(nums))))]", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/155", "prompt": "\n\ndef even_bit_toggle_number(n) :\n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number(20)\n    30\n    >>> even_bit_toggle_number(30)\n    20\n    \"\"\"\n", "solution": "     \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def even_bit_toggle_number(n): return n ^ 0xAAAAAAAA", "code_2": "def even_bit_toggle_number(n): return n ^ 0x55555555", "code_3": "def even_bit_toggle_number(n): return n ^ 0x5555555555555555", "code_4": "def even_bit_toggle_number(n): return n ^ 0xAAAAAAAAAAAAAAAA", "code_5": "def even_bit_toggle_number(n): return n ^ ((1 << 32) - 1) // 3", "code_6": "def even_bit_toggle_number(n): return n ^ ((1 << 64) - 1) // 3", "code_7": "def even_bit_toggle_number(n): return n ^ sum(1 << i for i in range(0, 64, 2))", "code_8": "def even_bit_toggle_number(n): return int(bin(n)[2:].translate(str.maketrans('01', '10')), 2)", "code_9": "def even_bit_toggle_number(n): return int(''.join('1' if c == '0' else '0' for c in bin(n)[2:]), 2)", "code_10": "def even_bit_toggle_number(n): return int(''.join(str(int(c) ^ 1) for c in bin(n)[2:]), 2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/156", "prompt": "\n\ndef tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    >>> tuple_int_str((('333', '33'), ('1416', '55')))\n    ((333, 33), (1416, 55))\n    >>> tuple_int_str((('999', '99'), ('1000', '500')))\n    ((999, 99), (1000, 500))\n    >>> tuple_int_str((('666', '66'), ('1500', '555')))\n    ((666, 66), (1500, 555))\n    \"\"\"\n", "solution": "    \n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def tuple_int_str(t):\n    return tuple(tuple(map(int, i)) for i in t)", "code_2": "def tuple_int_str(t):\n    return tuple(tuple(int(j) for j in i) for i in t)", "code_3": "def tuple_int_str(t):\n    return tuple(map(lambda x: tuple(map(int, x)), t))", "code_4": "def tuple_int_str(t):\n    return tuple(map(lambda x: tuple(int(y) for y in x), t))", "code_5": "def tuple_int_str(t):\n    return tuple(map(lambda x: tuple(map(int, list(x))), t))", "code_6": "def tuple_int_str(t):\n    return tuple(map(lambda x: tuple(int(y) for y in list(x)), t))", "code_7": "def tuple_int_str(t):\n    return tuple(tuple(int(x[i]) for i in range(len(x))) for x in t)", "code_8": "def tuple_int_str(t):\n    return tuple(tuple(int(y) for y in x) for x in t)", "code_9": "def tuple_int_str(t):\n    return tuple(tuple(int(j) for j in list(i)) for i in t)", "code_10": "def tuple_int_str(t):\n    return tuple(tuple(int(x) for x in y) for y in t)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/157", "prompt": "\n\ndef encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    >>> encode_list('automatically')\n    [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    >>> encode_list('python')\n    [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n    \"\"\"\n", "solution": "    from itertools import groupby\n    \n    return [[len(list(group)), key] for key, group in groupby(list1)]", "results": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def encode_list(lst):\n    return [[lst.count(i), i] for i in sorted(set(lst), key=lst.index)]", "code_2": "from itertools import groupby\ndef encode_list(lst):\n    return [[len(list(group)), key] for key, group in groupby(lst)]", "code_3": "def encode_list(lst):\n    return [[sum(1 for _ in group), key] for key, group in itertools.groupby(lst)]", "code_4": "def encode_list(lst):\n    return [[len(list(v)), k] for k, v in itertools.groupby(lst)]", "code_5": "def encode_list(lst):\n    return [[sum(1 for _ in g), k] for k, g in itertools.groupby(sorted(lst))]", "code_6": "def encode_list(lst):\n    return [[len(list(v)), k] for k, v in itertools.groupby(sorted(lst))]", "code_7": "def encode_list(lst):\n    return [[sum(1 for _ in g), k] for k, g in itertools.groupby(sorted(lst), key=lambda x: x)]", "code_8": "def encode_list(lst):\n    return [[len(list(v)), k] for k, v in itertools.groupby(sorted(lst), key=lambda x: x)]", "code_9": "def encode_list(lst):\n    return [[sum(1 for _ in g), k] for k, g in itertools.groupby(sorted(lst), key=lambda x: x if isinstance(x, str) else repr(x))]", "code_10": "def encode_list(lst):\n    return [[len(list(v)), k] for k, v in itertools.groupby(sorted(lst, key=lambda x: x if isinstance(x, str) else repr(x)))]", "pass@3": 0.30000000000000004, "nDCG@10": 0.13886244387355456}
{"task_id": "MBPP/158", "prompt": "\n\ndef min_Ops(arr,n,k):\n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    >>> min_Ops([2,2,2,2],4,3)\n    0\n    >>> min_Ops([4,2,6,8],4,3)\n    -1\n    >>> min_Ops([21,33,9,45,63],5,6)\n    24\n    \"\"\"\n", "solution": "     \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if sum(x%k for x in arr)==0 else -1", "code_2": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if all(x%k==0 for x in arr) else -1", "code_3": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if not any(x%k for x in arr) else -1", "code_4": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if sum(x%k==0 for x in arr)==n else -1", "code_5": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if all(x%k==0 for x in arr)==True else -1", "code_6": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if not any(x%k!=0 for x in arr) else -1", "code_7": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if all(x%k==0 for x in arr)==n else -1", "code_8": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if not any(x%k for x in arr)==True else -1", "code_9": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if sum(x%k==0 for x in arr)==len(arr) else -1", "code_10": "def min_Ops(arr,n,k):\n    arr.sort()\n    mid = arr[n//2]\n    return sum(abs(x-mid) for x in arr) if all(x%k==0 for x in arr)==len(arr) else -1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/159", "prompt": "\n\ndef month_season(month,days):\n \"\"\"\n Write a function to print the season for the given month and day.\n >>> month_season('January',4)\n ('winter')\n >>> month_season('October',28)\n ('autumn')\n >>> month_season('June',6)\n ('spring')\n \"\"\"\n", "solution": " \n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season", "results": [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def month_season(month, days):\n    seasons = {\n        'winter': ['January', 'February', 'March'],\n        'spring': ['April', 'May', 'June'],\n        'summer': ['July', 'August', 'September'],\n        'autumn': ['October', 'November', 'December']\n    }\n    for season, months in seasons.items():\n        if month in months:\n            return season", "code_2": "def month_season(month, days):\n    if month in ['January', 'February', 'March']:\n        return 'winter'\n    elif month in ['April', 'May', 'June']:\n        return 'spring'\n    elif month in ['July', 'August', 'September']:\n        return 'summer'\n    else:\n        return 'autumn'", "code_3": "def month_season(month, days):\n    winter = ['January', 'February', 'March']\n    spring = ['April', 'May', 'June']\n    summer = ['July', 'August', 'September']\n    autumn = ['October', 'November', 'December']\n    if month in winter:\n        return 'winter'\n    elif month in spring:\n        return 'spring'\n    elif month in summer:\n        return 'summer'\n    else:\n        return 'autumn'", "code_4": "def month_season(month, days):\n    if month == 'January' or month == 'February' or month == 'March':\n        return 'winter'\n    elif month == 'April' or month == 'May' or month == 'June':\n        return 'spring'\n    elif month == 'July' or month == 'August' or month == 'September':\n        return 'summer'\n    else:\n        return 'autumn'", "code_5": "def month_season(month, days):\n    if month in ('January', 'February', 'March'):\n        return 'winter'\n    elif month in ('April', 'May', 'June'):\n        return 'spring'\n    elif month in ('July', 'August', 'September'):\n        return 'summer'\n    else:\n        return 'autumn'", "code_6": "def month_season(month, days):\n    if month <= 'March':\n        return 'winter'\n    elif month <= 'June':\n        return 'spring'\n    elif month <= 'September':\n        return 'summer'\n    else:\n        return 'autumn'", "code_7": "def month_season(month, days):\n    seasons = ['winter'] * 3 + ['spring'] * 3 + ['summer'] * 3 + ['autumn'] * 3\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    return seasons[months.index(month)]", "code_8": "def month_season(month, days):\n    return {\n        'January': 'winter',\n        'February': 'winter',\n        'March': 'spring',\n        'April': 'spring',\n        'May': 'spring',\n        'June': 'summer',\n        'July': 'summer',\n        'August': 'summer',\n        'September': 'autumn',\n        'October': 'autumn',\n        'November': 'autumn',\n        'December': 'winter'\n    }[month]", "code_9": "def month_season(month, days):\n    return ['winter', 'spring', 'summer', 'autumn'][(ord(month[0]) - 65) // 3]", "code_10": "def month_season(month, days):\n    return ['winter', 'spring', 'summer', 'autumn'][(['January', 'April', 'July', 'October'].index(month) + 3) // 3]", "pass@3": 0.9666666666666667, "nDCG@10": 0.7222954974312067}
{"task_id": "MBPP/160", "prompt": "\n\ndef solution (a, b, n):\n\t\"\"\"\n\tWrite a function to find x and y that satisfies ax + by = n.\n\t>>> solution(2, 3, 7)\n\t('x = ', 2, ', y = ', 1)\n\t>>> solution(4, 2, 7)\n\t'No solution'\n\t>>> solution(1, 13, 17)\n\t('x = ', 4, ', y = ', 1)\n\t\"\"\"\n", "solution": "\t \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\") ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def solution(a, b, n):\n    for x in range(n//a + 1):\n        if (n - a*x) % b == 0:\n            return 'x = ', x, ', y = ', (n - a*x) // b\n    return 'No solution'", "code_2": "def solution(a, b, n):\n    g = gcd(a, b)\n    if n % g != 0:\n        return 'No solution'\n    a //= g\n    b //= g\n    n //= g\n    x = (n * pow(b, -1, a)) % a\n    y = (n - a*x) // b\n    return 'x = ', x, ', y = ', y", "code_3": "def solution(a, b, n):\n    x, y, u, v = 0, 1, 1, 0\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    if n % b != 0:\n        return 'No solution'\n    return 'x = ', x * (n // b), ', y = ', y * (n // b)", "code_4": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    x = 0\n    while x * a <= n:\n        y = (n - a * x) / b\n        if y.is_integer():\n            return 'x = ', x, ', y = ', int(y)\n        x += 1\n    return 'No solution'", "code_5": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            return 'x = ', x, ', y = ', (n - a * x) // b\n    return 'No solution'", "code_6": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    for y in range(n // b + 1):\n        if (n - b * y) % a == 0:\n            return 'x = ', (n - b * y) // a, ', y = ', y\n    return 'No solution'", "code_7": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    for x in range(n // a + 1):\n        for y in range(n // b + 1):\n            if a * x + b * y == n:\n                return 'x = ', x, ', y = ', y\n    return 'No solution'", "code_8": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    for x in range(n // a + 1):\n        if 0 <= n - a * x <= b * (n // b):\n            y = (n - a * x) // b\n            return 'x = ', x, ', y = ', y\n    return 'No solution'", "code_9": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    for x in range(n // a, -1, -1):\n        if (n - a * x) % b == 0:\n            return 'x = ', x, ', y = ', (n - a * x) // b\n    return 'No solution'", "code_10": "def solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution' if n != 0 else 'Infinite solutions'\n    if a == 0:\n        return 'y = ', n // b if n % b == 0 else 'No solution'\n    if b == 0:\n        return 'x = ', n // a if n % a == 0 else 'No solution'\n    for y in range(n // b, -1, -1):\n        if (n - b * y) % a == 0:\n            return 'x = ', (n - b * y) // a, ', y = ', y\n    return 'No solution'", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/161", "prompt": "\n\ndef remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    >>> remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])\n    [1, 3, 5, 7, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])\n    [2, 4, 6, 8, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])\n    [1, 2, 3, 4, 6, 8, 9, 10]\n    \"\"\"\n", "solution": "    \n    result = [x for x in list1 if x not in list2]\n    return result", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]", "code_2": "def remove_elements(list1, list2):\n    return list(set(list1) - set(list2))", "code_3": "def remove_elements(list1, list2):\n    return list(filter(lambda x: x not in list2, list1))", "code_4": "def remove_elements(list1, list2):\n    return [i for i in list1 if list1.count(i) == list2.count(i)]", "code_5": "def remove_elements(list1, list2):\n    return [i for i in list1 if not any(j == i for j in list2)]", "code_6": "def remove_elements(list1, list2):\n    return [i for i in list1 if all(j != i for j in list2)]", "code_7": "def remove_elements(list1, list2):\n    return [i for i in list1 if i not in set(list2)]", "code_8": "def remove_elements(list1, list2):\n    return list(set(list1).difference(set(list2)))", "code_9": "def remove_elements(list1, list2):\n    return [i for i in list1 if list2.count(i) == 0]", "code_10": "def remove_elements(list1, list2):\n    return [i for i in list1 if not i in list2]", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/162", "prompt": "\n\ndef sum_series(n):\n  \"\"\"\n  Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n  >>> sum_series(6)\n  12\n  >>> sum_series(10)\n  30\n  >>> sum_series(9)\n  25\n  \"\"\"\n", "solution": "  \n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "results": [1, 0, 1, 0, 1, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def sum_series(n):\n  return sum(range(n, 0, -2))", "code_2": "def sum_series(n):\n  return (n // 2) * (n + (n % 2))", "code_3": "def sum_series(n):\n  return sum(i for i in range(n, 0, -2))", "code_4": "def sum_series(n):\n  return sum(filter(lambda x: x % 2 == 0, range(n, 0, -1)))", "code_5": "def sum_series(n):\n  return sum(range(n, 0, -2)) if n > 0 else 0", "code_6": "def sum_series(n):\n  return sum(range(n, 0, -2)) if n > 1 else n", "code_7": "def sum_series(n):\n  return sum(i for i in range(n, 0, -2) if i % 2 == 0)", "code_8": "def sum_series(n):\n  return sum(range(n + (n % 2), 0, -2))", "code_9": "def sum_series(n):\n  return sum(range(n, 0, -2)) if n > 2 else n // 2 * (n + 1)", "code_10": "def sum_series(n):\n  return sum(range(n - (n % 2), 0, -2))", "pass@3": 0.9166666666666666, "nDCG@10": 0.5599332595218056}
{"task_id": "MBPP/163", "prompt": "\n\ndef area_polygon(s,l):\n  \"\"\"\n  Write a function to calculate the area of a regular polygon.\n  >>> area_polygon(4,20)\n  400.00000000000006\n  >>> area_polygon(10,15)\n  1731.1969896610804\n  >>> area_polygon(9,7)\n  302.90938549487214\n  \"\"\"\n", "solution": "  from math import tan, pi\n  \n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "results": [1, 0, 0, 0, 0, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "import math\ndef area_polygon(s,l): return (s * l**2) / (4 * math.tan(math.pi/s))", "code_2": "import math\ndef area_polygon(s,l): return 0.5 * s * l * l * math.cot(math.pi/s)", "code_3": "import math\ndef area_polygon(s,l): return 0.25 * s * l * l / math.sin(math.pi/s)", "code_4": "import math\ndef area_polygon(s,l): return 0.5 * s * l**2 / math.tan(math.pi/s)", "code_5": "import math\ndef area_polygon(s,l): return 0.25 * s * l**2 * math.csc(math.pi/s)", "code_6": "import math\ndef area_polygon(s,l): return 0.5 * s * l**2 * math.cot(math.pi/s)", "code_7": "import math\ndef area_polygon(s,l): return 0.25 * s * l**2 / math.sin(math.pi/s)", "code_8": "import math\ndef area_polygon(s,l): return 0.5 * s * l**2 * math.csc(math.pi/s)", "code_9": "import math\ndef area_polygon(s,l): return s * l**2 / (4 * math.tan(math.pi/s))", "code_10": "import math\ndef area_polygon(s,l): return 0.5 * s * l**2 * math.cot(math.pi/s)", "pass@3": 0.5333333333333333, "nDCG@10": 0.2863459897524693}
{"task_id": "MBPP/164", "prompt": "\n\ndef areEquivalent(num1,num2):\n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    >>> areEquivalent(36,57)\n    False\n    >>> areEquivalent(2,4)\n    False\n    >>> areEquivalent(23,47)\n    True\n    \"\"\"\n", "solution": "    import math \n    def divSum(n): \n        sum = 1; \n        i = 2; \n        while(i * i <= n): \n            if (n % i == 0): \n                sum = (sum + i +math.floor(n / i)); \n            i += 1; \n        return sum; \n     \n    return divSum(num1) == divSum(num2); ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 20, "code_1": "def sum_divisors(n):\n    s = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            s += i + n // i\n    return s", "code_2": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_3": "def sum_divisors(n):\n    return sum(i for i in range(1, n // 2 + 1) if n % i == 0) + n", "code_4": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_5": "def sum_divisors(n):\n    s = 1 + n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                s += i\n            else:\n                s += (i + n // i)\n            i += 1\n    return s", "code_6": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_7": "def sum_divisors(n):\n    s = 1 + n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            s += i + n // i\n    return s", "code_8": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_9": "def sum_divisors(n):\n    s = 1 + n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                s += i\n            else:\n                s += (i + n // i)\n            i += 1\n    return s", "code_10": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_11": "def sum_divisors(n):\n    s = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            s += i + n // i\n    return s + n", "code_12": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_13": "def sum_divisors(n):\n    s = 1 + n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            s += i\n            if i != n // i:\n                s += n // i\n            i += 1\n    return s", "code_14": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_15": "def sum_divisors(n):\n    s = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            s += i\n            if i != n // i:\n                s += n // i\n    return s + n", "code_16": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_17": "def sum_divisors(n):\n    s = 1 + n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            s += i\n            if i * (n // i) != n:\n                s += n // i\n            i += 1\n    return s", "code_18": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "code_19": "def sum_divisors(n):\n    s = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            s += i\n            if i * i != n:\n                s += n // i\n    return s + n", "code_20": "def areEquivalent(num1, num2):\n    return sum_divisors(num1) == sum_divisors(num2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/165", "prompt": "\n\ndef count_char_position(str1):\n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    >>> count_char_position(\"xbcefg\")\n    2\n    >>> count_char_position(\"ABcED\")\n    3\n    >>> count_char_position(\"AbgdeF\")\n    5\n    \"\"\"\n", "solution": "     \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def count_char_position(s): return sum(1 for i, c in enumerate(s) if (ord(c.lower()) - 97) == i)", "code_2": "def count_char_position(s): return sum(c.lower() == chr(i + 97) for i, c in enumerate(s))", "code_3": "def count_char_position(s): return sum(a == b for a, b in zip(s.lower(), 'abcdefghijklmnopqrstuvwxyz'))", "code_4": "def count_char_position(s): return sum(ord(c.lower()) - 97 == i for i, c in enumerate(s))", "code_5": "def count_char_position(s): return sum(c == chr(i + 97) for i, c in enumerate(s.lower()))", "code_6": "def count_char_position(s): return sum(a == b for a, b in zip(map(str.lower, s), 'abcdefghijklmnopqrstuvwxyz'))", "code_7": "def count_char_position(s): return sum(ord(c.lower()) - 97 == i for i, c in enumerate(s.lower()))", "code_8": "def count_char_position(s): return sum(c.lower() == chr(i + 97) for i, c in enumerate(s.lower()))", "code_9": "def count_char_position(s): return sum(a == b for a, b in zip(s, 'abcdefghijklmnopqrstuvwxyz')) if s.islower() else sum(a == b for a, b in zip(s.lower(), 'abcdefghijklmnopqrstuvwxyz'))", "code_10": "def count_char_position(s): return sum(ord(c) - 87 == i for i, c in enumerate(s.upper()))", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/166", "prompt": "\n\ndef find_even_Pair(A,N):\n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    >>> find_even_Pair([5,4,7,2,1],5)\n    4\n    >>> find_even_Pair([7,2,8,1,0,5,11],7)\n    9\n    >>> find_even_Pair([1,2,3],3)\n    1\n    \"\"\"\n", "solution": "     \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in range(N):\n        for j in range(32):\n            if A[i] & (1 << j):\n                c[j] += 1\n    return sum((c[i]*(N-c[i])) for i in range(32) if not (c[i] & 1))", "code_2": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        for j in range(32):\n            if i & (1 << j):\n                c[j] += 1\n    return sum((x*(N-x)) for x in c if x%2==0)", "code_3": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        b = bin(i)[2:]\n        for j in range(len(b)):\n            if b[-j-1] == '1':\n                c[j] += 1\n    return sum((x*(N-x)) for x in c if x%2==0)", "code_4": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            if i & 1:\n                c[j] += 1\n            i >>= 1\n            j += 1\n    return sum((x*(N-x)) for x in c if x%2==0)", "code_5": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            c[j] += i & 1\n            i >>= 1\n            j += 1\n    return sum((x*(N-x)) for x in c if x%2==0)", "code_6": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            c[j] += i & 1\n            i >>= 1\n            j += 1\n    return sum((x*(N-x) for x in c)) // 2", "code_7": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            c[j] += i & 1\n            i >>= 1\n            j += 1\n    return sum((x*(N-x)) for x in c[::2])", "code_8": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            c[j] += i & 1\n            i >>= 1\n            j += 1\n    return sum((c[i]*(N-c[i])) for i in range(0,32,2))", "code_9": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            c[j] += i & 1\n            i >>= 1\n            j += 1\n    return sum((c[i]*(N-c[i])) for i in range(32) if i%2==0)", "code_10": "def find_even_Pair(A,N):\n    c = [0]*32\n    for i in A:\n        j = 0\n        while i:\n            c[j] += i & 1\n            i >>= 1\n            j += 1\n    return sum((c[i]*(N-c[i])) for i in range(0,32,2)) + sum((c[i]*(N-c[i])) for i in range(1,32,2)) // 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/167", "prompt": "\n\ndef next_Power_Of_2(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    >>> next_Power_Of_2(0)\n    1\n    >>> next_Power_Of_2(5)\n    8\n    >>> next_Power_Of_2(17)\n    32\n    \"\"\"\n", "solution": "     \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count; ", "results": [0, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def next_Power_Of_2(n):\n    return 1 << (n - 1).bit_length()", "code_2": "def next_Power_Of_2(n):\n    p = 1\n    while p < n:\n        p <<= 1\n    return p", "code_3": "def next_Power_Of_2(n):\n    return 2 ** ((n - 1).bit_length())", "code_4": "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        p = 1\n        while p < n:\n            p = p << 1\n        return p", "code_5": "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()", "code_6": "def next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        p = 1\n        while p < n:\n            p *= 2\n        return p", "code_7": "def next_Power_Of_2(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()", "code_8": "def next_Power_Of_2(n):\n    return 1 << (n - 1).bit_length() if n != 0 else 1", "code_9": "def next_Power_Of_2(n):\n    return 2 ** (n - 1).bit_length() if n != 0 else 1", "code_10": "def next_Power_Of_2(n):\n    return 1 if n == 0 else 1 << (n - 1).bit_length()", "pass@3": 1.0, "nDCG@10": 0.6698623505528799}
{"task_id": "MBPP/168", "prompt": "\n\ndef frequency(a,x):\n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    >>> frequency([1,2,3],4)\n    0\n    >>> frequency([1,2,2,3,3,3,4],3)\n    3\n    >>> frequency([0,1,2,3,1,2],1)\n    2\n    \"\"\"\n", "solution": "     \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def frequency(a, x):\n    return a.count(x)", "code_2": "def frequency(a, x):\n    return sum(1 for i in a if i == x)", "code_3": "from collections import Counter\ndef frequency(a, x):\n    return Counter(a)[x]", "code_4": "def frequency(a, x):\n    return len([i for i in a if i == x])", "code_5": "import numpy as np\ndef frequency(a, x):\n    return np.count_nonzero(np.array(a) == x)", "code_6": "def frequency(a, x):\n    freq = 0\n    for i in a:\n        if i == x:\n            freq += 1\n    return freq", "code_7": "def frequency(a, x):\n    freq = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            freq += 1\n    return freq", "code_8": "def frequency(a, x):\n    freq = 0\n    i = 0\n    while i < len(a):\n        if a[i] == x:\n            freq += 1\n        i += 1\n    return freq", "code_9": "def frequency(a, x):\n    freq = 0\n    i = 0\n    while i < len(a):\n        freq += 1 if a[i] == x else 0\n        i += 1\n    return freq", "code_10": "def frequency(a, x):\n    freq = 0\n    i = 0\n    while i < len(a):\n        freq += a[i] == x\n        i += 1\n    return freq", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/169", "prompt": "\n\ndef get_pell(n):\n\t\"\"\"\n\tWrite a function to calculate the nth pell number.\n\t>>> get_pell(4)\n\t12\n\t>>> get_pell(7)\n\t169\n\t>>> get_pell(8)\n\t408\n\t\"\"\"\n", "solution": "\t \n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\tfor i in range(3, n+1): \n\t\tc = 2 * b + a \n\t\ta = b \n\t\tb = c \n\treturn b ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def get_pell(n):\n\ta, b = 0, 1\n\tfor _ in range(n):\n\t\ta, b = b, 2 * b + a\n\treturn a", "code_2": "def get_pell(n):\n\ta, b = 0, 1\n\twhile n > 0:\n\t\ta, b, n = b, 2 * b + a, n - 1\n\treturn a", "code_3": "def get_pell(n):\n\tpell = [0, 1] + [0] * (n - 1)\n\tfor i in range(2, n + 1):\n\t\tpell[i] = 2 * pell[i - 1] + pell[i - 2]\n\treturn pell[n]", "code_4": "def get_pell(n):\n\tpell = [0, 1]\n\twhile len(pell) <= n:\n\t\tpell.append(2 * pell[-1] + pell[-2])\n\treturn pell[n]", "code_5": "def get_pell(n):\n\tif n <= 1:\n\t\treturn n\n\ta, b = 0, 1\n\tfor _ in range(2, n + 1):\n\t\ta, b = b, 2 * b + a\n\treturn b", "code_6": "def get_pell(n):\n\tif n == 0:\n\t\treturn 0\n\ta, b = 0, 1\n\tfor _ in range(n - 1):\n\t\ta, b = b, 2 * b + a\n\treturn b", "code_7": "def get_pell(n):\n\tpell = [0, 1]\n\tfor _ in range(2, n + 1):\n\t\tpell.append(2 * pell[-1] + pell[-2])\n\treturn pell[n]", "code_8": "def get_pell(n):\n\tpell = [0, 1]\n\twhile len(pell) < n + 1:\n\t\tpell.append(2 * pell[-1] + pell[-2])\n\treturn pell[n]", "code_9": "def get_pell(n):\n\ta, b = 0, 1\n\tfor _ in range(n):\n\t\ta, b = b, a + 2 * b\n\treturn a", "code_10": "def get_pell(n):\n\tpell = [0, 1]\n\tfor _ in range(2, n + 1):\n\t\tpell.append(pell[-1] * 2 + pell[-2])\n\treturn pell[n]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/170", "prompt": "\n\ndef sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)\n    29\n    >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)\n    16\n    >>> sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)\n    38\n    \"\"\"\n", "solution": "                                                                                                                                                                                                    \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_range_list(lst, m, n): return sum(lst[m:n+1])", "code_2": "def sum_range_list(lst, m, n): return sum(lst[i] for i in range(m, n+1))", "code_3": "import numpy as np\ndef sum_range_list(lst, m, n): return np.sum(lst[m:n+1])", "code_4": "from functools import reduce\ndef sum_range_list(lst, m, n): return reduce(lambda a, b: a + b, lst[m:n+1])", "code_5": "def sum_range_list(lst, m, n): return sum(lst[m:n+1]) if m < n else 0", "code_6": "def sum_range_list(lst, m, n): return sum(lst[m:n+1]) if 0 <= m < n < len(lst) else 0", "code_7": "def sum_range_list(lst, m, n): return sum(lst[m:n+1]) if m < len(lst) and n < len(lst) else 0", "code_8": "def sum_range_list(lst, m, n): return sum(lst[m:n+1]) if m >= 0 and n < len(lst) else 0", "code_9": "def sum_range_list(lst, m, n): return sum(lst[m:n+1]) if 0 <= m <= n < len(lst) else 0", "code_10": "def sum_range_list(lst, m, n): return sum(lst[m:n+1]) if m < n and m >= 0 and n < len(lst) else 0", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/171", "prompt": "\n\ndef perimeter_pentagon(a):\n  \"\"\"\n  Write a function to find the perimeter of a pentagon.\n  >>> perimeter_pentagon(5)\n  25\n  >>> perimeter_pentagon(10)\n  50\n  >>> perimeter_pentagon(15)\n  75\n  \"\"\"\n", "solution": "  import math\n  \n  perimeter=(5*a)\n  return perimeter", "results": [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def perimeter_pentagon(a): return a * 5", "code_2": "perimeter_pentagon = lambda a: a * 5", "code_3": "def perimeter_pentagon(a): return sum([a] * 5)", "code_4": "from operator import mul\ndef perimeter_pentagon(a): return mul(a, 5)", "code_5": "import numpy as np\ndef perimeter_pentagon(a): return np.prod([a, 5])", "code_6": "def perimeter_pentagon(a): return reduce(lambda x, y: x + y, [a] * 5)", "code_7": "def perimeter_pentagon(a): return sum(itertools.repeat(a, 5))", "code_8": "def perimeter_pentagon(a): return functools.reduce(operator.add, [a] * 5)", "code_9": "def perimeter_pentagon(a): return a * 5 if isinstance(a, int) else None", "code_10": "def perimeter_pentagon(a): return a * 5 if type(a) is int else None", "pass@3": 0.9916666666666667, "nDCG@10": 0.7788065869851875}
{"task_id": "MBPP/172", "prompt": "\n\ndef count_occurance(s):\n  \"\"\"\n  Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n  >>> count_occurance(\"letstdlenstdporstd\")\n  3\n  >>> count_occurance(\"truststdsolensporsd\")\n  1\n  >>> count_occurance(\"makestdsostdworthit\")\n  2\n  \"\"\"\n", "solution": "  \n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count", "results": [1, 0, 0, 1, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def count_occurance(s): return s.count('std')", "code_2": "def count_occurance(s): return len(re.findall('std', s))", "code_3": "def count_occurance(s): return sum(1 for _ in re.finditer('std', s))", "code_4": "def count_occurance(s): return sum(s[i:i+3] == 'std' for i in range(len(s)))", "code_5": "def count_occurance(s): return len([i for i in range(len(s)) if s[i:i+3] == 'std'])", "code_6": "def count_occurance(s): return sum(map(lambda x: x=='std', (s[i:i+3] for i in range(len(s)))))", "code_7": "def count_occurance(s): return functools.reduce(lambda c, x: c + (x=='std'), (s[i:i+3] for i in range(len(s))), 0)", "code_8": "def count_occurance(s): return sum(s[i:i+3] == 'std' for i in range(len(s)-2))", "code_9": "def count_occurance(s): return sum(s[i:i+3] == 'std' for i in range(0, len(s), 3))", "code_10": "def count_occurance(s): return sum(s[i:i+3] == 'std' for i in range(len(s)-2) if i % 3 == 0)", "pass@3": 0.9166666666666666, "nDCG@10": 0.5478527392247046}
{"task_id": "MBPP/173", "prompt": "\n\ndef remove_splchar(text):\n \"\"\"\n Write a function to remove everything except alphanumeric characters from a string.\n >>> remove_splchar('python  @#&^%$*program123')\n ('pythonprogram123')\n >>> remove_splchar('python %^$@!^&*()  programming24%$^^()    language')\n ('pythonprogramming24language')\n >>> remove_splchar('python   ^%&^()(+_)(_^&67)                  program')\n ('python67program')\n \"\"\"\n", "solution": " import re\n  \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "results": [0, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef remove_splchar(text):\n return re.sub(r'\\W+', '', text)", "code_2": "def remove_splchar(text):\n return ''.join(e for e in text if e.isalnum())", "code_3": "def remove_splchar(text):\n return ''.join(filter(str.isalnum, text))", "code_4": "def remove_splchar(text):\n return ''.join(c for c in text if c.isalpha() or c.isdigit())", "code_5": "def remove_splchar(text):\n return ''.join(c for c in text if c.isidentifier())", "code_6": "def remove_splchar(text):\n return ''.join(c for c in text if c.isascii() and c.isalnum())", "code_7": "def remove_splchar(text):\n return ''.join(c for c in text if ord(c) in range(48, 58) or ord(c) in range(65, 91) or ord(c) in range(97, 123))", "code_8": "def remove_splchar(text):\n return ''.join(c for c in text if c.lower() in 'abcdefghijklmnopqrstuvwxyz0123456789')", "code_9": "def remove_splchar(text):\n return ''.join(c for c in text if c.upper() in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')", "code_10": "def remove_splchar(text):\n return ''.join(c for c in text if c.isdecimal() or c.isalpha())", "pass@3": 1.0, "nDCG@10": 0.694765116060299}
{"task_id": "MBPP/174", "prompt": "\n\ndef group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    >>> group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])\n    {'python': [1,2,3,4,5]}\n    >>> group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])\n    {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n    \"\"\"\n", "solution": "    \n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d", "code_2": "def group_keyvalue(l):\n    return {k: [v for k_, v in l if k_ == k] for k, _ in l}", "code_3": "from collections import defaultdict\ndef group_keyvalue(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)", "code_4": "from itertools import groupby\ndef group_keyvalue(l):\n    l.sort(key=lambda x: x[0])\n    return {k: [v for _, v in g] for k, g in groupby(l, key=lambda x: x[0])}", "code_5": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d", "code_6": "from collections import defaultdict\ndef group_keyvalue(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d", "code_7": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        d[k] = d.get(k, []) + [v]\n    return d", "code_8": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d", "code_9": "from operator import itemgetter\ndef group_keyvalue(l):\n    l.sort(key=itemgetter(0))\n    return {k: [v for _, v in g] for k, g in groupby(l, key=itemgetter(0))}", "code_10": "def group_keyvalue(l):\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/175", "prompt": "\n\ndef is_valid_parenthese( str1):\n        \"\"\"\n        Write a function to verify validity of a string of parentheses.\n        >>> is_valid_parenthese(\"(){}[]\")\n        True\n        >>> is_valid_parenthese(\"()[{)}\")\n        False\n        >>> is_valid_parenthese(\"()\")\n        True\n        \"\"\"\n", "solution": "        \n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_valid_parenthese(s):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    return not stack", "code_2": "def is_valid_parenthese(s):\n    while '()' in s or '{}' in s or '[]' in s:\n        s = s.replace('()', '').replace('{}', '').replace('[]', '')\n    return not s", "code_3": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return not stack", "code_4": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif len(stack) == 0 or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return len(stack) == 0", "code_5": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack[-1] != '(') or (c == '}' and stack[-1] != '{') or (c == ']' and stack[-1] != '['):\n            return False\n        else:\n            stack.pop()\n    return not stack", "code_6": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return len(stack) == 0", "code_7": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return not stack", "code_8": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return len(stack) == 0", "code_9": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return not stack", "code_10": "def is_valid_parenthese(s):\n    stack = []\n    for c in s:\n        if c in '({[':\n            stack.append(c)\n        elif not stack or (c == ')' and stack.pop() != '(') or (c == '}' and stack.pop() != '{') or (c == ']' and stack.pop() != '['):\n            return False\n    return len(stack) == 0", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/176", "prompt": "\n\ndef perimeter_triangle(a,b,c):\n  \"\"\"\n  Write a function to find the perimeter of a triangle.\n  >>> perimeter_triangle(10,20,30)\n  60\n  >>> perimeter_triangle(3,4,5)\n  12\n  >>> perimeter_triangle(25,35,45)\n  105\n  \"\"\"\n", "solution": "  \n  perimeter=a+b+c\n  return perimeter", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def perimeter_triangle(a, b, c): return a + b + c", "code_2": "perimeter_triangle = lambda a, b, c: a + b + c", "code_3": "def perimeter_triangle(a, b, c): return sum([a, b, c])", "code_4": "def perimeter_triangle(a, b, c): return sum((a, b, c))", "code_5": "from operator import add\ndef perimeter_triangle(a, b, c): return add(a, add(b, c))", "code_6": "import functools\ndef perimeter_triangle(a, b, c): return functools.reduce(lambda x, y: x + y, (a, b, c))", "code_7": "def perimeter_triangle(a, b, c):\n    perimeter = 0\n    for side in (a, b, c):\n        perimeter += side\n    return perimeter", "code_8": "def perimeter_triangle(a, b, c):\n    perimeter = 0\n    perimeter = perimeter + a\n    perimeter = perimeter + b\n    perimeter = perimeter + c\n    return perimeter", "code_9": "def perimeter_triangle(a, b, c):\n    perimeter = a\n    perimeter += b\n    perimeter += c\n    return perimeter", "code_10": "def perimeter_triangle(a, b, c):\n    perimeter = a\n    perimeter += b\n    return perimeter + c", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/177", "prompt": "\n\ndef answer(L,R):\n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    >>> answer(3,8)\n    (3,6)\n    >>> answer(2,6)\n    (2,4)\n    >>> answer(1,3)\n    (1,2)\n    \"\"\"\n", "solution": "     \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def answer(L,R):\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if L <= (i*j)//gcd(i,j) <= R:\n                return (i,j)", "code_2": "import math\ndef answer(L,R):\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            if math.lcm(i,j) <= R:\n                return (i,j)", "code_3": "def gcd(a,b):\n    while b:\n        a,b=b,a%b\n    return a\ndef answer(L,R):\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if L <= (i*j)//gcd(i,j) <= R:\n                return (i,j)", "code_4": "from math import gcd\ndef answer(L,R):\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if L <= (i*j)//gcd(i,j) <= R:\n                return (i,j)", "code_5": "from fractions import gcd\ndef answer(L,R):\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            if L <= (i*j)//gcd(i,j) <= R:\n                return (i,j)", "code_6": "def answer(L,R):\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            if i*j <= R and (i*j)//gcd(i,j) <= R:\n                return (i,j)\ndef gcd(a,b):\n    while b:\n        a,b=b,a%b\n    return a", "code_7": "from math import gcd\ndef answer(L,R):\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            if i*j <= R and (i*j)//gcd(i,j) <= R:\n                return (i,j)", "code_8": "from fractions import gcd\ndef answer(L,R):\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            if i*j <= R and (i*j)//gcd(i,j) <= R:\n                return (i,j)", "code_9": "def answer(L,R):\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            if i*j <= R and (i*j)//gcd(i,j) <= R:\n                return (i,j)\ndef gcd(a,b):\n    return a if b==0 else gcd(b,a%b)", "code_10": "from math import gcd\ndef answer(L,R):\n    for i in range(L,R):\n        for j in range(i+1,R+1):\n            if i*j <= R and (i*j)//gcd(i,j) <= R:\n                return (i,j)\ndef gcd(a,b):\n    return a if b==0 else gcd(b,a%b)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/178", "prompt": "\n\ndef string_literals(patterns,text):\n  \"\"\"\n  Write a function to search some literals strings in a string.\n  >>> string_literals(['language'],'python language')\n  ('Matched!')\n  >>> string_literals(['program'],'python language')\n  ('Not Matched!')\n  >>> string_literals(['python'],'programming language')\n  ('Not Matched!')\n  \"\"\"\n", "solution": "  import re\n  \n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')", "results": [1, 1, 0, 1, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def string_literals(patterns, text):\n    return 'Matched!' if any(pattern in text for pattern in patterns) else 'Not Matched!'", "code_2": "def string_literals(patterns, text):\n    return 'Matched!' if set(patterns).intersection(text.split()) else 'Not Matched!'", "code_3": "def string_literals(patterns, text):\n    return 'Matched!' if re.search('|'.join(map(re.escape, patterns)), text) else 'Not Matched!'", "code_4": "def string_literals(patterns, text):\n    return 'Matched!' if sum(text.count(pattern) for pattern in patterns) > 0 else 'Not Matched!'", "code_5": "def string_literals(patterns, text):\n    return 'Matched!' if functools.reduce(lambda x, y: x or y in text, patterns, False) else 'Not Matched!'", "code_6": "def string_literals(patterns, text):\n    return 'Matched!' if next((True for pattern in patterns if pattern in text), False) else 'Not Matched!'", "code_7": "def string_literals(patterns, text):\n    return 'Matched!' if filter(lambda pattern: pattern in text, patterns) else 'Not Matched!'", "code_8": "def string_literals(patterns, text):\n    return 'Matched!' if [pattern for pattern in patterns if pattern in text] else 'Not Matched!'", "code_9": "def string_literals(patterns, text):\n    return 'Matched!' if sum(1 for pattern in patterns if pattern in text) > 0 else 'Not Matched!'", "code_10": "def string_literals(patterns, text):\n    return 'Matched!' if text.find(next(iter(patterns), '')) != -1 else 'Not Matched!'", "pass@3": 0.9916666666666667, "nDCG@10": 0.7314470771099789}
{"task_id": "MBPP/179", "prompt": "\n\ndef is_num_keith(x):\n\t\"\"\"\n\tWrite a function to find if the given number is a keith number or not.\n\t>>> is_num_keith(14)\n\tTrue\n\t>>> is_num_keith(12)\n\tFalse\n\t>>> is_num_keith(197)\n\tTrue\n\t\"\"\"\n", "solution": "\t \n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\tnext_term = 0 \n\ti = n \n\twhile (next_term < x): \n\t\tnext_term = 0 \n\t\tfor j in range(1,n+1): \n\t\t\tnext_term += terms[i - j] \n\t\tterms.append(next_term) \n\t\ti+=1 \n\treturn (next_term == x) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_num_keith(x):\n    seq = [0, 1]\n    while seq[-1] < x:\n        seq.append(sum(seq[-2:]))\n    return seq[-1] == x", "code_2": "def is_num_keith(x):\n    a, b = 0, 1\n    while b < x:\n        a, b = b, a + b\n    return b == x", "code_3": "def is_num_keith(x):\n    seq = [0, 1]\n    while len(seq) <= x:\n        seq.append(sum(seq[-2:]))\n    return seq[x] == x", "code_4": "def is_num_keith(x):\n    seq = [0, 1]\n    while seq[-1] < x:\n        seq.append(seq[-1] + seq[-2])\n    return seq[-1] == x", "code_5": "def is_num_keith(x):\n    a, b = 0, 1\n    while b < x:\n        a, b = b, a + b\n    return b == x", "code_6": "def is_num_keith(x):\n    seq = [0, 1]\n    while seq[-1] < x:\n        seq.append(seq[-2] + seq[-1])\n    return seq[-1] == x", "code_7": "def is_num_keith(x):\n    seq = [0, 1]\n    while len(seq) <= x:\n        seq.append(seq[-1] + seq[-2])\n    return seq[x] == x", "code_8": "def is_num_keith(x):\n    a, b = 0, 1\n    while b < x:\n        a, b = b, a + b\n    return b == x", "code_9": "def is_num_keith(x):\n    seq = [0, 1]\n    while seq[-1] < x:\n        seq.append(seq[-2] + seq[-1])\n    return seq[-1] == x", "code_10": "def is_num_keith(x):\n    seq = [0, 1]\n    while len(seq) <= x:\n        seq.append(seq[-1] + seq[-2])\n    return seq[x] == x", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/180", "prompt": "\n\ndef distance_lat_long(slat,slon,elat,elon):\n \"\"\"\n Write a function to calculate distance between two points using latitude and longitude.\n >>> distance_lat_long(23.5,67.5,25.5,69.5)\n 12179.372041317429\n >>> distance_lat_long(10.5,20.5,30.5,40.5)\n 6069.397933300514\n >>> distance_lat_long(10,20,30,40)\n 6783.751974994595\n \"\"\"\n", "solution": " from math import radians, sin, cos, acos\n \n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dLat = math.radians(elat - slat)\n    dLon = math.radians(elon - slon)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d", "code_2": "import math\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    slat, slon, elat, elon = map(math.radians, [slat, slon, elat, elon])\n    dLat = elat - slat\n    dLon = elon - slon\n    a = math.sin(dLat/2) ** 2 + math.cos(slat) * math.cos(elat) * math.sin(dLon/2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d", "code_3": "from math import radians, sin, cos, sqrt, atan2\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dLat = elat - slat\n    dLon = elon - slon\n    a = sin(dLat/2) ** 2 + cos(slat) * cos(elat) * sin(dLon/2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    d = R * c\n    return d", "code_4": "import numpy as np\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    slat, slon, elat, elon = np.radians([slat, slon, elat, elon])\n    dLat = elat - slat\n    dLon = elon - slon\n    a = np.sin(dLat/2) ** 2 + np.cos(slat) * np.cos(elat) * np.sin(dLon/2) ** 2\n    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n    d = R * c\n    return d", "code_5": "from geopy.distance import geodesic\ndef distance_lat_long(slat,slon,elat,elon):\n    return geodesic((slat, slon), (elat, elon)).km", "code_6": "import geopy.distance\ndef distance_lat_long(slat,slon,elat,elon):\n    return geopy.distance.distance((slat, slon), (elat, elon)).km", "code_7": "from scipy.spatial.distance import pdist\nfrom numpy import radians, sin, cos, arctan2, sqrt\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    return R * pdist([(slat, slon), (elat, elon)], lambda u, v: arctan2(sqrt((cos(u[1])*sin(v[1])-sin(u[1])*cos(v[1])*cos(v[0]-u[0]))**2 + (cos(u[0])*sin(v[0])-sin(u[0])*cos(v[0])*cos(v[1]-u[1]))**2), sin(u[0])*sin(v[0])+cos(u[0])*cos(v[0])*cos(v[1]-u[1])))", "code_8": "from numba import jit\nimport math\n@jit(nopython=True)\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dLat = math.radians(elat - slat)\n    dLon = math.radians(elon - slon)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d", "code_9": "from numba import njit\nimport math\n@njit\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dLat = math.radians(elat - slat)\n    dLon = math.radians(elon - slon)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d", "code_10": "from numba import vectorize\nimport math\n@vectorize(['float64(float64,float64,float64,float64)'], target='parallel')\ndef distance_lat_long(slat,slon,elat,elon):\n    R = 6371\n    dLat = math.radians(elat - slat)\n    dLon = math.radians(elon - slon)\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(slat)) * math.cos(math.radians(elat)) * math.sin(dLon/2) * math.sin(dLon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = R * c\n    return d", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/181", "prompt": "\n\ndef common_prefix (arr, n):\n\t\"\"\"\n\tWrite a function to find the longest common prefix in the given set of strings.\n\t>>> common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n\t'ta'\n\t>>> common_prefix([\"apples\", \"ape\", \"april\"], 3)\n\t'ap'\n\t>>> common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n\t'teen'\n\t\"\"\"\n", "solution": "\tdef common_prefix_util(str1, str2): \n\t\tresult = \"\"; \n\t\tn1 = len(str1) \n\t\tn2 = len(str2) \n\t\ti = 0\n\t\tj = 0\n\t\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\t\tif (str1[i] != str2[j]): \n\t\t\t\tbreak\n\t\t\tresult += str1[i] \n\t\t\ti += 1\n\t\t\tj += 1\n\t\treturn (result) \n\t \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def common_prefix(arr, n):\n    arr.sort()\n    first = arr[0]\n    last = arr[n - 1]\n    i = 0\n    while i < len(first) and i < len(last) and first[i] == last[i]:\n        i += 1\n    return first[:i]", "code_2": "def common_prefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        while arr[i].find(prefix) != 0:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix", "code_3": "def common_prefix(arr, n):\n    prefix = \"\"\n    for i in range(len(arr[0])):\n        char = arr[0][i]\n        if all(word[i] == char for word in arr[1:]):\n            prefix += char\n        else:\n            break\n    return prefix", "code_4": "def common_prefix(arr, n):\n    prefix = arr[0]\n    for word in arr[1:]:\n        while not word.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix", "code_5": "def common_prefix(arr, n):\n    prefix = \"\"\n    for chars in zip(*arr):\n        if len(set(chars)) == 1:\n            prefix += chars[0]\n        else:\n            break\n    return prefix", "code_6": "def common_prefix(arr, n):\n    prefix = arr[0]\n    for word in arr[1:]:\n        i = 0\n        while i < len(prefix) and i < len(word) and prefix[i] == word[i]:\n            i += 1\n        prefix = prefix[:i]\n        if not prefix:\n            return \"\"\n    return prefix", "code_7": "def common_prefix(arr, n):\n    prefix = arr[0]\n    for word in arr[1:]:\n        while word.find(prefix) != 0:\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix", "code_8": "def common_prefix(arr, n):\n    prefix = \"\"\n    for i in range(len(arr[0])):\n        char = arr[0][i]\n        if all(word[i] == char for word in arr):\n            prefix += char\n        else:\n            break\n    return prefix", "code_9": "def common_prefix(arr, n):\n    prefix = arr[0]\n    for word in arr[1:]:\n        i = 0\n        while i < len(prefix) and i < len(word) and prefix[i] == word[i]:\n            i += 1\n        prefix = prefix[:i]\n    return prefix", "code_10": "def common_prefix(arr, n):\n    prefix = arr[0]\n    for word in arr[1:]:\n        while not word.startswith(prefix):\n            prefix = prefix[:-1]\n    return prefix", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/182", "prompt": "\n\ndef find_character(string):\n  \"\"\"\n  Write a function to find uppercase, lowercase, special character and numeric values using regex.\n  >>> find_character(\"ThisIsGeeksforGeeks\")\n  (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n  >>> find_character(\"Hithere2\")\n  (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n  >>> find_character(\"HeyFolks32\")\n  (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n  \"\"\"\n", "solution": "  import re\n  \n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef find_character(string):\n    upper, lower, num, special = [], [], [], []\n    for char in string:\n        if char.isupper(): upper.append(char)\n        elif char.islower(): lower.append(char)\n        elif char.isdigit(): num.append(char)\n        else: special.append(char)\n    return upper, lower, num, special", "code_2": "import re\ndef find_character(string):\n    upper = re.findall(r'[A-Z]', string)\n    lower = re.findall(r'[a-z]', string)\n    num = re.findall(r'\\d', string)\n    special = re.findall(r'\\W', string)\n    return upper, lower, num, special", "code_3": "import re\ndef find_character(string):\n    upper = [char for char in string if char.isupper()]\n    lower = [char for char in string if char.islower()]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalnum()]\n    return upper, lower, num, special", "code_4": "import re\ndef find_character(string):\n    upper = [char for char in string if char.upper() == char and char.isalpha()]\n    lower = [char for char in string if char.lower() == char and char.isalpha()]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalnum()]\n    return upper, lower, num, special", "code_5": "import re\ndef find_character(string):\n    upper = [char for char in string if ord(char) in range(65, 91)]\n    lower = [char for char in string if ord(char) in range(97, 123)]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalnum()]\n    return upper, lower, num, special", "code_6": "import re\ndef find_character(string):\n    upper = [char for char in string if char >= 'A' and char <= 'Z']\n    lower = [char for char in string if char >= 'a' and char <= 'z']\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalnum()]\n    return upper, lower, num, special", "code_7": "import re\ndef find_character(string):\n    upper = [char for char in string if char.isupper()]\n    lower = [char for char in string if char.islower()]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalpha() and not char.isdigit()]\n    return upper, lower, num, special", "code_8": "import re\ndef find_character(string):\n    upper = [char for char in string if char.upper() == char and char.isalpha()]\n    lower = [char for char in string if char.lower() == char and char.isalpha()]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalpha() and not char.isdigit()]\n    return upper, lower, num, special", "code_9": "import re\ndef find_character(string):\n    upper = [char for char in string if char.isupper()]\n    lower = [char for char in string if char.islower()]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalnum() and not char.isspace()]\n    return upper, lower, num, special", "code_10": "import re\ndef find_character(string):\n    upper = [char for char in string if char.isupper()]\n    lower = [char for char in string if char.islower()]\n    num = [char for char in string if char.isdigit()]\n    special = [char for char in string if not char.isalnum() and not char.isspace() and not char.isprintable()]\n    return upper, lower, num, special", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/183", "prompt": "\n\ndef count_pairs(arr, n, k):\n  \"\"\"\n  Write a function to count all the distinct pairs having a difference of k in any array.\n  >>> count_pairs([1, 5, 3, 4, 2], 5, 3)\n  2\n  >>> count_pairs([8, 12, 16, 4, 0, 20], 6, 4)\n  5\n  >>> count_pairs([2, 4, 1, 3, 4], 5, 2)\n  3\n  \"\"\"\n", "solution": "  \n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_pairs(arr, n, k):\n    arr.sort()\n    count = 0\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] < k:\n            j += 1\n        else:\n            i += 1\n    return count", "code_2": "def count_pairs(arr, n, k):\n    arr_set = set(arr)\n    count = 0\n    for i in arr:\n        if i + k in arr_set:\n            count += 1\n    return count", "code_3": "def count_pairs(arr, n, k):\n    arr_dict = {}\n    count = 0\n    for i in arr:\n        if i - k in arr_dict:\n            count += arr_dict[i - k]\n        if i + k in arr_dict:\n            arr_dict[i + k] += 1\n        else:\n            arr_dict[i + k] = 1\n    return count", "code_4": "def count_pairs(arr, n, k):\n    arr.sort()\n    count = 0\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] == k:\n            count += 1\n    return count", "code_5": "def count_pairs(arr, n, k):\n    arr_set = set(arr)\n    count = 0\n    for i in arr_set:\n        if i + k in arr_set:\n            count += 1\n    return count", "code_6": "def count_pairs(arr, n, k):\n    arr_dict = {}\n    count = 0\n    for i in arr:\n        if i - k in arr_dict:\n            count += 1\n        arr_dict[i] = 1\n    return count", "code_7": "def count_pairs(arr, n, k):\n    arr.sort()\n    count = 0\n    i = 0\n    j = 1\n    while j < n:\n        if i != j and arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] < k:\n            j += 1\n        else:\n            i += 1\n    return count", "code_8": "def count_pairs(arr, n, k):\n    arr_dict = {}\n    count = 0\n    for i in arr:\n        if i - k in arr_dict:\n            count += arr_dict[i - k]\n        if i in arr_dict:\n            arr_dict[i] += 1\n        else:\n            arr_dict[i] = 1\n    return count", "code_9": "def count_pairs(arr, n, k):\n    arr_set = set(arr)\n    count = 0\n    for i in arr:\n        if i + k in arr_set and i - k in arr_set:\n            count += 1\n    return count // 2", "code_10": "def count_pairs(arr, n, k):\n    arr_dict = {}\n    count = 0\n    for i in arr:\n        if i - k in arr_dict:\n            count += arr_dict[i - k]\n        if i in arr_dict:\n            arr_dict[i] += 1\n        else:\n            arr_dict[i] = 1\n    return count // 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/184", "prompt": "\n\ndef greater_specificnum(list,num):\n \"\"\"\n Write a function to find all the values in a list that are greater than a specified number.\n >>> greater_specificnum([220, 330, 500],200)\n True\n >>> greater_specificnum([12, 17, 21],20)\n False\n >>> greater_specificnum([1,2,3,4],10)\n False\n \"\"\"\n", "solution": " \n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def greater_specificnum(lst, num):\n    return any(i > num for i in lst)", "code_2": "def greater_specificnum(lst, num):\n    for i in lst:\n        if i > num:\n            return True\n    return False", "code_3": "def greater_specificnum(lst, num):\n    return max(lst) > num", "code_4": "def greater_specificnum(lst, num):\n    return len([i for i in lst if i > num]) > 0", "code_5": "def greater_specificnum(lst, num):\n    return sum(i > num for i in lst) > 0", "code_6": "def greater_specificnum(lst, num):\n    return bool(filter(lambda x: x > num, lst))", "code_7": "def greater_specificnum(lst, num):\n    return reduce(lambda x, y: x or y > num, lst, False)", "code_8": "def greater_specificnum(lst, num):\n    return next((True for i in lst if i > num), False)", "code_9": "def greater_specificnum(lst, num):\n    return set(lst) > {num}", "code_10": "def greater_specificnum(lst, num):\n    return np.any(np.array(lst) > num)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/185", "prompt": "\n\ndef parabola_focus(a, b, c):\n  \"\"\"\n  Write a function to find the focus of a parabola.\n  >>> parabola_focus(5,3,2)\n  (-0.3, 1.6)\n  >>> parabola_focus(9,8,4)\n  (-0.4444444444444444, 2.25)\n  >>> parabola_focus(2,4,6)\n  (-1.0, 4.125)\n  \"\"\"\n", "solution": "   \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    return (h, k)", "code_2": "def parabola_focus(a, b, c):\n    return (-b / (2 * a), a * (-b / (2 * a)) ** 2 + b * (-b / (2 * a)) + c)", "code_3": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, a * h * h + b * h + c)", "code_4": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, (a * h + b) * h + c)", "code_5": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, (a * h + b / 2) * h + c)", "code_6": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, a * h * h + b * h + c / 1)", "code_7": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, a * h * h + b * h + c * 1)", "code_8": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, a * h * h + b * h + c * 1.0)", "code_9": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, a * h * h + b * h + c * 1.0 / 1)", "code_10": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    return (h, a * h * h + b * h + c * 1.0 / 1.0)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/186", "prompt": "\n\ndef check_literals(text, patterns):\n  \"\"\"\n  Write a function to search some literals strings in a string by using regex.\n  >>> check_literals('The quick brown fox jumps over the lazy dog.',['fox'])\n  'Matched!'\n  >>> check_literals('The quick brown fox jumps over the lazy dog.',['horse'])\n  'Not Matched!'\n  >>> check_literals('The quick brown fox jumps over the lazy dog.',['lazy'])\n  'Matched!'\n  \"\"\"\n", "solution": "  import re\n  \n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if any(re.search(pattern, text) for pattern in patterns) else 'Not Matched!'", "code_2": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if re.search('|'.join(patterns), text) else 'Not Matched!'", "code_3": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if re.compile('|'.join(patterns)).search(text) else 'Not Matched!'", "code_4": "import re\ndef check_literals(text, patterns):\n    pattern = re.compile('|'.join(patterns))\n    return 'Matched!' if pattern.search(text) else 'Not Matched!'", "code_5": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if any(pattern in text for pattern in patterns) else 'Not Matched!'", "code_6": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if sum(text.count(pattern) for pattern in patterns) > 0 else 'Not Matched!'", "code_7": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if any(map(text.__contains__, patterns)) else 'Not Matched!'", "code_8": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if any(text.find(pattern) != -1 for pattern in patterns) else 'Not Matched!'", "code_9": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if any(pattern in text for pattern in patterns) else 'Not Matched!'", "code_10": "import re\ndef check_literals(text, patterns):\n    return 'Matched!' if any(text.count(pattern) for pattern in patterns) else 'Not Matched!'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/187", "prompt": "\n\ndef longest_common_subsequence(X, Y, m, n):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    >>> longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7)\n    4\n    >>> longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6)\n    3\n    >>> longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4)\n    2\n    \"\"\"\n", "solution": "     \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def lcs(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "code_2": "def lcs(X, Y, m, n):\n    prev = [0] * (n + 1)\n    for i in range(1, m + 1):\n        curr = [0] * (n + 1)\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                curr[j] = prev[j - 1] + 1\n            else:\n                curr[j] = max(prev[j], curr[j - 1])\n        prev = curr\n    return prev[n]", "code_3": "def lcs(X, Y, m, n):\n    dp = [0] * (n + 1)\n    for i in range(1, m + 1):\n        prev = 0\n        for j in range(1, n + 1):\n            temp = dp[j]\n            if X[i - 1] == Y[j - 1]:\n                dp[j] = prev + 1\n            else:\n                dp[j] = max(dp[j], dp[j - 1])\n            prev = temp\n    return dp[n]", "code_4": "def lcs(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(2)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i % 2][j] = dp[(i - 1) % 2][j - 1] + 1\n            else:\n                dp[i % 2][j] = max(dp[(i - 1) % 2][j], dp[i % 2][j - 1])\n    return dp[m % 2][n]", "code_5": "def lcs(X, Y, m, n):\n    dp = [0] * (n + 1)\n    for i in range(1, m + 1):\n        prev = 0\n        for j in range(1, n + 1):\n            temp = dp[j]\n            if X[i - 1] == Y[j - 1]:\n                dp[j] = prev + 1\n            else:\n                dp[j] = max(dp[j], dp[j - 1])\n            prev = temp\n    return dp[n]", "code_6": "def lcs(X, Y, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m - 1, -1, -1):\n        prev = 0\n        for j in range(n - 1, -1, -1):\n            temp = dp[j]\n            if X[i] == Y[j]:\n                dp[j] = prev + 1\n            else:\n                dp[j] = max(dp[j], dp[j + 1])\n            prev = temp\n    return dp[0]", "code_7": "def lcs(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if X[i] == Y[j]:\n                dp[i][j] = dp[i + 1][j + 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[0][0]", "code_8": "def lcs(X, Y, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m - 1, -1, -1):\n        next_row = [0] * (n + 1)\n        for j in range(n - 1, -1, -1):\n            if X[i] == Y[j]:\n                next_row[j] = dp[j + 1] + 1\n            else:\n                next_row[j] = max(dp[j], next_row[j + 1])\n        dp = next_row\n    return dp[0]", "code_9": "def lcs(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(2)]\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if X[i] == Y[j]:\n                dp[(i + 1) % 2][j] = dp[(i + 2) % 2][j + 1] + 1\n            else:\n                dp[(i + 1) % 2][j] = max(dp[(i + 2) % 2][j], dp[(i + 1) % 2][j + 1])\n    return dp[(m + 1) % 2][0]", "code_10": "def lcs(X, Y, m, n):\n    dp = [0] * (n + 1)\n    for i in range(m - 1, -1, -1):\n        prev = 0\n        for j in range(n - 1, -1, -1):\n            temp = dp[j]\n            if X[i] == Y[j]:\n                dp[j] = prev + 1\n            else:\n                dp[j] = max(dp[j], dp[j + 1])\n            prev = temp\n    return dp[0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/188", "prompt": "\n\ndef prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    >>> prod_Square(25)\n    False\n    >>> prod_Square(30)\n    False\n    >>> prod_Square(16)\n    True\n    \"\"\"\n", "solution": "    \n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        if n % (i * i) == 0 and (n // (i * i)) ** 0.5 == int((n // (i * i)) ** 0.5):\n            return True\n        i += 1\n    return False", "code_2": "def prod_Square(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % (i * i) == 0 and int((n // (i * i))**0.5) == (n // (i * i))**0.5:\n            return True\n    return False", "code_3": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count % 2 != 0:\n            return False\n        i += 1\n    return n == 1", "code_4": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        exp = 0\n        while n % i == 0:\n            exp += 1\n            n //= i\n        if exp % 2 != 0:\n            return False\n        i += 1\n    return n == 1", "code_5": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count % 2:\n            return False\n        i += 1\n    return n == 1", "code_6": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count & 1:\n            return False\n        i += 1\n    return n == 1", "code_7": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count % 2 != 0:\n            return False\n        i += 1\n    return n == 1", "code_8": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count & 1:\n            return False\n        i += 1\n    return n == 1", "code_9": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count % 2:\n            return False\n        i += 1\n    return n == 1", "code_10": "def prod_Square(n):\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n //= i\n        if count % 2 != 0:\n            return False\n        i += 1\n    return n == 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/189", "prompt": "\n\ndef first_Missing_Positive(arr,n):\n    \"\"\"\n    Write a python function to find the first missing positive number.\n    >>> first_Missing_Positive([1,2,3,-1,5],5)\n    4\n    >>> first_Missing_Positive([0,-1,-2,1,5,8],6)\n    2\n    >>> first_Missing_Positive([0,1,2,5,-8],5)\n    3\n    \"\"\"\n", "solution": "     \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)", "results": [0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def first_Missing_Positive(arr,n):\n    if 1 not in arr:\n        return 1\n    if len(arr) == 1:\n        return 2\n    arr = [0 if x <= 0 or x > n else x for x in arr]\n    for i in range(n):\n        num = abs(arr[i])\n        if num > 0 and num <= n:\n            arr[num-1] = -abs(arr[num-1])\n    for i in range(n):\n        if arr[i] > 0:\n            return i+1\n    return n+1", "code_2": "def first_Missing_Positive(arr,n):\n    s = set(arr)\n    i = 1\n    while i in s:\n        i += 1\n    return i", "code_3": "def first_Missing_Positive(arr,n):\n    arr.sort()\n    res = 1\n    for i in arr:\n        if i == res:\n            res += 1\n    return res", "code_4": "def first_Missing_Positive(arr,n):\n    i = 0\n    while i < n:\n        if arr[i] > 0 and arr[i] <= n and arr[arr[i]-1] != arr[i]:\n            arr[arr[i]-1], arr[i] = arr[i], arr[arr[i]-1]\n        else:\n            i += 1\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "code_5": "def first_Missing_Positive(arr,n):\n    arr = [0] + arr\n    for i in range(1, n+1):\n        if abs(arr[i]) <= n:\n            arr[abs(arr[i])] = -abs(arr[abs(arr[i])])\n    for i in range(1, n+1):\n        if arr[i] > 0:\n            return i\n    return n+1", "code_6": "def first_Missing_Positive(arr,n):\n    arr = [0] + arr\n    for i in range(1, n+1):\n        if arr[i] > 0 and arr[i] <= n:\n            arr[arr[i]], arr[i] = arr[i], arr[arr[i]]\n    for i in range(1, n+1):\n        if arr[i] != i:\n            return i\n    return n+1", "code_7": "def first_Missing_Positive(arr,n):\n    arr.sort()\n    smallest = 1\n    for num in arr:\n        if num == smallest:\n            smallest += 1\n    return smallest", "code_8": "def first_Missing_Positive(arr,n):\n    arr = [0] + arr\n    for i in range(1, n+1):\n        if arr[i] > 0 and arr[i] <= n:\n            arr[0], arr[arr[i]] = arr[arr[i]], arr[0]\n    for i in range(1, n+1):\n        if arr[i] != i:\n            return i\n    return n+1", "code_9": "def first_Missing_Positive(arr,n):\n    arr = [0] + arr\n    for i in range(1, n+1):\n        if arr[i] > 0 and arr[i] <= n and arr[arr[i]] != arr[i]:\n            arr[arr[i]], arr[i] = arr[i], arr[arr[i]]\n    for i in range(1, n+1):\n        if arr[i] != i:\n            return i\n    return n+1", "code_10": "def first_Missing_Positive(arr,n):\n    arr = [0] + arr\n    for i in range(1, n+1):\n        if arr[i] > 0 and arr[i] <= n:\n            arr[arr[i]], arr[i] = arr[i], arr[arr[i]]\n            if arr[i] != arr[arr[i]]:\n                i -= 1\n    for i in range(1, n+1):\n        if arr[i] != i:\n            return i\n    return n+1", "pass@3": 0.9666666666666667, "nDCG@10": 0.5617131059245699}
{"task_id": "MBPP/190", "prompt": "\n\ndef count_Intgral_Points(x1,y1,x2,y2):\n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    >>> count_Intgral_Points(1,1,4,4)\n    4\n    >>> count_Intgral_Points(1,2,1,2)\n    1\n    >>> count_Intgral_Points(4,2,6,4)\n    1\n    \"\"\"\n", "solution": "     \n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - (x2 - x1 - 1) * (y2 - y1 - 1))", "code_2": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - max(x2 - x1 - 1, 0) * max(y2 - y1 - 1, 0))", "code_3": "def count_Integral_Points(x1, y1, x2, y2):\n    dx, dy = x2 - x1, y2 - y1\n    return dx * dy - (dx - 1) * (dy - 1) if dx > 0 and dy > 0 else 0", "code_4": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - max(x2 - x1 - 1, 0) * max(y2 - y1 - 1, 0))", "code_5": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - max(x2 - x1 - 1, 0) * max(y2 - y1 - 1, 0))", "code_6": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - max(x2 - x1 - 1, 0) * max(y2 - y1 - 1, 0))", "code_7": "def count_Integral_Points(x1, y1, x2, y2):\n    dx, dy = x2 - x1, y2 - y1\n    return dx * dy - max(dx - 1, 0) * max(dy - 1, 0)", "code_8": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - max(x2 - x1 - 1, 0) * max(y2 - y1 - 1, 0))", "code_9": "def count_Integral_Points(x1, y1, x2, y2):\n    dx, dy = x2 - x1, y2 - y1\n    return dx * dy - max(dx - 1, 0) * max(dy - 1, 0)", "code_10": "def count_Integral_Points(x1, y1, x2, y2):\n    return max(0, (x2 - x1) * (y2 - y1) - max(x2 - x1 - 1, 0) * max(y2 - y1 - 1, 0))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/191", "prompt": "\n\ndef check_monthnumber(monthname3):\n  \"\"\"\n  Write a function to check whether the given month name contains 30 days or not.\n  >>> check_monthnumber(\"February\")\n  False\n  >>> check_monthnumber(\"June\")\n  True\n  >>> check_monthnumber(\"April\")\n  True\n  \"\"\"\n", "solution": "  \n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False", "results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_monthnumber(monthname3):\n    return monthname3 in [\"April\", \"June\", \"September\", \"November\"]", "code_2": "def check_monthnumber(monthname3):\n    return monthname3 not in [\"February\", \"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]", "code_3": "def check_monthnumber(monthname3):\n    return len(monthname3) == 4 or monthname3 == \"September\"", "code_4": "def check_monthnumber(monthname3):\n    return monthname3[-1] != \"y\" and monthname3[-1] != \"r\"", "code_5": "def check_monthnumber(monthname3):\n    return monthname3[0] not in [\"J\", \"F\"] or monthname3 == \"September\"", "code_6": "def check_monthnumber(monthname3):\n    return monthname3.endswith((\"il\", \"ber\", \"ch\", \"tember\"))", "code_7": "def check_monthnumber(monthname3):\n    return sum(c in \"aeiou\" for c in monthname3) > 1", "code_8": "def check_monthnumber(monthname3):\n    return monthname3.count(\"a\") + monthname3.count(\"e\") + monthname3.count(\"i\") + monthname3.count(\"o\") + monthname3.count(\"u\") > 1", "code_9": "def check_monthnumber(monthname3):\n    return not any(c in \"aeiou\" for c in monthname3[:-1])", "code_10": "def check_monthnumber(monthname3):\n    return not any(c in \"aeiou\" for c in monthname3 if c != monthname3[-1])", "pass@3": 0.7083333333333333, "nDCG@10": 0.45374257454118555}
{"task_id": "MBPP/192", "prompt": "\n\ndef check_String(str):\n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    >>> check_String('thishasboth29')\n    True\n    >>> check_String('python')\n    False\n    >>> check_String ('string')\n    False\n    \"\"\"\n", "solution": "     \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_String(s):\n    return any(c.isalpha() for c in s) and any(c.isdigit() for c in s)", "code_2": "def check_String(s):\n    has_letter = has_number = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n        elif c.isdigit():\n            has_number = True\n        if has_letter and has_number:\n            return True\n    return False", "code_3": "import re\ndef check_String(s):\n    return bool(re.search(r'\\d', s)) and bool(re.search(r'[a-zA-Z]', s))", "code_4": "def check_String(s):\n    return sum(c.isalpha() for c in s) > 0 and sum(c.isdigit() for c in s) > 0", "code_5": "def check_String(s):\n    return len([c for c in s if c.isalpha()]) > 0 and len([c for c in s if c.isdigit()]) > 0", "code_6": "def check_String(s):\n    return all(map(str.isalpha, s)) or all(map(str.isdigit, s))", "code_7": "def check_String(s):\n    return s.lower() != s.upper() and any(c.isdigit() for c in s)", "code_8": "def check_String(s):\n    return any(c.isalpha() for c in s[:len(s)//2]) and any(c.isdigit() for c in s[len(s)//2:])", "code_9": "def check_String(s):\n    return any(c.isalpha() for c in s[:-1]) and any(c.isdigit() for c in s[1:])", "code_10": "def check_String(s):\n    return any(c.isalpha() for i, c in enumerate(s) if i % 2 == 0) and any(c.isdigit() for i, c in enumerate(s) if i % 2 != 0)", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/193", "prompt": "\n\ndef remove_tuple(test_tup):\n  \"\"\"\n  Write a function to remove the duplicates from the given tuple.\n  >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n  (1, 2, 3, 5)\n  >>> remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n  (2, 3, 4, 5, 6, 7, 8)\n  >>> remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))\n  (11, 12, 13, 14)\n  \"\"\"\n", "solution": "  \n  res = tuple(set(test_tup))\n  return (res) ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_tuple(test_tup): return tuple(set(test_tup))", "code_2": "def remove_tuple(test_tup): return tuple(dict.fromkeys(test_tup))", "code_3": "from collections import OrderedDict\ndef remove_tuple(test_tup): return tuple(OrderedDict.fromkeys(test_tup))", "code_4": "def remove_tuple(test_tup):\n  res = []\n  [res.append(x) for x in test_tup if x not in res]\n  return tuple(res)", "code_5": "def remove_tuple(test_tup):\n  res = []\n  for i in test_tup:\n    if i not in res:\n      res.append(i)\n  return tuple(res)", "code_6": "def remove_tuple(test_tup):\n  res = []\n  for i in test_tup:\n    if res.count(i) == 0:\n      res.append(i)\n  return tuple(res)", "code_7": "def remove_tuple(test_tup):\n  res = []\n  for i in test_tup:\n    if i not in res:\n      res.append(i)\n  return tuple(res)", "code_8": "def remove_tuple(test_tup):\n  res = []\n  for i in test_tup:\n    if i not in res:\n      res.append(i)\n  return tuple(res)", "code_9": "def remove_tuple(test_tup):\n  res = []\n  for i in test_tup:\n    if res.count(i) == 0:\n      res.append(i)\n  return tuple(res)", "code_10": "def remove_tuple(test_tup):\n  res = []\n  for i in test_tup:\n    if i not in res:\n      res.append(i)\n  return tuple(res)", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/194", "prompt": "\n\ndef octal_To_Decimal(n):\n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    >>> octal_To_Decimal(25)\n    21\n    >>> octal_To_Decimal(30)\n    24\n    >>> octal_To_Decimal(40)\n    32\n    \"\"\"\n", "solution": "      \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value; ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def octal_To_Decimal(n): return int(str(n), 8)", "code_2": "def octal_To_Decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    while num > 0:\n        last_digit = num % 10\n        num = num // 10\n        dec_value += last_digit * base\n        base *= 8\n    return dec_value", "code_3": "def octal_To_Decimal(n):\n    decimal = 0\n    base = 1\n    while n != 0:\n        decimal += (n % 10) * base\n        n //= 10\n        base *= 8\n    return decimal", "code_4": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n != 0:\n        decimal += ((n % 10) * (8 ** i))\n        n //= 10\n        i += 1\n    return decimal", "code_5": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n != 0:\n        decimal += ((n % 10) * pow(8, i))\n        n //= 10\n        i += 1\n    return decimal", "code_6": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n > 0:\n        decimal += ((n % 10) * pow(8, i))\n        n = n // 10\n        i += 1\n    return decimal", "code_7": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n > 0:\n        decimal += ((n % 10) * (8 ** i))\n        n = n // 10\n        i += 1\n    return decimal", "code_8": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n != 0:\n        decimal += ((n % 10) * (8 ** i))\n        n = n // 10\n        i += 1\n    return decimal", "code_9": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n > 0:\n        decimal += ((n % 10) * pow(8, i))\n        n //= 10\n        i += 1\n    return decimal", "code_10": "def octal_To_Decimal(n):\n    decimal = 0\n    i = 0\n    while n != 0:\n        decimal += ((n % 10) * (8 ** i))\n        n //= 10\n        i += 1\n    return decimal", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/195", "prompt": "\n\ndef first(arr,x,n):\n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    >>> first([1,2,3,4,5,6,6],6,6)\n    5\n    >>> first([1,2,2,2,3,2,2,4,2],2,9)\n    1\n    >>> first([1,2,3],1,3)\n    0\n    \"\"\"\n", "solution": "     \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "code_2": "def first(arr, x, n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1", "code_3": "def first(arr, x, n):\n    try:\n        return arr.index(x)\n    except ValueError:\n        return -1", "code_4": "def first(arr, x, n):\n    return next((i for i, val in enumerate(arr) if val == x), -1)", "code_5": "import bisect\ndef first(arr, x, n):\n    i = bisect.bisect_left(arr, x)\n    if i != n and arr[i] == x:\n        return i\n    return -1", "code_6": "def first(arr, x, n):\n    return [i for i, val in enumerate(arr) if val == x][0] if x in arr else -1", "code_7": "def first(arr, x, n):\n    return reduce(lambda a, b: a if arr[a] == x else b, range(n), -1)", "code_8": "def first(arr, x, n):\n    return min((i for i, val in enumerate(arr) if val == x), default=-1)", "code_9": "def first(arr, x, n):\n    return [i for i in range(n) if arr[i] == x][0] if x in arr else -1", "code_10": "def first(arr, x, n):\n    return [i for i in filter(lambda i: arr[i] == x, range(n))][0] if x in arr else -1", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/196", "prompt": "\n\ndef remove_tuples(test_list, K):\n  \"\"\"\n  Write a function to remove all the tuples with length k.\n  >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1)\n  [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n  >>> remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2)\n  [(1, 2, 3), (3, 4, 6, 7)]\n  >>> remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3)\n  [(4, 3), (1,)]\n  \"\"\"\n", "solution": "  \n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "results": [1, 0, 0, 1, 0, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(t) != K]", "code_2": "def remove_tuples(test_list, K):\n  return filter(lambda t: len(t) != K, test_list)", "code_3": "def remove_tuples(test_list, K):\n  return [t for t in test_list if t.count(None) != K]", "code_4": "def remove_tuples(test_list, K):\n  return [t for t in test_list if sum(1 for _ in t) != K]", "code_5": "def remove_tuples(test_list, K):\n  return [t for t in test_list if not all(x is not None for x in t[:K])]", "code_6": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(set(t)) != K]", "code_7": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(dict.fromkeys(t)) != K]", "code_8": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(t) != K or any(x is None for x in t)]", "code_9": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(t) != K or len(set(t)) < K]", "code_10": "def remove_tuples(test_list, K):\n  return [t for t in test_list if len(t) != K or len(t) != len(set(t))]", "pass@3": 0.7083333333333333, "nDCG@10": 0.38431135260440824}
{"task_id": "MBPP/197", "prompt": "\n\ndef find_exponentio(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform the exponentiation of the given two tuples.\n  >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n  (100000, 4096, 78125, 7776)\n  >>> find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))\n  (1771561, 78125, 1679616, 117649)\n  >>> find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))\n  (35831808, 1679616, 40353607, 2097152)\n  \"\"\"\n", "solution": "  \n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using map and lambda functions:\ndef find_exponentio(t1, t2): return tuple(map(lambda x, y: x**y, t1, t2))", "code_2": "Using list comprehension:\ndef find_exponentio(t1, t2): return tuple(x**y for x, y in zip(t1, t2))", "code_3": "Using numpy:\nimport numpy as np\ndef find_exponentio(t1, t2): return tuple(np.power(t1, t2))", "code_4": "Using a for loop:\ndef find_exponentio(t1, t2): return tuple(x**y for x, y in zip(t1, t2))", "code_5": "Using a generator expression:\ndef find_exponentio(t1, t2): return tuple(x**y for x, y in zip(t1, t2))", "code_6": "Using a while loop:\ndef find_exponentio(t1, t2):\n  i = 0\n  result = []\n  while i < len(t1):\n    result.append(t1[i]**t2[i])\n    i += 1\n  return tuple(result)", "code_7": "Using a recursive function:\ndef find_exponentio(t1, t2, i=0):\n  if i == len(t1):\n    return ()\n  return (t1[i]**t2[i],) + find_exponentio(t1, t2, i+1)", "code_8": "Using reduce and operator:\nfrom functools import reduce\nimport operator\ndef find_exponentio(t1, t2): return reduce(operator.add, map(lambda x, y: (x**y,), t1, t2))", "code_9": "Using a dictionary comprehension:\ndef find_exponentio(t1, t2): return tuple({x: x**y for x, y in zip(t1, t2)}.values())", "code_10": "Using a set comprehension:\ndef find_exponentio(t1, t2): return tuple({x**y for x, y in zip(t1, t2)})", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/198", "prompt": "\n\ndef largest_triangle(a,b):\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    >>> largest_triangle(4,2)\n    10.392304845413264\n    >>> largest_triangle(5,7)\n    4.639421805988064\n    >>> largest_triangle(9,1)\n    105.2220865598093\n    \"\"\"\n", "solution": "    import math\n     \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef largest_triangle(a, b):\n    return (a * b * math.sqrt(3)) / (4 * math.sqrt(1 - (b / a) ** 2))", "code_2": "import math\ndef largest_triangle(a, b):\n    return (a * b * math.sqrt(3)) / (4 * math.sqrt(1 - b * b / (a * a)))", "code_3": "from math import sqrt, hypot\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (b / hypot(a, b)) ** 2))", "code_4": "from math import sqrt, atan\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (b * atan(b / a) / a) ** 2))", "code_5": "from math import sqrt, asin\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (asin(b / a)) ** 2))", "code_6": "from math import sqrt, acos\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - acos(b / a) ** 2))", "code_7": "from math import sqrt, tan\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (tan(b / a)) ** 2))", "code_8": "from math import sqrt, sin, cos\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (sin(b) / cos(a)) ** 2))", "code_9": "from math import sqrt, radians\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (b / a * radians(1)) ** 2))", "code_10": "from math import sqrt, degrees\ndef largest_triangle(a, b):\n    return (a * b * sqrt(3)) / (4 * sqrt(1 - (degrees(b) / degrees(a)) ** 2))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/199", "prompt": "\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n", "solution": "     \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ", "results": [0, 0, 1, 0, 0, 0, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "def highest_Power_of_2(n): return 1 << (n - 1).bit_length()", "code_2": "def highest_Power_of_2(n): return 2 ** ((n - 1).bit_length() - 1)", "code_3": "def highest_Power_of_2(n): return 1 << len(bin(n)) - 3", "code_4": "def highest_Power_of_2(n): return 2 ** int(math.log(n, 2))", "code_5": "def highest_Power_of_2(n): return 2 ** math.floor(math.log2(n))", "code_6": "def highest_Power_of_2(n): return 1 if n == 0 else 2 ** (n - 1).bit_length()", "code_7": "def highest_Power_of_2(n): return 1 if n == 0 else 2 ** (len(bin(n)) - 3)", "code_8": "def highest_Power_of_2(n): return 1 if n == 0 else 2 ** int(math.log(n, 2))", "code_9": "def highest_Power_of_2(n): return 1 if n == 0 else 2 ** math.floor(math.log2(n))", "code_10": "def highest_Power_of_2(n): return 1 if n == 0 else 2 ** (n.bit_length() - 1)", "pass@3": 0.7083333333333333, "nDCG@10": 0.24703059344735187}
{"task_id": "MBPP/200", "prompt": "\n\ndef position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    >>> position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [7]\n    >>> position_max([1,2,2,2,4,4,4,5,5,5,5])\n    [7,8,9,10]\n    >>> position_max([2,1,5,6,8,3,4,9,10,11,8,12])\n    [11]\n    \"\"\"\n", "solution": "    \n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i, x in enumerate(lst) if x == max_val]", "code_2": "def position_max(lst):\n    return [i for i in range(len(lst)) if lst[i] == max(lst)]", "code_3": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_4": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_5": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_6": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_7": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_8": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_9": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "code_10": "def position_max(lst):\n    max_val = max(lst)\n    return [i for i in range(len(lst)) if lst[i] == max_val]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/201", "prompt": "\n\ndef chkList(lst):\n    \"\"\"\n    Write a python function to check whether the elements in a list are same or not.\n    >>> chkList(['one','one','one'])\n    True\n    >>> chkList(['one','Two','Three'])\n    False\n    >>> chkList(['bigdata','python','Django'])\n    False\n    \"\"\"\n", "solution": "     \n    return len(set(lst)) == 1", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def chkList(lst):\n    return len(set(lst)) == 1", "code_2": "def chkList(lst):\n    return all(x == lst[0] for x in lst)", "code_3": "def chkList(lst):\n    return lst.count(lst[0]) == len(lst)", "code_4": "def chkList(lst):\n    first = lst[0]\n    return all(map(lambda x: x == first, lst))", "code_5": "def chkList(lst):\n    return lst[1:] == lst[:-1]", "code_6": "def chkList(lst):\n    return sum(1 for i in lst if i != lst[0]) == 0", "code_7": "def chkList(lst):\n    return not any(x != lst[0] for x in lst)", "code_8": "def chkList(lst):\n    return min(lst) == max(lst)", "code_9": "def chkList(lst):\n    return lst == [lst[0]] * len(lst)", "code_10": "def chkList(lst):\n    return lst.index(lst[0]) == len(lst) - 1", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/202", "prompt": "\n\ndef remove_even(str1):\n \"\"\"\n Write a function to remove even characters in a string.\n >>> remove_even(\"python\")\n (\"pto\")\n >>> remove_even(\"program\")\n (\"porm\")\n >>> remove_even(\"language\")\n (\"lnug\")\n \"\"\"\n", "solution": " \n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_even(str1): return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)", "code_2": "def remove_even(str1): return str1[::2]", "code_3": "def remove_even(str1): return ''.join(c for i, c in enumerate(str1) if i % 2 == 0)", "code_4": "def remove_even(str1): return ''.join(filter(lambda x: str1.index(x) % 2 == 0, str1))", "code_5": "def remove_even(str1): return ''.join(str1[i] for i in range(0, len(str1), 2))", "code_6": "def remove_even(str1): return ''.join(c for i, c in zip(range(len(str1)), str1) if i % 2 == 0)", "code_7": "def remove_even(str1): return ''.join(str1[i] for i in range(len(str1)) if not i % 2)", "code_8": "def remove_even(str1): return ''.join(str1[i] for i in range(len(str1)) if i & 1 == 0)", "code_9": "def remove_even(str1): return ''.join(str1[i] for i in range(0, len(str1), 2))", "code_10": "def remove_even(str1): return ''.join(str1[i] for i in range(len(str1)) if i >> 1 << 1 == i)", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/203", "prompt": "\n\ndef hamming_Distance(n1,n2) :\n    \"\"\"\n    Write a python function to find the hamming distance between given two integers.\n    >>> hamming_Distance(4,8)\n    2\n    >>> hamming_Distance(2,4)\n    2\n    >>> hamming_Distance(1,2)\n    2\n    \"\"\"\n", "solution": "     \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def hamming_Distance(n1, n2): return bin(n1 ^ n2).count('1')", "code_2": "def hamming_Distance(n1, n2): return sum(c1 != c2 for c1, c2 in zip(bin(n1)[2:], bin(n2)[2:]))", "code_3": "def hamming_Distance(n1, n2): return sum(int(b) for b in format(n1 ^ n2, 'b'))", "code_4": "def hamming_Distance(n1, n2): return sum(el != '0' for el in bin(n1 ^ n2)[2:])", "code_5": "def hamming_Distance(n1, n2): return sum(c != '0' for c in f'{n1 ^ n2:b}')", "code_6": "def hamming_Distance(n1, n2): return sum(map(int, f'{n1 ^ n2:032b}'))", "code_7": "def hamming_Distance(n1, n2): return sum(int(bit) for bit in bin(n1 ^ n2)[2:])", "code_8": "def hamming_Distance(n1, n2): return sum(int(b) for b in f'{n1 ^ n2:b}')", "code_9": "def hamming_Distance(n1, n2): return sum(1 for bit in bin(n1 ^ n2) if bit == '1')", "code_10": "def hamming_Distance(n1, n2): return sum(int(b) for b in bin(n1 ^ n2)[2:].zfill(32))", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/204", "prompt": "\n\ndef count(s,c) :\n    \"\"\"\n    Write a python function to count the occurrence of a given character in a string.\n    >>> count(\"abcc\",\"c\")\n    2\n    >>> count(\"ababca\",\"a\")\n    3\n    >>> count(\"mnmm0pm\",\"m\")\n    4\n    \"\"\"\n", "solution": "     \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def count(s, c): return s.count(c)", "code_2": "def count(s, c): return sum(1 for x in s if x == c)", "code_3": "from collections import Counter\ndef count(s, c): return Counter(s)[c]", "code_4": "import re\ndef count(s, c): return len(re.findall(c, s))", "code_5": "def count(s, c): return len([x for x in s if x == c])", "code_6": "def count(s, c): return sum(map(lambda x: x == c, s))", "code_7": "def count(s, c): return len(list(filter(lambda x: x == c, s)))", "code_8": "def count(s, c): return reduce(lambda x, y: x + (y == c), s, 0)", "code_9": "def count(s, c): return s.translate(str.maketrans(c, '1')) .count('1')", "code_10": "def count(s, c): return len(s.split(c)) - 1", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/205", "prompt": "\n\ndef inversion_elements(test_tup):\n  \"\"\"\n  Write a function to find the inversions of tuple elements in the given tuple list.\n  >>> inversion_elements((7, 8, 9, 1, 10, 7))\n  (-8, -9, -10, -2, -11, -8)\n  >>> inversion_elements((2, 4, 5, 6, 1, 7))\n  (-3, -5, -6, -7, -2, -8)\n  >>> inversion_elements((8, 9, 11, 14, 12, 13))\n  (-9, -10, -12, -15, -13, -14)\n  \"\"\"\n", "solution": "  \n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def inversion_elements(test_tup):\n    return tuple(-i - 1 for i in test_tup)", "code_2": "def inversion_elements(test_tup):\n    return tuple(map(lambda x: -x - 1, test_tup))", "code_3": "def inversion_elements(test_tup):\n    return tuple(x * -1 - 1 for x in test_tup)", "code_4": "def inversion_elements(test_tup):\n    return tuple(x * -1 - 1 for x in test_tup)", "code_5": "def inversion_elements(test_tup):\n    return tuple(-x - 1 for x in test_tup)", "code_6": "def inversion_elements(test_tup):\n    return tuple(map(lambda x: x * -1 - 1, test_tup))", "code_7": "def inversion_elements(test_tup):\n    return tuple(-x - 1 for x in test_tup)", "code_8": "def inversion_elements(test_tup):\n    return tuple(map(lambda x: -x - 1, test_tup))", "code_9": "def inversion_elements(test_tup):\n    return tuple(-i - 1 for i in test_tup)", "code_10": "def inversion_elements(test_tup):\n    return tuple(map(lambda x: x * -1 - 1, test_tup))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/206", "prompt": "\n\ndef concatenate_elements(test_tup):\n  \"\"\"\n  Write a function to perform the adjacent element concatenation in the given tuples.\n  >>> concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n  ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n  >>> concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"))\n  ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n  >>> concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"))\n  ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n  \"\"\"\n", "solution": "  \n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "results": [1, 1, 1, 0, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))", "code_2": "def concatenate_elements(test_tup):\n    return tuple(map(lambda i: test_tup[i] + test_tup[i + 1], range(len(test_tup) - 1)))", "code_3": "def concatenate_elements(test_tup):\n    return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))", "code_4": "def concatenate_elements(test_tup):\n    return tuple(test_tup[i:i + 2] for i in range(len(test_tup) - 1))", "code_5": "def concatenate_elements(test_tup):\n    return tuple(''.join(pair) for pair in zip(test_tup, test_tup[1:]))", "code_6": "def concatenate_elements(test_tup):\n    return tuple(itertools.starmap(operator.add, zip(test_tup, test_tup[1:])))", "code_7": "def concatenate_elements(test_tup):\n    return tuple(reduce(lambda a, b: a + b, pair) for pair in zip(test_tup, test_tup[1:]))", "code_8": "def concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in xrange(len(test_tup) - 1))", "code_9": "def concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(0, len(test_tup) - 1))", "code_10": "def concatenate_elements(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(1, len(test_tup)) - 1)", "pass@3": 0.9166666666666666, "nDCG@10": 0.6203974344166849}
{"task_id": "MBPP/207", "prompt": "\n\ndef find_longest_repeating_subseq(str):\n\t\"\"\"\n\tWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n\t>>> find_longest_repeating_subseq(\"AABEBCDD\")\n\t3\n\t>>> find_longest_repeating_subseq(\"aabb\")\n\t2\n\t>>> find_longest_repeating_subseq(\"aab\")\n\t1\n\t\"\"\"\n", "solution": "\t \n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n\treturn dp[n][n]", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]", "code_2": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if str[i] == str[j] and i != j:\n                dp[i][j] = 1 + dp[i + 1][j + 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n    return dp[0][0]", "code_3": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        prev = 0\n        for j in range(n - 1, -1, -1):\n            temp = dp[j]\n            if str[i] == str[j] and i != j:\n                dp[j] = 1 + prev\n            prev = max(prev, temp)\n    return dp[0]", "code_4": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp_prev = 0\n        for j in range(n - 1, i, -1):\n            if str[i] == str[j]:\n                dp[j] = 1 + dp_prev\n            dp_prev = max(dp_prev, dp[j])\n    return max(dp)", "code_5": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        prev = 0\n        for j in range(n - 1, i, -1):\n            temp = dp[j]\n            if str[i] == str[j]:\n                dp[j] = 1 + prev\n            prev = max(prev, temp)\n    return max(dp)", "code_6": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp_prev = 0\n        for j in range(n - 1, i, -1):\n            if str[i] == str[j]:\n                dp[j] = 1 + dp_prev\n            dp_prev = max(dp_prev, dp[j])\n    return max(dp)", "code_7": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        dp_prev = 0\n        for j in range(n - 1, i, -1):\n            if str[i] == str[j]:\n                dp[j] = 1 + dp_prev\n            dp_prev = max(dp_prev, dp[j])\n    return max(dp)", "code_8": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp_prev = 0\n        for j in range(n - 1, i, -1):\n            if str[i] == str[j]:\n                dp[j] = 1 + dp_prev\n            dp_prev = max(dp_prev, dp[j])\n    return max(dp)", "code_9": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        prev = 0\n        for j in range(n - 1, i, -1):\n            temp = dp[j]\n            if str[i] == str[j]:\n                dp[j] = 1 + prev\n            prev = max(prev, temp)\n    return max(dp)", "code_10": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        prev = 0\n        for j in range(n - 1, i, -1):\n            temp = dp[j]\n            if str[i] == str[j]:\n                dp[j] = 1 + prev\n            prev = max(prev, temp)\n    return max(dp)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/208", "prompt": "\n\ndef is_decimal(num):\n  \"\"\"\n  Write a function to check the given decimal with a precision of 2 by using regex.\n  >>> is_decimal('123.11')\n  True\n  >>> is_decimal('0.21')\n  True\n  >>> is_decimal('123.1214')\n  False\n  \"\"\"\n", "solution": "  import re\n  \n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef is_decimal(num):\n    return bool(re.match(r'^\\d+\\.\\d{2}$', num))", "code_2": "import re\ndef is_decimal(num):\n    pattern = re.compile(r'^\\d+\\.\\d{2}$')\n    return bool(pattern.match(num))", "code_3": "def is_decimal(num):\n    try:\n        float(num)\n        return len(num.split('.')[1]) == 2\n    except ValueError:\n        return False", "code_4": "def is_decimal(num):\n    parts = num.split('.')\n    return len(parts) == 2 and parts[0].isdigit() and len(parts[1]) == 2 and parts[1].isdigit()", "code_5": "def is_decimal(num):\n    return num.replace('.', '', 1).isdigit() and num.count('.') == 1 and len(num.split('.')[1]) == 2", "code_6": "def is_decimal(num):\n    if '.' in num:\n        whole, decimal = num.split('.')\n        return whole.isdigit() and decimal.isdigit() and len(decimal) == 2\n    return False", "code_7": "def is_decimal(num):\n    return num.count('.') == 1 and num.replace('.', '').isdigit() and len(num.split('.')[1]) == 2", "code_8": "def is_decimal(num):\n    parts = num.split('.')\n    return len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit() and len(parts[1]) == 2", "code_9": "def is_decimal(num):\n    try:\n        whole, decimal = map(int, num.split('.'))\n        return len(str(decimal)) == 2\n    except ValueError:\n        return False", "code_10": "def is_decimal(num):\n    if num.count('.') != 1:\n        return False\n    whole, decimal = num.split('.')\n    return whole.isdigit() and decimal.isdigit() and len(decimal) == 2", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/209", "prompt": "\n\ndef heap_replace(heap,a):\n  \"\"\"\n  Write a function to delete the smallest element from the given heap and then insert a new item.\n  >>> heap_replace( [25, 44, 68, 21, 39, 23, 89],21)\n  [21, 25, 23, 44, 39, 68, 89]\n  >>> heap_replace([25, 44, 68, 21, 39, 23, 89],110)\n  [23, 25, 68, 44, 39, 110, 89]\n  >>> heap_replace([25, 44, 68, 21, 39, 23, 89],500)\n  [23, 25, 68, 44, 39, 500, 89]\n  \"\"\"\n", "solution": "  import heapq as hq\n  \n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef heap_replace(heap, a):\n    heapq.heapreplace(heap, a)\n    return heap", "code_2": "def heap_replace(heap, a):\n    heap[0] = a\n    heapify(heap)\n    return heap", "code_3": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        if l >= len(heap):\n            break\n        if r >= len(heap) or heap[l] < heap[r]:\n            m = l\n        else:\n            m = r\n        if heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_4": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        if l < n and r < n:\n            m = l if heap[l] < heap[r] else r\n        elif l < n:\n            m = l\n        else:\n            break\n        if heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_5": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        m = l if l < n and (r >= n or heap[l] < heap[r]) else r\n        if m < n and heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_6": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        m = min((l, heap[l]) if l < n else (n, float('inf')), (r, heap[r]) if r < n else (n, float('inf')))[0]\n        if m < n and heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_7": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        m = l if l < n and (r >= n or heap[l] < heap[r]) else r if r < n else n\n        if m < n and heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_8": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        m = l if l < n and (r >= n or heap[l] < heap[r]) else r\n        if m < n and heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_9": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        m = l if l < n and (r >= n or heap[l] < heap[r]) else r if r < n else n\n        if m < n:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "code_10": "def heap_replace(heap, a):\n    heap[0] = a\n    i = 0\n    n = len(heap)\n    while True:\n        l, r = 2 * i + 1, 2 * i + 2\n        m = l if l < n and (r >= n or heap[l] < heap[r]) else r\n        if m < n and heap[m] < heap[i]:\n            heap[i], heap[m] = heap[m], heap[i]\n            i = m\n        else:\n            break\n    return heap", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/210", "prompt": "\n\ndef is_allowed_specific_char(string):\n    \"\"\"\n    Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char(\"*&%@#!}{\")\n    False\n    >>> is_allowed_specific_char(\"HELLOhowareyou98765\")\n    True\n    \"\"\"\n", "solution": "    import re\n    \n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef is_allowed_specific_char(string):\n    return bool(re.match('^[a-zA-Z0-9]*$', string))", "code_2": "import re\ndef is_allowed_specific_char(string):\n    return re.fullmatch(r'[a-zA-Z0-9]*', string) is not None", "code_3": "import re\ndef is_allowed_specific_char(string):\n    pattern = re.compile('^[a-zA-Z0-9]*$')\n    return pattern.match(string) is not None", "code_4": "import re\ndef is_allowed_specific_char(string):\n    return re.search('^[a-zA-Z0-9]*$', string)", "code_5": "import re\ndef is_allowed_specific_char(string):\n    return re.sub('[^a-zA-Z0-9]', '', string) == string", "code_6": "import re\ndef is_allowed_specific_char(string):\n    return not re.search('[^a-zA-Z0-9]', string)", "code_7": "import re\ndef is_allowed_specific_char(string):\n    return len(re.findall('[^a-zA-Z0-9]', string)) == 0", "code_8": "import re\ndef is_allowed_specific_char(string):\n    return re.findall('[^a-zA-Z0-9]', string) == []", "code_9": "import re\ndef is_allowed_specific_char(string):\n    return all(char.isalnum() for char in string)", "code_10": "import re\ndef is_allowed_specific_char(string):\n    return string.isalnum()", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/211", "prompt": "\n\ndef count_Num(n):\n    \"\"\"\n    Write a python function to count numbers whose oth and nth bits are set.\n    >>> count_Num(2)\n    1\n    >>> count_Num(3)\n    2\n    >>> count_Num(1)\n    1\n    \"\"\"\n", "solution": "     \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Num(n):\n    return sum(1 for i in range(1, n+1) if (i & 1) and (i & (1 << (n-1))))", "code_2": "def count_Num(n):\n    return len([i for i in range(1, n+1) if bin(i).count('1') == 2 and bin(i)[2] == '1' and bin(i)[-1] == '1'])", "code_3": "def count_Num(n):\n    return sum(bin(i).count('1') == 2 and bin(i)[2] == '1' and bin(i)[-1] == '1' for i in range(1, n+1))", "code_4": "def count_Num(n):\n    return len([i for i in range(1, n+1) if i & (1 | (1 << (n-1))) == (1 | (1 << (n-1)))])", "code_5": "def count_Num(n):\n    return sum((i & 1) and (i & (1 << (n-1))) for i in range(1, n+1))", "code_6": "def count_Num(n):\n    return sum(bin(i).count('1') == 2 and i & 1 and i & (1 << (n-1)) for i in range(1, n+1))", "code_7": "def count_Num(n):\n    return len([i for i in range(1, n+1) if bin(i).count('1') == 2 and i & 1 and i & (1 << (n-1))])", "code_8": "def count_Num(n):\n    return sum(bin(i).count('1') == 2 and bin(i)[2] == bin(i)[-1] == '1' for i in range(1, n+1))", "code_9": "def count_Num(n):\n    return len([i for i in range(1, n+1) if bin(i).count('1') == 2 and bin(i)[2] == bin(i)[-1] == '1'])", "code_10": "def count_Num(n):\n    return sum(bin(i).count('1') == 2 and (i & 1) and (i & (1 << (n-1))) for i in range(1, n+1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/212", "prompt": "\n\ndef fourth_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of n natural numbers.\n    >>> fourth_Power_Sum(2)\n    17\n    >>> fourth_Power_Sum(4)\n    354\n    >>> fourth_Power_Sum(6)\n    2275\n    \"\"\"\n", "solution": "    import math  \n     \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n+1))", "code_2": "def fourth_Power_Sum(n):\n    return (n * (n + 1) * (2 * n + 1) * (3 * n**2 + 3 * n - 1)) // 30", "code_3": "def fourth_Power_Sum(n):\n    return ((2 * n + 1) * (n + 1) * n * (3 * n**2 + 3 * n - 1)) // 30", "code_4": "def fourth_Power_Sum(n):\n    return ((6 * n * (n + 1) * (2 * n + 1) * (n + 2)) * (n + 3)) // 420", "code_5": "def fourth_Power_Sum(n):\n    return ((n * (n + 1))**2 * (2 * n + 1) * (2 * n + 3)) // 120", "code_6": "def fourth_Power_Sum(n):\n    return ((n * (n + 1))**2 * ((2 * n + 1) * (2 * n + 3))) // 120", "code_7": "def fourth_Power_Sum(n):\n    return ((n * (n + 1))**2 * (2 * n**2 + 6 * n + 3)) // 60", "code_8": "def fourth_Power_Sum(n):\n    return ((n * (n + 1))**2 * (2 * n**2 + 6 * n - 1)) // 60", "code_9": "def fourth_Power_Sum(n):\n    return ((n * (n + 1))**2 * (2 * n**2 + 6 * n - 1)) // 60", "code_10": "def fourth_Power_Sum(n):\n    return ((n * (n + 1))**2 * (2 * n**2 + 6 * n - 1)) // 60", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/213", "prompt": "\n\ndef concatenate_strings(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform the concatenation of two string tuples.\n  >>> concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n  ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n  >>> concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\"))\n  ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n  >>> concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\"))\n  ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n  \"\"\"\n", "solution": "  \n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def concatenate_strings(t1, t2): return tuple(a + b for a, b in zip(t1, t2))", "code_2": "def concatenate_strings(t1, t2): return tuple(map(lambda x, y: x + y, t1, t2))", "code_3": "import operator\ndef concatenate_strings(t1, t2): return tuple(map(operator.add, t1, t2))", "code_4": "from itertools import starmap\ndef concatenate_strings(t1, t2): return tuple(starmap(operator.add, zip(t1, t2)))", "code_5": "def concatenate_strings(t1, t2): return tuple(f'{a}{b}' for a, b in zip(t1, t2))", "code_6": "def concatenate_strings(t1, t2): return tuple(''.join(pair) for pair in zip(t1, t2))", "code_7": "def concatenate_strings(t1, t2): return tuple(str(a) + str(b) for a, b in zip(t1, t2))", "code_8": "def concatenate_strings(t1, t2): return tuple(a + b for a, b in zip(list(t1), list(t2)))", "code_9": "def concatenate_strings(t1, t2): return tuple(a + b for a, b in enumerate(zip(t1, t2)))", "code_10": "def concatenate_strings(t1, t2): return tuple(a + b for a, b in dict(zip(t1, t2)).items())", "pass@3": 1.0, "nDCG@10": 0.8389574121760603}
{"task_id": "MBPP/214", "prompt": "\n\ndef degree_radian(radian):\n \"\"\"\n Write a function to convert radians to degrees.\n >>> degree_radian(90)\n 5156.620156177409\n >>> degree_radian(60)\n 3437.746770784939\n >>> degree_radian(120)\n 6875.493541569878\n \"\"\"\n", "solution": " import math\n \n degree = radian*(180/math.pi)\n return degree", "results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef degree_radian(radian): return radian * 180 / math.pi", "code_2": "from math import pi\ndef degree_radian(radian): return radian * 180 / pi", "code_3": "def degree_radian(radian): return radian * 57.29577951308232", "code_4": "def degree_radian(radian): return radian * 0.017453292519943295 * 100", "code_5": "def degree_radian(radian): return radian / 0.0002908882086657216 * 180", "code_6": "def degree_radian(radian): return radian * 180 * 0.005555555555555556", "code_7": "def degree_radian(radian): return radian * 180 * 0.017453292519943295", "code_8": "def degree_radian(radian): return radian * 180 * 0.0002908882086657216 * 600", "code_9": "def degree_radian(radian): return radian * 180 * 0.000017453292519943295 * 100000", "code_10": "def degree_radian(radian): return radian * 180 * 0.0000017453292519943295 * 100000000", "pass@3": 0.30000000000000004, "nDCG@10": 0.1100458831490401}
{"task_id": "MBPP/215", "prompt": "\n\ndef decode_list(alist):\n    \"\"\"\n    Write a function to decode a run-length encoded given list.\n    >>> decode_list([[2, 1], 2, 3, [2, 4], 5,1])\n    [1,1,2,3,4,4,5,1]\n    >>> decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])\n    ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    >>> decode_list(['p', 'y', 't', 'h', 'o', 'n'])\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n", "solution": "    \n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]", "results": [0, 1, 1, 0, 0, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def decode_list(alist):\n    return [i if isinstance(i, int) or not isinstance(i[0], int) else [i[1]]*i[0] for sublist in alist for i in (sublist if isinstance(sublist, list) else [sublist])]", "code_2": "def decode_list(alist):\n    return sum(([i[1]]*i[0] if isinstance(i, list) else [i] for i in alist), [])", "code_3": "def decode_list(alist):\n    return [item for sublist in alist for item in ([sublist[1]]*sublist[0] if isinstance(sublist, list) else [sublist])]", "code_4": "def decode_list(alist):\n    return [item for sublist in alist for item in (sublist[1]*sublist[0] if isinstance(sublist, list) else [sublist])]", "code_5": "def decode_list(alist):\n    return [i[1] for i in alist if isinstance(i, list) for _ in range(i[0])] + [i for i in alist if not isinstance(i, list)]", "code_6": "def decode_list(alist):\n    return [item for sublist in alist for item in (sublist[0]*[sublist[1]] if isinstance(sublist, list) else [sublist])]", "code_7": "def decode_list(alist):\n    return [item for sublist in alist for item in (sublist[1]*sublist[0] if isinstance(sublist, list) else sublist)]", "code_8": "def decode_list(alist):\n    return [item for sublist in alist for item in ([sublist[1]]*sublist[0] if isinstance(sublist, list) else sublist)]", "code_9": "def decode_list(alist):\n    return [item for sublist in alist for item in (sublist[0]*[sublist[1]] if isinstance(sublist, list) else [sublist])]", "code_10": "def decode_list(alist):\n    return [item for sublist in alist for item in (sublist[1]*sublist[0] if isinstance(sublist, list) else [sublist])]", "pass@3": 0.8333333333333334, "nDCG@10": 0.39356081945565907}
{"task_id": "MBPP/216", "prompt": "\n\ndef check_subset_list(list1, list2):\n    \"\"\"\n    Write a function to check if a nested list is a subset of another nested list.\n    >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    False\n    >>> check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])\n    True\n    >>> check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])\n    False\n    \"\"\"\n", "solution": "     \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_subset_list(list1, list2):\n    return all(any(set(sub) <= set(list1) for sub in list2) for sub in list2)", "code_2": "def check_subset_list(list1, list2):\n    return all(all(i in list1 for i in sub) for sub in list2)", "code_3": "def check_subset_list(list1, list2):\n    return set(map(tuple, list2)).issubset(set(map(tuple, list1)))", "code_4": "def check_subset_list(list1, list2):\n    return all(all(item in list1 for item in sublist) for sublist in list2)", "code_5": "def check_subset_list(list1, list2):\n    return all(set(sublist).issubset(set(list1)) for sublist in list2)", "code_6": "def check_subset_list(list1, list2):\n    return all(all(elem in list1 for elem in sublist) for sublist in list2)", "code_7": "def check_subset_list(list1, list2):\n    return all(all(i in list1 for i in sub) for sub in list2)", "code_8": "def check_subset_list(list1, list2):\n    return all(all(item in list1 for item in sublist) for sublist in list2)", "code_9": "def check_subset_list(list1, list2):\n    return all(set(sublist).issubset(list1) for sublist in list2)", "code_10": "def check_subset_list(list1, list2):\n    return all(all(i in list1 for i in sub) for sub in list2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/217", "prompt": "\n\ndef first_Repeated_Char(str):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    >>> first_Repeated_Char(\"Google\")\n    \"o\"\n    >>> first_Repeated_Char(\"data\")\n    \"a\"\n    >>> first_Repeated_Char(\"python\")\n    '\\0'\n    \"\"\"\n", "solution": "     \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def first_Repeated_Char(str):\n    chars = set()\n    for char in str:\n        if char in chars:\n            return char\n        chars.add(char)\n    return '\\0'", "code_2": "def first_Repeated_Char(str):\n    chars = {}\n    for char in str:\n        if char in chars:\n            return char\n        chars[char] = 1\n    return '\\0'", "code_3": "def first_Repeated_Char(str):\n    for i in range(len(str)):\n        if str[i] in str[:i]:\n            return str[i]\n    return '\\0'", "code_4": "def first_Repeated_Char(str):\n    return next((char for i, char in enumerate(str) if char in str[:i]), '\\0')", "code_5": "def first_Repeated_Char(str):\n    chars = [0] * 256\n    for char in str:\n        if chars[ord(char)] == 1:\n            return char\n        chars[ord(char)] += 1\n    return '\\0'", "code_6": "def first_Repeated_Char(str):\n    chars = [False] * 256\n    for char in str:\n        if chars[ord(char)]:\n            return char\n        chars[ord(char)] = True\n    return '\\0'", "code_7": "def first_Repeated_Char(str):\n    chars = [0] * 256\n    for char in str:\n        chars[ord(char)] += 1\n        if chars[ord(char)] == 2:\n            return char\n    return '\\0'", "code_8": "def first_Repeated_Char(str):\n    chars = [0] * 256\n    for char in str:\n        chars[ord(char)] += 1\n    for char in str:\n        if chars[ord(char)] > 1:\n            return char\n    return '\\0'", "code_9": "def first_Repeated_Char(str):\n    chars = [0] * 256\n    for char in str:\n        chars[ord(char)] += 1\n    for i in range(256):\n        if chars[i] > 1:\n            return chr(i)\n    return '\\0'", "code_10": "def first_Repeated_Char(str):\n    chars = [0] * 256\n    for char in str:\n        chars[ord(char)] += 1\n    for char in str:\n        if chars[ord(char)] > 1:\n            chars[ord(char)] = 0\n            return char\n    return '\\0'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/218", "prompt": "\n\ndef min_Operations(A,B):\n    \"\"\"\n    Write a python function to find the minimum operations required to make two numbers equal.\n    >>> min_Operations(2,4)\n    1\n    >>> min_Operations(4,10)\n    4\n    >>> min_Operations(1,4)\n    3\n    \"\"\"\n", "solution": "    import math   \n      \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_Operations(A, B):\n    return abs(A - B)", "code_2": "def min_Operations(A, B):\n    return (A > B) and (A - B) or (B - A)", "code_3": "def min_Operations(A, B):\n    return max(A, B) - min(A, B)", "code_4": "def min_Operations(A, B):\n    return (A - B) if A > B else (B - A)", "code_5": "def min_Operations(A, B):\n    return sum(divmod(abs(A - B), 2))", "code_6": "def min_Operations(A, B):\n    return (A - B) // 2 + (A - B) % 2", "code_7": "def min_Operations(A, B):\n    diff = abs(A - B)\n    return diff // 2 + diff % 2", "code_8": "def min_Operations(A, B):\n    return sum(map(int, str(abs(A - B))))", "code_9": "def min_Operations(A, B):\n    return len(str(abs(A - B)))", "code_10": "def min_Operations(A, B):\n    return len(bin(abs(A - B))) - 3", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/219", "prompt": "\n\ndef extract_min_max(test_tup, K):\n  \"\"\"\n  Write a function to extract maximum and minimum k elements in the given tuple.\n  >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n  (3, 5, 8, 20)\n  >>> extract_min_max((4, 5, 6, 1, 2, 7), 3)\n  (1, 2, 4, 5, 6, 7)\n  >>> extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)\n  (2, 3, 4, 7, 8, 9, 11)\n  \"\"\"\n", "solution": "  \n  \n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_min_max(test_tup, K):\n    sorted_tup = sorted(test_tup)\n    return sorted_tup[:K] + sorted_tup[-K:]", "code_2": "import heapq\ndef extract_min_max(test_tup, K):\n    return heapq.nsmallest(K, test_tup) + heapq.nlargest(K, test_tup)", "code_3": "def extract_min_max(test_tup, K):\n    return tuple(sorted(test_tup)[:K] + sorted(test_tup, reverse=True)[:K])", "code_4": "def extract_min_max(test_tup, K):\n    min_heap = [-x for x in test_tup[:K]]\n    max_heap = [x for x in test_tup[:K]]\n    heapq.heapify(min_heap)\n    heapq.heapify(max_heap)\n    for x in test_tup[K:]:\n        if x < -min_heap[0]:\n            heapq.heappushpop(min_heap, -x)\n        if x > max_heap[0]:\n            heapq.heappushpop(max_heap, x)\n    return tuple(sorted(-x for x in min_heap) + max_heap)", "code_5": "def extract_min_max(test_tup, K):\n    min_k = heapq.nsmallest(K, test_tup)\n    max_k = heapq.nlargest(K, test_tup)\n    return tuple(sorted(min_k + max_k))", "code_6": "def extract_min_max(test_tup, K):\n    min_k = sorted(test_tup)[:K]\n    max_k = sorted(test_tup, reverse=True)[:K]\n    return tuple(min_k + max_k)", "code_7": "def extract_min_max(test_tup, K):\n    sorted_tup = sorted(test_tup)\n    return tuple(sorted_tup[:K] + sorted_tup[-K:])", "code_8": "def extract_min_max(test_tup, K):\n    min_k = sorted(test_tup)[:K]\n    max_k = sorted(test_tup)[-K:]\n    return tuple(min_k + max_k)", "code_9": "def extract_min_max(test_tup, K):\n    min_heap = [-x for x in test_tup[:K]]\n    max_heap = [x for x in test_tup[:K]]\n    heapq.heapify(min_heap)\n    heapq.heapify(max_heap)\n    for x in test_tup[K:]:\n        if x < -min_heap[0]:\n            heapq.heapreplace(min_heap, -x)\n        if x > max_heap[0]:\n            heapq.heapreplace(max_heap, x)\n    return tuple(sorted(-x for x in min_heap) + max_heap)", "code_10": "def extract_min_max(test_tup, K):\n    min_k = sorted(test_tup)[:K]\n    max_k = sorted(test_tup, reverse=True)[:K]\n    return tuple(sorted(min_k + max_k))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/220", "prompt": "\n\ndef replace_max_specialchar(text,n):\n \"\"\"\n Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n >>> replace_max_specialchar('Python language, Programming language.',2)\n ('Python:language: Programming language.')\n >>> replace_max_specialchar('a b c,d e f',3)\n ('a:b:c:d e f')\n >>> replace_max_specialchar('ram reshma,ram rahim',1)\n ('ram:reshma,ram rahim')\n \"\"\"\n", "solution": " import re\n \n return (re.sub(\"[ ,.]\", \":\", text, n))", "results": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def replace_max_specialchar(text, n):\n    for char in ',. ':\n        text = text.replace(char, ':', n)\n    return text", "code_2": "def replace_max_specialchar(text, n):\n    chars = [',', '.', ' ']\n    for _ in range(n):\n        for char in chars:\n            text = text.replace(char, ':', 1)\n    return text", "code_3": "def replace_max_specialchar(text, n):\n    trans = str.maketrans(',. ', ':::')\n    return text.translate(trans).replace('::::', '::', n)", "code_4": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub(r'[,.\\s]', ':', text, n)", "code_5": "def replace_max_specialchar(text, n):\n    return ''.join(':' if c in ',. ' else c for c, _ in zip(text, range(n))) + text[n:]", "code_6": "def replace_max_specialchar(text, n):\n    return ':'.join(part.strip() for part in text.replace(',', ':').replace('.', ':').split(':', n)) + text[len(':'.join(part.strip() for part in text.replace(',', ':').replace('.', ':').split(':', n))):]", "code_7": "def replace_max_specialchar(text, n):\n    for char in ',. ':\n        i = 0\n        while char in text and i < n:\n            text = text.replace(char, ':', 1)\n            i += 1\n    return text", "code_8": "def replace_max_specialchar(text, n):\n    chars = [',', '.', ' ']\n    i = 0\n    while i < n:\n        for char in chars:\n            if char in text:\n                text = text.replace(char, ':', 1)\n                i += 1\n                break\n    return text", "code_9": "def replace_max_specialchar(text, n):\n    chars = [',', '.', ' ']\n    for char in chars:\n        i = 0\n        while i < n and char in text:\n            text = text[:text.index(char)] + ':' + text[text.index(char)+1:]\n            i += 1\n    return text", "code_10": "def replace_max_specialchar(text, n):\n    chars = [',', '.', ' ']\n    for char in chars:\n        i = 0\n        while i < n and char in text:\n            text = text.replace(char, ':', 1)\n            i += 1\n    return text", "pass@3": 0.30000000000000004, "nDCG@10": 0.09478836436955079}
{"task_id": "MBPP/221", "prompt": "\n\ndef first_even(nums):\n    \"\"\"\n    Write a python function to find the first even number in a given list of numbers.\n    >>> first_even ([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    >>> first_even([2, 3, 4])\n    2\n    >>> first_even([5, 6, 7])\n    6\n    \"\"\"\n", "solution": "    \n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even", "results": [1, 1, 1, 1, 1, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def first_even(nums):\n    for num in nums:\n        if num % 2 == 0:\n            return num", "code_2": "def first_even(nums):\n    return next((num for num in nums if num % 2 == 0), None)", "code_3": "def first_even(nums):\n    return [num for num in nums if num % 2 == 0][0]", "code_4": "def first_even(nums):\n    return filter(lambda x: x % 2 == 0, nums).__next__()", "code_5": "def first_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))[0]", "code_6": "def first_even(nums):\n    return functools.reduce(lambda x, y: x if x % 2 == 0 else y, nums)", "code_7": "def first_even(nums):\n    return min(num for num in nums if num % 2 == 0)", "code_8": "def first_even(nums):\n    return sorted(nums, key=lambda x: x % 2)[0]", "code_9": "def first_even(nums):\n    return heapq.nsmallest(1, (num for num in nums if num % 2 == 0))[0]", "code_10": "def first_even(nums):\n    return more_itertools.first_true(nums, pred=lambda x: x % 2 == 0)", "pass@3": 0.9916666666666667, "nDCG@10": 0.791726719367984}
{"task_id": "MBPP/222", "prompt": "\n\ndef check_type(test_tuple):\n  \"\"\"\n  Write a function to check if all the elements in tuple have same data type or not.\n  >>> check_type((5, 6, 7, 3, 5, 6) )\n  True\n  >>> check_type((1, 2, \"4\") )\n  False\n  >>> check_type((3, 2, 1, 4, 5) )\n  True\n  \"\"\"\n", "solution": "  \n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_type(test_tuple):\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)", "code_2": "def check_type(test_tuple):\n    return len(set(type(i) for i in test_tuple)) == 1", "code_3": "def check_type(test_tuple):\n    first_type = type(test_tuple[0])\n    return all(type(i) == first_type for i in test_tuple)", "code_4": "def check_type(test_tuple):\n    return len({type(i) for i in test_tuple}) == 1", "code_5": "def check_type(test_tuple):\n    return all(map(lambda x: isinstance(x, type(test_tuple[0])), test_tuple))", "code_6": "def check_type(test_tuple):\n    return sum(isinstance(i, type(test_tuple[0])) for i in test_tuple) == len(test_tuple)", "code_7": "def check_type(test_tuple):\n    return reduce(lambda x, y: isinstance(y, type(x)), test_tuple)", "code_8": "def check_type(test_tuple):\n    return all(type(i) is type(test_tuple[0]) for i in test_tuple)", "code_9": "def check_type(test_tuple):\n    return len(set(map(type, test_tuple))) == 1", "code_10": "def check_type(test_tuple):\n    return all(type(i) == type(test_tuple[0]) for i in test_tuple[1:])", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/223", "prompt": "\n\ndef is_majority(arr, n, x):\n\t\"\"\"\n\tWrite a function to check for majority element in the given sorted array.\n\t>>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n\tTrue\n\t>>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n\tFalse\n\t>>> is_majority([1, 1, 1, 2, 2], 5, 1)\n\tTrue\n\t\"\"\"\n", "solution": "\t\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "results": [1, 1, 1, 1, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def is_majority(arr, n, x):\n    count = arr.count(x)\n    return count > n // 2", "code_2": "def is_majority(arr, n, x):\n    first = arr.index(x)\n    last = n - arr[::-1].index(x) - 1\n    return last - first + 1 > n // 2", "code_3": "def is_majority(arr, n, x):\n    from collections import Counter\n    counts = Counter(arr)\n    return counts[x] > n // 2", "code_4": "def is_majority(arr, n, x):\n    import numpy as np\n    count = np.count_nonzero(np.array(arr) == x)\n    return count > n // 2", "code_5": "def is_majority(arr, n, x):\n    count = sum(1 for i in arr if i == x)\n    return count > n // 2", "code_6": "def is_majority(arr, n, x):\n    from bisect import bisect_left, bisect_right\n    left = bisect_left(arr, x)\n    right = bisect_right(arr, x)\n    return right - left > n // 2", "code_7": "def is_majority(arr, n, x):\n    import statistics\n    try:\n        return statistics.mode(arr) == x\n    except statistics.StatisticsError:\n        return False", "code_8": "def is_majority(arr, n, x):\n    from itertools import groupby\n    groups = groupby(arr)\n    max_count = max(len(list(group)) for key, group in groups if key == x)\n    return max_count > n // 2", "code_9": "def is_majority(arr, n, x):\n    import pandas as pd\n    counts = pd.Series(arr).value_counts()\n    return counts[x] > n // 2", "code_10": "def is_majority(arr, n, x):\n    import scipy.stats\n    mode = scipy.stats.mode(arr)\n    return mode.mode[0] == x and mode.count[0] > n // 2", "pass@3": 0.9916666666666667, "nDCG@10": 0.7967610662472993}
{"task_id": "MBPP/224", "prompt": "\n\ndef count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count set bits of a given number.\n    >>> count_Set_Bits(2)\n    1\n    >>> count_Set_Bits(4)\n    1\n    >>> count_Set_Bits(6)\n    2\n    \"\"\"\n", "solution": "     \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_Set_Bits(n):\n    return bin(n).count('1')", "code_2": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "code_3": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count", "code_4": "def count_Set_Bits(n):\n    return sum(int(b) for b in bin(n)[2:])", "code_5": "def count_Set_Bits(n):\n    return sum(map(int, bin(n)[2:]))", "code_6": "def count_Set_Bits(n):\n    return sum(int(x) for x in f'{n:b}')", "code_7": "def count_Set_Bits(n):\n    return sum(int(x) for x in format(n, 'b'))", "code_8": "def count_Set_Bits(n):\n    return len([i for i in bin(n)[2:] if i == '1'])", "code_9": "def count_Set_Bits(n):\n    return len([i for i in format(n, 'b') if i == '1'])", "code_10": "def count_Set_Bits(n):\n    return len([i for i in f'{n:b}' if i == '1'])", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/225", "prompt": "\n\ndef find_Min(arr,low,high):\n    \"\"\"\n    Write a python function to find the minimum element in a sorted and rotated array.\n    >>> find_Min([1,2,3,4,5],0,4)\n    1\n    >>> find_Min([4,6,8],0,2)\n    4\n    >>> find_Min([2,3,5,7,9],0,4)\n    2\n    \"\"\"\n", "solution": "     \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]", "code_2": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)", "code_3": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)", "code_4": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid)\n    return find_Min(arr, mid + 1, high)", "code_5": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid, high)", "code_6": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid)\n    return find_Min(arr, mid, high - 1)", "code_7": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high - 1)", "code_8": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid)\n    return find_Min(arr, mid + 1, high - 1)", "code_9": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)", "code_10": "def find_Min(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid)\n    return find_Min(arr, mid + 1, high - 1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/226", "prompt": "\n\ndef odd_values_string(str):\n  \"\"\"\n  Write a python function to remove the characters which have odd index values of a given string.\n  >>> odd_values_string('abcdef')\n  'ace'\n  >>> odd_values_string('python')\n  'pto'\n  >>> odd_values_string('data')\n  'dt'\n  \"\"\"\n", "solution": "  \n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def odd_values_string(s): return s[::2]", "code_2": "def odd_values_string(s): return ''.join(s[i] for i in range(0, len(s), 2))", "code_3": "def odd_values_string(s): return ''.join([c for i, c in enumerate(s) if i % 2 == 0])", "code_4": "def odd_values_string(s): return ''.join(filter(lambda x: s.index(x) % 2 == 0, s))", "code_5": "def odd_values_string(s): return ''.join(map(lambda x: x[1], filter(lambda x: x[0] % 2 == 0, enumerate(s))))", "code_6": "def odd_values_string(s): return ''.join(reduce(lambda x, y: x + [y[1]], filter(lambda x: x[0] % 2 == 0, enumerate(s)), []))", "code_7": "def odd_values_string(s): return ''.join(itertools.compress(s, [i % 2 == 0 for i in range(len(s))]))", "code_8": "def odd_values_string(s): return ''.join(c for i, c in enumerate(s) if not i & 1)", "code_9": "def odd_values_string(s): return ''.join(c for i, c in enumerate(s) if ~i & 1)", "code_10": "def odd_values_string(s): return ''.join(c for i, c in enumerate(s) if i << 1 == i)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7846170207230131}
{"task_id": "MBPP/227", "prompt": "\n\ndef min_of_three(a,b,c):\n      \"\"\"\n      Write a function to find minimum of three numbers.\n      >>> min_of_three(10,20,0)\n      0\n      >>> min_of_three(19,15,18)\n      15\n      >>> min_of_three(-10,-20,-30)\n      -30\n      \"\"\"\n", "solution": "       \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def min_of_three(a, b, c):\n    return min(a, min(b, c))", "code_2": "def min_of_three(a, b, c):\n    return sorted([a, b, c])[0]", "code_3": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c", "code_4": "def min_of_three(a, b, c):\n    return a if a < b and a < c else b if b < c else c", "code_5": "def min_of_three(a, b, c):\n    return (b if a > b else a) if ((b if a > b else a) < c) else c", "code_6": "def min_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c", "code_7": "def min_of_three(a, b, c):\n    min_val = a\n    if b < min_val:\n        min_val = b\n    if c < min_val:\n        min_val = c\n    return min_val", "code_8": "def min_of_three(a, b, c):\n    return min(min(a, b), c)", "code_9": "def min_of_three(a, b, c):\n    return min(a, b, c)", "code_10": "min_of_three = lambda a, b, c: min(a, min(b, c))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/228", "prompt": "\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    >>> all_Bits_Set_In_The_Given_Range(4,1,2)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(17,2,4)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(39,4,6)\n    False\n    \"\"\"\n", "solution": "      \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & ((1 << r) - (1 << (l - 1)))) == ((1 << r) - (1 << (l - 1)))", "code_2": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n >> (l - 1)) & ((1 << (r - l + 1)) - 1) == (1 << (r - l + 1)) - 1", "code_3": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    mask = (1 << r) - (1 << (l - 1))\n    return (n & mask) == mask", "code_4": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n >> (l - 1)) & ~((1 << (r - l + 1)) - 1) == 0", "code_5": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return ~(n >> (l - 1)) & ((1 << (r - l + 1)) - 1) == 0", "code_6": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & ~((1 << r) - 1)) >> (l - 1) == 0", "code_7": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & ~((1 << (r + 1)) - 1)) >> (l - 1) == (1 << (r - l + 1)) - 1", "code_8": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n >> (l - 1)) & ((1 << (r - l + 1)) - 1) == (1 << (r - l + 1)) - 1", "code_9": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & ((1 << r) - (1 << (l - 1)))) == ((1 << r) - (1 << (l - 1)))", "code_10": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n >> (l - 1)) & ((1 << (r - l + 1)) - 1) == (1 << (r - l + 1)) - 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/229", "prompt": "\n\ndef re_arrange_array(arr, n):\n  \"\"\"\n  Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n  [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n  >>> re_arrange_array([12, -14, -26, 13, 15], 5)\n  [-14, -26, 12, 13, 15]\n  >>> re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)\n  [-42, -39, -78, 10, 24, 36, 85]\n  \"\"\"\n", "solution": "  \n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def re_arrange_array(arr, n):\n    i, j = 0, n - 1\n    while i < j:\n        while arr[i] < 0:\n            i += 1\n        while arr[j] >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr", "code_2": "def re_arrange_array(arr, n):\n    return [x for x in arr if x < 0] + [x for x in arr if x >= 0]", "code_3": "def re_arrange_array(arr, n):\n    arr.sort(key=lambda x: x < 0, reverse=True)\n    return arr", "code_4": "def re_arrange_array(arr, n):\n    neg, pos = [], []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos", "code_5": "def re_arrange_array(arr, n):\n    i = 0\n    for j in range(n):\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    return arr", "code_6": "def re_arrange_array(arr, n):\n    arr[:] = sorted(arr, key=lambda x: x < 0, reverse=True)\n    return arr", "code_7": "def re_arrange_array(arr, n):\n    arr[:] = [x for x in arr if x < 0] + [x for x in arr if x >= 0]\n    return arr", "code_8": "def re_arrange_array(arr, n):\n    arr[:] = sorted(arr, key=lambda x: x >= 0)\n    return arr", "code_9": "def re_arrange_array(arr, n):\n    i, j = 0, n - 1\n    while i < j:\n        if arr[i] >= 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        if arr[i] < 0:\n            i += 1\n        if arr[j] >= 0:\n            j -= 1\n    return arr", "code_10": "def re_arrange_array(arr, n):\n    arr[:] = sorted(arr, key=lambda x: x < 0)\n    return arr", "pass@3": 0.30000000000000004, "nDCG@10": 0.08514311764162101}
{"task_id": "MBPP/230", "prompt": "\n\ndef replace_blank(str1,char):\n \"\"\"\n Write a function to replace blank spaces with any character in a string.\n >>> replace_blank(\"hello people\",'@')\n (\"hello@people\")\n >>> replace_blank(\"python program language\",'$')\n (\"python$program$language\")\n >>> replace_blank(\"blank space\",\"-\")\n (\"blank-space\")\n \"\"\"\n", "solution": " \n str2 = str1.replace(' ', char)\n return str2", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using `str.replace()` method:\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)", "code_2": "Using `join()` and `split()` methods:\ndef replace_blank(str1, char):\n    return char.join(str1.split(' '))", "code_3": "Using list comprehension:\ndef replace_blank(str1, char):\n    return ''.join([char if x == ' ' else x for x in str1])", "code_4": "Using `map()` function:\ndef replace_blank(str1, char):\n    return ''.join(map(lambda x: char if x == ' ' else x, str1))", "code_5": "Using `re.sub()` method from `re` module:\nimport re\ndef replace_blank(str1, char):\n    return re.sub(' ', char, str1)", "code_6": "Using `str.translate()` and `str.maketrans()` methods:\ndef replace_blank(str1, char):\n    return str1.translate(str.maketrans(' ', char))", "code_7": "Using `str.format()` method:\ndef replace_blank(str1, char):\n    return char.join(str1.split())", "code_8": "Using `str.join()` and generator expression:\ndef replace_blank(str1, char):\n    return char.join(x if x != ' ' else char for x in str1)", "code_9": "Using `itertools.chain()` and `itertools.repeat()` functions:\nimport itertools\ndef replace_blank(str1, char):\n    return ''.join(itertools.chain(*zip(itertools.repeat(char), str1)))[1:]", "code_10": "Using `functools.reduce()` function:\nimport functools\ndef replace_blank(str1, char):\n    return functools.reduce(lambda x, y: x + char + y if y == ' ' else x + y, str1)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/231", "prompt": "\n\ndef max_sum(tri, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum in the given right triangle of numbers.\n\t>>> max_sum([[1], [2,1], [3,3,2]], 3)\n\t6\n\t>>> max_sum([[1], [1, 2], [4, 1, 12]], 3)\n\t15\n\t>>> max_sum([[2], [3,2], [13,23,12]], 3)\n\t28\n\t\"\"\"\n", "solution": "\t \n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\tfor j in range(1, i): \n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n\treturn (max(tri[n-1]))", "results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def max_sum(tri, n):\n\tfor i in range(n-2, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_2": "def max_sum(tri, n):\n\tfor row in reversed(tri[:-1]):\n\t\tfor i in range(len(row)):\n\t\t\trow[i] += max(tri[row+1][i], tri[row+1][i+1])\n\treturn tri[0][0]", "code_3": "def max_sum(tri, n):\n\tfor i in range(n-2, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\ttri[i][j] += max(tri[i+1][j:j+2])\n\treturn tri[0][0]", "code_4": "def max_sum(tri, n):\n\tfor row in reversed(tri[:-1]):\n\t\tfor i, val in enumerate(row):\n\t\t\trow[i] += max(tri[row+1][i:i+2])\n\treturn tri[0][0]", "code_5": "def max_sum(tri, n):\n\tfor i in range(n-2, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_6": "def max_sum(tri, n):\n\tfor row in reversed(tri[:-1]):\n\t\tfor i, val in enumerate(row):\n\t\t\trow[i] += max(tri[row+1][i], tri[row+1][i+1])\n\treturn tri[0][0]", "code_7": "def max_sum(tri, n):\n\tfor i in range(n-2, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\ttri[i][j] += max(tri[i+1][j:j+2])\n\treturn tri[0][0]", "code_8": "def max_sum(tri, n):\n\tfor row in reversed(tri[:-1]):\n\t\tfor i, val in enumerate(row):\n\t\t\trow[i] += max(tri[row+1][i:i+2])\n\treturn tri[0][0]", "code_9": "def max_sum(tri, n):\n\tfor i in range(n-2, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n\treturn tri[0][0]", "code_10": "def max_sum(tri, n):\n\tfor row in reversed(tri[:-1]):\n\t\tfor i, val in enumerate(row):\n\t\t\trow[i] += max(tri[row+1][i], tri[row+1][i+1])\n\treturn tri[0][0]", "pass@3": 0.9166666666666666, "nDCG@10": 0.5548989126424904}
{"task_id": "MBPP/232", "prompt": "\n\ndef larg_nnum(list1,n):\n \"\"\"\n Write a function to get the n largest items from a dataset.\n >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\n [100,90]\n >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)\n [100,90,80,70,60]\n >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)\n [100,90,80]\n \"\"\"\n", "solution": " import heapq\n \n largest=heapq.nlargest(n,list1)\n return largest", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def larg_nnum(list1, n):\n    return sorted(list1, reverse=True)[:n]", "code_2": "import heapq\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)", "code_3": "def larg_nnum(list1, n):\n    list1.sort(reverse=True)\n    return list1[:n]", "code_4": "def larg_nnum(list1, n):\n    return [x for x in sorted(set(list1), reverse=True)[:n]]", "code_5": "def larg_nnum(list1, n):\n    return list(set(list1))[-n:]", "code_6": "def larg_nnum(list1, n):\n    return sorted(list(set(list1)))[-n:]", "code_7": "def larg_nnum(list1, n):\n    return sorted(list1)[-n:][::-1]", "code_8": "def larg_nnum(list1, n):\n    return [x for x in reversed(sorted(set(list1)))][:n]", "code_9": "def larg_nnum(list1, n):\n    return sorted(list1, reverse=True)[slice(n)]", "code_10": "def larg_nnum(list1, n):\n    return sorted(list1, reverse=True)[:n:1]", "pass@3": 1.0, "nDCG@10": 0.8364586133797037}
{"task_id": "MBPP/233", "prompt": "\n\ndef lateralsuface_cylinder(r,h):\n  \"\"\"\n  Write a function to find the lateral surface area of a cylinder.\n  >>> lateralsuface_cylinder(10,5)\n  314.15000000000003\n  >>> lateralsuface_cylinder(4,5)\n  125.66000000000001\n  >>> lateralsuface_cylinder(4,10)\n  251.32000000000002\n  \"\"\"\n", "solution": "  \n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef lateralsuface_cylinder(r,h):\n    return 2 * math.pi * r * h", "code_2": "from math import pi\ndef lateralsuface_cylinder(r,h):\n    return 2 * pi * r * h", "code_3": "import math\ndef lateralsuface_cylinder(r,h):\n    return 2 * math.pi * r * abs(h)", "code_4": "from math import pi\ndef lateralsuface_cylinder(r,h):\n    return 2 * pi * r * abs(h)", "code_5": "import math\ndef lateralsuface_cylinder(r,h):\n    return 2 * math.pi * abs(r) * h", "code_6": "from math import pi\ndef lateralsuface_cylinder(r,h):\n    return 2 * pi * abs(r) * h", "code_7": "import math\ndef lateralsuface_cylinder(r,h):\n    return 2 * math.pi * abs(r) * abs(h)", "code_8": "from math import pi\ndef lateralsuface_cylinder(r,h):\n    return 2 * pi * abs(r) * abs(h)", "code_9": "import math\ndef lateralsuface_cylinder(r,h):\n    return abs(2 * math.pi * r * h)", "code_10": "from math import pi\ndef lateralsuface_cylinder(r,h):\n    return abs(2 * pi * r * h)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/234", "prompt": "\n\ndef volume_cube(l):\n  \"\"\"\n  Write a function to find the volume of a cube.\n  >>> volume_cube(3)\n  27\n  >>> volume_cube(2)\n  8\n  >>> volume_cube(5)\n  125\n  \"\"\"\n", "solution": "  \n  volume = l * l * l\n  return volume", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def volume_cube(l): return l**3`", "code_2": "`volume_cube = lambda l: l**3`", "code_3": "`def volume_cube(l): return pow(l, 3)`", "code_4": "`volume_cube = pow`", "code_5": "`def volume_cube(l): return l*l*l`", "code_6": "`volume_cube = lambda l: l*l*l`", "code_7": "`def volume_cube(l): return reduce(lambda x, y: x*y, [l]*3)`", "code_8": "`volume_cube = lambda l: reduce(lambda x, y: x*y, [l]*3)`", "code_9": "`def volume_cube(l): return math.pow(l, 3)`", "code_10": "`volume_cube = lambda l: math.pow(l, 3)`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/235", "prompt": "\n\ndef even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(20)\n    30\n    >>> even_bit_set_number(30)\n    30\n    \"\"\"\n", "solution": "     \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def even_bit_set_number(n):\n    return n | 0xAAAAAAAA", "code_2": "def even_bit_set_number(n):\n    return n | 0x55555555", "code_3": "def even_bit_set_number(n):\n    return n | 0x2AAAAAAA", "code_4": "def even_bit_set_number(n):\n    return n | 0x5555555555555555", "code_5": "def even_bit_set_number(n):\n    return n | 0xAAAAAAAAAAAAAAAA", "code_6": "def even_bit_set_number(n):\n    return n | 0x55555555555555555555555555555555", "code_7": "def even_bit_set_number(n):\n    return n | (1 << 32) - 1", "code_8": "def even_bit_set_number(n):\n    return n | (1 << 64) - 1", "code_9": "def even_bit_set_number(n):\n    return n | ((1 << 32) - 1) | ((1 << 32) << 32)", "code_10": "def even_bit_set_number(n):\n    return n | ((1 << 64) - 1) | ((1 << 64) << 64)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/236", "prompt": "\n\ndef No_of_Triangle(N,K):\n    \"\"\"\n    Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    >>> No_of_Triangle(4,2)\n    7\n    >>> No_of_Triangle(4,3)\n    3\n    >>> No_of_Triangle(1,3)\n    -1\n    \"\"\"\n", "solution": "    \n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def No_of_Triangle(N,K):\n    if N < K: return -1\n    return (N - K + 1) ** 2", "code_2": "def No_of_Triangle(N,K):\n    return -1 if N < K else (N - K + 1) ** 2", "code_3": "def No_of_Triangle(N,K):\n    return (N - K + 1) ** 2 if N >= K else -1", "code_4": "def No_of_Triangle(N,K):\n    diff = N - K + 1\n    return diff * diff if diff > 0 else -1", "code_5": "def No_of_Triangle(N,K):\n    return (diff := N - K + 1) * diff if diff > 0 else -1", "code_6": "def No_of_Triangle(N,K):\n    diff = max(N - K + 1, 0)\n    return diff * diff if diff else -1", "code_7": "def No_of_Triangle(N,K):\n    return (diff := max(N - K + 1, 0)) * diff if diff else -1", "code_8": "def No_of_Triangle(N,K):\n    return (N >= K) * (N - K + 1) ** 2 - (N < K)", "code_9": "def No_of_Triangle(N,K):\n    return (N >= K) * ((N - K + 1) ** 2) or -1", "code_10": "def No_of_Triangle(N,K):\n    return ((N >= K) and (N - K + 1) ** 2) or -1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/237", "prompt": "\n\ndef check_occurences(test_list):\n  \"\"\"\n  Write a function to check the occurrences of records which occur similar times in the given tuples.\n  >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] )\n  {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n  >>> check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] )\n  {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n  >>> check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] )\n  {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n  \"\"\"\n", "solution": "  from collections import Counter \n  \n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = (min(a, b), max(a, b))\n        d[k] = d.get(k, 0) + 1\n    return d", "code_2": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = tuple(sorted((a, b)))\n        d[k] = d.get(k, 0) + 1\n    return d", "code_3": "from collections import defaultdict\ndef check_occurences(test_list):\n    d = defaultdict(int)\n    for a, b in test_list:\n        k = (min(a, b), max(a, b))\n        d[k] += 1\n    return dict(d)", "code_4": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = (a, b) if a < b else (b, a)\n        d[k] = d.get(k, 0) + 1\n    return d", "code_5": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = tuple(sorted([a, b]))\n        d[k] = d.get(k, 0) + 1\n    return d", "code_6": "from collections import Counter\ndef check_occurences(test_list):\n    return dict(Counter(tuple(sorted((a, b))) for a, b in test_list))", "code_7": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = (a, b) if a < b else (b, a)\n        d[k] = d[k] + 1 if k in d else 1\n    return d", "code_8": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = (a, b) if a < b else (b, a)\n        d[k] = d[k] + 1 if k in d else 1\n    return {k: v for k, v in d.items() if v > 1}", "code_9": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = (a, b) if a < b else (b, a)\n        d[k] = d.setdefault(k, 0) + 1\n    return d", "code_10": "def check_occurences(test_list):\n    d = {}\n    for a, b in test_list:\n        k = (a, b) if a < b else (b, a)\n        d[k] = d[k] + 1 if k in d else 1\n    return {k: v for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True)}", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/238", "prompt": "\n\ndef number_of_substrings(str):\n\t\"\"\"\n\tWrite a python function to count number of non-empty substrings of a given string.\n\t>>> number_of_substrings(\"abc\")\n\t6\n\t>>> number_of_substrings(\"abcd\")\n\t10\n\t>>> number_of_substrings(\"abcde\")\n\t15\n\t\"\"\"\n", "solution": "\t \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "results": [1, 1, 1, 1, 0, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def number_of_substrings(s): return len(s) * (len(s) + 1) // 2", "code_2": "def number_of_substrings(s): return sum(range(1, len(s) + 1))", "code_3": "def number_of_substrings(s): return (len(s) ** 2 + len(s)) // 2", "code_4": "def number_of_substrings(s): return sum(i for i in range(1, len(s) + 1))", "code_5": "def number_of_substrings(s): return sum(map(lambda x: x*(x+1)//2, range(1, len(s)+1)))", "code_6": "def number_of_substrings(s): return reduce(lambda x, y: x + y, range(1, len(s) + 1))", "code_7": "def number_of_substrings(s): return functools.reduce(operator.add, range(1, len(s) + 1))", "code_8": "def number_of_substrings(s): return sum(i for i in range(len(s), 0, -1))", "code_9": "def number_of_substrings(s): return sum(i for i in reversed(range(1, len(s) + 1)))", "code_10": "def number_of_substrings(s): return sum(i for i in range(len(s), 0, -1) if i <= len(s))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7630946912803437}
{"task_id": "MBPP/239", "prompt": "\n\ndef get_total_number_of_sequences(m,n):\n\t\"\"\"\n\tWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\t>>> get_total_number_of_sequences(10, 4)\n\t4\n\t>>> get_total_number_of_sequences(5, 2)\n\t6\n\t>>> get_total_number_of_sequences(16, 3)\n\t84\n\t\"\"\"\n", "solution": "\t \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(2 * j, m + 1):\n                dp[i][k] += dp[i - 1][j]\n    return sum(dp[n])", "code_2": "def get_total_number_of_sequences(m, n):\n    dp = [0] * (m + 1)\n    for i in range(1, m + 1):\n        dp[i] = 1\n    for _ in range(2, n + 1):\n        for j in range(m, 0, -1):\n            dp[j] = sum(dp[2 * i] for i in range(1, j // 2 + 1))\n    return sum(dp)", "code_3": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        for j in range(m, 0, -1):\n            dp[j] = sum(dp[2 * i] for i in range(1, j // 2 + 1))\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_4": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m + 1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_5": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m, 0, -1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_6": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m, 0, -1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_7": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m, 0, -1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_8": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m, 0, -1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_9": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m, 0, -1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "code_10": "def get_total_number_of_sequences(m, n):\n    dp = [1] * (m + 1)\n    for _ in range(2, n + 1):\n        dp = [sum(dp[2 * i] for i in range(1, j // 2 + 1)) for j in range(m, 0, -1)]\n    return sum(dp[2 * i] for i in range(1, m // 2 + 1))", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/240", "prompt": "\n\ndef replace_list(list1,list2):\n \"\"\"\n Write a function to replace the last element of the list with another list.\n >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n [1, 3, 5, 7, 9, 2, 4, 6, 8]\n >>> replace_list([1,2,3,4,5],[5,6,7,8])\n [1,2,3,4,5,6,7,8]\n >>> replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])\n [\"red\",\"blue\",\"yellow\"]\n \"\"\"\n", "solution": " \n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1", "code_2": "def replace_list(list1, list2):\n    return list1[:-1] + list2", "code_3": "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1", "code_4": "def replace_list(list1, list2):\n    del list1[-1]\n    list1 += list2\n    return list1", "code_5": "def replace_list(list1, list2):\n    list1[-1:] = []\n    list1.extend(list2)\n    return list1", "code_6": "def replace_list(list1, list2):\n    list1[:] = list1[:-1] + list2\n    return list1", "code_7": "def replace_list(list1, list2):\n    list1[:-1] = list1[:-1] + list2\n    return list1", "code_8": "def replace_list(list1, list2):\n    list1[-1:] = list2[:]\n    return list1", "code_9": "def replace_list(list1, list2):\n    list1[-1:] = list2.copy()\n    return list1", "code_10": "def replace_list(list1, list2):\n    list1[-1:] = list(list2)\n    return list1", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/241", "prompt": "\n\ndef array_3d(m,n,o):\n \"\"\"\n Write a function to generate a 3d array having each element as '*'.\n >>> array_3d(6,4,3)\n [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n >>> array_3d(5,3,4)\n [[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n >>> array_3d(1,2,3)\n [[['*'],['*']],[['*'],['*']],[['*'],['*']]]\n \"\"\"\n", "solution": " \n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension:\ndef array_3d(m,n,o): return [[['*' for _ in range(m)] for _ in range(n)] for _ in range(o)]", "code_2": "Using nested loops:\ndef array_3d(m,n,o):\n    arr = []\n    for _ in range(o):\n        arr2 = []\n        for _ in range(n):\n            arr2.append(['*' for _ in range(m)])\n        arr.append(arr2)\n    return arr", "code_3": "Using map and lambda functions:\ndef array_3d(m,n,o): return list(map(lambda _: list(map(lambda _: ['*']*m, range(n))), range(o)))", "code_4": "Using numpy:\nimport numpy as np\ndef array_3d(m,n,o): return np.full((o, n, m), '*')", "code_5": "Using itertools.repeat:\nfrom itertools import repeat\ndef array_3d(m,n,o): return list(repeat(list(repeat(list(repeat('*', m)), n)), o))", "code_6": "Using operator.mul:\nimport operator\ndef array_3d(m,n,o): return operator.mul(list(operator.mul(list(operator.mul(['*'], m)), n)), o)", "code_7": "Using recursion:\ndef array_3d(m,n,o):\n    if o == 0:\n        return []\n    else:\n        return [array_3d(m,n,o-1), [['*' for _ in range(m)] for _ in range(n)]]", "code_8": "Using tensorflow:\nimport tensorflow as tf\ndef array_3d(m,n,o): return tf.fill([o, n, m], '*').numpy().tolist()", "code_9": "Using pythran:\n#pythran export array_3d(int, int, int)\ndef array_3d(m,n,o):\n    arr = [None] * o\n    for i in range(o):\n        arr2 = [None] * n\n        for j in range(n):\n            arr2[j] = ['*'] * m\n        arr[i] = arr2\n    return arr", "code_10": "Using cython:\n#cython: language_level=3\ndef array_3d(int m, int n, int o):\n    arr = [None] * o\n    for i in range(o):\n        arr2 = [None] * n\n        for j in range(n):\n            arr2[j] = ['*'] * m\n        arr[i] = arr2\n    return arr", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/242", "prompt": "\n\ndef count_charac(str1):\n \"\"\"\n Write a function to count total characters in a string.\n >>> count_charac(\"python programming\")\n 18\n >>> count_charac(\"language\")\n 8\n >>> count_charac(\"words\")\n 5\n \"\"\"\n", "solution": " \n total = 0\n for i in str1:\n    total = total + 1\n return total", "results": [1, 1, 0, 0, 0, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def count_charac(str1): return len(str1)", "code_2": "def count_charac(str1): return sum(1 for _ in str1)", "code_3": "def count_charac(str1): return len(str1.replace(\" \", \"\"))", "code_4": "def count_charac(str1): return reduce(lambda x, y: x + 1, str1, 0)", "code_5": "def count_charac(str1): return functools.reduce(operator.add, (1 for _ in str1), 0)", "code_6": "def count_charac(str1): return str1.count('') - 1", "code_7": "def count_charac(str1): return sum(map(len, str1.split()))", "code_8": "def count_charac(str1): return len([char for char in str1])", "code_9": "def count_charac(str1): return sum(len(word) for word in str1.split())", "code_10": "def count_charac(str1): return len(re.findall(r'\\S', str1))", "pass@3": 0.8333333333333334, "nDCG@10": 0.5067837010870874}
{"task_id": "MBPP/243", "prompt": "\n\ndef sort_on_occurence(lst):\n\t\"\"\"\n\tWrite a function to sort the given list based on the occurrence of first element of tuples.\n\t>>> sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n\t[(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\t>>> sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])\n\t[('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n\t>>> sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])\n\t[(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n\t\"\"\"\n", "solution": "\t \n\tdct = {} \n\tfor i, j in lst: \n\t\tdct.setdefault(i, []).append(j) \n\treturn ([(i, *dict.fromkeys(j), len(j)) \n\t\t\t\tfor i, j in dct.items()]) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import defaultdict\ndef sort_on_occurence(lst):\n    d = defaultdict(list)\n    for k, v in lst:\n        d[k].append(v)\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_2": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        d.setdefault(k, []).append(v)\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_3": "from itertools import groupby\ndef sort_on_occurence(lst):\n    lst.sort()\n    return sorted((k, *[i[1] for i in g], len(list(g))) for k, g in groupby(lst, key=lambda x: x[0]))", "code_4": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_5": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        d[k] = d.get(k, []) + [v]\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_6": "from operator import itemgetter\ndef sort_on_occurence(lst):\n    lst.sort(key=itemgetter(0))\n    d = {k: [i[1] for i in g] for k, g in groupby(lst, key=itemgetter(0))}\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_7": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        d[k] = d[k] + [v] if k in d else [v]\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_8": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        d[k] = d.get(k, [])\n        d[k].append(v)\n    return sorted((k, *v, len(v)) for k, v in d.items())", "code_9": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        d[k] = d[k] + [v] if k in d else [v]\n    return sorted((k, *d[k], len(d[k])) for k in d)", "code_10": "def sort_on_occurence(lst):\n    d = {}\n    for k, v in lst:\n        d[k] = d[k] + [v] if k in d else [v]\n    return sorted((k, *v, len(v)) for k, v in sorted(d.items()))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/244", "prompt": "\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(6)\n    9\n    >>> next_Perfect_Square(9)\n    16\n    \"\"\"\n", "solution": "    import math  \n     \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "results": [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef next_Perfect_Square(N):\n    return (math.isqrt(N) + 1) ** 2", "code_2": "import math\ndef next_Perfect_Square(N):\n    return math.ceil(math.sqrt(N)) ** 2", "code_3": "def next_Perfect_Square(N):\n    i = 1\n    while i * i <= N:\n        i += 1\n    return i * i", "code_4": "def next_Perfect_Square(N):\n    i = 1\n    while True:\n        if i * i > N:\n            return i * i\n        i += 1", "code_5": "def next_Perfect_Square(N):\n    return ((N + 1) // (2 * (N ** 0.5) + 1) + 1) ** 2", "code_6": "def next_Perfect_Square(N):\n    return ((N ** 0.5) + 1) ** 2", "code_7": "def next_Perfect_Square(N):\n    return (N + 1) // (2 * (N ** 0.5) + 1) ** 2", "code_8": "def next_Perfect_Square(N):\n    return (N + 1) // (2 * (N ** 0.5) + 1) + (N ** 0.5) + 1", "code_9": "def next_Perfect_Square(N):\n    return (N + 1) // (2 * (N ** 0.5) + 1) + (N ** 0.5) + 1 if N % 2 == 0 else (N + 1) // (2 * (N ** 0.5) + 1) + (N ** 0.5) + 2", "code_10": "def next_Perfect_Square(N):\n    return (N + 1) // (2 * (N ** 0.5) + 1) + (N ** 0.5) + 1 + (N % 2)", "pass@3": 0.7083333333333333, "nDCG@10": 0.4249260138166711}
{"task_id": "MBPP/245", "prompt": "\n\ndef max_sum(arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\t>>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n\t194\n\t>>> max_sum([80, 60, 30, 40, 20, 10], 6)\n\t210\n\t>>> max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8)\n\t138\n\t\"\"\"\n", "solution": "\t \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = arr[0]\n    dec[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum", "code_2": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[n - 1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n        dec[n - i - 1] = max(dec[n - i], arr[n - i - 1])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))", "code_3": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))", "code_4": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n        dec[~i] = max(dec[~i + 1], arr[~i])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))", "code_5": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    return max(map(sum, zip(inc, dec))) - max(arr)", "code_6": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n        dec[~i] = max(dec[~i + 1], arr[~i])\n    return max(map(sum, zip(inc, dec))) - max(arr)", "code_7": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    return max(inc[i] + dec[i] for i in range(n)) - max(arr)", "code_8": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n        dec[~i] = max(dec[~i + 1], arr[~i])\n    return max(inc[i] + dec[i] for i in range(n)) - max(arr)", "code_9": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        dec[i] = max(dec[i + 1], arr[i])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))", "code_10": "def max_sum(arr, n):\n    inc = [0] * n\n    dec = [0] * n\n    inc[0] = dec[-1] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i - 1], arr[i])\n        dec[~i] = max(dec[~i + 1], arr[~i])\n    return max(inc[i] + dec[i] - arr[i] for i in range(n))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/246", "prompt": "\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    >>> babylonian_squareroot(10)\n    3.162277660168379\n    >>> babylonian_squareroot(2)\n    1.414213562373095\n    >>> babylonian_squareroot(9)\n    3.0\n    \"\"\"\n", "solution": "    \n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def babylonian_squareroot(n):\n    x = n\n    y = (x + 1) / 2\n    while y < x:\n        x = y\n        y = (x + n / x) / 2\n    return x", "code_2": "def babylonian_squareroot(n):\n    x = n\n    y = (x + 1) / 2\n    while y < x:\n        x = y\n        y = (x + n / x) * 0.5\n    return x", "code_3": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5\n    while y < x:\n        x = y\n        y = (x + n / x) * 0.5\n    return x", "code_4": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5 + 1\n    while y < x:\n        x = y\n        y = (x + n / x) * 0.5\n    return x", "code_5": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5\n    while y < x:\n        x = y\n        y = (x + n / x) / 2.0\n    return x", "code_6": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5 + 1\n    while y < x:\n        x = y\n        y = (x + n / x) / 2.0\n    return x", "code_7": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5\n    while y < x:\n        x = y\n        y = 0.5 * (x + n / x)\n    return x", "code_8": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5 + 1\n    while y < x:\n        x = y\n        y = 0.5 * (x + n / x)\n    return x", "code_9": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5\n    while y < x:\n        x = y\n        y = 0.5 * (x + n / float(x))\n    return x", "code_10": "def babylonian_squareroot(n):\n    x = n\n    y = n * 0.5 + 1\n    while y < x:\n        x = y\n        y = 0.5 * (x + n / float(x))\n    return x", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/247", "prompt": "\n\ndef lps(str):\n\t\"\"\"\n\tWrite a function to find the longest palindromic subsequence in the given string.\n\t>>> lps(\"TENS FOR TENS\")\n\t5\n\t>>> lps(\"CARDIO FOR CARDS\")\n\t7\n\t>>> lps(\"PART OF THE JOURNEY IS PART\")\n\t9\n\t\"\"\"\n", "solution": "\t \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "results": [1, 0, 1, 0, 1, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "code_2": "def lps(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        prev = 0\n        for j in range(i, n):\n            temp = dp[j]\n            if s[i] == s[j]:\n                dp[j] = prev + 2\n            prev = max(prev, temp)\n    return max(dp)", "code_3": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    for i in range(n - 1, -1, -1):\n        prev = 0\n        for j in range(i + 1, n):\n            temp = dp[j]\n            if s[i] == s[j]:\n                dp[j] = prev + 2\n            prev = max(prev, temp)\n    return max(dp)", "code_4": "def lps(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        next = 0\n        for j in range(i, n):\n            temp = dp[j + 1]\n            if s[i] == s[j]:\n                dp[j + 1] = next + 2\n            next = max(next, temp)\n    return dp[n]", "code_5": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    for i in range(n - 1, -1, -1):\n        next = 0\n        for j in range(i + 1, n):\n            temp = dp[j]\n            if s[i] == s[j]:\n                dp[j] = next + 2\n            next = max(next, temp)\n    return max(dp)", "code_6": "def lps(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] = 1\n        prev = 0\n        for j in range(i + 1, n):\n            temp = dp[j]\n            if s[i] == s[j]:\n                dp[j] = prev + 2\n            prev = max(prev, temp)\n    return max(dp)", "code_7": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    for i in range(n - 1, -1, -1):\n        next = 0\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[j] = 2 + next\n            next = max(next, dp[j])\n    return max(dp)", "code_8": "def lps(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        next = 0\n        for j in range(i, n):\n            temp = dp[j + 1]\n            if s[i] == s[j]:\n                dp[j + 1] = 2 + next\n            next = max(next, temp)\n    return dp[n]", "code_9": "def lps(s):\n    n = len(s)\n    dp = [0] * n\n    for i in range(n - 1, -1, -1):\n        dp[i] = 1\n        next = 0\n        for j in range(i + 1, n):\n            temp = dp[j]\n            if s[i] == s[j]:\n                dp[j] = 2 + next\n            next = max(next, temp)\n    return max(dp)", "code_10": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    for i in range(n - 1, -1, -1):\n        next = 0\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[j] = 2 + next\n            next = max(next, dp[j - 1])\n    return max(dp)", "pass@3": 0.9166666666666666, "nDCG@10": 0.5599332595218056}
{"task_id": "MBPP/248", "prompt": "\n\ndef harmonic_sum(n):\n  \"\"\"\n  Write a function to calculate the harmonic sum of n-1.\n  >>> harmonic_sum(7)\n  2.5928571428571425\n  >>> harmonic_sum(4)\n  2.083333333333333\n  >>> harmonic_sum(19)\n  3.547739657143682\n  \"\"\"\n", "solution": "  \n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def harmonic_sum(n): return sum(1/i for i in range(1, n))", "code_2": "def harmonic_sum(n): return sum(map(lambda i: 1/i, range(1, n)))", "code_3": "from functools import reduce\ndef harmonic_sum(n): return reduce(lambda a, b: a + 1/b, range(1, n), 0)", "code_4": "import numpy as np\ndef harmonic_sum(n): return np.sum(1/np.arange(1, n))", "code_5": "def harmonic_sum(n):\n  h = 0\n  for i in range(1, n): h += 1/i\n  return h", "code_6": "def harmonic_sum(n):\n  h = 0.0\n  for i in range(1, n): h += 1.0/i\n  return h", "code_7": "def harmonic_sum(n):\n  h = 0.0\n  i = 1\n  while i < n:\n    h += 1.0/i\n    i += 1\n  return h", "code_8": "def harmonic_sum(n):\n  h = [0.0] * n\n  for i in range(1, n): h[i] = h[i-1] + 1/i\n  return h[-1]", "code_9": "def harmonic_sum(n):\n  h = [0.0] * n\n  for i in range(1, n): h[i] = h[i-1] + 1.0/i\n  return h[-1]", "code_10": "def harmonic_sum(n):\n  h = [0.0] * n\n  i = 1\n  while i < n:\n    h[i] = h[i-1] + 1.0/i\n    i += 1\n  return h[-1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/249", "prompt": "\n\ndef intersection_array(array_nums1,array_nums2):\n \"\"\"\n Write a function to find the intersection of two arrays using lambda function.\n >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])\n [1, 2, 8, 9]\n >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])\n [3,5,7,9]\n >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])\n [10]\n \"\"\"\n", "solution": " \n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "results": [0, 1, 1, 0, 0, 1, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "intersection_array = lambda a, b: list(set(a) & set(b))", "code_2": "intersection_array = lambda a, b: [i for i in a if i in b]", "code_3": "intersection_array = lambda a, b: list(filter(lambda x: x in b, a))", "code_4": "intersection_array = lambda a, b: list(dict.fromkeys(a) & dict.fromkeys(b))", "code_5": "intersection_array = lambda a, b: list(set(a).intersection(b))", "code_6": "intersection_array = lambda a, b: [i for i in set(a) if i in set(b)]", "code_7": "intersection_array = lambda a, b: list(set(a).symmetric_difference(set(b) - set(a)))", "code_8": "intersection_array = lambda a, b: list(set(a).difference(set(a) - set(b)))", "code_9": "intersection_array = lambda a, b: list(set(a).intersection(set(b)))", "code_10": "intersection_array = lambda a, b: [i for i in a if i in set(b)]", "pass@3": 0.8333333333333334, "nDCG@10": 0.3909273842002217}
{"task_id": "MBPP/250", "prompt": "\n\ndef count_X(tup, x):\n    \"\"\"\n    Write a python function to count the occcurences of an element in a tuple.\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)\n    0\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10)\n    3\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8)\n    4\n    \"\"\"\n", "solution": "     \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def count_X(tup, x):\n    return tup.count(x)", "code_2": "def count_X(tup, x):\n    return sum(1 for i in tup if i == x)", "code_3": "from collections import Counter\ndef count_X(tup, x):\n    return Counter(tup)[x]", "code_4": "import numpy as np\ndef count_X(tup, x):\n    return np.count_nonzero(np.array(tup) == x)", "code_5": "def count_X(tup, x):\n    return len([i for i in tup if i == x])", "code_6": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count", "code_7": "def count_X(tup, x):\n    return len(list(filter(lambda i: i == x, tup)))", "code_8": "def count_X(tup, x):\n    return reduce(lambda count, i: count + (i == x), tup, 0)", "code_9": "def count_X(tup, x):\n    return sum(map(lambda i: i == x, tup))", "code_10": "def count_X(tup, x):\n    return len(tup) - len(tuple(filter(lambda i: i != x, tup)))", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/251", "prompt": "\n\ndef insert_element(list,element):\n \"\"\"\n Write a function to insert an element before each element of a list.\n >>> insert_element(['Red', 'Green', 'Black'] ,'c')\n ['c', 'Red', 'c', 'Green', 'c', 'Black']\n >>> insert_element(['python', 'java'] ,'program')\n ['program', 'python', 'program', 'java']\n >>> insert_element(['happy', 'sad'] ,'laugh')\n ['laugh', 'happy', 'laugh', 'sad']\n \"\"\"\n", "solution": " \n list = [v for elt in list for v in (element, elt)]\n return list", "results": [1, 1, 1, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def insert_element(lst, element):\n    return [item for sublist in zip([element]*len(lst), lst) for item in sublist]", "code_2": "def insert_element(lst, element):\n    return sum(([element, i] for i in lst), [])", "code_3": "def insert_element(lst, element):\n    return [i for e in lst for i in (element, e)]", "code_4": "def insert_element(lst, element):\n    return [i for pair in zip(lst, [element]*len(lst)) for i in pair] + [element]", "code_5": "def insert_element(lst, element):\n    return [i for sublist in map(lambda x: [element, x], lst) for i in sublist]", "code_6": "def insert_element(lst, element):\n    return reduce(lambda x, y: x + [element, y], lst, [])", "code_7": "def insert_element(lst, element):\n    return list(chain.from_iterable(zip([element]*len(lst), lst)))", "code_8": "def insert_element(lst, element):\n    return [i for sublist in [[element, i] for i in lst] for i in sublist]", "code_9": "def insert_element(lst, element):\n    return [i for pair in zip(lst, [element]*len(lst)) for i in pair][:-1]", "code_10": "def insert_element(lst, element):\n    return [i for sublist in [[element, i] for i in lst] for i in sublist][:-1]", "pass@3": 0.9166666666666666, "nDCG@10": 0.6235744328990732}
{"task_id": "MBPP/252", "prompt": "\n\ndef convert(numbers):\n  \"\"\"\n  Write a python function to convert complex numbers to polar coordinates.\n  >>> convert(1)\n  (1.0, 0.0)\n  >>> convert(4)\n  (4.0,0.0)\n  >>> convert(5)\n  (5.0,0.0)\n  \"\"\"\n", "solution": "  import cmath  \n      \n  num = cmath.polar(numbers)  \n  return (num) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def convert(numbers):\n    return (abs(numbers), 0.0)", "code_2": "import cmath\ndef convert(numbers):\n    return cmath.polar(numbers)", "code_3": "def convert(numbers):\n    return (numbers.real, numbers.imag)", "code_4": "import math\ndef convert(numbers):\n    return (math.sqrt(numbers.real**2 + numbers.imag**2), math.atan2(numbers.imag, numbers.real))", "code_5": "def convert(numbers):\n    return (numbers if numbers >= 0 else -numbers, 0.0)", "code_6": "def convert(numbers):\n    return (numbers if isinstance(numbers, (int, float)) else abs(numbers), 0.0)", "code_7": "def convert(numbers):\n    return (numbers.real if numbers.imag == 0 else (numbers.real**2 + numbers.imag**2)**0.5, 0.0)", "code_8": "def convert(numbers):\n    return (numbers if numbers.imag == 0 else (numbers.real**2 + numbers.imag**2)**0.5, 0.0)", "code_9": "def convert(numbers):\n    return (numbers if numbers.imag == 0 else abs(numbers), 0.0)", "code_10": "def convert(numbers):\n    return (numbers if isinstance(numbers, int) else abs(numbers), 0.0)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/253", "prompt": "\n\ndef count_integer(list1):\n    \"\"\"\n    Write a python function to count integers from a given list.\n    >>> count_integer([1,2,'abc',1.2])\n    2\n    >>> count_integer([1,2,3])\n    3\n    >>> count_integer([1,1.2,4,5.1])\n    2\n    \"\"\"\n", "solution": "    \n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_integer(list1):\n    return sum(isinstance(i, int) for i in list1)", "code_2": "def count_integer(list1):\n    return len([i for i in list1 if isinstance(i, int)])", "code_3": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count", "code_4": "def count_integer(list1):\n    return sum(type(i) is int for i in list1)", "code_5": "def count_integer(list1):\n    count = 0\n    for i in filter(lambda x: isinstance(x, int), list1):\n        count += 1\n    return count", "code_6": "def count_integer(list1):\n    return len(list(filter(lambda x: isinstance(x, int), list1)))", "code_7": "def count_integer(list1):\n    return len([i for i in list1 if type(i) is int])", "code_8": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count", "code_9": "def count_integer(list1):\n    return sum(1 for i in list1 if type(i) is int)", "code_10": "def count_integer(list1):\n    return len(list(filter(lambda x: type(x) is int, list1)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/254", "prompt": "\n\ndef words_ae(text):\n \"\"\"\n Write a function to find all words starting with 'a' or 'e' in a given string.\n >>> words_ae(\"python programe\")\n ['ame']\n >>> words_ae(\"python programe language\")\n ['ame','anguage']\n >>> words_ae(\"assert statement\")\n ['assert', 'atement']\n \"\"\"\n", "solution": " import re\n \n list = re.findall(\"[ae]\\w+\", text)\n return list", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def words_ae(text):\n return [word for word in text.split() if word[0] in 'ae']", "code_2": "import re\ndef words_ae(text):\n return re.findall(r'\\b[ae]\\w*', text)", "code_3": "def words_ae(text):\n return list(filter(lambda word: word[0] in 'ae', text.split()))", "code_4": "def words_ae(text):\n return [word for word in text.split() if word.startswith(('a', 'e'))]", "code_5": "def words_ae(text):\n return [word for word in text.split() if word[0] == 'a' or word[0] == 'e']", "code_6": "def words_ae(text):\n return [word for word in text.split() if word.startswith('a') or word.startswith('e')]", "code_7": "def words_ae(text):\n return [word for word in text.split() if word[0] in ('a', 'e')]", "code_8": "def words_ae(text):\n return [word for word in text.split() if word.lower().startswith(('a', 'e'))]", "code_9": "def words_ae(text):\n return [word for word in text.split() if word[0].lower() in 'ae']", "code_10": "def words_ae(text):\n return [word for word in text.split() if word[0] in ('A', 'E', 'a', 'e')]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/255", "prompt": "\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    >>> combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n", "solution": "    from itertools import combinations_with_replacement \n    \n    return list(combinations_with_replacement(l,n))", "results": [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "from itertools import product\ndef combinations_colors(l, n):\n    return list(product(l, repeat=n))", "code_2": "def combinations_colors(l, n):\n    return [t for t in ((x,) * n for x in l) + [t for i in range(1, n) for t in product(l, repeat=i)]]", "code_3": "def combinations_colors(l, n):\n    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n-1)]", "code_4": "def combinations_colors(l, n):\n    if n == 0:\n        return [()]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n-1)]", "code_5": "import numpy as np\ndef combinations_colors(l, n):\n    return np.array(np.meshgrid(*([l]*n))).T.reshape(-1,n)", "code_6": "def combinations_colors(l, n):\n    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n-1)]", "code_7": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))", "code_8": "def combinations_colors(l, n):\n    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n-1)]", "code_9": "def combinations_colors(l, n):\n    return [t for t in ((x,) * n for x in l) + [t for i in range(1, n) for t in product(l, repeat=i)]]", "code_10": "def combinations_colors(l, n):\n    if n == 1:\n        return [(i,) for i in l]\n    else:\n        return [(i,) + j for i in l for j in combinations_colors(l, n-1)]", "pass@3": 0.30000000000000004, "nDCG@10": 0.07336392209936006}
{"task_id": "MBPP/256", "prompt": "\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function to count the number of prime numbers less than a given non-negative number.\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n", "solution": "    \n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "results": [1, 1, 1, 1, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def count_Primes_nums(n):\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return sum(sieve[2:])", "code_2": "def count_Primes_nums(n):\n    primes = [True] * n\n    primes[0:2] = [False, False]\n    for ind, val in enumerate(primes):\n        if val is True:\n            primes[ind*2::ind] = [False] * (((n - 1)//ind) - 1)\n    return sum(primes)", "code_3": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n, x):\n                sieve[i] = False\n    return sieve.count(True) - 2", "code_4": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            primes[i*i: n: i] = [False] * len(primes[i*i: n: i])\n    return primes.count(True)", "code_5": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return sieve.count(True)", "code_6": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i*2):\n                sieve[j] = False\n    return sieve.count(True)", "code_7": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return sum(sieve)", "code_8": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return len([x for x in sieve if x])", "code_9": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return sieve.count(True) - 2", "code_10": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    sieve = [True] * n\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return len(list(filter(None, sieve)))", "pass@3": 1.0, "nDCG@10": 0.8553475075669357}
{"task_id": "MBPP/257", "prompt": "\n\ndef swap_numbers(a,b):\n \"\"\"\n Write a function to swap two numbers.\n >>> swap_numbers(10,20)\n (20,10)\n >>> swap_numbers(15,17)\n (17,15)\n >>> swap_numbers(100,200)\n (200,100)\n \"\"\"\n", "solution": " \n temp = a\n a = b\n b = temp\n return (a,b)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def swap_numbers(a, b):\n    return b, a", "code_2": "def swap_numbers(a, b):\n    a = a + b\n    b = a - b\n    a = a - b\n    return a, b", "code_3": "def swap_numbers(a, b):\n    a, b = b, a\n    return a, b", "code_4": "def swap_numbers(a, b):\n    a ^= b\n    b ^= a\n    a ^= b\n    return a, b", "code_5": "def swap_numbers(a, b):\n    a, b = b, a\n    return (a, b)", "code_6": "swap_numbers = lambda a, b: (b, a)", "code_7": "from operator import itemgetter\ndef swap_numbers(a, b):\n    return itemgetter(1, 0)((a, b))", "code_8": "def swap_numbers(a, b):\n    return tuple(reversed((a, b)))", "code_9": "def swap_numbers(a, b):\n    return [b, a]", "code_10": "def swap_numbers(a, b):\n    return list(reversed((a, b)))", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/258", "prompt": "\n\ndef count_odd(array_nums):\n   \"\"\"\n   Write a function to find number of odd elements in the given list using lambda function.\n   >>> count_odd([1, 2, 3, 5, 7, 8, 10])\n   4\n   >>> count_odd([10,15,14,13,-18,12,-20])\n   2\n   >>> count_odd([1, 2, 4, 8, 9])\n   2\n   \"\"\"\n", "solution": "   \n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "count_odd = lambda array_nums: sum(1 for num in array_nums if num % 2 != 0)", "code_2": "count_odd = lambda array_nums: len(list(filter(lambda num: num % 2 != 0, array_nums)))", "code_3": "count_odd = lambda array_nums: len([num for num in array_nums if num % 2 != 0])", "code_4": "count_odd = lambda array_nums: sum(map(lambda num: num % 2, array_nums))", "code_5": "count_odd = lambda array_nums: len(list(num for num in array_nums if num & 1))", "code_6": "count_odd = lambda array_nums: sum(num & 1 for num in array_nums)", "code_7": "from functools import reduce\ncount_odd = lambda array_nums: reduce(lambda count, num: count + (num % 2 != 0), array_nums, 0)", "code_8": "count_odd = lambda array_nums: len(list(num for num in array_nums if bin(num)[-1] == '1'))", "code_9": "count_odd = lambda array_nums: sum(bin(num)[-1] == '1' for num in array_nums)", "code_10": "count_odd = lambda array_nums: len([num for num in array_nums if format(num, 'b')[-1] == '1'])", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/259", "prompt": "\n\ndef maximize_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to maximize the given two tuples.\n  >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((6, 7), (4, 9), (2, 9), (7, 10))\n  >>> maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n  ((7, 8), (5, 10), (3, 10), (8, 11))\n  >>> maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n  ((8, 9), (6, 11), (4, 11), (9, 12))\n  \"\"\"\n", "solution": "  \n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def maximize_elements(t1, t2): return sorted(zip(t1, t2), key=max, reverse=True)", "code_2": "def maximize_elements(t1, t2): return [max(a, b) for a, b in zip(t1, t2)]", "code_3": "def maximize_elements(t1, t2): return [(max(a, c), max(b, d)) for (a, b), (c, d) in zip(t1, t2)]", "code_4": "def maximize_elements(t1, t2): return list(map(lambda x: (max(x[0][0], x[1][0]), max(x[0][1], x[1][1])), zip(t1, t2)))", "code_5": "def maximize_elements(t1, t2): return [(a if a > c else c, b if b > d else d) for (a, b), (c, d) in zip(t1, t2)]", "code_6": "def maximize_elements(t1, t2): return [(a if a > c else c, b if b > d else d) for ((a, b), (c, d)) in zip(t1, t2)]", "code_7": "def maximize_elements(t1, t2): return [(max(t1[i][0], t2[i][0]), max(t1[i][1], t2[i][1])) for i in range(len(t1))]", "code_8": "def maximize_elements(t1, t2): return [(max(t1[i][j], t2[i][j]) for j in range(2)) for i in range(len(t1))]", "code_9": "def maximize_elements(t1, t2): return list(map(lambda x: (max(x[0]), max(x[1])), zip(*map(lambda x: zip(*x), zip(t1, t2)))))", "code_10": "def maximize_elements(t1, t2): return [tuple(map(max, zip(*pair))) for pair in zip(t1, t2)]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/260", "prompt": "\n\ndef newman_prime(n):\n\t\"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t>>> newman_prime(3)\n\t7\n\t>>> newman_prime(4)\n\t17\n\t>>> newman_prime(5)\n\t41\n\t\"\"\"\n", "solution": "\t \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2\n\treturn primes[-1]", "code_2": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2\n\treturn primes[-1]", "code_3": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 else 1\n\treturn primes[-1]", "code_4": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and candidate % 3 != 0 else 1\n\treturn primes[-1]", "code_5": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and candidate % 3 != 0 and candidate % 5 != 0 else 1\n\treturn primes[-1]", "code_6": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and all(candidate % p != 0 for p in [3, 5, 7]) else 1\n\treturn primes[-1]", "code_7": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and all(candidate % p != 0 for p in primes if p * p <= candidate and p < 10) else 1\n\treturn primes[-1]", "code_8": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and all(candidate % p != 0 for p in primes if p * p <= candidate and p < int(candidate ** 0.5) + 1) else 1\n\treturn primes[-1]", "code_9": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and all(candidate % p != 0 for p in primes if p * p <= candidate and p < int(candidate ** 0.5) + 1 and p % 2 != 0) else 1\n\treturn primes[-1]", "code_10": "def newman_prime(n):\n\tprimes = [2]\n\tcandidate = 3\n\twhile len(primes) < n:\n\t\tif all(candidate % p != 0 for p in primes if p * p <= candidate):\n\t\t\tprimes.append(candidate)\n\t\tcandidate += 2 if candidate > 2 and all(candidate % p != 0 for p in primes if p * p <= candidate and p < int(candidate ** 0.5) + 1 and p % 2 != 0 and p % 3 != 0) else 1\n\treturn primes[-1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/261", "prompt": "\n\ndef division_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform mathematical division operation across the given tuples.\n  >>> division_elements((10, 4, 6, 9),(5, 2, 3, 3))\n  (2, 2, 2, 3)\n  >>> division_elements((12, 6, 8, 16),(6, 3, 4, 4))\n  (2, 2, 2, 4)\n  >>> division_elements((20, 14, 36, 18),(5, 7, 6, 9))\n  (4, 2, 6, 2)\n  \"\"\"\n", "solution": "  \n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension:\ndef division_elements(t1, t2): return tuple(a//b for a, b in zip(t1, t2))", "code_2": "Using map and lambda function:\ndef division_elements(t1, t2): return tuple(map(lambda x, y: x//y, t1, t2))", "code_3": "Using numpy:\nimport numpy as np\ndef division_elements(t1, t2): return tuple(np.array(t1) // np.array(t2))", "code_4": "Using operator.truediv and map:\nimport operator\ndef division_elements(t1, t2): return tuple(map(operator.truediv, t1, t2))", "code_5": "Using for loop:\ndef division_elements(t1, t2): return tuple(t1[i]//t2[i] for i in range(len(t1)))", "code_6": "Using while loop:\ndef division_elements(t1, t2): i = 0; res = []; while i < len(t1): res.append(t1[i]//t2[i]); i += 1; return tuple(res)", "code_7": "Using reduce and operator.truediv:\nfrom functools import reduce\nimport operator\ndef division_elements(t1, t2): return tuple(reduce(lambda x, y: x + (y[0]//y[1],), zip(t1, t2), ()))", "code_8": "Using itertools.starmap and operator.truediv:\nimport itertools\nimport operator\ndef division_elements(t1, t2): return tuple(itertools.starmap(operator.truediv, zip(t1, t2)))", "code_9": "Using pandas:\nimport pandas as pd\ndef division_elements(t1, t2): return tuple(pd.Series(t1) // pd.Series(t2))", "code_10": "Using enumerate and list comprehension:\ndef division_elements(t1, t2): return tuple(t1[i]//t2[i] for i, _ in enumerate(t1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/262", "prompt": "\n\ndef split_two_parts(list1, L):\n    \"\"\"\n    Write a function to split a given list into two parts where the length of the first part of the list is given.\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    >>> split_two_parts(['a', 'b', 'c', 'd'],2)\n    (['a', 'b'], ['c', 'd'])\n    >>> split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)\n    (['p', 'y', 't', 'h'], ['o', 'n'])\n    \"\"\"\n", "solution": "    \n    return list1[:L], list1[L:]", "results": [1, 1, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "code_2": "def split_two_parts(list1, L):\n    return ([x for i, x in enumerate(list1) if i < L], [x for i, x in enumerate(list1) if i >= L])", "code_3": "def split_two_parts(list1, L):\n    return reduce(lambda a, i: (a[0] + [i], a[1]) if len(a[0]) < L else (a[0], a[1] + [i]), list1, ([], []))", "code_4": "def split_two_parts(list1, L):\n    it = iter(list1)\n    return [next(it) for _ in range(L)], list(it)", "code_5": "def split_two_parts(list1, L):\n    return tuple(map(list, (list1[:L], list1[L:])))", "code_6": "def split_two_parts(list1, L):\n    return divmod(list1, L)", "code_7": "def split_two_parts(list1, L):\n    return (list1[i:i + L] for i in range(0, len(list1), L))", "code_8": "def split_two_parts(list1, L):\n    return next(zip(*[iter(list1)]*L)), list1[L:]", "code_9": "def split_two_parts(list1, L):\n    return np.split(np.array(list1), [L])", "code_10": "def split_two_parts(list1, L):\n    return pd.Series(list1).iloc[:L].tolist(), pd.Series(list1).iloc[L:].tolist()", "pass@3": 0.8333333333333334, "nDCG@10": 0.5388856921828066}
{"task_id": "MBPP/263", "prompt": "\n\ndef merge_dict(d1,d2):\n \"\"\"\n Write a function to merge two dictionaries.\n >>> merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})\n {'x': 300, 'y': 200, 'a': 100, 'b': 200}\n >>> merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})\n {'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n >>> merge_dict({'a':10,'b':20},{'x':30,'y':40})\n {'x':30,'y':40,'a':10,'b':20}\n \"\"\"\n", "solution": " \n d = d1.copy()\n d.update(d2)\n return d", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return {**d1, **d2}`", "code_2": "`return dict(d1, **d2)`", "code_3": "`d1.update(d2); return d1`", "code_4": "`d2.update(d1); return d2`", "code_5": "`return dict(d1.items() | d2.items())`", "code_6": "`return dict(ChainMap(d1, d2))`", "code_7": "`return {k: v for d in (d1, d2) for k, v in d.items()}`", "code_8": "`return reduce(lambda x, y: {**x, **y}, (d1, d2))`", "code_9": "`return dict(itertools.chain(d1.items(), d2.items()))`", "code_10": "`return dict(list(d1.items()) + list(d2.items()))`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/264", "prompt": "\n\ndef dog_age(h_age):\n \"\"\"\n Write a function to calculate a dog's age in dog's years.\n >>> dog_age(12)\n 61\n >>> dog_age(15)\n 73\n >>> dog_age(24)\n 109\n \"\"\"\n", "solution": " \n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def dog_age(h_age): return h_age*7 if h_age<3 else 21+(h_age-2)*4`", "code_2": "`dog_age = lambda h_age: 21+(h_age-2)*4 if h_age>2 else h_age*7`", "code_3": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) if True else None`", "code_4": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) and (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "code_5": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) or (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "code_6": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) | (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "code_7": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) ^ (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "code_8": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) & (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "code_9": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) == (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) and (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "code_10": "`dog_age = (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) != (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4) or (lambda h_age: h_age*7 if h_age<3 else 21+(h_age-2)*4)`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/265", "prompt": "\n\ndef list_split(S, step):\n    \"\"\"\n    Write a function to split a list for every nth element.\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    >>> list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)\n    [[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\n    >>> list_split(['python','java','C','C++','DBMS','SQL'],2)\n    [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n    \"\"\"\n", "solution": "    \n    return [S[i::step] for i in range(step)]", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "code_2": "def list_split(S, step):\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "code_3": "def list_split(S, step):\n    return list(map(lambda i: S[i::step], range(step)))", "code_4": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "code_5": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "code_6": "def list_split(S, step):\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "code_7": "def list_split(S, step):\n    return list(map(lambda i: S[i::step], range(step)))", "code_8": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "code_9": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "code_10": "def list_split(S, step):\n    return [[S[i] for i in range(j, len(S), step)] for j in range(step)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/266", "prompt": "\n\ndef lateralsurface_cube(l):\n  \"\"\"\n  Write a function to find the lateral surface area of a cube.\n  >>> lateralsurface_cube(5)\n  100\n  >>> lateralsurface_cube(9)\n  324\n  >>> lateralsurface_cube(10)\n  400\n  \"\"\"\n", "solution": "  \n  LSA = 4 * (l * l)\n  return LSA", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def lateralsurface_cube(l): return 4 * l * l`", "code_2": "`lateralsurface_cube = lambda l: 4 * l ** 2`", "code_3": "`def lateralsurface_cube(l): return l * l << 2`", "code_4": "`def lateralsurface_cube(l): return pow(l, 2) * 4`", "code_5": "`def lateralsurface_cube(l): return l ** 2 * 4`", "code_6": "`def lateralsurface_cube(l): return (l * l) * 4`", "code_7": "`def lateralsurface_cube(l): return 4 * l * l if l > 0 else 0`", "code_8": "`def lateralsurface_cube(l): return 4 * l ** 2 if l >= 0 else None`", "code_9": "`def lateralsurface_cube(l): return 4 * l * l if isinstance(l, (int, float)) else None`", "code_10": "`def lateralsurface_cube(l): return 4 * l * l if type(l) in (int, float) else None`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/267", "prompt": "\n\ndef square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n odd natural numbers.\n    >>> square_Sum(2)\n    10\n    >>> square_Sum(3)\n    35\n    >>> square_Sum(4)\n    84\n    \"\"\"\n", "solution": "      \n    return int(n*(4*n*n-1)/3) ", "results": [0, 1, 1, 1, 1, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def square_Sum(n):\n    return n * n * (2 * n - 1)", "code_2": "def square_Sum(n):\n    return sum(i**2 for i in range(1, 2*n, 2))", "code_3": "def square_Sum(n):\n    return sum(map(lambda x: x**2, range(1, 2*n, 2)))", "code_4": "def square_Sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)])", "code_5": "def square_Sum(n):\n    return sum(x*x for x in range(1, 2*n, 2))", "code_6": "def square_Sum(n):\n    return sum(x**2 for x in xrange(1, 2*n, 2))", "code_7": "def square_Sum(n):\n    return sum(x*x for x in xrange(1, 2*n, 2))", "code_8": "def square_Sum(n):\n    return reduce(lambda x, y: x + y**2, range(1, 2*n, 2), 0)", "code_9": "def square_Sum(n):\n    return sum(i*i for i in range(1, 2*n, 2))", "code_10": "def square_Sum(n):\n    return sum(i**2 for i in range(1, 2*n+1, 2))", "pass@3": 0.9666666666666667, "nDCG@10": 0.5587148206871072}
{"task_id": "MBPP/268", "prompt": "\n\ndef find_star_num(n):\n\t\"\"\"\n\tWrite a function to find the n'th star number.\n\t>>> find_star_num(3)\n\t37\n\t>>> find_star_num(4)\n\t73\n\t>>> find_star_num(5)\n\t121\n\t\"\"\"\n", "solution": "\t \n\treturn (6 * n * (n - 1) + 1) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_star_num(n): return sum(6*i+1 for i in range(n))", "code_2": "def find_star_num(n): return n*(6*n-3)//2", "code_3": "find_star_num = lambda n: n*(6*n-3)//2", "code_4": "def find_star_num(n): return (n**2 + n) * 3", "code_5": "def find_star_num(n): return (n*n + n) * 3", "code_6": "def find_star_num(n): return 3 * n * (n + 1)", "code_7": "find_star_num = lambda n: 3 * n * (n + 1)", "code_8": "def find_star_num(n): return 3 * n * (n + 1) // 2 * 2", "code_9": "def find_star_num(n): return 3 * n * (n + 1) // 2 * 2", "code_10": "find_star_num = lambda n: 3 * n * (n + 1) // 2 * 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/269", "prompt": "\n\ndef ascii_value(k):\n  \"\"\"\n  Write a function to find the ascii value of a character.\n  >>> ascii_value('A')\n  65\n  >>> ascii_value('R')\n  82\n  >>> ascii_value('S')\n  83\n  \"\"\"\n", "solution": "  \n  ch=k\n  return ord(ch)", "results": [1, 1, 0, 1, 0, 0, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def ascii_value(k): return ord(k)", "code_2": "ascii_value = lambda k: ord(k)", "code_3": "import string\nascii_value = string.ascii_uppercase.index", "code_4": "from functools import partial\nascii_value = partial(ord)", "code_5": "from operator import methodcaller\nascii_value = methodcaller('__int__')", "code_6": "from builtins import chr\nascii_value = chr", "code_7": "from codecs import encode\nascii_value = lambda k: int(encode(k, 'hex'), 16)", "code_8": "import unicodedata\nascii_value = lambda k: unicodedata.normalize('NFKD', k).encode('ascii')[0]", "code_9": "import re\nascii_value = lambda k: int(re.escape(k).strip(\"'\"), 16)", "code_10": "import binascii\nascii_value = lambda k: int(binascii.hexlify(k.encode()), 16)", "pass@3": 0.9166666666666666, "nDCG@10": 0.5867945846769146}
{"task_id": "MBPP/270", "prompt": "\n\ndef sum_even_and_even_index(arr,n):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions.\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8],6)\n    30\n    >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10)\n    26\n    >>> sum_even_and_even_index([5, 6, 12, 1],4)\n    12\n    \"\"\"\n", "solution": "      \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0, n, 2) if arr[i] % 2 == 0)", "code_2": "def sum_even_and_even_index(arr, n):\n    return sum(val for i, val in enumerate(arr) if i % 2 == 0 and val % 2 == 0)", "code_3": "def sum_even_and_even_index(arr, n):\n    return sum(filter(lambda x: x % 2 == 0, arr[::2]))", "code_4": "def sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(n) if i % 2 == 0 and arr[i] % 2 == 0)", "code_5": "def sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0, n, 2) if not arr[i] & 1)", "code_6": "def sum_even_and_even_index(arr, n):\n    return sum(val for i, val in enumerate(arr) if not i % 2 and not val % 2)", "code_7": "def sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0, n, 2) if arr[i] >> 1 << 1 == arr[i])", "code_8": "def sum_even_and_even_index(arr, n):\n    return sum(val for i, val in enumerate(arr) if i >> 1 << 1 == i and val >> 1 << 1 == val)", "code_9": "def sum_even_and_even_index(arr, n):\n    return sum(arr[i] for i in range(0, n, 2) if arr[i] & -2 == arr[i])", "code_10": "def sum_even_and_even_index(arr, n):\n    return sum(val for i, val in enumerate(arr) if i & -2 == i and val & -2 == val)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/271", "prompt": "\n\ndef even_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    8832\n    >>> even_Power_Sum(1)\n    32\n    \"\"\"\n", "solution": "     \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ", "results": [1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def even_Power_Sum(n):\n    return sum(i**5 for i in range(2, 2*n+1, 2))", "code_2": "def even_Power_Sum(n):\n    return sum(map(lambda i: i**5, range(2, 2*n+1, 2)))", "code_3": "def even_Power_Sum(n):\n    return sum([i**5 for i in range(2, 2*n+1, 2)])", "code_4": "def even_Power_Sum(n):\n    return sum(i**5 for i in xrange(2, 2*n+1, 2))", "code_5": "def even_Power_Sum(n):\n    return sum(map(pow, range(2, 2*n+1, 2), [5]*n))", "code_6": "def even_Power_Sum(n):\n    return reduce(lambda x, y: x + y**5, range(2, 2*n+1, 2), 0)", "code_7": "def even_Power_Sum(n):\n    return sum(filter(lambda i: i%2==0, [i**5 for i in range(1, 2*n+1)]))", "code_8": "def even_Power_Sum(n):\n    return sum(i**5 for i in range(2, 2*n+1) if i%2==0)", "code_9": "def even_Power_Sum(n):\n    return sum(pow(i, 5) for i in range(2, 2*n+1, 2))", "code_10": "def even_Power_Sum(n):\n    return sum(i**5 for i in filter(lambda i: i%2==0, range(1, 2*n+1)))", "pass@3": 1.0, "nDCG@10": 0.826813366651774}
{"task_id": "MBPP/272", "prompt": "\n\ndef rear_extract(test_list):\n  \"\"\"\n  Write a function to perfom the rear element extraction from list of tuples records.\n  >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n  [21, 20, 19]\n  >>> rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])\n  [36, 25, 45]\n  >>> rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])\n  [14, 36, 56]\n  \"\"\"\n", "solution": "  \n  res = [lis[-1] for lis in test_list]\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "List comprehension:\ndef rear_extract(test_list):\n    return [t[-1] for t in test_list]", "code_2": "Map function:\ndef rear_extract(test_list):\n    return list(map(lambda x: x[-1], test_list))", "code_3": "For loop:\ndef rear_extract(test_list):\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result", "code_4": "List slicing:\ndef rear_extract(test_list):\n    return [t[len(t)-1] for t in test_list]", "code_5": "Numpy array:\nimport numpy as np\ndef rear_extract(test_list):\n    return np.array(test_list)[:, -1].tolist()", "code_6": "Pandas DataFrame:\nimport pandas as pd\ndef rear_extract(test_list):\n    return pd.DataFrame(test_list)[2].tolist()", "code_7": "Reduce function:\nfrom functools import reduce\ndef rear_extract(test_list):\n    return reduce(lambda x, y: x + [y[-1]], test_list, [])", "code_8": "Generator expression:\ndef rear_extract(test_list):\n    return list(t[-1] for t in test_list)", "code_9": "Filter function:\ndef rear_extract(test_list):\n    return list(filter(lambda x: x == t[-1], test_list) for t in test_list)", "code_10": "Itertools:\nimport itertools\ndef rear_extract(test_list):\n    return list(itertools.starmap(lambda *x: x[-1], test_list))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/273", "prompt": "\n\ndef substract_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  >>> substract_elements((10, 4, 5), (2, 5, 18))\n  (8, -1, -13)\n  >>> substract_elements((11, 2, 3), (24, 45 ,16))\n  (-13, -43, -13)\n  >>> substract_elements((7, 18, 9), (10, 11, 12))\n  (-3, 7, -3)\n  \"\"\"\n", "solution": "  \n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension:\ndef subtract_elements(t1, t2): return tuple(a - b for a, b in zip(t1, t2))", "code_2": "Using map and lambda function:\ndef subtract_elements(t1, t2): return tuple(map(lambda x, y: x - y, t1, t2))", "code_3": "Using numpy arrays:\nimport numpy as np\ndef subtract_elements(t1, t2): return tuple(np.array(t1) - np.array(t2))", "code_4": "Using operator.sub:\nimport operator\ndef subtract_elements(t1, t2): return tuple(map(operator.sub, t1, t2))", "code_5": "Using reduce and operator.sub:\nfrom functools import reduce\nimport operator\ndef subtract_elements(t1, t2): return tuple(reduce(operator.sub, pair) for pair in zip(t1, t2))", "code_6": "Using starmap and operator.sub:\nfrom itertools import starmap\nimport operator\ndef subtract_elements(t1, t2): return tuple(starmap(operator.sub, zip(t1, t2)))", "code_7": "Using a for loop:\ndef subtract_elements(t1, t2): return tuple(t1[i] - t2[i] for i in range(len(t1)))", "code_8": "Using a while loop:\ndef subtract_elements(t1, t2):\n  i = 0\n  result = []\n  while i < len(t1):\n    result.append(t1[i] - t2[i])\n    i += 1\n  return tuple(result)", "code_9": "Using recursion:\ndef subtract_elements(t1, t2, i=0):\n  if i == len(t1):\n    return ()\n  else:\n    return (t1[i] - t2[i],) + subtract_elements(t1, t2, i + 1)", "code_10": "Using a generator expression:\ndef subtract_elements(t1, t2): return tuple(t1[i] - t2[i] for i in range(len(t1)))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/274", "prompt": "\n\ndef even_binomial_Coeff_Sum( n):\n    \"\"\"\n    Write a python function to find sum of even index binomial coefficients.\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(6)\n    32\n    >>> even_binomial_Coeff_Sum(2)\n    2\n    \"\"\"\n", "solution": "    import math  \n     \n    return (1 << (n - 1)) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def even_binomial_Coeff_Sum(n):\n    return 2 ** (n - 1)", "code_2": "def even_binomial_Coeff_Sum(n):\n    return 1 << (n - 1)", "code_3": "even_binomial_Coeff_Sum = lambda n: 2 ** (n - 1)", "code_4": "even_binomial_Coeff_Sum = lambda n: 1 << (n - 1)", "code_5": "from math import comb\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, i) for i in range(0, n + 1, 2))", "code_6": "from math import comb\neven_binomial_Coeff_Sum = lambda n: sum(comb(n, i) for i in range(0, n + 1, 2))", "code_7": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef comb(n, k):\n    if k == 0 or k == n:\n        return 1\n    return comb(n - 1, k - 1) + comb(n - 1, k)\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, i) for i in range(0, n + 1, 2))", "code_8": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef comb(n, k):\n    if k == 0 or k == n:\n        return 1\n    return comb(n - 1, k - 1) + comb(n - 1, k)\neven_binomial_Coeff_Sum = lambda n: sum(comb(n, i) for i in range(0, n + 1, 2))", "code_9": "from scipy.special import comb\ndef even_binomial_Coeff_Sum(n):\n    return sum(comb(n, i) for i in range(0, n + 1, 2))", "code_10": "from scipy.special import comb\neven_binomial_Coeff_Sum = lambda n: sum(comb(n, i) for i in range(0, n + 1, 2))", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/275", "prompt": "\n\ndef get_Position(a,n,m):\n    \"\"\"\n    Write a python function to find the position of the last removed element from the given array.\n    >>> get_Position([2,5,4],3,2)\n    2\n    >>> get_Position([4,3],2,2)\n    2\n    >>> get_Position([1,2,3,4],4,1)\n    4\n    \"\"\"\n", "solution": "    import math as mt \n     \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_Position(a,n,m): return (n-m)%n", "code_2": "def get_Position(a,n,m): return (n-m)%len(a)", "code_3": "def get_Position(a,n,m): return (n-m)%a[-1]", "code_4": "def get_Position(a,n,m): return (n-m)%a[~0]", "code_5": "def get_Position(a,n,m): return (n-m)%a[n-1]", "code_6": "def get_Position(a,n,m): return (n-m)%a[~0]", "code_7": "def get_Position(a,n,m): return (n-m)%len(a)", "code_8": "def get_Position(a,n,m): return (n-m)%n", "code_9": "def get_Position(a,n,m): return (n-m)%a[-1]", "code_10": "def get_Position(a,n,m): return (n-m)%a[n-1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/276", "prompt": "\n\ndef volume_cylinder(r,h):\n  \"\"\"\n  Write a function to find the volume of a cylinder.\n  >>> volume_cylinder(10,5)\n  1570.7500000000002\n  >>> volume_cylinder(4,5)\n  251.32000000000002\n  >>> volume_cylinder(4,10)\n  502.64000000000004\n  \"\"\"\n", "solution": "  \n  volume=3.1415*r*r*h\n  return volume", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def volume_cylinder(r,h): return 3.141592653589793 * r * r * h`", "code_2": "`volume_cylinder = lambda r, h: 3.141592653589793 * r * r * h`", "code_3": "`from math import pi; volume_cylinder = lambda r, h: pi * r * r * h`", "code_4": "`import math; volume_cylinder = lambda r, h: math.pi * r * r * h`", "code_5": "`volume_cylinder = lambda r, h: (r ** 2) * h * math.pi`", "code_6": "`volume_cylinder = lambda r, h: (r * r) * h * math.pi`", "code_7": "`volume_cylinder = lambda r, h: (r ** 2) * math.pi * h`", "code_8": "`volume_cylinder = lambda r, h: (r * r) * math.pi * h`", "code_9": "`volume_cylinder = lambda r, h: math.pi * (r ** 2) * h`", "code_10": "`volume_cylinder = lambda r, h: math.pi * (r * r) * h`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/277", "prompt": "\n\ndef dict_filter(dict,n):\n \"\"\"\n Write a function to filter a dictionary based on values.\n >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)\n { 'Alden Cantrell': 180, 'Pierre Cox': 190}\n >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)\n { 'Pierre Cox': 190}\n \"\"\"\n", "solution": " \n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}", "code_2": "def dict_filter(d, n):\n    return dict(filter(lambda item: item[1] >= n, d.items()))", "code_3": "def dict_filter(d, n):\n    return {k: d[k] for k in d if d[k] >= n}", "code_4": "def dict_filter(d, n):\n    return dict(item for item in d.items() if item[1] >= n)", "code_5": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if d[k] >= n}", "code_6": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v > n or v == n}", "code_7": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if not v < n}", "code_8": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n and True}", "code_9": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n and 1}", "code_10": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n and v}", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/278", "prompt": "\n\ndef count_first_elements(test_tup):\n  \"\"\"\n  Write a function to find the element count that occurs before the record in the given tuple.\n  >>> count_first_elements((1, 5, 7, (4, 6), 10) )\n  3\n  >>> count_first_elements((2, 9, (5, 7), 11) )\n  2\n  >>> count_first_elements((11, 15, 5, 8, (2, 3), 8) )\n  4\n  \"\"\"\n", "solution": "  \n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_first_elements(test_tup):\n  return sum(1 for i in test_tup if not isinstance(i, tuple))", "code_2": "def count_first_elements(test_tup):\n  return len([i for i in test_tup if type(i) != tuple])", "code_3": "def count_first_elements(test_tup):\n  return sum(map(lambda x: isinstance(x, int), test_tup))", "code_4": "def count_first_elements(test_tup):\n  return len(list(filter(lambda x: not isinstance(x, tuple), test_tup)))", "code_5": "def count_first_elements(test_tup):\n  return len([i for i in test_tup if type(i) is int])", "code_6": "def count_first_elements(test_tup):\n  return sum(1 for i in test_tup if type(i) is not tuple)", "code_7": "def count_first_elements(test_tup):\n  return len(list(filter(lambda x: type(x) is int, test_tup)))", "code_8": "def count_first_elements(test_tup):\n  return sum(map(lambda x: type(x) is int, test_tup))", "code_9": "def count_first_elements(test_tup):\n  return len([i for i in test_tup if isinstance(i, int)])", "code_10": "def count_first_elements(test_tup):\n  return sum(1 for i in test_tup if isinstance(i, int))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/279", "prompt": "\n\ndef is_num_decagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth decagonal number.\n\t>>> is_num_decagonal(3)\n\t27\n\t>>> is_num_decagonal(7)\n\t175\n\t>>> is_num_decagonal(10)\n\t370\n\t\"\"\"\n", "solution": "\t \n\treturn 4 * n * n - 3 * n ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_num_decagonal(n): return 5 * n * n - 3 * n", "code_2": "is_num_decagonal = lambda n: 5 * n * n - 3 * n", "code_3": "def is_num_decagonal(n): return n * (5 * n - 3)", "code_4": "is_num_decagonal = lambda n: n * (5 * n - 3)", "code_5": "def is_num_decagonal(n): return (n << 2) + (n << 1) - 3 * n", "code_6": "is_num_decagonal = lambda n: (n << 2) + (n << 1) - 3 * n", "code_7": "def is_num_decagonal(n): return n * (2 * n + 1) - 3 * n", "code_8": "is_num_decagonal = lambda n: n * (2 * n + 1) - 3 * n", "code_9": "def is_num_decagonal(n): return n * (2 * n - 2)", "code_10": "is_num_decagonal = lambda n: n * (2 * n - 2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/280", "prompt": "\n\ndef sequential_search(dlist, item):\n    \"\"\"\n    Write a function to search an element in the given array by using sequential search.\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)\n    (True, 7)\n    >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)\n    (True, 6)\n    \"\"\"\n", "solution": "    \n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos", "results": [1, 0, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1", "code_2": "def sequential_search(dlist, item):\n    return next((True, i) for i, x in enumerate(dlist) if x == item), -1", "code_3": "def sequential_search(dlist, item):\n    try:\n        return True, dlist.index(item)\n    except ValueError:\n        return False, -1", "code_4": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found, pos if found else -1", "code_5": "def sequential_search(dlist, item):\n    for i, x in enumerate(dlist):\n        if x == item:\n            return True, i\n    return False, -1", "code_6": "def sequential_search(dlist, item):\n    return (item in dlist, dlist.index(item)) if item in dlist else (False, -1)", "code_7": "def sequential_search(dlist, item):\n    return any(x == item for x in dlist), next((i for i, x in enumerate(dlist) if x == item), -1)", "code_8": "def sequential_search(dlist, item):\n    return (True, next(i for i, x in enumerate(dlist) if x == item)) if item in dlist else (False, -1)", "code_9": "def sequential_search(dlist, item):\n    return (True, dlist[::-1].index(item)) if item in dlist else (False, -1)", "code_10": "def sequential_search(dlist, item):\n    return (True, len(dlist) - 1 - dlist[::-1].index(item)) if item in dlist else (False, -1)", "pass@3": 1.0, "nDCG@10": 0.7948833326720566}
{"task_id": "MBPP/281", "prompt": "\n\ndef all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    >>> all_unique([1,2,3])\n    True\n    >>> all_unique([1,2,1,2])\n    False\n    >>> all_unique([1,2,3,4,5])\n    True\n    \"\"\"\n", "solution": "    \n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))", "code_2": "def all_unique(test_list):\n    return all(test_list.count(i) == 1 for i in test_list)", "code_3": "def all_unique(test_list):\n    seen = set()\n    return not any(i in seen or seen.add(i) for i in test_list)", "code_4": "def all_unique(test_list):\n    return len(test_list) == len({}.fromkeys(test_list))", "code_5": "def all_unique(test_list):\n    return sorted(test_list) == sorted(set(test_list))", "code_6": "def all_unique(test_list):\n    return len(test_list) == sum(1 for i in set(test_list))", "code_7": "def all_unique(test_list):\n    return all(map(test_list.count, test_list)) == 1", "code_8": "def all_unique(test_list):\n    return len(test_list) == len(dict.fromkeys(test_list))", "code_9": "def all_unique(test_list):\n    return all(test_list.count(i) == 1 for i in set(test_list))", "code_10": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list)) == sum(test_list.count(i) for i in test_list)", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/282", "prompt": "\n\ndef sub_list(nums1,nums2):\n  \"\"\"\n  Write a function to substaract two lists using map and lambda function.\n  >>> sub_list([1, 2, 3],[4,5,6])\n  [-3,-3,-3]\n  >>> sub_list([1,2],[3,4])\n  [-2,-2]\n  >>> sub_list([90,120],[50,70])\n  [40,50]\n  \"\"\"\n", "solution": "  \n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "sub_list = lambda nums1, nums2: list(map(lambda x, y: x - y, nums1, nums2))", "code_2": "sub_list = lambda nums1, nums2: [a - b for a, b in zip(nums1, nums2)]", "code_3": "from operator import sub\nsub_list = lambda nums1, nums2: list(map(sub, nums1, nums2))", "code_4": "import numpy as np\nsub_list = lambda nums1, nums2: np.subtract(nums1, nums2).tolist()", "code_5": "sub_list = lambda nums1, nums2: [x - y for x, y in zip(nums1, nums2)]", "code_6": "sub_list = lambda nums1, nums2: [x - nums2[i] for i, x in enumerate(nums1)]", "code_7": "sub_list = lambda nums1, nums2: [x - y for x in nums1 for y in nums2 if nums1.index(x) == nums2.index(y)]", "code_8": "sub_list = lambda nums1, nums2: [x - y for x in nums1 for y in nums2 if nums1[nums1.index(x)] == y]", "code_9": "sub_list = lambda nums1, nums2: [x - y for x in nums1 for y in nums2 if nums1[nums2.index(y)] == x]", "code_10": "sub_list = lambda nums1, nums2: [x - y for x in nums1 for y in nums2 if nums1.index(x) == nums2.index(y)]", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/283", "prompt": "\n\ndef validate(n):\n    \"\"\"\n    Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(51241)\n    False\n    >>> validate(321)\n    True\n    \"\"\"\n", "solution": "     \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True", "results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def validate(n):\n    return all(n.count(str(i)) <= i for i in range(10))", "code_2": "def validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    return all(freq[i] <= i for i in range(10))", "code_3": "def validate(n):\n    freq = {str(i): 0 for i in range(10)}\n    for digit in str(n):\n        freq[digit] += 1\n    return all(freq[str(i)] <= i for i in range(10))", "code_4": "def validate(n):\n    freq = [0] * 10\n    for digit in map(int, str(n)):\n        freq[digit] += 1\n    return all(freq[i] <= i for i in range(10))", "code_5": "def validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    return all(freq[i] <= i for i in range(10))", "code_6": "def validate(n):\n    freq = {i: 0 for i in range(10)}\n    for digit in map(int, str(n)):\n        freq[digit] += 1\n    return all(freq[i] <= i for i in range(10))", "code_7": "def validate(n):\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n    return all(count <= int(digit) for digit, count in enumerate(freq))", "code_8": "def validate(n):\n    freq = {i: 0 for i in range(10)}\n    for digit in str(n):\n        freq[int(digit)] += 1\n    return all(freq[i] <= i for i in range(10))", "code_9": "def validate(n):\n    freq = [0] * 10\n    for digit in map(int, str(n)):\n        freq[digit] += 1\n    return all(count <= i for i, count in enumerate(freq))", "code_10": "def validate(n):\n    freq = {str(i): 0 for i in range(10)}\n    for digit in str(n):\n        freq[digit] += 1\n    return all(freq[str(i)] <= i for i in range(10))", "pass@3": 1.0, "nDCG@10": 0.77990823370192}
{"task_id": "MBPP/284", "prompt": "\n\ndef check_element(list,element):\n  \"\"\"\n  Write a function to check whether all items of a list are equal to a given string.\n  >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')\n  False\n  >>> check_element([1,2,3,4],7)\n  False\n  >>> check_element([\"green\", \"green\", \"green\", \"green\"],'green')\n  True\n  \"\"\"\n", "solution": "  \n  check_element=all(v== element for v in list)\n  return check_element", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_element(lst, element):\n    return all(i == element for i in lst)", "code_2": "def check_element(lst, element):\n    return lst.count(element) == len(lst)", "code_3": "def check_element(lst, element):\n    return set(lst) == {element}", "code_4": "def check_element(lst, element):\n    return not any(i != element for i in lst)", "code_5": "def check_element(lst, element):\n    return sum(i != element for i in lst) == 0", "code_6": "def check_element(lst, element):\n    return len(set(lst) - {element}) == 0", "code_7": "def check_element(lst, element):\n    return lst[1:] == lst[:-1] == [element]", "code_8": "def check_element(lst, element):\n    return lst == [element] * len(lst)", "code_9": "def check_element(lst, element):\n    return min(lst) == max(lst) == element", "code_10": "def check_element(lst, element):\n    return lst == list(element for _ in lst)", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/285", "prompt": "\n\ndef text_match_two_three(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by two to three 'b'.\n        >>> text_match_two_three(\"ac\")\n        ('Not matched!')\n        >>> text_match_two_three(\"dc\")\n        ('Not matched!')\n        >>> text_match_two_three(\"abbbba\")\n        ('Found a match!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 0, 1, 0, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef text_match_two_three(text):\n    return 'Found a match!' if re.search(r'ab{2,3}', text) else 'Not matched!'", "code_2": "def text_match_two_three(text):\n    return 'Found a match!' if 'a' in text and 2 <= text.count('b', text.index('a')) <= 3 else 'Not matched!'", "code_3": "def text_match_two_three(text):\n    i = text.find('a')\n    return 'Found a match!' if i != -1 and text[i:i+4].count('b') in [2, 3] else 'Not matched!'", "code_4": "def text_match_two_three(text):\n    for i in range(len(text) - 2):\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and (i == len(text) - 3 or text[i+3] != 'b'):\n            return 'Found a match!'\n    return 'Not matched!'", "code_5": "def text_match_two_three(text):\n    return any(text[i] == 'a' and text[i+1:i+3] == 'bb' and (i+3 == len(text) or text[i+3] != 'b') for i in range(len(text) - 2)) and 'Found a match!' or 'Not matched!'", "code_6": "def text_match_two_three(text):\n    return 'Found a match!' if any(text[i:i+4] == 'abbb' or text[i:i+3] == 'abb' for i in range(len(text) - 2)) else 'Not matched!'", "code_7": "def text_match_two_three(text):\n    return 'Found a match!' if any(text[i:].startswith('abb') or text[i:].startswith('abbb') for i in range(len(text))) else 'Not matched!'", "code_8": "def text_match_two_three(text):\n    return 'Found a match!' if any(text[i:i+3] == 'abb' for i in range(len(text) - 2)) or any(text[i:i+4] == 'abbb' for i in range(len(text) - 3)) else 'Not matched!'", "code_9": "def text_match_two_three(text):\n    return 'Found a match!' if any(text[i:i+3] in ['abb', 'abbb'] for i in range(len(text) - 2)) else 'Not matched!'", "code_10": "def text_match_two_three(text):\n    return 'Found a match!' if any(text[i:i+4] == 'abbb' for i in range(len(text) - 3)) or any(text[i:i+3] == 'abb' for i in range(len(text) - 2)) else 'Not matched!'", "pass@3": 0.9916666666666667, "nDCG@10": 0.6812060741152738}
{"task_id": "MBPP/286", "prompt": "\n\ndef max_sub_array_sum_repeated(a, n, k):\n\t\"\"\"\n\tWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\t>>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n\t30\n\t>>> max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n\t59\n\t>>> max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\n\t-1\n\t\"\"\"\n", "solution": "\t \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for _ in range(2 * k):\n        for i in range(n):\n            curr_sum = max(a[i], curr_sum + a[i])\n            max_sum = max(max_sum, curr_sum)\n    return max_sum", "code_2": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for _ in range(2 * k):\n        for num in a:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n    return max_sum", "code_3": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for _ in range(2 * k):\n        curr_sum = max(max(a), max(a) + curr_sum)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "code_4": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for _ in range(2 * k):\n        curr_sum = max(max(a, key=lambda x: x + curr_sum), curr_sum + max(a))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "code_5": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for _ in range(2 * k):\n        curr_sum = max(curr_sum + max(a), max(a))\n        max_sum = max(max_sum, curr_sum)\n    return max_sum", "code_6": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_num = max(a)\n    if max_num < 0:\n        return max_num\n    total_sum = sum(a)\n    return max(max_sum, total_sum * k, total_sum + max_sum)", "code_7": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_num = max(a)\n    if max_num < 0:\n        return max_num\n    total_sum = sum(a)\n    if total_sum < 0:\n        return max_num\n    return max(max_sum, total_sum * k)", "code_8": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_num = max(a)\n    if max_num < 0:\n        return max_num\n    total_sum = sum(a)\n    if total_sum < 0:\n        return max_num\n    return max(max_sum, total_sum * k, max(a))", "code_9": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_num = max(a)\n    if max_num < 0:\n        return max_num\n    total_sum = sum(a)\n    if total_sum < 0:\n        return max_num\n    return max(max_sum, total_sum * k, max_num * k)", "code_10": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_num = max(a)\n    if max_num < 0:\n        return max_num\n    total_sum = sum(a)\n    if total_sum < 0:\n        return max_num\n    return max(max_sum, total_sum * k, max_num * k, total_sum + max_num)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/287", "prompt": "\n\ndef square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n even natural numbers.\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    56\n    >>> square_Sum(4)\n    120\n    \"\"\"\n", "solution": "      \n    return int(2*n*(n+1)*(2*n+1)/3)", "results": [1, 1, 1, 1, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def square_Sum(n):\n    return 2 * n * (n + 1) * (2 * n + 1) // 3", "code_2": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))", "code_3": "def square_Sum(n):\n    return sum(map(lambda i: i**2, range(2, 2*n+1, 2)))", "code_4": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+1, 2)])", "code_5": "def square_Sum(n):\n    return sum(i*i for i in range(2, 2*n+1, 2))", "code_6": "def square_Sum(n):\n    return sum(i**2 for i in xrange(2, 2*n+1, 2))", "code_7": "def square_Sum(n):\n    return sum(map(pow, range(2, 2*n+1, 2), [2]*n))", "code_8": "def square_Sum(n):\n    return reduce(lambda x, y: x + y**2, range(2, 2*n+1, 2), 0)", "code_9": "def square_Sum(n):\n    return sum(i*i for i in filter(lambda x: x % 2 == 0, range(1, 2*n+1)))", "code_10": "def square_Sum(n):\n    return sum(i**2 for i in itertools.islice(itertools.count(2, 2), n))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7885497208855957}
{"task_id": "MBPP/288", "prompt": "\n\ndef modular_inverse(arr, N, P):\n\t\"\"\"\n\tWrite a function to count array elements having modular inverse under given prime number p equal to itself.\n\t>>> modular_inverse([ 1, 6, 4, 5 ], 4, 7)\n\t2\n\t>>> modular_inverse([1, 3, 8, 12, 12], 5, 13)\n\t3\n\t>>> modular_inverse([2, 3, 4, 5], 4, 6)\n\t1\n\t\"\"\"\n", "solution": "\t\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def modular_inverse(arr, N, P):\n    return sum(pow(x, P-2, P) == x for x in arr)", "code_2": "def modular_inverse(arr, N, P):\n    return sum(1 for x in arr if pow(x, P-2, P) == x)", "code_3": "def modular_inverse(arr, N, P):\n    return len([x for x in arr if pow(x, P-2, P) == x])", "code_4": "def modular_inverse(arr, N, P):\n    return sum(map(lambda x: pow(x, P-2, P) == x, arr))", "code_5": "def modular_inverse(arr, N, P):\n    return sum(1 for x in arr if x**(P-2) % P == x)", "code_6": "def modular_inverse(arr, N, P):\n    return len([x for x in arr if x**(P-2) % P == x])", "code_7": "def modular_inverse(arr, N, P):\n    return sum(map(lambda x: x**(P-2) % P == x, arr))", "code_8": "def modular_inverse(arr, N, P):\n    return sum(pow(x, P-2, P) == x for x in arr if x < P)", "code_9": "def modular_inverse(arr, N, P):\n    return sum(1 for x in arr if x < P and pow(x, P-2, P) == x)", "code_10": "def modular_inverse(arr, N, P):\n    return len([x for x in arr if x < P and x**(P-2) % P == x])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/289", "prompt": "\n\ndef odd_Days(N):\n    \"\"\"\n    Write a python function to calculate the number of odd days in a given year.\n    >>> odd_Days(100)\n    5\n    >>> odd_Days(50)\n    6\n    >>> odd_Days(75)\n    2\n    \"\"\"\n", "solution": "     \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def odd_Days(N):\n    return (N // 4) + (N % 4 if N % 4 == 3 else 0)", "code_2": "def odd_Days(N):\n    return N // 4 + (1 if N % 4 == 3 else 0)", "code_3": "def odd_Days(N):\n    return N // 4 + (N % 4 == 3)", "code_4": "def odd_Days(N):\n    return N // 4 + (N & 3 == 3)", "code_5": "def odd_Days(N):\n    return sum(1 for m in range(1, 13) if (N % 4 == 3 and m in [1, 3, 5, 7, 8, 10, 12]) or (N % 4 != 3 and m in [4, 6, 9, 11]))", "code_6": "def odd_Days(N):\n    return sum(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)[N % 4 == 3::2]", "code_7": "def odd_Days(N):\n    return sum(1 for m in [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if m % 2 == 1) + (N % 4 == 3)", "code_8": "def odd_Days(N):\n    return sum(1 for m in [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] if m & 1) + (N & 3 == 3)", "code_9": "def odd_Days(N):\n    return sum(1 for m in [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1] if m and N % 4 == 3 or not m and N % 4 != 3)", "code_10": "def odd_Days(N):\n    return sum(1 for m in [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1] if m == (N % 4 != 3))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/290", "prompt": "\n\ndef max_length(list1):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length([[1], [5, 7], [10, 12, 14,15]])\n    (4, [10, 12, 14,15])\n    >>> max_length([[5], [15,20,25]])\n    (3, [15,20,25])\n    \"\"\"\n", "solution": "    \n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)", "results": [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_length(lst):\n    return max((len(sub), sub) for sub in lst)", "code_2": "def max_length(lst):\n    return max(lst, key=len), max(lst, key=len)", "code_3": "def max_length(lst):\n    max_len, max_sub = 0, []\n    for sub in lst:\n        if len(sub) > max_len:\n            max_len, max_sub = len(sub), sub\n    return max_len, max_sub", "code_4": "def max_length(lst):\n    return sorted((len(sub), sub) for sub in lst)[-1]", "code_5": "def max_length(lst):\n    return reduce(lambda x, y: x if len(x) > len(y) else y, lst), reduce(lambda x, y: x if len(x) > len(y) else y, lst)", "code_6": "def max_length(lst):\n    return heapq.nlargest(1, lst, key=len)[0], heapq.nlargest(1, lst, key=len)[0]", "code_7": "def max_length(lst):\n    return max(lst, key=lambda x: (len(x), x))", "code_8": "def max_length(lst):\n    return max(lst, key=lambda x: len(x))", "code_9": "def max_length(lst):\n    return max(lst, key=len), max(lst, key=len)", "code_10": "def max_length(lst):\n    return max(lst, key=lambda x: len(x)), max(lst, key=lambda x: len(x))", "pass@3": 0.7083333333333333, "nDCG@10": 0.4249260138166711}
{"task_id": "MBPP/291", "prompt": "\n\ndef count_no_of_ways(n, k):\n\t\"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t>>> count_no_of_ways(2, 4)\n\t16\n\t>>> count_no_of_ways(3, 2)\n\t6\n\t>>> count_no_of_ways(4, 4)\n\t228\n\t\"\"\"\n", "solution": "\t \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_no_of_ways(n, k):\n\tdp = [0] * (n + 1)\n\tdp[1] = k\n\tdp[2] = k * k\n\tfor i in range(3, n + 1):\n\t\tdp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\treturn dp[n]", "code_2": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tsame, diff = k, k * (k - 1)\n\tfor _ in range(3, n + 1):\n\t\tsame, diff = diff, (same + diff) * (k - 1)\n\treturn same + diff", "code_3": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tif n == 2:\n\t\treturn k * k\n\treturn (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))", "code_4": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tif n == 2:\n\t\treturn k * k\n\treturn (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))", "code_5": "def count_no_of_ways(n, k):\n\tdp = [0] * (n + 1)\n\tdp[1] = k\n\tdp[2] = k * k\n\tfor i in range(3, n + 1):\n\t\tdp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\treturn dp[n]", "code_6": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tsame, diff = k, k * (k - 1)\n\tfor _ in range(3, n + 1):\n\t\tsame, diff = diff, (same + diff) * (k - 1)\n\treturn same + diff", "code_7": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tif n == 2:\n\t\treturn k * k\n\treturn (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))", "code_8": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tif n == 2:\n\t\treturn k * k\n\treturn (k - 1) * (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k))", "code_9": "def count_no_of_ways(n, k):\n\tdp = [0] * (n + 1)\n\tdp[1] = k\n\tdp[2] = k * k\n\tfor i in range(3, n + 1):\n\t\tdp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\treturn dp[n]", "code_10": "def count_no_of_ways(n, k):\n\tif n == 1:\n\t\treturn k\n\tsame, diff = k, k * (k - 1)\n\tfor _ in range(3, n + 1):\n\t\tsame, diff = diff, (same + diff) * (k - 1)\n\treturn same + diff", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/292", "prompt": "\n\ndef find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers.\n    >>> find(10,3)\n    3\n    >>> find(4,2)\n    2\n    >>> find(20,5)\n    4\n    \"\"\"\n", "solution": "      \n    q = n//m \n    return (q)", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def find(n, m):\n    return n // m", "code_2": "def find(n, m):\n    return divmod(n, m)[0]", "code_3": "from operator import floordiv\ndef find(n, m):\n    return floordiv(n, m)", "code_4": "def find(n, m):\n    return int(n / m)", "code_5": "def find(n, m):\n    return n.__floordiv__(m)", "code_6": "def find(n, m):\n    return (n - n % m) / m", "code_7": "def find(n, m):\n    q = 0\n    while n >= m:\n        n -= m\n        q += 1\n    return q", "code_8": "def find(n, m):\n    return len(range(0, n, m))", "code_9": "def find(n, m):\n    q = 0\n    while n - m >= 0:\n        n -= m\n        q += 1\n    return q", "code_10": "def find(n, m):\n    q = 0\n    r = n\n    while r >= m:\n        r -= m\n        q += 1\n    return q", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/293", "prompt": "\n\ndef otherside_rightangle(w,h):\n  \"\"\"\n  Write a function to find the third side of a right angled triangle.\n  >>> otherside_rightangle(7,8)\n  10.63014581273465\n  >>> otherside_rightangle(3,4)\n  5\n  >>> otherside_rightangle(7,15)\n  16.55294535724685\n  \"\"\"\n", "solution": "  import math\n  \n  s=math.sqrt((w*w)+(h*h))\n  return s", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w**2 + h**2)", "code_2": "import cmath\ndef otherside_rightangle(w,h):\n  return abs(complex(w,h)).real", "code_3": "def otherside_rightangle(w,h):\n  return (w**2 + h**2)**0.5", "code_4": "from math import hypot\ndef otherside_rightangle(w,h):\n  return hypot(w,h)", "code_5": "def otherside_rightangle(w,h):\n  return (w*w + h*h)**(1/2)", "code_6": "from numpy import sqrt\ndef otherside_rightangle(w,h):\n  return sqrt(w**2 + h**2)", "code_7": "from numpy import hypot\ndef otherside_rightangle(w,h):\n  return hypot(w,h)", "code_8": "from numpy import linalg\ndef otherside_rightangle(w,h):\n  return linalg.norm([w,h])", "code_9": "from scipy.spatial import distance\ndef otherside_rightangle(w,h):\n  return distance.euclidean([0,0],[w,h])", "code_10": "from sympy import sqrt\ndef otherside_rightangle(w,h):\n  return sqrt(w**2 + h**2)", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/294", "prompt": "\n\ndef max_val(listval):\n     \"\"\"\n     Write a function to find the maximum value in a given heterogeneous list.\n     >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n     5\n     >>> max_val(['Python', 15, 20, 25])\n     25\n     >>> max_val(['Python', 30, 20, 40, 50, 'version'])\n     50\n     \"\"\"\n", "solution": "     \n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def max_val(listval):\n    return max(x for x in listval if isinstance(x, int))", "code_2": "def max_val(listval):\n    return max(filter(lambda x: isinstance(x, int), listval))", "code_3": "def max_val(listval):\n    return max(x for x in listval if type(x) == int)", "code_4": "def max_val(listval):\n    return max(filter(int.__instancecheck__, listval))", "code_5": "def max_val(listval):\n    return max(x for x in listval if type(x) is int)", "code_6": "def max_val(listval):\n    return max(x for x in listval if isinstance(x, (int,)))", "code_7": "def max_val(listval):\n    return max(x for x in listval if type(x) is int or type(x) is long)", "code_8": "def max_val(listval):\n    return max(x for x in listval if type(x).__name__ == 'int')", "code_9": "def max_val(listval):\n    return max(x for x in listval if str(type(x)) == \"<class 'int'>\")", "code_10": "def max_val(listval):\n    return max(x for x in listval if re.match(r'^<class \\'int\\'>$', str(type(x))))", "pass@3": 1.0, "nDCG@10": 0.8630152897016883}
{"task_id": "MBPP/295", "prompt": "\n\ndef sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    >>> sum_div(8)\n    7\n    >>> sum_div(12)\n    16\n    >>> sum_div(7)\n    1\n    \"\"\"\n", "solution": "    \n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_div(n):\n    return sum(i for i in range(1, n + 1) if n % i == 0)", "code_2": "def sum_div(n):\n    div_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i == n // i:\n                div_sum += i\n            else:\n                div_sum += (i + n // i)\n    return div_sum", "code_3": "def sum_div(n):\n    div_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            div_sum += i + n // i\n    if int(n**0.5) == n**0.5:\n        div_sum -= int(n**0.5)\n    return div_sum", "code_4": "def sum_div(n):\n    div_sum = 0\n    i = 1\n    while i <= n // i:\n        if n % i == 0:\n            if i == n // i:\n                div_sum += i\n            else:\n                div_sum += (i + n // i)\n        i += 1\n    return div_sum", "code_5": "def sum_div(n):\n    div_sum = 1 + n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                div_sum += i\n            else:\n                div_sum += (i + n // i)\n            i += 1\n    return div_sum", "code_6": "def sum_div(n):\n    div_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum", "code_7": "def sum_div(n):\n    div_sum = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            div_sum += i\n        i += 1\n    return div_sum", "code_8": "def sum_div(n):\n    div_sum = sum(filter(lambda x: n % x == 0, range(1, n + 1)))\n    return div_sum", "code_9": "def sum_div(n):\n    div_sum = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum + n", "code_10": "def sum_div(n):\n    div_sum = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            div_sum += i + n // i\n        i += 1\n    if i * i == n:\n        div_sum -= i\n    return div_sum", "pass@3": 0.30000000000000004, "nDCG@10": 0.1100458831490401}
{"task_id": "MBPP/296", "prompt": "\n\ndef get_Inv_Count(arr,n):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    >>> get_Inv_Count([1,20,6,4,5],5)\n    5\n    >>> get_Inv_Count([1,2,1],3)\n    1\n    >>> get_Inv_Count([1,2,5,6,1],5)\n    3\n    \"\"\"\n", "solution": "     \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 28, "code_1": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "code_2": "def get_Inv_Count(arr, n):\n    return sum(arr[i] > arr[j] for i in range(n) for j in range(i + 1, n))", "code_3": "def get_Inv_Count(arr, n):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge", "code_4": "def merge(left, right):\n        merged = []\n        inv_count = 0\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count", "code_5": "_, inv_count = merge_sort(arr)\n    return inv_count", "code_6": "def get_Inv_Count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_7": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        return inv_count", "code_8": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_9": "def get_Inv_Count(arr, n):\n    class BIT:\n        def __init__(self, n):\n            self.size = n\n            self.tree = [0] * (n + 1)", "code_10": "def update(self, i, val):\n            while i <= self.size:\n                self.tree[i] += val\n                i += i & -i", "code_11": "def query(self, i):\n            res = 0\n            while i > 0:\n                res += self.tree[i]\n                i -= i & -i\n            return res", "code_12": "sorted_arr = sorted(arr)\n    index_map = {val: i + 1 for i, val in enumerate(sorted_arr)}\n    bit = BIT(n)\n    inv_count = 0\n    for i in range(n - 1, -1, -1):\n        inv_count += bit.query(index_map[arr[i]] - 1)\n        bit.update(index_map[arr[i]], 1)\n    return inv_count", "code_13": "def get_Inv_Count(arr, n):\n    def build_segment_tree(arr, tree, low, high):\n        if low == high:\n            tree[low] = arr[low]\n            return\n        mid = (low + high) // 2\n        build_segment_tree(arr, tree, low, mid)\n        build_segment_tree(arr, tree, mid + 1, high)\n        tree[low] = tree[low] + tree[mid + 1]", "code_14": "def get_sum(tree, low, high, qs, qe):\n        if qs > high or qe < low:\n            return 0\n        if qs <= low and qe >= high:\n            return tree[low]\n        mid = (low + high) // 2\n        return get_sum(tree, low, mid, qs, qe) + get_sum(tree, mid + 1, high, qs, qe)", "code_15": "def update_value(tree, low, high, idx, val):\n        if low == high:\n            tree[low] = val\n            return\n        mid = (low + high) // 2\n        if idx <= mid:\n            update_value(tree, low, mid, idx, val)\n        else:\n            update_value(tree, mid + 1, high, idx, val)\n        tree[low] = tree[low] + tree[mid + 1]", "code_16": "sorted_arr = sorted(arr)\n    index_map = {val: i for i, val in enumerate(sorted_arr)}\n    tree = [0] * n\n    build_segment_tree(arr, tree, 0, n - 1)\n    inv_count = 0\n    for i in range(n - 1, -1, -1):\n        idx = index_map[arr[i]]\n        inv_count += get_sum(tree, 0, n - 1, 0, idx - 1)\n        update_value(tree, 0, n - 1, idx, 0)\n    return inv_count", "code_17": "def get_Inv_Count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_18": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        return inv_count", "code_19": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_20": "def get_Inv_Count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_21": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[left:right + 1] = temp[left:right + 1]\n        return inv_count", "code_22": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_23": "def get_Inv_Count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_24": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[left:right + 1] = temp[left:right + 1]\n        return inv_count", "code_25": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_26": "def get_Inv_Count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_27": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[left:right + 1] = temp[left:right + 1]\n        return inv_count", "code_28": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/297", "prompt": "\n\ndef flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    >>> flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n    \"\"\"\n", "solution": "    \n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "results": [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def flatten_list(lst):\n    return [item for sublist in lst for item in sublist]", "code_2": "def flatten_list(lst):\n    return sum(lst, [])", "code_3": "import itertools\ndef flatten_list(lst):\n    return list(itertools.chain.from_iterable(lst))", "code_4": "def flatten_list(lst):\n    return [item for sublist in lst for item in (sublist if isinstance(sublist, list) else [sublist])]", "code_5": "def flatten_list(lst):\n    return [item for sublist in lst for item in (flatten_list(sublist) if isinstance(sublist, list) else [sublist])]", "code_6": "def flatten_list(lst):\n    flat_list = []\n    for sublist in lst:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list", "code_7": "def flatten_list(lst):\n    flat_list = []\n    [flat_list.extend(sublist) for sublist in lst]\n    return flat_list", "code_8": "def flatten_list(lst):\n    flat_list = []\n    [flat_list.append(item) for sublist in lst for item in sublist]\n    return flat_list", "code_9": "def flatten_list(lst):\n    while any(isinstance(i, list) for i in lst):\n        lst = [item for sublist in lst for item in sublist]\n    return lst", "code_10": "def flatten_list(lst):\n    stack = lst[:]\n    flat_list = []\n    while stack:\n        item = stack.pop()\n        if isinstance(item, list):\n            stack.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list[::-1]", "pass@3": 0.7083333333333333, "nDCG@10": 0.24355227021012354}
{"task_id": "MBPP/298", "prompt": "\n\ndef intersection_nested_lists(l1, l2):\n    \"\"\"\n    Write a function to find the nested list elements which are present in another list.\n    >>> intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    [[12], [7, 11], [1, 5, 8]]\n    >>> intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n    [[], []]\n    >>> intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])\n    [['john'], ['john'], ['john'], []]\n    \"\"\"\n", "solution": "    \n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "results": [1, 1, 0, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def intersection_nested_lists(l1, l2):\n    return [[i for i in sub if i in l1] for sub in l2]", "code_2": "def intersection_nested_lists(l1, l2):\n    return [list(filter(l1.__contains__, sub)) for sub in l2]", "code_3": "def intersection_nested_lists(l1, l2):\n    return [[val for val in sub if val in set(l1)] for sub in l2]", "code_4": "def intersection_nested_lists(l1, l2):\n    return [list(set(sub) & set(l1)) for sub in l2]", "code_5": "def intersection_nested_lists(l1, l2):\n    return [[val for val in sub if l1.count(val) > 0] for sub in l2]", "code_6": "def intersection_nested_lists(l1, l2):\n    return [list(set(sub).intersection(l1)) for sub in l2]", "code_7": "def intersection_nested_lists(l1, l2):\n    return [[val for val in sub if any(val == x for x in l1)] for sub in l2]", "code_8": "def intersection_nested_lists(l1, l2):\n    return [list(dict.fromkeys(sub) & dict.fromkeys(l1)) for sub in l2]", "code_9": "def intersection_nested_lists(l1, l2):\n    return [[val for val in sub if val in l1] for sub in l2]", "code_10": "def intersection_nested_lists(l1, l2):\n    return [list(set(sub).intersection(set(l1))) for sub in l2]", "pass@3": 0.9166666666666666, "nDCG@10": 0.5837154733670049}
{"task_id": "MBPP/299", "prompt": "\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n    ('Juan Whelan', 212)\n    >>> max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])\n    ('Juan Whelan', 72)\n    >>> max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])\n    ('Sabah Colley', 70)\n    \"\"\"\n", "solution": "    from collections import defaultdict\n    \n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_aggregate(stdata):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for name, score in stdata:\n        d[name] += score\n    return max(d.items(), key=lambda x: x[1])", "code_2": "def max_aggregate(stdata):\n    d = {}\n    for name, score in stdata:\n        d[name] = d.get(name, 0) + score\n    return max(d.items(), key=lambda x: x[1])", "code_3": "def max_aggregate(stdata):\n    d = {}\n    for name, score in stdata:\n        if name in d:\n            d[name] += score\n        else:\n            d[name] = score\n    return max(d.items(), key=lambda x: x[1])", "code_4": "def max_aggregate(stdata):\n    from itertools import groupby\n    stdata.sort(key=lambda x: x[0])\n    return max((name, sum(score for _, score in group)) for name, group in groupby(stdata, key=lambda x: x[0]))", "code_5": "def max_aggregate(stdata):\n    from operator import itemgetter\n    d = {}\n    for name, score in stdata:\n        d[name] = d.get(name, 0) + score\n    return max(d.items(), key=itemgetter(1))", "code_6": "def max_aggregate(stdata):\n    d = {}\n    for name, score in stdata:\n        d[name] = d.setdefault(name, 0) + score\n    return max(d.items(), key=lambda x: x[1])", "code_7": "def max_aggregate(stdata):\n    from collections import Counter\n    d = Counter()\n    for name, score in stdata:\n        d[name] += score\n    return d.most_common(1)[0]", "code_8": "def max_aggregate(stdata):\n    d = {}\n    for name, score in stdata:\n        d[name] = d.get(name, 0) + score\n    return max(d.items(), key=lambda x: x[1])", "code_9": "def max_aggregate(stdata):\n    d = {}\n    for name, score in stdata:\n        d[name] = d.setdefault(name, 0) + score\n    return max(d.items(), key=lambda x: x[1])", "code_10": "def max_aggregate(stdata):\n    d = {}\n    for name, score in stdata:\n        d[name] = d.get(name, 0) + score\n    return max(d.items(), key=lambda x: x[1])", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/300", "prompt": "\n\ndef count_binary_seq(n):\n\t\"\"\"\n\tWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\t>>> count_binary_seq(1)\n\t2.0\n\t>>> count_binary_seq(2)\n\t6.0\n\t>>> count_binary_seq(3)\n\t20.0\n\t\"\"\"\n", "solution": "\t \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from math import comb\ndef count_binary_seq(n):\n return sum(comb(2*n, i)**2 for i in range(n, 2*n+1))", "code_2": "import numpy as np\ndef count_binary_seq(n):\n c = np.bincount(range(2*n+1), minlength=2*n+2)\n c[2:] = c[:-2]\n return np.sum(np.cumsum(c[::-1])[:n+1]**2)", "code_3": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef count_binary_seq(n):\n if n == 0: return 1\n return sum(count_binary_seq(i) * count_binary_seq(n-1-i) for i in range(n+1))", "code_4": "def count_binary_seq(n):\n dp = [0] * (2*n+1)\n dp[0] = 1\n for _ in range(2*n):\n  dp = [sum(dp[max(0, i-j):i]) for i in range(2*n+1)]\n return sum(x*x for x in dp[n:])", "code_5": "from scipy.special import comb\ndef count_binary_seq(n):\n return sum(comb(2*n, i)**2 for i in range(n, 2*n+1))", "code_6": "def count_binary_seq(n):\n c = [0] * (2*n+2)\n c[0] = 1\n for _ in range(2*n):\n  for i in range(2*n, -1, -1):\n   c[i+1] += c[i]\n return sum(x*x for x in c[n:2*n+1])", "code_7": "from math import factorial\ndef count_binary_seq(n):\n return sum((factorial(2*n) // factorial(i) // factorial(2*n-i))**2 for i in range(n, 2*n+1))", "code_8": "def count_binary_seq(n):\n dp = [[0] * (n+1) for _ in range(2*n+1)]\n dp[0][0] = 1\n for i in range(1, 2*n+1):\n  for j in range(min(i, n)+1):\n   dp[i][j] = dp[i-1][j] + (dp[i-1][j-1] if j > 0 else 0)\n return sum(dp[2*n][i]**2 for i in range(n, 2*n+1))", "code_9": "from itertools import combinations\ndef count_binary_seq(n):\n return sum(len(list(combinations(range(2*n), i)))**2 for i in range(n, 2*n+1))", "code_10": "def count_binary_seq(n):\n dp = [0] * (2*n+1)\n dp[0] = 1\n for _ in range(2*n):\n  for i in range(2*n, -1, -1):\n   dp[i] += dp[i-1]\n return sum(dp[i]**2 for i in range(n, 2*n+1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/301", "prompt": "\n\ndef dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c':'python'}})\n    2\n    >>> dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})\n    3\n    \"\"\"\n", "solution": "    \n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0", "code_2": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())", "code_3": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))", "code_4": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for k, v in d.items())", "code_5": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.itervalues())", "code_6": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict))", "code_7": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values()) if d.values() else 1", "code_8": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict)) if d else 0", "code_9": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict)) if d else 1", "code_10": "def dict_depth(d):\n    if not d or not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values() if isinstance(v, dict)) if d.values() else 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/302", "prompt": "\n\ndef set_Bit_Number(n):\n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    >>> set_Bit_Number(6)\n    4\n    >>> set_Bit_Number(10)\n    8\n    >>> set_Bit_Number(18)\n    16\n    \"\"\"\n", "solution": "     \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def set_Bit_Number(n):\n    return 2 ** (n.bit_length() - 1)", "code_2": "def set_Bit_Number(n):\n    return 1 << (len(bin(n)) - 3)", "code_3": "def set_Bit_Number(n):\n    return 2 ** (len(format(n, 'b')) - 1)", "code_4": "def set_Bit_Number(n):\n    return 1 << (n.bit_length() - 1)", "code_5": "def set_Bit_Number(n):\n    return 2 ** (len(bin(n)) - 3)", "code_6": "def set_Bit_Number(n):\n    return 1 << (n.bit_length() - 1)", "code_7": "def set_Bit_Number(n):\n    return 2 ** (len(format(n, 'b')) - 1)", "code_8": "def set_Bit_Number(n):\n    return 1 << (len(bin(n)) - 3)", "code_9": "def set_Bit_Number(n):\n    return 2 ** (n.bit_length() - 1)", "code_10": "def set_Bit_Number(n):\n    return 1 << (len(format(n, 'b')) - 1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/303", "prompt": "\n\ndef solve(a,n):\n    \"\"\"\n    Write a python function to check whether the count of inversion of two types are same or not.\n    >>> solve([1,0,2],3)\n    True\n    >>> solve([1,2,0],3)\n    False\n    >>> solve([1,2,1],3)\n    True\n    \"\"\"\n", "solution": "    import sys \n       \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True", "results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def solve(a,n):\n    inv1 = sum(sum(1 for j in range(i+1, n) if a[i] > a[j]) for i in range(n))\n    inv2 = sum(sum(1 for j in range(i+1, n) if a[i] < a[j]) for i in range(n))\n    return inv1 == inv2", "code_2": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    inv2 = sum(a[i] < a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 == inv2", "code_3": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 == n*(n-1)//2 - inv1", "code_4": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 == (n*(n-1)//2 - inv1) == sum(a[i] < a[j] for i in range(n) for j in range(i+1, n))", "code_5": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 == (n*(n-1)//4)", "code_6": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 == (n*(n-1)//4) == (n*(n-1)//2 - inv1)", "code_7": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 * 2 == n*(n-1)", "code_8": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 * 2 == sum(a[i] != a[j] for i in range(n) for j in range(i+1, n))", "code_9": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 * 2 == sum(1 for i in range(n) for j in range(i+1, n) if a[i] != a[j])", "code_10": "def solve(a,n):\n    inv1 = sum(a[i] > a[j] for i in range(n) for j in range(i+1, n))\n    return inv1 * 2 == len([(i,j) for i in range(n) for j in range(i+1, n) if a[i] != a[j]])", "pass@3": 0.30000000000000004, "nDCG@10": 0.08514311764162101}
{"task_id": "MBPP/304", "prompt": "\n\ndef find_Element(arr,ranges,rotations,index) :\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    >>> find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)\n    3\n    >>> find_Element([1,2,3,4],[[0,1],[0,2]],1,2)\n    3\n    >>> find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1)\n    1\n    \"\"\"\n", "solution": "      \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = arr[r[0]:r[1]+1][-1:] + arr[r[0]:r[1]+1][:-1]\n    return arr[index]", "code_2": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = arr[r[1]] + arr[r[0]:r[1]]\n    return arr[index]", "code_3": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = arr[r[0]:r[1]+1][::-1]\n    return arr[index]", "code_4": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = [arr[r[1]]] + arr[r[0]:r[1]]\n    return arr[index]", "code_5": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = arr[r[0]:r[1]]\n            arr[r[0]] = arr[r[1]]\n    return arr[index]", "code_6": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = [arr[i] for i in range(r[1],r[0]-1,-1)]\n    return arr[index]", "code_7": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = list(reversed(arr[r[0]:r[1]+1]))\n    return arr[index]", "code_8": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = arr[r[0]:r[1]]\n            arr.insert(r[0], arr.pop(r[1]))\n    return arr[index]", "code_9": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = [arr[r[1]]] + arr[r[0]:r[1]]\n    return arr[index]", "code_10": "def find_Element(arr,ranges,rotations,index):\n    for _ in range(rotations):\n        for r in ranges:\n            arr[r[0]:r[1]+1] = [arr[i] for i in range(r[1],r[0]-1,-1)]\n    return arr[index]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/305", "prompt": "\n\ndef start_withp(words):\n \"\"\"\n Write a function to match two words from a list of words starting with letter 'p'.\n >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n ('Python', 'PHP')\n >>> start_withp([\"Python Programming\",\"Java Programming\"])\n ('Python','Programming')\n >>> start_withp([\"Pqrst Pqr\",\"qrstuv\"])\n ('Pqrst','Pqr')\n \"\"\"\n", "solution": " import re\n \n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "results": [1, 1, 0, 1, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def start_withp(words):\n    for word in words:\n        p_words = [w for w in word.split() if w.startswith('p') or w.startswith('P')]\n        if len(p_words) >= 2:\n            return p_words[0], p_words[1]", "code_2": "def start_withp(words):\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w[0].lower() == 'p':\n                p_words.append(w)\n                if len(p_words) == 2:\n                    return tuple(p_words)", "code_3": "def start_withp(words):\n    p_words = [w for word in words for w in word.split() if w.lower().startswith('p')]\n    return p_words[:2] if len(p_words) >= 2 else None", "code_4": "def start_withp(words):\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w[0].lower() == 'p':\n                p_words.append(w)\n            if len(p_words) == 2:\n                return tuple(p_words)", "code_5": "def start_withp(words):\n    p_words = [w for word in words for w in word.split() if w.startswith(('p', 'P'))]\n    return p_words[:2] if len(p_words) >= 2 else (None, None)", "code_6": "def start_withp(words):\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w[0].lower() == 'p':\n                p_words.append(w)\n            if len(p_words) == 2:\n                return p_words\n    return None, None", "code_7": "def start_withp(words):\n    p_words = [w for word in words for w in word.split() if w.lower().startswith('p')]\n    return (p_words[0], p_words[1]) if len(p_words) >= 2 else (None, None)", "code_8": "def start_withp(words):\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w[0].lower() == 'p':\n                p_words.append(w)\n            if len(p_words) == 2:\n                return p_words\n    return [None, None]", "code_9": "def start_withp(words):\n    p_words = [w for word in words for w in word.split() if w.lower().startswith('p')]\n    return p_words[:2] if len(p_words) >= 2 else (None, None)", "code_10": "def start_withp(words):\n    p_words = []\n    for word in words:\n        for w in word.split():\n            if w[0].lower() == 'p':\n                p_words.append(w)\n            if len(p_words) == 2:\n                return p_words\n    return (None, None)", "pass@3": 0.8333333333333334, "nDCG@10": 0.5271064966405457}
{"task_id": "MBPP/306", "prompt": "\n\ndef max_sum_increasing_subseq(a, n, index, k):\n\t\"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\t>>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n\t11\n\t>>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)\n\t7\n\t>>> max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n\t71\n\t\"\"\"\n", "solution": "\t\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    return max(dp[:k]) + a[k]", "code_2": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max((dp[j] + a[i]) for j in range(i) if a[j] < a[i]))\n    return max(dp[:k]) + a[k]", "code_3": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] for j in range(i) if a[j] < a[i]) + a[i])\n    return max(dp[:k]) + a[k]", "code_4": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] + a[i] for j in range(i) if a[j] < a[i]))\n    return max(dp[:k]) + a[k]", "code_5": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] for j in range(i) if a[j] < a[i]) + a[i])\n    return max(dp[:k]) + a[k]", "code_6": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] + a[i] for j in range(i) if a[j] < a[i]))\n    return max(dp[:k]) + a[k]", "code_7": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] for j in range(i) if a[j] < a[i]) + a[i])\n    return max(dp[:k]) + a[k]", "code_8": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] + a[i] for j in range(i) if a[j] < a[i]))\n    return max(dp[:k]) + a[k]", "code_9": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] for j in range(i) if a[j] < a[i]) + a[i])\n    return max(dp[:k]) + a[k]", "code_10": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, k):\n        dp[i] = max(dp[i - 1], max(dp[j] + a[i] for j in range(i) if a[j] < a[i]))\n    return max(dp[:k]) + a[k]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/307", "prompt": "\n\ndef colon_tuplex(tuplex,m,n):\n  \"\"\"\n  Write a function to get a colon of a tuple.\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,50)\n  (\"HELLO\", 5, [50], True)\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,100)\n  ((\"HELLO\", 5, [100],True))\n  >>> colon_tuplex((\"HELLO\", 5, [], True) ,2,500)\n  (\"HELLO\", 5, [500], True)\n  \"\"\"\n", "solution": "  from copy import deepcopy\n  \n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def colon_tuplex(tuplex, m, n):\n    return tuplex[:m] + ([n],) + tuplex[m+1:]", "code_2": "def colon_tuplex(tuplex, m, n):\n    return tuple(x if i != m else [n] for i, x in enumerate(tuplex))", "code_3": "def colon_tuplex(tuplex, m, n):\n    lst = list(tuplex)\n    lst[m] = [n]\n    return tuple(lst)", "code_4": "def colon_tuplex(tuplex, m, n):\n    return (*tuplex[:m], [n], *tuplex[m+1:])", "code_5": "def colon_tuplex(tuplex, m, n):\n    return tuple(tuplex[i] if i != m else [n] for i in range(len(tuplex)))", "code_6": "def colon_tuplex(tuplex, m, n):\n    return tuple(tuplex[i] if i != m else [n] for i in range(len(tuplex)))", "code_7": "def colon_tuplex(tuplex, m, n):\n    return tuple(tuplex[i] if i != m else [n] for i in range(len(tuplex)))", "code_8": "def colon_tuplex(tuplex, m, n):\n    return tuple(tuplex[i] if i != m else [n] for i in range(len(tuplex)))", "code_9": "def colon_tuplex(tuplex, m, n):\n    return tuple(tuplex[i] if i != m else [n] for i in range(len(tuplex)))", "code_10": "def colon_tuplex(tuplex, m, n):\n    return tuple(tuplex[i] if i != m else [n] for i in range(len(tuplex)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/308", "prompt": "\n\ndef large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists.\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)\n    [60, 54, 50, 48]\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)\n    [60, 54, 50, 48, 45]\n    \"\"\"\n", "solution": "    \n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef large_product(nums1, nums2, N):\n    return sorted([a*b for a in nums1 for b in nums2], reverse=True)[:N]", "code_2": "def large_product(nums1, nums2, N):\n    return heapq.nlargest(N, (a*b for a in nums1 for b in nums2))", "code_3": "def large_product(nums1, nums2, N):\n    return sorted(a*b for a in sorted(nums1, reverse=True)[:N] for b in sorted(nums2, reverse=True)[:N], reverse=True)[:N]", "code_4": "import numpy as np\ndef large_product(nums1, nums2, N):\n    return np.sort(np.outer(nums1, nums2).flatten())[-N:][::-1]", "code_5": "def large_product(nums1, nums2, N):\n    return sorted(itertools.islice(heapq.merge((a*b for a in nums1) for b in nums2), N-1, None), reverse=True)", "code_6": "def large_product(nums1, nums2, N):\n    return sorted(itertools.chain.from_iterable(a*b for a in nums1 for b in nums2), reverse=True)[:N]", "code_7": "def large_product(nums1, nums2, N):\n    return sorted(itertools.product(nums1, nums2), key=lambda x: x[0]*x[1], reverse=True)[:N]", "code_8": "def large_product(nums1, nums2, N):\n    return sorted(itertools.product(sorted(nums1, reverse=True)[:N], sorted(nums2, reverse=True)[:N]), key=lambda x: x[0]*x[1], reverse=True)[:N]", "code_9": "def large_product(nums1, nums2, N):\n    return sorted(itertools.product(sorted(nums1, reverse=True), sorted(nums2, reverse=True)), key=lambda x: x[0]*x[1], reverse=True)[:N]", "code_10": "def large_product(nums1, nums2, N):\n    return sorted(itertools.product(sorted(nums1, reverse=True), sorted(nums2, reverse=True)), key=lambda x: x[0]*x[1])[-N:][::-1]", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/309", "prompt": "\n\ndef maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    >>> maximum(5,10)\n    10\n    >>> maximum(-1,-2)\n    -1\n    >>> maximum(9,7)\n    9\n    \"\"\"\n", "solution": "       \n    if a >= b: \n        return a \n    else: \n        return b ", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def maximum(a, b):\n    return a if a > b else b", "code_2": "def maximum(a, b):\n    return max(a, b)", "code_3": "maximum = lambda a, b: a if a > b else b", "code_4": "def maximum(a, b):\n    return (a, b)[a < b]", "code_5": "import operator\nmaximum = operator.max", "code_6": "from functools import partial\nmaximum = partial(max, 0)", "code_7": "def maximum(a, b):\n    return sorted([a, b])[-1]", "code_8": "def maximum(a, b):\n    return [a, b][a < b]", "code_9": "def maximum(a, b):\n    return a + (b - a) * (a < b)", "code_10": "def maximum(a, b):\n    return a ^ ((a ^ b) & -(a < b))", "pass@3": 1.0, "nDCG@10": 0.8364586133797037}
{"task_id": "MBPP/310", "prompt": "\n\ndef string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple.\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_to_tuple(\"item1\")\n    ('i', 't', 'e', 'm', '1')\n    >>> string_to_tuple(\"15.10\")\n    ('1', '5', '.', '1', '0')\n    \"\"\"\n", "solution": "    \n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def string_to_tuple(str1): return tuple(str1)", "code_2": "def string_to_tuple(str1): return tuple(c for c in str1)", "code_3": "def string_to_tuple(str1): return tuple(map(lambda x: x, str1))", "code_4": "def string_to_tuple(str1): return tuple(iter(str1))", "code_5": "def string_to_tuple(str1): return tuple(list(str1))", "code_6": "def string_to_tuple(str1): return tuple(str1.split(\"\"))", "code_7": "def string_to_tuple(str1): return tuple(re.findall(r'.', str1))", "code_8": "def string_to_tuple(str1): return tuple(str1.strip().split(\" \"))", "code_9": "def string_to_tuple(str1): return tuple(str1.replace(\" \", \"\"))", "code_10": "def string_to_tuple(str1): return tuple(str1.encode())", "pass@3": 0.30000000000000004, "nDCG@10": 0.06625422345438904}
{"task_id": "MBPP/311", "prompt": "\n\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(12)\n    14\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n", "solution": "     \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def set_left_most_unset_bit(n):\n    if n == 0: return 1\n    m = 1\n    while m & n: m <<= 1\n    return n | m", "code_2": "def set_left_most_unset_bit(n):\n    return n | (~n & (n + 1))", "code_3": "def set_left_most_unset_bit(n):\n    return n | ~(n & (n - 1))", "code_4": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n", "code_5": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n & 0xFFFFFFFF", "code_6": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n & (1 << 32 - 1)", "code_7": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n & ((1 << 32) - 1)", "code_8": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n & (2 ** 32 - 1)", "code_9": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n & (2 ** 32 - 1) & 0xFFFFFFFF", "code_10": "def set_left_most_unset_bit(n):\n    return n | ~n & -~n & (2 ** 32 - 1) & 0xFFFFFFFF & n", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/312", "prompt": "\n\ndef volume_cone(r,h):\n  \"\"\"\n  Write a function to find the volume of a cone.\n  >>> volume_cone(5,12)\n  314.15926535897927\n  >>> volume_cone(10,15)\n  1570.7963267948965\n  >>> volume_cone(19,17)\n  6426.651371693521\n  \"\"\"\n", "solution": "  import math\n  \n  volume = (1.0/3) * math.pi * r * r * h\n  return volume", "results": [1, 1, 1, 0, 0, 0, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def volume_cone(r, h):\n    return (1/3) * 3.141592653589793 * r * r * h", "code_2": "import math\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r * r * h", "code_3": "from math import pi\ndef volume_cone(r, h):\n    return (1/3) * pi * r * r * h", "code_4": "def volume_cone(r, h):\n    return (1/3) * 3.14 * r * r * h", "code_5": "def volume_cone(r, h):\n    return (1/3) * 3.14159 * r * r * h", "code_6": "def volume_cone(r, h):\n    return (1/3) * 3.14159265 * r * r * h", "code_7": "def volume_cone(r, h):\n    return (1/3) * 3.14159265359 * r * r * h", "code_8": "def volume_cone(r, h):\n    return (1/3) * 3.14159265358979323846 * r * r * h", "code_9": "def volume_cone(r, h):\n    return (1/3) * 3.1415926535897932384626433832795 * r * r * h", "code_10": "def volume_cone(r, h):\n    return (1/3) * math.acos(-1) * r * r * h", "pass@3": 0.9166666666666666, "nDCG@10": 0.6046855387118413}
{"task_id": "MBPP/313", "prompt": "\n\ndef pos_nos(list1):\n  \"\"\"\n  Write a python function to print positive numbers in a list.\n  >>> pos_nos([-1,-2,1,2])\n  1,2\n  >>> pos_nos([3,4,-5])\n  3,4\n  >>> pos_nos([-2,-3,1])\n  1\n  \"\"\"\n", "solution": "  \n  for num in list1: \n    if num >= 0: \n       return num ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def pos_nos(list1):\n    return [i for i in list1 if i > 0]", "code_2": "def pos_nos(list1):\n    return list(filter(lambda x: x > 0, list1))", "code_3": "def pos_nos(list1):\n    return [x for x in list1 if x > 0]", "code_4": "def pos_nos(list1):\n    return [num for num in list1 if num > 0]", "code_5": "def pos_nos(list1):\n    return [i for i in list1 if i > 0]", "code_6": "def pos_nos(list1):\n    return [x for x in list1 if x > 0]", "code_7": "def pos_nos(list1):\n    return [num for num in list1 if num > 0]", "code_8": "def pos_nos(list1):\n    return [i for i in list1 if i > 0]", "code_9": "def pos_nos(list1):\n    return [x for x in list1 if x > 0]", "code_10": "def pos_nos(list1):\n    return [num for num in list1 if num > 0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/314", "prompt": "\n\ndef max_sum_rectangular_grid(grid, n) :\n\t\"\"\"\n\tWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\t>>> max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3)\n\t7\n\t>>> max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5)\n\t24\n\t>>> max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5)\n\t81\n\t\"\"\"\n", "solution": "\t \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)", "results": [1, 1, 1, 0, 0, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def max_sum_rectangular_grid(grid, n):\n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    if n > 1:\n        dp[1] = max(grid[0][1], grid[1][1])\n        for i in range(2, n):\n            dp[i] = max(dp[i-2] + max(grid[0][i], grid[1][i]), dp[i-1])\n    return dp[-1]", "code_2": "def max_sum_rectangular_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl_new = 0\n    excl_old = 0\n    for i in range(1, n):\n        excl_new = max(incl, excl_old)\n        incl = excl_old + max(grid[0][i], grid[1][i])\n        excl_old = excl_new\n    return max(incl, excl_new)", "code_3": "def max_sum_rectangular_grid(grid, n):\n    a = max(grid[0][0], grid[1][0])\n    b = 0\n    for i in range(1, n):\n        a, b = max(b + max(grid[0][i], grid[1][i]), a), a\n    return a", "code_4": "def max_sum_rectangular_grid(grid, n):\n    prev_incl = grid[0][0]\n    prev_excl = 0\n    for i in range(1, n):\n        new_excl = max(prev_incl, prev_excl)\n        new_incl = prev_excl + max(grid[0][i], grid[1][i])\n        prev_incl = new_incl\n        prev_excl = new_excl\n    return max(prev_incl, prev_excl)", "code_5": "def max_sum_rectangular_grid(grid, n):\n    incl = grid[0][0]\n    excl = 0\n    excl_new = 0\n    for i in range(1, n):\n        excl_new = max(incl, excl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(incl, excl)", "code_6": "def max_sum_rectangular_grid(grid, n):\n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], (dp[i-2] if i > 1 else 0) + max(grid[0][i], grid[1][i]))\n    return dp[-1]", "code_7": "def max_sum_rectangular_grid(grid, n):\n    incl = grid[0][0]\n    excl = 0\n    for i in range(1, n):\n        new_excl = max(incl, excl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = new_excl\n    return max(incl, excl)", "code_8": "def max_sum_rectangular_grid(grid, n):\n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], (dp[i-2] if i > 1 else 0) + max(grid[0][i], grid[1][i]))\n    return dp[-1]", "code_9": "def max_sum_rectangular_grid(grid, n):\n    incl = grid[0][0]\n    excl = 0\n    for i in range(1, n):\n        new_excl = max(incl, excl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = new_excl\n    return max(incl, excl)", "code_10": "def max_sum_rectangular_grid(grid, n):\n    dp = [0] * n\n    dp[0] = max(grid[0][0], grid[1][0])\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], (dp[i-2] if i > 1 else 0) + max(grid[0][i], grid[1][i]))\n    return dp[-1]", "pass@3": 0.9666666666666667, "nDCG@10": 0.6804503724350792}
{"task_id": "MBPP/315", "prompt": "\n\ndef find_Max_Len_Even(str):\n    \"\"\"\n    Write a python function to find the first maximum length of even word.\n    >>> find_Max_Len_Even(\"python language\")\n    \"language\"\n    >>> find_Max_Len_Even(\"maximum even length\")\n    \"length\"\n    >>> find_Max_Len_Even(\"eve\")\n    \"-1\"\n    \"\"\"\n", "solution": "     \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen] ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len) if even_words else \"-1\"", "code_2": "def find_Max_Len_Even(s):\n    max_len = -1\n    max_word = \"-1\"\n    for word in s.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word", "code_3": "def find_Max_Len_Even(s):\n    even_words = [word for word in s.split() if len(word) % 2 == 0]\n    return sorted(even_words, key=len, reverse=True)[0] if even_words else \"-1\"", "code_4": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = filter(lambda word: len(word) % 2 == 0, words)\n    return max(even_words, key=len, default=\"-1\")", "code_5": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = (word for word in words if len(word) % 2 == 0)\n    return max(even_words, key=len, default=\"-1\")", "code_6": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len) if even_words else \"-1\"", "code_7": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return sorted(even_words, key=len)[-1] if even_words else \"-1\"", "code_8": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len) if even_words else \"-1\"", "code_9": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len) if even_words else \"-1\"", "code_10": "def find_Max_Len_Even(s):\n    words = s.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len) if even_words else \"-1\"", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/316", "prompt": "\n\ndef find_last_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    3\n    >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n    9\n    >>> find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n    6\n    \"\"\"\n", "solution": "    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result ", "results": [1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def find_last_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == len(A) - 1 or A[mid + 1] != x:\n                return mid\n            else:\n                left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "code_2": "def find_last_occurrence(A, x):\n    try:\n        return len(A) - 1 - A[::-1].index(x)\n    except ValueError:\n        return -1", "code_3": "def find_last_occurrence(A, x):\n    return next((i for i in range(len(A) - 1, -1, -1) if A[i] == x), -1)", "code_4": "import bisect\ndef find_last_occurrence(A, x):\n    i = bisect.bisect_right(A, x)\n    if i:\n        return i - 1\n    return -1", "code_5": "def find_last_occurrence(A, x):\n    return A.index(x) if x in A else -1", "code_6": "def find_last_occurrence(A, x):\n    for i in reversed(range(len(A))):\n        if A[i] == x:\n            return i\n    return -1", "code_7": "def find_last_occurrence(A, x):\n    return [i for i, val in enumerate(A) if val == x][-1] if x in A else -1", "code_8": "def find_last_occurrence(A, x):\n    return reduce(lambda a, b: b if A[b] == x else a, range(len(A)), -1)", "code_9": "def find_last_occurrence(A, x):\n    return max((i for i, val in enumerate(A) if val == x), default=-1)", "code_10": "def find_last_occurrence(A, x):\n    return max(loc for loc, val in enumerate(A) if val == x) if x in A else -1", "pass@3": 1.0, "nDCG@10": 0.8454256604216018}
{"task_id": "MBPP/317", "prompt": "\n\ndef modified_encode(alist):\n        \"\"\"\n        Write a function to reflect the modified run-length encoding from a list.\n        >>> modified_encode([1,1,2,3,4,4,5,1])\n        [[2, 1], 2, 3, [2, 4], 5, 1]\n        >>> modified_encode('automatically')\n        ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n        >>> modified_encode('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n        \"\"\"\n", "solution": "        from itertools import groupby\n        \n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def modified_encode(alist):\n    result, count = [], 1\n    for i in range(1, len(alist)):\n        if alist[i] == alist[i-1]:\n            count += 1\n        else:\n            result.append([count, alist[i-1]] if count > 1 else alist[i-1])\n            count = 1\n    result.append([count, alist[-1]] if count > 1 else alist[-1])\n    return result", "code_2": "def modified_encode(alist):\n    return [alist[i] if alist[i] != alist[i-1] or i == 0 else [2, alist[i]] for i in range(len(alist))]", "code_3": "def modified_encode(alist):\n    return [[len(list(group)), key] if len(list(group)) > 1 else key for key, group in itertools.groupby(alist)]", "code_4": "def modified_encode(alist):\n    return [x if alist.count(x) == 1 else [alist.count(x), x] for x in set(alist)]", "code_5": "def modified_encode(alist):\n    return [alist[i] if alist[i] != alist[i-1] or i == 0 else [2, alist[i]] for i in range(len(alist)) if i == len(alist)-1 or alist[i] != alist[i+1]]", "code_6": "def modified_encode(alist):\n    return [x if alist.count(x) == 1 else [alist.count(x), x] for x in dict.fromkeys(alist)]", "code_7": "def modified_encode(alist):\n    return [alist[i] if alist[i] != alist[i-1] or i == 0 else [2, alist[i]] for i in range(len(alist)) if i == 0 or alist[i] != alist[i-1]]", "code_8": "def modified_encode(alist):\n    return [x if alist.count(x) == 1 else [alist.count(x), x] for x in sorted(set(alist), key=alist.index)]", "code_9": "def modified_encode(alist):\n    return [alist[i] if alist[i] != alist[i-1] or i == 0 else [2, alist[i]] for i in range(len(alist)) if i == 0 or alist[i] != alist[i-2]]", "code_10": "def modified_encode(alist):\n    return [x if alist.count(x) == 1 else [alist.count(x), x] for x in {i: None for i in alist}]", "pass@3": 0.5333333333333333, "nDCG@10": 0.3052348839397012}
{"task_id": "MBPP/318", "prompt": "\n\ndef max_volume (s):\n    \"\"\"\n    Write a python function to find the maximum volume of a cuboid with given sum of sides.\n    >>> max_volume(8)\n    18\n    >>> max_volume(4)\n    2\n    >>> max_volume(1)\n    0\n    \"\"\"\n", "solution": "     \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_volume(s):\n    return max((s-2*i)*(s-2*j)*i for i in range(1, s//3+1) for j in range(i, (s-i)//2+1))", "code_2": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, (s-a)//2+1))", "code_3": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, s//2+1) if a+b<s)", "code_4": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, s//2+1) if a+b<s and a<=b<=s-a-b)", "code_5": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, (s-a)//2+1) if a+b<s and a<=b<=s-a-b)", "code_6": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, s//2+1) if a+b<s and a<=b and b<=s-a-b)", "code_7": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, (s-a)//2+1) if a+b<s and a<=b and b<=s-a-b)", "code_8": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, s//2+1) if a+b<s and a<=b<=min(b, s-a-b))", "code_9": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, (s-a)//2+1) if a+b<s and a<=b<=min(b, s-a-b))", "code_10": "def max_volume(s):\n    return max(a*b*(s-a-b) for a in range(1, s//3+1) for b in range(a, s//2+1) if a+b<s and a<=b<=s-a-b and b<=s-a-b)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/319", "prompt": "\n\ndef find_long_word(text):\n  \"\"\"\n  Write a function to find all five characters long word in the given string by using regex.\n  >>> find_long_word('Please move back to strem')\n  ['strem']\n  >>> find_long_word('4K Ultra HD streaming player')\n  ['Ultra']\n  >>> find_long_word('Streaming Media Player')\n  ['Media']\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef find_long_word(text):\n    return re.findall(r'\\b\\w{5}\\b', text)", "code_2": "import re\ndef find_long_word(text):\n    return [word for word in re.split('\\W+', text) if len(word) == 5]", "code_3": "import re\ndef find_long_word(text):\n    return [word for word in text.split() if re.match(r'\\b\\w{5}\\b', word)]", "code_4": "import re\ndef find_long_word(text):\n    return [word for word in re.findall(r'\\w+', text) if len(word) == 5]", "code_5": "import re\ndef find_long_word(text):\n    return list(filter(lambda word: len(word) == 5, re.findall(r'\\w+', text)))", "code_6": "import re\ndef find_long_word(text):\n    return [word for word in text.split() if re.fullmatch(r'\\w{5}', word)]", "code_7": "import re\ndef find_long_word(text):\n    return [word for word in re.split(r'\\W+', text) if re.fullmatch(r'\\w{5}', word)]", "code_8": "import re\ndef find_long_word(text):\n    return [word for word in re.findall(r'\\b\\w+\\b', text) if len(word) == 5]", "code_9": "import re\ndef find_long_word(text):\n    return list(filter(lambda word: re.fullmatch(r'\\w{5}', word), re.findall(r'\\w+', text)))", "code_10": "import re\ndef find_long_word(text):\n    return [word for word in re.split(r'\\W+', text) if re.match(r'\\b\\w{5}\\b', word)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/320", "prompt": "\n\ndef sum_difference(n):\n    \"\"\"\n    Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    >>> sum_difference(12)\n    5434\n    >>> sum_difference(20)\n    41230\n    >>> sum_difference(54)\n    2151270\n    \"\"\"\n", "solution": "    \n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares", "results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_difference(n):\n    s1 = n * (n + 1) * (2 * n + 1) // 6\n    s2 = n * (n + 1) * (n + 2) // 6\n    return abs(s1 - s2)", "code_2": "def sum_difference(n):\n    s1 = (n * (n + 1) // 2) ** 2\n    s2 = n * (n + 1) * (2 * n + 1) // 6\n    return s1 - s2", "code_3": "def sum_difference(n):\n    s1 = sum(i ** 2 for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1)) ** 2\n    return s2 - s1", "code_4": "def sum_difference(n):\n    s1 = sum(i * i for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return (s2 * s2) - s1", "code_5": "def sum_difference(n):\n    s1 = sum(i ** 2 for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return (s2 ** 2) - s1", "code_6": "def sum_difference(n):\n    s1 = sum(i * i for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return s2 * s2 - s1", "code_7": "def sum_difference(n):\n    s1 = sum(i ** 2 for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return abs(s2 ** 2 - s1)", "code_8": "def sum_difference(n):\n    s1 = sum(i * i for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return abs(s2 * s2 - s1)", "code_9": "def sum_difference(n):\n    s1 = sum(i ** 2 for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return abs(s2 ** 2 - s1)", "code_10": "def sum_difference(n):\n    s1 = sum(i * i for i in range(1, n + 1))\n    s2 = sum(range(1, n + 1))\n    return abs(s2 * s2 - s1)", "pass@3": 1.0, "nDCG@10": 0.77990823370192}
{"task_id": "MBPP/321", "prompt": "\n\ndef find_demlo(s):\n\t\"\"\"\n\tWrite a function to find the demlo number for the given number.\n\t>>> find_demlo(\"111111\")\n\t'12345654321'\n\t>>> find_demlo(\"1111\")\n\t'1234321'\n\t>>> find_demlo(\"13333122222\")\n\t'123456789101110987654321'\n\t\"\"\"\n", "solution": "\t \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res \t", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_demlo(s):\n    return ''.join(str(i) for i in range(1, len(s)//2+1)) + ''.join(str(i) for i in range(len(s)//2, 0, -1))", "code_2": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n//2 if n%2==0 else n//2+1, 0, -1))", "code_3": "def find_demlo(s):\n    n = len(s)\n    return ''.join(map(str, range(1, n//2+1))) + ''.join(map(str, range(n//2 if n%2==0 else n//2+1, 0, -1)))", "code_4": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in list(range(1, n//2+1)) + list(range(n//2 if n%2==0 else n//2+1, 0, -1)))", "code_5": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n//2+1, 0, -1))[:n//2]", "code_6": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n//2, 0, -1))[:n//2] + (str(n//2) if n%2==1 else '')", "code_7": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n//2+1, n+1))[::-1]", "code_8": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n, n//2, -1))", "code_9": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n//2+1, n+1))[::-1][:n//2]", "code_10": "def find_demlo(s):\n    n = len(s)\n    return ''.join(str(i) for i in range(1, n//2+1)) + ''.join(str(i) for i in range(n//2+1, n+1))[::-1][:n//2] + (str(n//2+1) if n%2==1 else '')", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/322", "prompt": "\n\ndef position_min(list1):\n    \"\"\"\n    Write a function to find all index positions of the minimum values in a given list.\n    >>> position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [3,11]\n    >>> position_min([1,2,2,2,4,4,4,5,5,5,5])\n    [0]\n    >>> position_min([2,1,5,6,8,3,4,9,10,11,8,12])\n    [1]\n    \"\"\"\n", "solution": "    \n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]", "code_2": "def position_min(lst):\n    return [i for i in range(len(lst)) if lst[i] == min(lst)]", "code_3": "def position_min(lst):\n    min_val = float('inf')\n    indices = []\n    for i, val in enumerate(lst):\n        if val < min_val:\n            min_val = val\n            indices = [i]\n        elif val == min_val:\n            indices.append(i)\n    return indices", "code_4": "def position_min(lst):\n    min_val = min(lst)\n    return list(filter(lambda i: lst[i] == min_val, range(len(lst))))", "code_5": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i in map(lst.index, [min_val] * lst.count(min_val))]", "code_6": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i in range(len(lst)) if lst[i] == min_val]", "code_7": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i in range(len(lst)) if lst[i] == min_val]", "code_8": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i in range(len(lst)) if lst[i] == min_val]", "code_9": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i in range(len(lst)) if lst[i] == min_val]", "code_10": "def position_min(lst):\n    min_val = min(lst)\n    return [i for i in range(len(lst)) if lst[i] == min_val]", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/323", "prompt": "\n\ndef re_arrange(arr, n):\n\t\"\"\"\n\tWrite a function to re-arrange the given array in alternating positive and negative items.\n\t>>> re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10)\n\t[-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\t>>> re_arrange([1, 2, 3, -4, -1, 4], 6)\n\t[-4, 1, -1, 2, 3, 4]\n\t>>> re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n\t[-4, 4, -3, 7, -9, 9, 77, 5]\n\t\"\"\"\n", "solution": "\tdef right_rotate(arr, n, out_of_place, cur):\n\t\ttemp = arr[cur]\n\t\tfor i in range(cur, out_of_place, -1):\n\t\t\tarr[i] = arr[i - 1]\n\t\tarr[out_of_place] = temp\n\t\treturn arr\n\t\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr", "results": [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def re_arrange(arr, n):\n    pos, neg = [], []\n    for i in arr:\n        if i < 0: neg.append(i)\n        else: pos.append(i)\n    res = []\n    while pos and neg:\n        res.append(neg.pop(0))\n        res.append(pos.pop(0))\n    return res + pos + neg", "code_2": "def re_arrange(arr, n):\n    arr.sort(key=lambda x: (x < 0, x))\n    return arr[::2] + arr[1::2]", "code_3": "def re_arrange(arr, n):\n    i, j = 0, 1\n    while j < n:\n        if arr[j] < 0 and arr[i] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 2\n            j += 2\n        elif arr[j] < 0:\n            j += 2\n        else:\n            i += 2\n    return arr", "code_4": "def re_arrange(arr, n):\n    pos, neg = [], []\n    for i in arr:\n        if i < 0: neg.append(i)\n        else: pos.append(i)\n    i, j, k = 0, 0, 0\n    while i < n:\n        if j < len(neg):\n            arr[i] = neg[j]\n            j += 1\n        i += 1\n        if k < len(pos):\n            arr[i] = pos[k]\n            k += 1\n        i += 1\n    return arr", "code_5": "def re_arrange(arr, n):\n    i, j = 0, 1\n    while i < n and j < n:\n        while i < n and arr[i] > 0:\n            i += 2\n        while j < n and arr[j] < 0:\n            j += 2\n        if i < n and j < n:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr", "code_6": "def re_arrange(arr, n):\n    arr.sort()\n    i, j = 0, 1\n    while j < n:\n        if arr[j] > 0:\n            arr.insert(i, arr.pop(j))\n            i += 2\n        j += 1\n    return arr", "code_7": "def re_arrange(arr, n):\n    pos, neg = [], []\n    for i in arr:\n        if i < 0: neg.append(i)\n        else: pos.append(i)\n    return [val for pair in zip(neg, pos) for val in pair] + pos[len(neg):] + neg[len(pos):]", "code_8": "def re_arrange(arr, n):\n    arr.sort(key=lambda x: (x < 0, x))\n    i, j = 0, 1\n    while i < n and j < n:\n        if arr[i] > 0:\n            arr.insert(i, arr.pop(j))\n            i += 2\n        j += 1\n    return arr", "code_9": "def re_arrange(arr, n):\n    pos, neg = [], []\n    for i in arr:\n        if i < 0: neg.append(i)\n        else: pos.append(i)\n    return [(neg.pop(0) if neg else 0) if i % 2 == 0 else (pos.pop(0) if pos else 0) for i in range(n)]", "code_10": "def re_arrange(arr, n):\n    arr.sort(key=lambda x: (x < 0, x))\n    i, j = 0, 1\n    while i < n and j < n:\n        if arr[i] > 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 2\n        i += 2\n    return arr", "pass@3": 0.5333333333333333, "nDCG@10": 0.29345568839744024}
{"task_id": "MBPP/324", "prompt": "\n\ndef sum_of_alternates(test_tuple):\n  \"\"\"\n  Write a function to extract the sum of alternate chains of tuples.\n  >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n  (46, 18)\n  >>> sum_of_alternates((1, 2, 3, 4, 5))\n  (6, 9)\n  >>> sum_of_alternates((6, 7, 8, 9, 4, 5))\n  (21, 18)\n  \"\"\"\n", "solution": "  \n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_of_alternates(t):\n    return sum(t[::2]), sum(t[1::2])", "code_2": "def sum_of_alternates(t):\n    return (sum(t[i] for i in range(0, len(t), 2)), sum(t[i] for i in range(1, len(t), 2)))", "code_3": "def sum_of_alternates(t):\n    return reduce(lambda a, b: (a[0] + b[1], a[1] + b[0]), enumerate(t), (0, 0))", "code_4": "def sum_of_alternates(t):\n    return tuple(map(sum, zip(*[iter(t)]*2)))", "code_5": "def sum_of_alternates(t):\n    it = iter(t)\n    return sum(next(it, 0) for _ in it), sum(next(it, 0) for _ in it)", "code_6": "def sum_of_alternates(t):\n    return functools.reduce(lambda a, b: (a[0] + t[b], a[1] + t[b + 1]), range(0, len(t), 2), (0, 0))", "code_7": "def sum_of_alternates(t):\n    return tuple(accumulate(t[::2])[-1], accumulate(t[1::2])[-1])", "code_8": "def sum_of_alternates(t):\n    return tuple(map(sum, (t[::2], t[1::2])))", "code_9": "def sum_of_alternates(t):\n    return tuple(map(sum, zip(*[(t[i], 0) if i % 2 == 0 else (0, t[i]) for i in range(len(t))])))", "code_10": "def sum_of_alternates(t):\n    return tuple(map(sum, zip(*[(t[i], 0) if i % 2 == 0 else (0, t[i]) for i in range(len(t))])))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/325", "prompt": "\n\ndef get_Min_Squares(n):\n    \"\"\"\n    Write a python function to find the minimum number of squares whose sum is equal to a given number.\n    >>> get_Min_Squares(6)\n    3\n    >>> get_Min_Squares(2)\n    2\n    >>> get_Min_Squares(4)\n    1\n    \"\"\"\n", "solution": "    \n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def get_Min_Squares(n):\n    dp = [0, 1, 2, 3] + [n] * (n - 3)\n    for i in range(4, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], 1 + dp[i - j * j])\n            j += 1\n    return dp[n]", "code_2": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], 1 + dp[i - j * j])\n            j += 1\n    return dp[n]", "code_3": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], 1 + dp[i - j * j])\n    return dp[n]", "code_4": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = i - j * j\n            if dp[temp] < dp[i]:\n                dp[i] = dp[temp] + 1\n    return dp[n]", "code_5": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], 1 + dp[i - j * j])\n    return dp[n]", "code_6": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = i - j * j\n            if dp[temp] < dp[i]:\n                dp[i] = dp[temp] + 1\n    return dp[n]", "code_7": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], 1 + dp[i - j * j])\n    return dp[n]", "code_8": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = i - j * j\n            if dp[temp] < dp[i]:\n                dp[i] = dp[temp] + 1\n    return dp[n]", "code_9": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], 1 + dp[i - j * j])\n    return dp[n]", "code_10": "def get_Min_Squares(n):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            temp = i - j * j\n            if dp[temp] < dp[i]:\n                dp[i] = dp[temp] + 1\n    return dp[n]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/326", "prompt": "\n\ndef most_occurrences(test_list):\n  \"\"\"\n  Write a function to get the word with most number of occurrences in the given strings list.\n  >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] )\n  'UTS'\n  >>> most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] )\n  'year'\n  >>> most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] )\n  'can'\n  \"\"\"\n", "solution": "  from collections import defaultdict \n  \n  \n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    return Counter(words).most_common(1)[0][0]", "code_2": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    return max(set(words), key=words.count)", "code_3": "import re\nfrom collections import Counter\ndef most_occurrences(test_list):\n    words = re.findall(r'\\w+', ' '.join(test_list))\n    return Counter(words).most_common(1)[0][0]", "code_4": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    return sorted(set(words), key=words.count)[-1]", "code_5": "from collections import defaultdict\ndef most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_count = defaultdict(int)\n    for word in words:\n        word_count[word] += 1\n    return max(word_count, key=word_count.get)", "code_6": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return max(word_count, key=word_count.get)", "code_7": "import operator\ndef most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_count = dict()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return max(word_count.items(), key=operator.itemgetter(1))[0]", "code_8": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_count = {}\n    for word in words:\n        word_count[word] = words.count(word)\n    return max(word_count, key=word_count.get)", "code_9": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return sorted(word_count, key=word_count.get, reverse=True)[0]", "code_10": "def most_occurrences(test_list):\n    words = ' '.join(test_list).split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return min(word_count, key=lambda k: (-word_count[k], k))", "pass@3": 1.0, "nDCG@10": 0.7975167679274939}
{"task_id": "MBPP/327", "prompt": "\n\ndef check_isosceles(x,y,z):\n  \"\"\"\n  Write a function to print check if the triangle is isosceles or not.\n  >>> check_isosceles(6,8,12)\n  False\n  >>> check_isosceles(6,6,12)\n  True\n  >>> check_isosceles(6,16,20)\n  False\n  \"\"\"\n", "solution": "  \n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_isosceles(x, y, z):\n    return x == y or y == z or x == z", "code_2": "def check_isosceles(x, y, z):\n    return sorted([x, y, z])[0] == sorted([x, y, z])[1]", "code_3": "def check_isosceles(x, y, z):\n    return (x == y) or (y == z) or (x == z)", "code_4": "def check_isosceles(x, y, z):\n    return x + y > z and x + z > y and y + z > x and (x == y or y == z or x == z)", "code_5": "def check_isosceles(x, y, z):\n    return (x == y) ^ (y == z) ^ (x == z)", "code_6": "def check_isosceles(x, y, z):\n    return len(set([x, y, z])) <= 2", "code_7": "def check_isosceles(x, y, z):\n    return sum([x == y, y == z, x == z]) >= 1", "code_8": "def check_isosceles(x, y, z):\n    return any([x == y, y == z, x == z])", "code_9": "def check_isosceles(x, y, z):\n    return (x == y) + (y == z) + (x == z) >= 1", "code_10": "def check_isosceles(x, y, z):\n    return (x, y, z).count(x) >= 2 or (x, y, z).count(y) >= 2 or (x, y, z).count(z) >= 2", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/328", "prompt": "\n\ndef rotate_left(list1,m,n):\n  \"\"\"\n  Write a function to rotate a given list by specified number of items to the left direction.\n  >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)\n  [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n  >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)\n  [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n  >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)\n  [6, 7, 8, 9, 10, 1, 2]\n  \"\"\"\n", "solution": "  \n  result =  list1[m:]+list1[:n]\n  return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def rotate_left(lst, m, n):\n    return lst[m:m+n] + lst[:m] + lst[m+n:]", "code_2": "def rotate_left(lst, m, n):\n    return lst[m:m+n] + [x for i, x in enumerate(lst) if i < m or i >= m+n]", "code_3": "def rotate_left(lst, m, n):\n    from collections import deque\n    d = deque(lst)\n    d.rotate(-m)\n    return list(d)", "code_4": "def rotate_left(lst, m, n):\n    lst[:] = lst[m:m+n] + lst[:m] + lst[m+n:]\n    return lst", "code_5": "def rotate_left(lst, m, n):\n    lst[m:m+n], lst[:m], lst[m+n:] = lst[:m], lst[m+n:], lst[m:m+n]\n    return lst", "code_6": "def rotate_left(lst, m, n):\n    lst[:] = lst[m:m+n] + lst[m+n:] + lst[:m]\n    return lst", "code_7": "def rotate_left(lst, m, n):\n    lst[:] = lst[m:] + lst[:m]\n    lst[:] = lst[n:] + lst[:n]\n    return lst", "code_8": "def rotate_left(lst, m, n):\n    lst[:] = lst[m:m+n] + lst[m+n:] + lst[:m]\n    return lst", "code_9": "def rotate_left(lst, m, n):\n    lst[:] = lst[m:m+n] + lst[m+n:] + lst[:m]\n    return lst", "code_10": "def rotate_left(lst, m, n):\n    lst[:] = lst[m:m+n] + lst[m+n:] + lst[:m]\n    return lst", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/329", "prompt": "\n\ndef neg_count(list):\n  \"\"\"\n  Write a python function to count negative numbers in a list.\n  >>> neg_count([-1,-2,3,-4,-5])\n  4\n  >>> neg_count([1,2,3])\n  0\n  >>> neg_count([1,2,-3,-10,20])\n  2\n  \"\"\"\n", "solution": "  \n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def neg_count(lst):\n    return sum(1 for x in lst if x < 0)", "code_2": "def neg_count(lst):\n    return len([x for x in lst if x < 0])", "code_3": "def neg_count(lst):\n    count = 0\n    for x in lst:\n        if x < 0:\n            count += 1\n    return count", "code_4": "def neg_count(lst):\n    return len(list(filter(lambda x: x < 0, lst)))", "code_5": "def neg_count(lst):\n    return sum(map(lambda x: x < 0, lst))", "code_6": "def neg_count(lst):\n    return reduce(lambda count, x: count + (x < 0), lst, 0)", "code_7": "def neg_count(lst):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            count += 1\n    return count", "code_8": "def neg_count(lst):\n    count = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] < 0:\n            count += 1\n        i += 1\n    return count", "code_9": "def neg_count(lst):\n    return len([i for i in lst if i < 0])", "code_10": "def neg_count(lst):\n    return sum(x < 0 for x in lst)", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/330", "prompt": "\n\ndef find_char(text):\n  \"\"\"\n  Write a function to find all three, four, five characters long words in the given string by using regex.\n  >>> find_char('For the four consumer complaints contact manager AKR reddy')\n  ['For', 'the', 'four', 'AKR', 'reddy']\n  >>> find_char('Certain service are subject to change MSR')\n  ['are', 'MSR']\n  >>> find_char('Third party legal desclaimers')\n  ['Third', 'party', 'legal']\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef find_char(text):\n    return re.findall(r'\\b\\w{3,5}\\b', text)", "code_2": "import re\ndef find_char(text):\n    return [word for word in re.split(r'\\W+', text) if 3 <= len(word) <= 5]", "code_3": "import re\ndef find_char(text):\n    return [word for word in text.split() if re.match(r'\\b\\w{3,5}\\b', word)]", "code_4": "import re\ndef find_char(text):\n    return [word for word in re.findall(r'\\w+', text) if 3 <= len(word) <= 5]", "code_5": "import re\ndef find_char(text):\n    return list(filter(lambda word: 3 <= len(word) <= 5, re.findall(r'\\w+', text)))", "code_6": "import re\ndef find_char(text):\n    return [word for word in re.findall(r'\\b\\w+\\b', text) if 3 <= len(word) <= 5]", "code_7": "import re\ndef find_char(text):\n    return [word for word in text.split() if re.fullmatch(r'\\w{3,5}', word)]", "code_8": "import re\ndef find_char(text):\n    return [word for word in re.split(r'\\s+', text) if re.match(r'\\w{3,5}$', word)]", "code_9": "import re\ndef find_char(text):\n    return list(filter(lambda word: re.match(r'\\b\\w{3,5}\\b', word), text.split()))", "code_10": "import re\ndef find_char(text):\n    return [word for word in re.findall(r'\\b\\w{3,5}\\b', text, re.UNICODE)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/331", "prompt": "\n\ndef count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(4)\n    2\n    >>> count_unset_bits(6)\n    1\n    \"\"\"\n", "solution": "     \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_unset_bits(n):\n    return bin(~n).count('0') - 1", "code_2": "def count_unset_bits(n):\n    return len([i for i in bin(~n)[2:] if i == '0'])", "code_3": "def count_unset_bits(n):\n    return sum(1 for i in bin(~n)[2:] if i == '0')", "code_4": "def count_unset_bits(n):\n    return sum(map(lambda x: x == '0', bin(~n)[2:]))", "code_5": "def count_unset_bits(n):\n    return len(filter(lambda x: x == '0', bin(~n)[2:]))", "code_6": "def count_unset_bits(n):\n    return sum(c == '0' for c in f'{~n:b}')", "code_7": "def count_unset_bits(n):\n    return sum(c == '0' for c in bin(~n & ((1 << 64) - 1))[2:])", "code_8": "def count_unset_bits(n):\n    return sum(c == '0' for c in format(~n, 'b'))", "code_9": "def count_unset_bits(n):\n    return sum(c == '0' for c in bin(~n)[3:])", "code_10": "def count_unset_bits(n):\n    return sum(c == '0' for c in f'{~n:064b}')", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/332", "prompt": "\n\ndef char_frequency(str1):\n    \"\"\"\n    Write a function to count character frequency of a given string.\n    >>> char_frequency('python')\n    {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    >>> char_frequency('program')\n    {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    >>> char_frequency('language')\n    {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n    \"\"\"\n", "solution": "    \n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def char_frequency(str1):\n    return {char: str1.count(char) for char in str1}", "code_2": "from collections import Counter\ndef char_frequency(str1):\n    return dict(Counter(str1))", "code_3": "def char_frequency(str1):\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    return freq", "code_4": "def char_frequency(str1):\n    freq = [0] * 256\n    for char in str1:\n        freq[ord(char)] += 1\n    return {chr(i): freq[i] for i in range(256) if freq[i] > 0}", "code_5": "import numpy as np\ndef char_frequency(str1):\n    unique, counts = np.unique(list(str1), return_counts=True)\n    return dict(zip(unique, counts))", "code_6": "def char_frequency(str1):\n    freq = {}\n    for char in sorted(str1):\n        freq[char] = freq.setdefault(char, 0) + 1\n    return freq", "code_7": "def char_frequency(str1):\n    return {char: sum(1 for _ in str1 if _ == char) for char in str1}", "code_8": "from functools import reduce\ndef char_frequency(str1):\n    return reduce(lambda freq, char: {**freq, char: freq.get(char, 0) + 1}, str1, {})", "code_9": "def char_frequency(str1):\n    freq = {}\n    for char in str1:\n        try:\n            freq[char] += 1\n        except KeyError:\n            freq[char] = 1\n    return freq", "code_10": "def char_frequency(str1):\n    freq = {}\n    for char in str1:\n        freq[char] = freq[char] + 1 if char in freq else 1\n    return freq", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/333", "prompt": "\n\ndef Sort(sub_li):\n    \"\"\"\n    Write a python function to sort a list according to the second element in sublist.\n    >>> Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])\n    [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    >>> Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])\n    [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    >>> Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])\n    [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n    \"\"\"\n", "solution": "     \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using `sorted` function with `key` parameter:\ndef Sort(sub_li): return sorted(sub_li, key=lambda x: x[1])", "code_2": "Using `sort` method with `key` parameter:\ndef Sort(sub_li): sub_li.sort(key=lambda x: x[1]); return sub_li", "code_3": "Using `heapq.nsmallest` function:\nimport heapq\ndef Sort(sub_li): return heapq.nsmallest(len(sub_li), sub_li, key=lambda x: x[1])", "code_4": "Using `itemgetter` from `operator` module:\nfrom operator import itemgetter\ndef Sort(sub_li): return sorted(sub_li, key=itemgetter(1))", "code_5": "Using `list.sort` method with `itemgetter`:\nfrom operator import itemgetter\ndef Sort(sub_li): sub_li.sort(key=itemgetter(1)); return sub_li", "code_6": "Using `sort` function from `functools` module:\nfrom functools import cmp_to_key\ndef Sort(sub_li): return sorted(sub_li, key=cmp_to_key(lambda x, y: x[1] - y[1]))", "code_7": "Using `sort` method with `cmp_to_key`:\nfrom functools import cmp_to_key\ndef Sort(sub_li): sub_li.sort(key=cmp_to_key(lambda x, y: x[1] - y[1])); return sub_li", "code_8": "Using `numpy.argsort` function:\nimport numpy as np\ndef Sort(sub_li): return [sub_li[i] for i in np.argsort([x[1] for x in sub_li])]", "code_9": "Using `sort` method with custom comparison function:\ndef Sort(sub_li): sub_li.sort(key=lambda x: int(x[1])); return sub_li", "code_10": "Using `sorted` function with custom comparison function:\ndef Sort(sub_li): return sorted(sub_li, key=lambda x: int(x[1]))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/334", "prompt": "\n\ndef check_Validity(a,b,c):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if sides are given.\n    >>> check_Validity(1,2,3)\n    False\n    >>> check_Validity(2,3,5)\n    False\n    >>> check_Validity(7,10,5)\n    True\n    \"\"\"\n", "solution": "      \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True        ", "results": [1, 1, 0, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a", "code_2": "def check_Validity(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0] + sides[1] > sides[2]", "code_3": "def check_Validity(a, b, c):\n    return all(a + b > c for a, b, c in permutations([a, b, c], 3))", "code_4": "def check_Validity(a, b, c):\n    return (a < b + c) and (b < a + c) and (c < a + b)", "code_5": "def check_Validity(a, b, c):\n    return sum([a, b, c]) - max(a, b, c) > max(a, b, c)", "code_6": "def check_Validity(a, b, c):\n    return 2 * max(a, b, c) < a + b + c", "code_7": "def check_Validity(a, b, c):\n    return all(map(lambda x: x < a + b + c - x, [a, b, c]))", "code_8": "def check_Validity(a, b, c):\n    return reduce(lambda x, y: x and y, [a + b > c, a + c > b, b + c > a])", "code_9": "def check_Validity(a, b, c):\n    return all(map(gt, accumulate([a, b, c], lambda x, y: x + y), [c, a, b]))", "code_10": "def check_Validity(a, b, c):\n    return all(map(lambda x: x > abs(a - b - c), [a, b, c]))", "pass@3": 0.9666666666666667, "nDCG@10": 0.6906478832608419}
{"task_id": "MBPP/335", "prompt": "\n\ndef ap_sum(a,n,d):\n  \"\"\"\n  Write a function to find the sum of arithmetic progression.\n  >>> ap_sum(1,5,2)\n  25\n  >>> ap_sum(2,6,4)\n  72\n  >>> ap_sum(1,4,5)\n  34\n  \"\"\"\n", "solution": "  \n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def ap_sum(a, n, d): return n * (2 * a + (n - 1) * d) // 2", "code_2": "def ap_sum(a, n, d): return (n / 2) * (2 * a + (n - 1) * d)", "code_3": "def ap_sum(a, n, d): return (a + (a + (n - 1) * d)) * n // 2", "code_4": "def ap_sum(a, n, d): return sum(a + i * d for i in range(n))", "code_5": "def ap_sum(a, n, d): return sum(range(a, a + n * d, d))", "code_6": "def ap_sum(a, n, d): return n * (a + (a + (n - 1) * d)) // 2", "code_7": "def ap_sum(a, n, d): return (n * a) + (n * (n - 1) * d) // 2", "code_8": "def ap_sum(a, n, d): return (n * (a + (a + (n - 1) * d))) / 2", "code_9": "def ap_sum(a, n, d): return sum(i for i in range(a, a + n * d, d))", "code_10": "def ap_sum(a, n, d): return (n / 2) * (2 * a + (n - 1) * d)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/336", "prompt": "\n\ndef check_monthnum(monthname1):\n  \"\"\"\n  Write a function to check whether the given month name contains 28 days or not.\n  >>> check_monthnum(\"February\")\n  True\n  >>> check_monthnum(\"January\")\n  False\n  >>> check_monthnum(\"March\")\n  False\n  \"\"\"\n", "solution": "  \n  if monthname1 == \"February\":\n    return True\n  else:\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def check_monthnum(monthname1):\n    return monthname1 == \"February\"", "code_2": "def check_monthnum(monthname1):\n    return monthname1.lower() == \"february\"", "code_3": "def check_monthnum(monthname1):\n    return monthname1[0] == \"F\" and monthname1[1] == \"e\" and monthname1[2] == \"b\"", "code_4": "def check_monthnum(monthname1):\n    return len(monthname1) == 8 and monthname1[2] == \"b\"", "code_5": "def check_monthnum(monthname1):\n    return \"Feb\" in monthname1", "code_6": "def check_monthnum(monthname1):\n    return monthname1.startswith(\"Feb\")", "code_7": "def check_monthnum(monthname1):\n    return monthname1.endswith(\"ruary\")", "code_8": "def check_monthnum(monthname1):\n    return monthname1.count(\"b\") == 1 and monthname1.count(\"u\") == 2", "code_9": "def check_monthnum(monthname1):\n    return set(monthname1) == set(\"February\")", "code_10": "def check_monthnum(monthname1):\n    return all(a == b for a, b in zip(monthname1, \"February\"))", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/337", "prompt": "\n\ndef text_match_word(text):\n        \"\"\"\n        Write a function that matches a word at the end of a string, with optional punctuation.\n        >>> text_match_word(\"python.\")\n        ('Found a match!')\n        >>> text_match_word(\"python.\")\n        ('Found a match!')\n        >>> text_match_word(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "import re\ndef text_match_word(text):\n    return 'Found a match!' if re.search(r'\\bpython\\b\\W*$', text) else 'Not matched!'", "code_2": "def text_match_word(text):\n    return 'Found a match!' if text.strip().endswith('python.') else 'Not matched!'", "code_3": "def text_match_word(text):\n    return 'Found a match!' if text.rstrip(' .').endswith('python') else 'Not matched!'", "code_4": "import string\ndef text_match_word(text):\n    return 'Found a match!' if text.strip(string.punctuation).endswith('python') else 'Not matched!'", "code_5": "def text_match_word(text):\n    return 'Found a match!' if text.strip().rsplit(' ', 1)[-1] == 'python.' else 'Not matched!'", "code_6": "def text_match_word(text):\n    return 'Found a match!' if text.strip().split()[-1] == 'python.' else 'Not matched!'", "code_7": "def text_match_word(text):\n    return 'Found a match!' if text.strip()[-7:] == 'python.' else 'Not matched!'", "code_8": "def text_match_word(text):\n    return 'Found a match!' if text.strip()[-6:] == 'python' and text.strip()[-1] in '.!' else 'Not matched!'", "code_9": "def text_match_word(text):\n    return 'Found a match!' if text.strip().partition(' ')[-1] == 'python.' else 'Not matched!'", "code_10": "def text_match_word(text):\n    return 'Found a match!' if text.strip().rsplit(maxsplit=1)[-1] == 'python.' else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 0.8643145546088339}
{"task_id": "MBPP/338", "prompt": "\n\ndef count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters.\n    >>> count_Substring_With_Equal_Ends('aba')\n    4\n    >>> count_Substring_With_Equal_Ends('abcab')\n    7\n    >>> count_Substring_With_Equal_Ends('abc')\n    3\n    \"\"\"\n", "solution": "    def check_Equality(s): \n        return (ord(s[0]) == ord(s[len(s) - 1])); \n     \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ", "results": [1, 1, 0, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def count_Substring_With_Equal_Ends(s):\n    n, res = len(s), 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                res += 1\n    return res", "code_2": "def count_Substring_With_Equal_Ends(s):\n    return sum((s[i] == s[j] for i in range(len(s)) for j in range(i, len(s))))", "code_3": "def count_Substring_With_Equal_Ends(s):\n    return sum(s[i:j+1].count(s[i]) for i in range(len(s)) for j in range(i, len(s)))", "code_4": "def count_Substring_With_Equal_Ends(s):\n    return sum(s.count(c)*(s.count(c)+1)//2 for c in set(s))", "code_5": "def count_Substring_With_Equal_Ends(s):\n    from collections import Counter\n    return sum(v*(v+1)//2 for v in Counter(s).values())", "code_6": "def count_Substring_With_Equal_Ends(s):\n    return sum(map(lambda x: x*(x+1)//2, map(s.count, set(s))))", "code_7": "def count_Substring_With_Equal_Ends(s):\n    from functools import reduce\n    return reduce(lambda x, y: x + y*(y+1)//2, map(s.count, set(s)))", "code_8": "def count_Substring_With_Equal_Ends(s):\n    from itertools import groupby\n    return sum((len(list(group))*(len(list(group))+1)//2 for key, group in groupby(sorted(s))))", "code_9": "def count_Substring_With_Equal_Ends(s):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for c in s:\n        d[c] += 1\n    return sum(v*(v+1)//2 for v in d.values())", "code_10": "def count_Substring_With_Equal_Ends(s):\n    from collections import Counter\n    c = Counter(s)\n    return sum(c[k]*(c[k]+1)//2 for k in c)", "pass@3": 1.0, "nDCG@10": 0.8205228949141828}
{"task_id": "MBPP/339", "prompt": "\n\ndef find_Divisor(x,y):\n    \"\"\"\n    Write a python function to find the maximum occuring divisor in an interval.\n    >>> find_Divisor(2,2)\n    2\n    >>> find_Divisor(2,5)\n    2\n    >>> find_Divisor(5,10)\n    2\n    \"\"\"\n", "solution": "      \n    if (x==y): \n        return y \n    return 2", "results": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, y + 1):\n        for j in range(i, y + 1, i):\n            div_count[i] += 1\n    return div_count.index(max(div_count[x:]))", "code_2": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(x, y + 1):\n        for j in range(1, int(i**0.5) + 1):\n            if i % j == 0:\n                div_count[j] += 1\n                if j != i // j:\n                    div_count[i // j] += 1\n    return div_count.index(max(div_count[x:]))", "code_3": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, int(y**0.5) + 1):\n        for j in range(max(x, i * i), y + 1, i):\n            div_count[i] += 1\n            if j // i != i:\n                div_count[j // i] += 1\n    return div_count.index(max(div_count[x:]))", "code_4": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, y + 1):\n        for j in range(i, y + 1, i):\n            div_count[j] += 1\n    return div_count.index(max(div_count[x:]))", "code_5": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(x, y + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                div_count[j] += 1\n    return div_count.index(max(div_count[x:]))", "code_6": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, int(y**0.5) + 1):\n        for j in range(max(x, i * i), y + 1):\n            if j % i == 0:\n                div_count[i] += 1\n                if j // i != i:\n                    div_count[j // i] += 1\n    return div_count.index(max(div_count[x:]))", "code_7": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, y + 1):\n        div_count[i::i] = [x + 1 for x in div_count[i::i]]\n    return div_count.index(max(div_count[x:]))", "code_8": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, int(y**0.5) + 1):\n        for j in range(i, y + 1, i):\n            div_count[j] += 1\n            if j // i != i:\n                div_count[j // i] += 1\n    return div_count.index(max(div_count[x:]))", "code_9": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, y + 1):\n        for j in range(i, y + 1):\n            if j % i == 0:\n                div_count[i] += 1\n    return div_count.index(max(div_count[x:]))", "code_10": "def find_Divisor(x, y):\n    div_count = [0] * (y + 1)\n    for i in range(1, int(y**0.5) + 1):\n        for j in range(i * i, y + 1, i):\n            div_count[i] += 1\n            div_count[j] += 1\n            if j // i != i:\n                div_count[j // i] += 1\n    return div_count.index(max(div_count[x:]))", "pass@3": 0.30000000000000004, "nDCG@10": 0.06943122193677728}
{"task_id": "MBPP/340", "prompt": "\n\ndef sum_three_smallest_nums(lst):\n\t\"\"\"\n\tWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n\t>>> sum_three_smallest_nums([10,20,30,40,50,60,7])\n\t37\n\t>>> sum_three_smallest_nums([1,2,3,4,5])\n\t6\n\t>>> sum_three_smallest_nums([0,1,2,3,4,5])\n\t6\n\t\"\"\"\n", "solution": "\t\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_three_smallest_nums(lst):\n    return sum(sorted(filter(lambda x: x > 0, lst))[:3])", "code_2": "def sum_three_smallest_nums(lst):\n    return sum(heapq.nsmallest(3, (x for x in lst if x > 0)))", "code_3": "def sum_three_smallest_nums(lst):\n    return sum(nlargest(3, [-x for x in lst if x > 0]))", "code_4": "def sum_three_smallest_nums(lst):\n    return sum(heapify(lst)[:3])", "code_5": "def sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[:3]) - sum(x for x in lst if x <= 0)", "code_6": "def sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[len([x for x in lst if x <= 0]):3])", "code_7": "def sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[next((i for i, x in enumerate(lst) if x > 0), 0):3])", "code_8": "def sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[-min(len(lst), 3):]) - sum(x for x in lst if x <= 0)", "code_9": "def sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[-min(len([x for x in lst if x > 0]), 3):])", "code_10": "def sum_three_smallest_nums(lst):\n    return sum(sorted(lst)[-min(len(list(filter(lambda x: x > 0, lst))), 3):])", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/341", "prompt": "\n\ndef set_to_tuple(s):\n  \"\"\"\n  Write a function to convert the given set into tuples.\n  >>> set_to_tuple({1, 2, 3, 4, 5})\n  (1, 2, 3, 4, 5)\n  >>> set_to_tuple({6, 7, 8, 9, 10, 11})\n  (6, 7, 8, 9, 10, 11)\n  >>> set_to_tuple({12, 13, 14, 15, 16})\n  (12, 13, 14, 15, 16)\n  \"\"\"\n", "solution": "  \n  t = tuple(s)\n  return (t)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return tuple(s)`", "code_2": "`return s.__iter__()`", "code_3": "`return s.copy()`", "code_4": "`return s.union()`", "code_5": "`return s.intersection(s)`", "code_6": "`return s.difference(set())`", "code_7": "`return s.symmetric_difference(set())`", "code_8": "`return s.issubset(s) and s or tuple(s)`", "code_9": "`return s if isinstance(s, tuple) else tuple(s)`", "code_10": "`return s if type(s) is tuple else tuple(s)`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/342", "prompt": "\n\ndef find_minimum_range(list):\n    \"\"\"\n    Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    >>> find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n    (4, 6)\n    >>> find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n    (4, 7)\n    >>> find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n    (5, 7)\n    \"\"\"\n", "solution": "    from heapq import heappop, heappush\n    class Node:\n        def __init__(self, value, list_num, index):\n            self.value = value\n            self.list_num = list_num\n            self.index = index\n        def __lt__(self, other):\n            return self.value < other.value\n    \n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])", "results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "import heapq\ndef find_minimum_range(lists):\n    min_heap = [(lst[0], i, 0) for i, lst in enumerate(lists)]\n    heapq.heapify(min_heap)\n    max_val = max(lst[0] for lst in lists)\n    min_range = float('inf')\n    while True:\n        min_val, list_idx, element_idx = heapq.heappop(min_heap)\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        if element_idx == len(lists[list_idx]) - 1:\n            break\n        next_val = lists[list_idx][element_idx + 1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(min_heap, (next_val, list_idx, element_idx + 1))\n    return result", "code_2": "def find_minimum_range(lists):\n    pointers = [0] * len(lists)\n    min_range = float('inf')\n    result = None\n    while all(p < len(lists[i]) for i, p in enumerate(pointers)):\n        min_val = min(lists[i][p] for i, p in enumerate(pointers))\n        max_val = max(lists[i][p] for i, p in enumerate(pointers))\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        min_idx = lists[pointers.index(min(pointers))].index(min_val)\n        pointers[min_idx] += 1\n    return result", "code_3": "import heapq\ndef find_minimum_range(lists):\n    heap = [(lst[0], i, 0) for i, lst in enumerate(lists)]\n    heapq.heapify(heap)\n    max_val = max(heap)[0]\n    min_range = float('inf')\n    while True:\n        min_val, list_idx, element_idx = heapq.heappop(heap)\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        if element_idx == len(lists[list_idx]) - 1:\n            break\n        next_val = lists[list_idx][element_idx + 1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, list_idx, element_idx + 1))\n    return result", "code_4": "def find_minimum_range(lists):\n    pointers = [0] * len(lists)\n    min_range = float('inf')\n    result = None\n    while all(p < len(lists[i]) for i, p in enumerate(pointers)):\n        min_val = min(lists[i][p] for i, p in enumerate(pointers))\n        max_val = max(lists[i][p] for i, p in enumerate(pointers))\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        min_idx = pointers.index(min(pointers))\n        pointers[min_idx] += 1\n    return result", "code_5": "import heapq\ndef find_minimum_range(lists):\n    heap = [(lst[0], i, 0) for i, lst in enumerate(lists)]\n    heapq.heapify(heap)\n    max_val = max(heap)[0]\n    min_range = float('inf')\n    while True:\n        min_val, list_idx, element_idx = heapq.heappop(heap)\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        if element_idx == len(lists[list_idx]) - 1:\n            break\n        next_val = lists[list_idx][element_idx + 1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, list_idx, element_idx + 1))\n    return result", "code_6": "def find_minimum_range(lists):\n    pointers = [0] * len(lists)\n    min_range = float('inf')\n    result = None\n    while all(p < len(lists[i]) for i, p in enumerate(pointers)):\n        min_val = min(lists[i][p] for i, p in enumerate(pointers))\n        max_val = max(lists[i][p] for i, p in enumerate(pointers))\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        min_idx = pointers.index(min(pointers))\n        pointers[min_idx] += 1\n    return result", "code_7": "import heapq\ndef find_minimum_range(lists):\n    heap = [(lst[0], i, 0) for i, lst in enumerate(lists)]\n    heapq.heapify(heap)\n    max_val = max(heap)[0]\n    min_range = float('inf')\n    while True:\n        min_val, list_idx, element_idx = heapq.heappop(heap)\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        if element_idx == len(lists[list_idx]) - 1:\n            break\n        next_val = lists[list_idx][element_idx + 1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, list_idx, element_idx + 1))\n    return result", "code_8": "def find_minimum_range(lists):\n    pointers = [0] * len(lists)\n    min_range = float('inf')\n    result = None\n    while all(p < len(lists[i]) for i, p in enumerate(pointers)):\n        min_val = min(lists[i][p] for i, p in enumerate(pointers))\n        max_val = max(lists[i][p] for i, p in enumerate(pointers))\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        min_idx = pointers.index(min(pointers))\n        pointers[min_idx] += 1\n    return result", "code_9": "import heapq\ndef find_minimum_range(lists):\n    heap = [(lst[0], i, 0) for i, lst in enumerate(lists)]\n    heapq.heapify(heap)\n    max_val = max(heap)[0]\n    min_range = float('inf')\n    while True:\n        min_val, list_idx, element_idx = heapq.heappop(heap)\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        if element_idx == len(lists[list_idx]) - 1:\n            break\n        next_val = lists[list_idx][element_idx + 1]\n        max_val = max(max_val, next_val)\n        heapq.heappush(heap, (next_val, list_idx, element_idx + 1))\n    return result", "code_10": "def find_minimum_range(lists):\n    pointers = [0] * len(lists)\n    min_range = float('inf')\n    result = None\n    while all(p < len(lists[i]) for i, p in enumerate(pointers)):\n        min_val = min(lists[i][p] for i, p in enumerate(pointers))\n        max_val = max(lists[i][p] for i, p in enumerate(pointers))\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n        min_idx = pointers.index(min(pointers))\n        pointers[min_idx] += 1\n    return result", "pass@3": 0.9166666666666666, "nDCG@10": 0.5548989126424904}
{"task_id": "MBPP/343", "prompt": "\n\ndef dig_let(s):\n \"\"\"\n Write a function to calculate the number of digits and letters in a string.\n >>> dig_let(\"python\")\n (6,0)\n >>> dig_let(\"program\")\n (7,0)\n >>> dig_let(\"python3.0\")\n (6,2)\n \"\"\"\n", "solution": " \n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def dig_let(s):\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return len(s), digits", "code_2": "def dig_let(s):\n    digits = sum(1 for c in s if c.isdigit())\n    letters = sum(1 for c in s if c.isalpha())\n    return len(s), digits", "code_3": "def dig_let(s):\n    digits = sum(map(str.isdigit, s))\n    letters = sum(map(str.isalpha, s))\n    return len(s), digits", "code_4": "def dig_let(s):\n    digits = len([c for c in s if c.isdigit()])\n    letters = len([c for c in s if c.isalpha()])\n    return len(s), digits", "code_5": "def dig_let(s):\n    digits = len(list(filter(str.isdigit, s)))\n    letters = len(list(filter(str.isalpha, s)))\n    return len(s), digits", "code_6": "def dig_let(s):\n    digits = len([c for c in s if '0' <= c <= '9'])\n    letters = len([c for c in s if 'a' <= c.lower() <= 'z'])\n    return len(s), digits", "code_7": "def dig_let(s):\n    digits = len([c for c in s if c in '0123456789'])\n    letters = len([c for c in s if c.lower() in 'abcdefghijklmnopqrstuvwxyz'])\n    return len(s), digits", "code_8": "def dig_let(s):\n    digits = len(re.findall(r'\\d', s))\n    letters = len(re.findall(r'[a-zA-Z]', s))\n    return len(s), digits", "code_9": "def dig_let(s):\n    digits = len(re.sub(r'\\D', '', s))\n    letters = len(re.sub(r'\\W', '', s))\n    return len(s), digits", "code_10": "def dig_let(s):\n    digits = len(re.sub(r'[^0-9]', '', s))\n    letters = len(re.sub(r'[^a-zA-Z]', '', s))\n    return len(s), digits", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/344", "prompt": "\n\ndef count_Odd_Squares(n,m):\n    \"\"\"\n    Write a python function to find number of elements with odd factors in a given range.\n    >>> count_Odd_Squares(5,100)\n    8\n    >>> count_Odd_Squares(8,65)\n    6\n    >>> count_Odd_Squares(2,5)\n    1\n    \"\"\"\n", "solution": "     \n    return int(m**0.5) - int((n-1)**0.5) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Odd_Squares(n, m):\n    return sum(1 for i in range(n, m+1) if all(x%2==1 for x in set(factor(i))))", "code_2": "def count_Odd_Squares(n, m):\n    return sum(all(i%2 for i in set(divisors(x))) for x in range(n, m+1))", "code_3": "def count_Odd_Squares(n, m):\n    return len([x for x in range(n, m+1) if all(i%2 for i in set(divisors(x)))])", "code_4": "def count_Odd_Squares(n, m):\n    return sum(all(x%2 for x in prime_factors(i)) for i in range(n, m+1))", "code_5": "def count_Odd_Squares(n, m):\n    return len([i for i in range(n, m+1) if all(x%2 for x in prime_factors(i))])", "code_6": "def count_Odd_Squares(n, m):\n    return sum(all(i%2 for i in set(factor(i))) for i in range(n, m+1))", "code_7": "def count_Odd_Squares(n, m):\n    return len([i for i in range(n, m+1) if all(i%2 for i in set(factor(i)))])", "code_8": "def count_Odd_Squares(n, m):\n    return sum(1 for i in range(n, m+1) if all(x%2 for x in prime_factors(i)))", "code_9": "def count_Odd_Squares(n, m):\n    return len([x for x in range(n, m+1) if all(i%2 for i in divisors(x))])", "code_10": "def count_Odd_Squares(n, m):\n    return sum(all(i%2 for i in set(divisors(x))) for x in range(n, m+1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/345", "prompt": "\n\ndef diff_consecutivenums(nums):\n    \"\"\"\n    Write a function to find the difference between two consecutive numbers in a given list.\n    >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n    [0, 2, 1, 0, 1, 1, 1]\n    >>> diff_consecutivenums([4, 5, 8, 9, 6, 10])\n    [1, 3, 1, -3, 4]\n    >>> diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n    [1, 1, 1, 1, 0, 0, 0, 1, 2]\n    \"\"\"\n", "solution": "    \n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def diff_consecutivenums(nums):\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]", "code_2": "def diff_consecutivenums(nums):\n    return [b - a for a, b in zip(nums, nums[1:])]", "code_3": "def diff_consecutivenums(nums):\n    return list(map(lambda x, y: y - x, nums, nums[1:]))", "code_4": "def diff_consecutivenums(nums):\n    return [nums[i] - nums[i-1] for i in range(1, len(nums))]", "code_5": "def diff_consecutivenums(nums):\n    return [b - a for a, b in zip(nums[:-1], nums[1:])]", "code_6": "def diff_consecutivenums(nums):\n    return list(map(lambda x, y: y - x, nums[:-1], nums[1:]))", "code_7": "def diff_consecutivenums(nums):\n    return [nums[i] - num for i, num in enumerate(nums[1:], 1)]", "code_8": "def diff_consecutivenums(nums):\n    return [nums[i+1] - num for i, num in enumerate(nums[:-1])]", "code_9": "def diff_consecutivenums(nums):\n    return [nums[i] - nums[i-1] for i in range(1, len(nums)) if i < len(nums)]", "code_10": "def diff_consecutivenums(nums):\n    return [nums[i] - nums[i-1] for i in range(len(nums))[1:]]", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/346", "prompt": "\n\ndef zigzag(n, k):\n\t\"\"\"\n\tWrite a function to find entringer number e(n, k).\n\t>>> zigzag(4, 3)\n\t5\n\t>>> zigzag(4, 2)\n\t4\n\t>>> zigzag(3, 1)\n\t1\n\t\"\"\"\n", "solution": "\t \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def zigzag(n, k):\n    return n if k == 1 else zigzag(n - 1, k - 1) + zigzag(n - k, k)", "code_2": "def zigzag(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = sum(dp[max(0, i - k):i]) + 1\n    return dp[n]", "code_3": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1\n        if i >= k:\n            dp[i] += dp[i - k]\n    return dp[n]", "code_4": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1\n        if i - k >= 0:\n            dp[i] += dp[i - k]\n    return dp[n]", "code_5": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 + (dp[i - k] if i - k >= 0 else 0)\n    return dp[n]", "code_6": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 + dp[i - k] if i >= k else dp[i - 1] + 1\n    return dp[n]", "code_7": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 + (dp[i - k] if i - k > 0 else 0)\n    return dp[n]", "code_8": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 + (dp[i - k] if i - k >= 1 else 0)\n    return dp[n]", "code_9": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 + dp[max(0, i - k)]\n    return dp[n]", "code_10": "def zigzag(n, k):\n    if k == 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1 + dp[i - k] if i >= k else dp[i - 1] + 1\n    return dp[n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/347", "prompt": "\n\ndef count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(1,2)\n    2\n    >>> count_Squares(2,2)\n    5\n    \"\"\"\n", "solution": "     \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Squares(m,n):\n    return sum((m-i)*(n-i) for i in range(min(m,n))) + min(m,n)", "code_2": "def count_Squares(m,n):\n    return sum(i*j for i in range(1, m+1) for j in range(1, n+1))", "code_3": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_4": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_5": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_6": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_7": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_8": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_9": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "code_10": "def count_Squares(m,n):\n    return sum(i*j for i in range(m, 0, -1) for j in range(n, 0, -1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/348", "prompt": "\n\ndef find_ways(M):\n\t\"\"\"\n\tWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\t>>> find_ways(4)\n\t2\n\t>>> find_ways(6)\n\t5\n\t>>> find_ways(8)\n\t14\n\t\"\"\"\n", "solution": "\tdef bin_coff(n, r): \n\t\tval = 1\n\t\tif (r > (n - r)): \n\t\t\tr = (n - r) \n\t\tfor i in range(0, r): \n\t\t\tval *= (n - i) \n\t\t\tval //= (i + 1) \n\t\treturn val \n\t \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_ways(M):\n\tways = [0] * (M + 1)\n\tways[0] = 1\n\tfor i in range(1, M + 1):\n\t\tfor j in range(i, M + 1):\n\t\t\tways[j] += ways[j - i]\n\treturn ways[M]", "code_2": "def find_ways(M):\n\tways = [1] + [0] * M\n\tfor i in range(1, M + 1):\n\t\tways = [sum(ways[:j]) for j in range(i, M + 2)]\n\treturn ways[M]", "code_3": "def find_ways(M):\n\tways = [1] + [0] * M\n\tfor i in range(1, M + 1):\n\t\tfor j in range(M, i - 1, -1):\n\t\t\tways[j] += ways[j - i]\n\treturn ways[M]", "code_4": "def find_ways(M):\n\tways = [0] * (M + 1)\n\tways[0] = 1\n\tfor i in range(1, M + 1):\n\t\tways = [sum(ways[:j]) for j in range(i, M + 2)]\n\treturn ways[M]", "code_5": "def find_ways(M):\n\tways = [1] + [0] * M\n\tfor i in range(1, M + 1):\n\t\tfor j in range(M, i - 1, -1):\n\t\t\tways[j] += ways[j - i]\n\treturn ways[M]", "code_6": "def find_ways(M):\n\tways = [0] * (M + 1)\n\tways[0] = 1\n\tfor i in range(1, M + 1):\n\t\tfor j in range(M, i - 1, -1):\n\t\t\tways[j] += ways[j - i]\n\treturn ways[M]", "code_7": "def find_ways(M):\n\tways = [1] + [0] * M\n\tfor i in range(1, M + 1):\n\t\tways = [ways[j - i] + ways[j] for j in range(i, M + 2)]\n\treturn ways[M]", "code_8": "def find_ways(M):\n\tways = [0] * (M + 1)\n\tways[0] = 1\n\tfor i in range(1, M + 1):\n\t\tways = [ways[j - i] + ways[j] for j in range(i, M + 2)]\n\treturn ways[M]", "code_9": "def find_ways(M):\n\tways = [1] + [0] * M\n\tfor i in range(1, M + 1):\n\t\tfor j in range(M, i - 1, -1):\n\t\t\tways[j] += ways[j - i]\n\treturn ways[M]", "code_10": "def find_ways(M):\n\tways = [0] * (M + 1)\n\tways[0] = 1\n\tfor i in range(1, M + 1):\n\t\tfor j in range(M, i - 1, -1):\n\t\t\tways[j] += ways[j - i]\n\treturn ways[M]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/349", "prompt": "\n\ndef check(string) :\n    \"\"\"\n    Write a python function to check whether the given string is a binary string or not.\n    >>> check(\"01010101010\")\n    \"Yes\"\n    >>> check(\"name0\")\n    \"No\"\n    >>> check(\"101\")\n    \"Yes\"\n    \"\"\"\n", "solution": "    \n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\") ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check(string):\n    return \"Yes\" if all(char in \"01\" for char in string) else \"No\"", "code_2": "def check(string):\n    return \"Yes\" if set(string).issubset(\"01\") else \"No\"", "code_3": "def check(string):\n    return \"No\" if string.translate(str.maketrans(\"\", \"\", \"01\")) else \"Yes\"", "code_4": "def check(string):\n    return \"No\" if re.search(\"[^01]\", string) else \"Yes\"", "code_5": "def check(string):\n    return \"Yes\" if string.count(\"0\") + string.count(\"1\") == len(string) else \"No\"", "code_6": "def check(string):\n    return \"Yes\" if not string.strip(\"01\") else \"No\"", "code_7": "def check(string):\n    return \"Yes\" if string.replace(\"0\", \"\").replace(\"1\", \"\") == \"\" else \"No\"", "code_8": "def check(string):\n    return \"Yes\" if sum(1 for char in string if char not in \"01\") == 0 else \"No\"", "code_9": "def check(string):\n    return \"Yes\" if len(string) == len(string.translate(str.maketrans(\"01\", \"01\"))) else \"No\"", "code_10": "def check(string):\n    return \"Yes\" if not any(char < \"0\" or char > \"1\" for char in string) else \"No\"", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/350", "prompt": "\n\ndef minimum_Length(s) :\n    \"\"\"\n    Write a python function to minimize the length of the string by removing occurrence of only one character.\n    >>> minimum_Length(\"mnm\")\n    1\n    >>> minimum_Length(\"abcda\")\n    3\n    >>> minimum_Length(\"abcb\")\n    2\n    \"\"\"\n", "solution": "     \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ", "results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def minimum_Length(s):\n    for i in set(s):\n        t = s.replace(i, '')\n        if len(set(t)) == len(set(s)) - 1:\n            return len(t)", "code_2": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_3": "def minimum_Length(s):\n    return min(len(s) - s.count(i) for i in set(s))", "code_4": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_5": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_6": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_7": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_8": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_9": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "code_10": "def minimum_Length(s):\n    return min(len(s) - s.count(c) for c in set(s))", "pass@3": 1.0, "nDCG@10": 0.77990823370192}
{"task_id": "MBPP/351", "prompt": "\n\ndef first_Element(arr,n,k):\n    \"\"\"\n    Write a python function to find the first element occurring k times in a given array.\n    >>> first_Element([0,1,2,3,4,5],6,1)\n    0\n    >>> first_Element([1,2,1,3,4],5,2)\n    1\n    >>> first_Element([2,3,4,3,5,7,1,2,3,5],10,2)\n    2\n    \"\"\"\n", "solution": "     \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "results": [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def first_Element(arr,n,k):\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n        if count[i] == k:\n            return i\n    return -1", "code_2": "def first_Element(arr,n,k):\n    count = [0]*100000\n    for i in arr:\n        count[i] += 1\n        if count[i] == k:\n            return i\n    return -1", "code_3": "def first_Element(arr,n,k):\n    count = collections.Counter(arr)\n    for i in arr:\n        if count[i] == k:\n            return i\n    return -1", "code_4": "def first_Element(arr,n,k):\n    for i in arr:\n        if arr.count(i) == k:\n            return i\n    return -1", "code_5": "def first_Element(arr,n,k):\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n        if count[i] == k:\n            return i\n    return -1", "code_6": "def first_Element(arr,n,k):\n    count = [0]*max(arr)\n    for i in arr:\n        count[i-1] += 1\n        if count[i-1] == k:\n            return i\n    return -1", "code_7": "def first_Element(arr,n,k):\n    count = collections.defaultdict(int)\n    for i in arr:\n        count[i] += 1\n        if count[i] == k:\n            return i\n    return -1", "code_8": "def first_Element(arr,n,k):\n    count = {}\n    for i in arr:\n        count[i] = count.setdefault(i, 0) + 1\n        if count[i] == k:\n            return i\n    return -1", "code_9": "def first_Element(arr,n,k):\n    count = [0]*100000\n    for i in arr:\n        count[i] += 1\n    for i in arr:\n        if count[i] == k:\n            return i\n    return -1", "code_10": "def first_Element(arr,n,k):\n    count = collections.Counter(arr)\n    for i in count:\n        if count[i] == k:\n            return i\n    return -1", "pass@3": 0.5333333333333333, "nDCG@10": 0.16104258782393985}
{"task_id": "MBPP/352", "prompt": "\n\ndef unique_Characters(str):\n    \"\"\"\n    Write a python function to check whether all the characters in a given string are unique.\n    >>> unique_Characters('aba')\n    False\n    >>> unique_Characters('abc')\n    True\n    >>> unique_Characters('abab')\n    False\n    \"\"\"\n", "solution": "    \n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def unique_Characters(str):\n    return len(str) == len(set(str))", "code_2": "def unique_Characters(str):\n    return len(str) == len({char for char in str})", "code_3": "def unique_Characters(str):\n    char_set = [False] * 128\n    for char in str:\n        val = ord(char)\n        if char_set[val]:\n            return False\n        char_set[val] = True\n    return True", "code_4": "def unique_Characters(str):\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return False\n        char_dict[char] = True\n    return True", "code_5": "def unique_Characters(str):\n    return all(str.count(char) == 1 for char in str)", "code_6": "def unique_Characters(str):\n    return sorted(str) == sorted(set(str))", "code_7": "def unique_Characters(str):\n    return all(str.index(char) == str.rindex(char) for char in str)", "code_8": "def unique_Characters(str):\n    return all(str.count(char) == 1 for char in set(str))", "code_9": "def unique_Characters(str):\n    return len(str) == len(''.join(sorted(set(str))))", "code_10": "def unique_Characters(str):\n    return all(str.count(char) == 1 for char in string.ascii_letters)", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/353", "prompt": "\n\ndef remove_column(list1, n):\n   \"\"\"\n   Write a function to remove a specified column from a given nested list.\n   >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n   [[2, 3], [4, 5], [1, 1]]\n   >>> remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n   [[1, 2], [-2, 4], [1, -1]]\n   >>> remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)\n   [[3], [7], [3], [15, 17], [7], [11]]\n   \"\"\"\n", "solution": "   \n   for i in list1: \n    del i[n] \n   return list1", "results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_column(lst, n):\n    return [row[:n] + row[n+1:] for row in lst]", "code_2": "def remove_column(lst, n):\n    return [[col for i, col in enumerate(row) if i != n] for row in lst]", "code_3": "def remove_column(lst, n):\n    return [row.pop(n) or row for row in lst]", "code_4": "def remove_column(lst, n):\n    return list(map(lambda row: row[:n] + row[n+1:], lst))", "code_5": "def remove_column(lst, n):\n    return [list(filter(lambda x: lst.index(x) != n, row)) for row in lst]", "code_6": "def remove_column(lst, n):\n    for row in lst:\n        del row[n]\n    return lst", "code_7": "def remove_column(lst, n):\n    return [[row[i] for i in range(len(row)) if i != n] for row in lst]", "code_8": "def remove_column(lst, n):\n    return [row[:n] + row[n+1:] for row in lst if len(row) > n]", "code_9": "def remove_column(lst, n):\n    return [row[:n] + row[n+1:] for row in lst if n < len(row)]", "code_10": "def remove_column(lst, n):\n    return [row[:n] + row[n+1:] for row in lst if 0 <= n < len(row)]", "pass@3": 1.0, "nDCG@10": 0.8048109992093391}
{"task_id": "MBPP/354", "prompt": "\n\ndef tn_ap(a,n,d):\n  \"\"\"\n  Write a function to find t-nth term of arithemetic progression.\n  >>> tn_ap(1,5,2)\n  9\n  >>> tn_ap(2,6,4)\n  22\n  >>> tn_ap(1,4,5)\n  16\n  \"\"\"\n", "solution": "  \n  tn = a + (n - 1) * d\n  return tn", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def tn_ap(a, n, d): return a + (n - 1) * d`", "code_2": "`tn_ap = lambda a, n, d: a + (n - 1) * d`", "code_3": "`def tn_ap(a, n, d): return d * n + a - d`", "code_4": "`tn_ap = lambda a, n, d: d * n + a - d`", "code_5": "`def tn_ap(a, n, d): return a + d * (n - 1)`", "code_6": "`tn_ap = lambda a, n, d: a + d * (n - 1)`", "code_7": "`def tn_ap(a, n, d): return d * n + a - d`", "code_8": "`tn_ap = lambda a, n, d: d * n + a - d`", "code_9": "`def tn_ap(a, n, d): return a + d * (n - 1)`", "code_10": "`tn_ap = lambda a, n, d: a + d * (n - 1)`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/355", "prompt": "\n\ndef count_Rectangles(radius):\n    \"\"\"\n    Write a python function to count the number of rectangles in a circle of radius r.\n    >>> count_Rectangles(2)\n    8\n    >>> count_Rectangles(1)\n    1\n    >>> count_Rectangles(0)\n    0\n    \"\"\"\n", "solution": "      \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Rectangles(radius):\n    return sum(1 for x in range(1, radius + 1) for y in range(1, radius + 1) if x**2 + y**2 <= radius**2)", "code_2": "def count_Rectangles(radius):\n    return sum(x**2 + y**2 <= radius**2 for x in range(1, radius) for y in range(1, radius)) * 4 + (radius > 0)", "code_3": "def count_Rectangles(radius):\n    return len([(x, y) for x in range(1, radius + 1) for y in range(1, radius + 1) if x**2 + y**2 <= radius**2])", "code_4": "def count_Rectangles(radius):\n    return sum(x * x + y * y <= radius * radius for x in range(1, radius) for y in range(1, radius)) * 4 + int(radius > 0)", "code_5": "def count_Rectangles(radius):\n    return sum(1 for x in range(1, radius) for y in range(1, radius) if x * x + y * y <= radius * radius) * 4 + (radius > 0)", "code_6": "def count_Rectangles(radius):\n    return sum(x**2 + y**2 <= radius**2 for x in range(radius)) * 4 - 3 * (radius > 0)", "code_7": "def count_Rectangles(radius):\n    return len([(x, y) for x in range(radius) for y in range(radius) if x**2 + y**2 <= radius**2]) * 4 - 3 * (radius > 0)", "code_8": "def count_Rectangles(radius):\n    return sum(x * x + y * y <= radius * radius for x in range(radius) for y in range(radius)) * 4 - 3 * (radius > 0)", "code_9": "def count_Rectangles(radius):\n    return sum(1 for x in range(radius) for y in range(radius) if x * x + y * y <= radius * radius) * 4 - 3 * (radius > 0)", "code_10": "def count_Rectangles(radius):\n    return len([(x, y) for x in range(radius) for y in range(radius) if x * x + y * y <= radius * radius]) * 4 - 3 * (radius > 0)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/356", "prompt": "\n\ndef find_angle(a,b):\n \"\"\"\n Write a function to find the third angle of a triangle using two angles.\n >>> find_angle(47,89)\n 44\n >>> find_angle(45,95)\n 40\n >>> find_angle(50,40)\n 90\n \"\"\"\n", "solution": " \n c = 180 - (a + b)\n return c\n", "results": [1, 1, 0, 0, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_angle(a, b): return 180 - a - b", "code_2": "find_angle = lambda a, b: 180 - a - b", "code_3": "import operator\nfind_angle = operator.sub(180).__sub__", "code_4": "from functools import partial\nfind_angle = partial(operator.sub, 180).__sub__", "code_5": "from operator import sub\nfind_angle = sub(sub(180, a), b)", "code_6": "find_angle = (lambda a, b: (lambda c: c)(180 - a - b))", "code_7": "find_angle = (lambda a, b: (lambda c: c - a - b)(180))", "code_8": "find_angle = (lambda a, b: (lambda c: c - a - b)(180))", "code_9": "find_angle = (lambda a, b: (lambda c: c - a - b)(180))", "code_10": "find_angle = (lambda a, b: (lambda c: c - a - b)(180))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7100226348397881}
{"task_id": "MBPP/357", "prompt": "\n\ndef find_max(test_list):\n  \"\"\"\n  Write a function to find the maximum element of all the given tuple records.\n  >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n  10\n  >>> find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])\n  11\n  >>> find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])\n  12\n  \"\"\"\n", "solution": "  \n  res = max(int(j) for i in test_list for j in i)\n  return (res) ", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_max(test_list):\n    return max(x[1] for x in test_list)", "code_2": "def find_max(test_list):\n    return max(map(lambda x: x[1], test_list))", "code_3": "def find_max(test_list):\n    return max(test_list, key=lambda x: x[1])[1]", "code_4": "def find_max(test_list):\n    return sorted(test_list, key=lambda x: x[1])[-1][1]", "code_5": "def find_max(test_list):\n    return reduce(lambda a, b: a if a[1] > b[1] else b, test_list)[1]", "code_6": "def find_max(test_list):\n    max_val = float('-inf')\n    for _, val in test_list:\n        if val > max_val:\n            max_val = val\n    return max_val", "code_7": "def find_max(test_list):\n    return heapq.nlargest(1, test_list, key=lambda x: x[1])[0][1]", "code_8": "def find_max(test_list):\n    return sorted(test_list, key=itemgetter(1))[-1][1]", "code_9": "def find_max(test_list):\n    return max(test_list, key=itemgetter(1))[1]", "code_10": "def find_max(test_list):\n    return max(test_list, key=operator.itemgetter(1))[1]", "pass@3": 0.9166666666666666, "nDCG@10": 0.6421867266689011}
{"task_id": "MBPP/358", "prompt": "\n\ndef moddiv_list(nums1,nums2):\n  \"\"\"\n  Write a function to find modulo division of two lists using map and lambda function.\n  >>> moddiv_list([4,5,6],[1, 2, 3])\n  [0, 1, 0]\n  >>> moddiv_list([3,2],[1,4])\n  [0, 2]\n  >>> moddiv_list([90,120],[50,70])\n  [40, 50]\n  \"\"\"\n", "solution": "  \n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def moddiv_list(nums1, nums2):\n    return list(map(lambda x, y: x % y, nums1, nums2))", "code_2": "def moddiv_list(nums1, nums2):\n    return [a % b for a, b in zip(nums1, nums2)]", "code_3": "import numpy as np\ndef moddiv_list(nums1, nums2):\n    return np.mod(nums1, nums2).tolist()", "code_4": "from operator import mod\ndef moddiv_list(nums1, nums2):\n    return list(map(mod, nums1, nums2))", "code_5": "import itertools\ndef moddiv_list(nums1, nums2):\n    return [a % b for a, b in itertools.zip_longest(nums1, nums2)]", "code_6": "def moddiv_list(nums1, nums2):\n    return [divmod(a, b)[1] for a, b in zip(nums1, nums2)]", "code_7": "def moddiv_list(nums1, nums2):\n    return [a - b * (a // b) for a, b in zip(nums1, nums2)]", "code_8": "def moddiv_list(nums1, nums2):\n    return [a - (a // b) * b for a, b in zip(nums1, nums2)]", "code_9": "def moddiv_list(nums1, nums2):\n    return [a - (a // b) * b for a, b in itertools.zip_longest(nums1, nums2)]", "code_10": "def moddiv_list(nums1, nums2):\n    return [a - (a // b) * b for a, b in zip(nums1, nums2) if a and b]", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/359", "prompt": "\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    >>> Check_Solution(1,3,2)\n    \"Yes\"\n    >>> Check_Solution(1,2,3)\n    \"No\"\n    >>> Check_Solution(1,-5,6)\n    \"No\"\n    \"\"\"\n", "solution": "     \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "results": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1 == 2*r2 or r2 == 2*r1 else \"No\"\n    return \"No\"", "code_2": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if abs(r1 - 2*r2) < 1e-9 else \"No\"\n    return \"No\"", "code_3": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1/r2 == 2 or r2/r1 == 2 else \"No\"\n    return \"No\"", "code_4": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1*r2 == -a else \"No\"\n    return \"No\"", "code_5": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if (r1 - 2*r2)**2 < 1e-18 else \"No\"\n    return \"No\"", "code_6": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1*r2 == -a and (r1-r2) != 0 else \"No\"\n    return \"No\"", "code_7": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if abs(r1/r2 - 2) < 1e-9 else \"No\"\n    return \"No\"", "code_8": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1 != r2 and r1 != 0 and r2 != 0 and abs(r1/r2 - 2) < 1e-9 else \"No\"\n    return \"No\"", "code_9": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1*r2 == -a and r1 != r2 else \"No\"\n    return \"No\"", "code_10": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d >= 0:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1*r2 == -a and (r1-r2) != 0 and r1 != 0 and r2 != 0 else \"No\"\n    return \"No\"", "pass@3": 0.5333333333333333, "nDCG@10": 0.3301376494471203}
{"task_id": "MBPP/360", "prompt": "\n\ndef get_carol(n):\n\t\"\"\"\n\tWrite a function to find the n\u2019th carol number.\n\t>>> get_carol(2)\n\t7\n\t>>> get_carol(4)\n\t223\n\t>>> get_carol(5)\n\t959\n\t\"\"\"\n", "solution": "\t \n\tresult = (2**n) - 1\n\treturn result * result - 2", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_carol(n):\n    a, b, c = 1, 2, 1\n    for _ in range(n-1):\n        a, b, c = b, a + 2 * (c + 2), b + c\n    return a", "code_2": "def get_carol(n):\n    carol = [1]\n    for i in range(n-1):\n        carol.append(sum(carol) + 2 * (i + 2))\n    return carol[-1]", "code_3": "def get_carol(n):\n    carol = [1] * n\n    for i in range(1, n):\n        carol[i] = sum(carol[:i]) + 2 * (i + 1)\n    return carol[-1]", "code_4": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol[:i]) + 2)\n    return carol[-1]", "code_5": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol) + 2)\n    return carol[-1]", "code_6": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol[:-1]) + 2)\n    return carol[-1]", "code_7": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol[:i-1]) + 2 * i)\n    return carol[-1]", "code_8": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol[:i]) + 2 * (i + 1))\n    return carol[-1]", "code_9": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol[:i]) + 2 * (i + 2))\n    return carol[-1]", "code_10": "def get_carol(n):\n    carol = [1]\n    for i in range(1, n):\n        carol.append(carol[i-1] + sum(carol[:i]) + 2 * (i + 1) + 1)\n    return carol[-1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/361", "prompt": "\n\ndef remove_empty(list1):\n  \"\"\"\n  Write a function to remove empty lists from a given list of lists.\n  >>> remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])\n  ['Red', 'Green', [1, 2], 'Blue']\n  >>> remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])\n  [ 'Green', [1, 2], 'Blue']\n  >>> remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])\n  ['Python', 'programming', 'language']\n  \"\"\"\n", "solution": "  \n  remove_empty = [x for x in list1 if x]\n  return remove_empty", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_empty(lst):\n    return [i for i in lst if i]", "code_2": "def remove_empty(lst):\n    return list(filter(None, lst))", "code_3": "def remove_empty(lst):\n    return [x for x in lst if x != []]", "code_4": "def remove_empty(lst):\n    return [i for i in lst if len(i) > 0]", "code_5": "def remove_empty(lst):\n    return [i for i in lst if bool(i)]", "code_6": "def remove_empty(lst):\n    return [i for i in lst if i.__len__() > 0]", "code_7": "def remove_empty(lst):\n    return [i for i in lst if isinstance(i, list) and i or not isinstance(i, list)]", "code_8": "def remove_empty(lst):\n    return [i for i in lst if type(i) == list and i or type(i) != list]", "code_9": "def remove_empty(lst):\n    return [i for i in lst if i and type(i) == list or type(i) != list]", "code_10": "def remove_empty(lst):\n    return [i for i in lst if i and isinstance(i, list) or not isinstance(i, list)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/362", "prompt": "\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a python function to find the item with maximum occurrences in a given list.\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    >>> max_occurrences([1,2,6,7,0,1,0,1,0])\n    1,0\n    >>> max_occurrences([1,2,3,1,2,4,1])\n    1\n    \"\"\"\n", "solution": "    \n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "results": [0, 0, 0, 0, 0, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef max_occurrences(nums):\n    c = Counter(nums)\n    m = max(c.values())\n    return [k for k, v in c.items() if v == m]", "code_2": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    m = max(d.values())\n    return [k for k, v in d.items() if v == m]", "code_3": "import heapq\ndef max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return heapq.nlargest(1, d, key=d.get)", "code_4": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True) if v == max(d.values())]", "code_5": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in d.items() if v == max(d.values())]", "code_6": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in sorted(d.items(), key=lambda item: item[1])][-1:]", "code_7": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in d.items() if v == max(d.values())][0]", "code_8": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in sorted(d.items(), key=lambda item: item[1], reverse=True)][0]", "code_9": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in d.items() if v == max(d.values())][-1]", "code_10": "def max_occurrences(nums):\n    d = {}\n    for num in nums:\n        d[num] = d.get(num, 0) + 1\n    return [k for k, v in sorted(d.items(), key=lambda item: item[1]) if v == max(d.values())][-1]", "pass@3": 0.5333333333333333, "nDCG@10": 0.14279514403613736}
{"task_id": "MBPP/363", "prompt": "\n\ndef add_K_element(test_list, K):\n  \"\"\"\n  Write a function to add the k elements to each element in the tuple.\n  >>> add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n  [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n  >>> add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)\n  [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n  >>> add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)\n  [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n  \"\"\"\n", "solution": "  \n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension and map function:\ndef add_K_element(test_list, K):\n    return [tuple(map(lambda x: x + K, t)) for t in test_list]", "code_2": "Using list comprehension and tuple unpacking:\ndef add_K_element(test_list, K):\n    return [(a + K, b + K, c + K) for (a, b, c) in test_list]", "code_3": "Using list comprehension and generator expression:\ndef add_K_element(test_list, K):\n    return [tuple(x + K for x in t) for t in test_list]", "code_4": "Using map function and lambda function:\ndef add_K_element(test_list, K):\n    return list(map(lambda t: tuple(x + K for x in t), test_list))", "code_5": "Using nested list comprehension:\ndef add_K_element(test_list, K):\n    return [[x + K for x in t] for t in test_list]", "code_6": "Using for loop and list comprehension:\ndef add_K_element(test_list, K):\n    return [tuple(x + K for x in t) for t in test_list]", "code_7": "Using for loop and map function:\ndef add_K_element(test_list, K):\n    return [tuple(map(lambda x: x + K, t)) for t in test_list]", "code_8": "Using for loop and tuple unpacking:\ndef add_K_element(test_list, K):\n    return [(a + K, b + K, c + K) for (a, b, c) in test_list]", "code_9": "Using for loop and list:\ndef add_K_element(test_list, K):\n    result = []\n    for t in test_list:\n        result.append(tuple(x + K for x in t))\n    return result", "code_10": "Using for loop and map function with list:\ndef add_K_element(test_list, K):\n    result = []\n    for t in test_list:\n        result.append(tuple(map(lambda x: x + K, t)))\n    return result", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/364", "prompt": "\n\ndef min_flip_to_make_string_alternate(str):\n\t\"\"\"\n\tWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\t>>> min_flip_to_make_string_alternate(\"0001010111\")\n\t2\n\t>>> min_flip_to_make_string_alternate(\"001\")\n\t1\n\t>>> min_flip_to_make_string_alternate(\"010111011\")\n\t2\n\t\"\"\"\n", "solution": "\tdef make_flip(ch): \n\t\treturn '1' if (ch == '0') else '0'\n\tdef get_flip_with_starting_charcter(str, expected): \n\t\tflip_count = 0\n\t\tfor i in range(len( str)): \n\t\t\tif (str[i] != expected): \n\t\t\t\tflip_count += 1\n\t\t\texpected = make_flip(expected) \n\t\treturn flip_count \n\t \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_flip_to_make_string_alternate(str):\n    return min(sum(s[i] == str[i%2] for i in range(len(str))), sum(s[i] != str[i%2] for i in range(len(str))))", "code_2": "def min_flip_to_make_string_alternate(str):\n    return min(sum(c == '1' for c in str[::2]), sum(c == '1' for c in str[1::2]))", "code_3": "def min_flip_to_make_string_alternate(str):\n    return min(sum(int(c) == i % 2 for i, c in enumerate(str)), sum(int(c) != i % 2 for i, c in enumerate(str)))", "code_4": "def min_flip_to_make_string_alternate(str):\n    return min(sum(c == '0' for c in str[::2]), sum(c == '1' for c in str[::2]))", "code_5": "def min_flip_to_make_string_alternate(str):\n    return min(sum(int(c) == i % 2 for i, c in enumerate(str[::2])), sum(int(c) != i % 2 for i, c in enumerate(str[::2])))", "code_6": "def min_flip_to_make_string_alternate(str):\n    return min(sum(c == '1' for c in str[1::2]), sum(c == '0' for c in str[1::2]))", "code_7": "def min_flip_to_make_string_alternate(str):\n    return min(sum(int(c) == i % 2 for i, c in enumerate(str[1::2])), sum(int(c) != i % 2 for i, c in enumerate(str[1::2])))", "code_8": "def min_flip_to_make_string_alternate(str):\n    return min(sum(c == '0' for c in str[1::2]), sum(c == '1' for c in str[::2]))", "code_9": "def min_flip_to_make_string_alternate(str):\n    return min(sum(int(c) == i % 2 for i, c in enumerate(str[1::2])), sum(int(c) != i % 2 for i, c in enumerate(str[::2])))", "code_10": "def min_flip_to_make_string_alternate(str):\n    return min(sum(c == '1' for c in str[1::2]), sum(c == '0' for c in str[::2]))", "pass@3": 0.30000000000000004, "nDCG@10": 0.1100458831490401}
{"task_id": "MBPP/365", "prompt": "\n\ndef count_Digit(n):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    >>> count_Digit(12345)\n    5\n    >>> count_Digit(11223305)\n    8\n    >>> count_Digit(4123459)\n    7\n    \"\"\"\n", "solution": "    \n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "results": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_Digit(n): return len(str(n))", "code_2": "def count_Digit(n): return int(math.log10(n)) + 1", "code_3": "def count_Digit(n): return len(format(n, 'e')) - 1", "code_4": "def count_Digit(n): return len(str(abs(n)))", "code_5": "def count_Digit(n): return len(str(int(n)))", "code_6": "def count_Digit(n): return len(str(n).rstrip('0'))", "code_7": "def count_Digit(n): return len(str(n).replace('-', ''))", "code_8": "def count_Digit(n): return len(str(n).lstrip('-'))", "code_9": "def count_Digit(n): return len(str(n).replace('.', '', 1))", "code_10": "def count_Digit(n): return len(str(n).split('.')[0])", "pass@3": 1.0, "nDCG@10": 0.7510916729774055}
{"task_id": "MBPP/366", "prompt": "\n\ndef adjacent_num_product(list_nums):\n    \"\"\"\n    Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,5])\n    20\n    >>> adjacent_num_product([2,3])\n    6\n    \"\"\"\n", "solution": "    \n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "code_2": "def adjacent_num_product(list_nums):\n    return max(map(lambda x: x[0]*x[1], zip(list_nums, list_nums[1:])))", "code_3": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_4": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_5": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_6": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_7": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_8": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_9": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "code_10": "def adjacent_num_product(list_nums):\n    return max(list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/367", "prompt": "\n\ndef is_tree_balanced(root):\n\t\"\"\"\n\tWrite a function to check if a binary tree is balanced or not.\n\t>>> is_tree_balanced(root)\n\tFalse\n\t>>> is_tree_balanced(root1)\n\tTrue\n\t>>> is_tree_balanced(root2)\n\tFalse\n\t\"\"\"\n", "solution": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\tdef get_height(root): \n\t\tif root is None: \n\t\t\treturn 0\n\t\treturn max(get_height(root.left), get_height(root.right)) + 1\n\t \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left = check_balance(node.left)\n        if left == -1:\n            return -1\n        right = check_balance(node.right)\n        if right == -1:\n            return -1\n        if abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check_balance(root) != -1", "code_2": "def is_tree_balanced(root):\n    def height(node):\n        if not node:\n            return 0\n        return max(height(node.left), height(node.right)) + 1\n    if not root:\n        return True\n    return abs(height(root.left) - height(root.right)) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right)", "code_3": "def is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left = check_balance(node.left)\n        if left == -1:\n            return -1\n        right = check_balance(node.right)\n        if right == -1:\n            return -1\n        return max(left, right) + 1 if abs(left - right) <= 1 else -1\n    return check_balance(root) != -1", "code_4": "def is_tree_balanced(root):\n    def height(node):\n        if not node:\n            return 0\n        left = height(node.left)\n        right = height(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return height(root) != -1", "code_5": "def is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left = check_balance(node.left)\n        if left == -1:\n            return -1\n        right = check_balance(node.right)\n        if right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check_balance(root) != -1", "code_6": "def is_tree_balanced(root):\n    def height(node):\n        if not node:\n            return 0\n        left = height(node.left)\n        right = height(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return height(root) >= 0", "code_7": "def is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left = check_balance(node.left)\n        if left == -1:\n            return -1\n        right = check_balance(node.right)\n        if right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check_balance(root) >= 0", "code_8": "def is_tree_balanced(root):\n    def height(node):\n        if not node:\n            return 0\n        left = height(node.left)\n        right = height(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return height(root) > 0", "code_9": "def is_tree_balanced(root):\n    def check_balance(node):\n        if not node:\n            return 0\n        left = check_balance(node.left)\n        if left == -1:\n            return -1\n        right = check_balance(node.right)\n        if right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return check_balance(root) > 0", "code_10": "def is_tree_balanced(root):\n    def height(node):\n        if not node:\n            return 0\n        left = height(node.left)\n        right = height(node.right)\n        if left == -1 or right == -1 or abs(left - right) > 1:\n            return -1\n        return max(left, right) + 1\n    return height(root) != 0", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/368", "prompt": "\n\ndef repeat_tuples(test_tup, N):\n  \"\"\"\n  Write a function to repeat the given tuple n times.\n  >>> repeat_tuples((1, 3), 4)\n  ((1, 3), (1, 3), (1, 3), (1, 3))\n  >>> repeat_tuples((1, 2), 3)\n  ((1, 2), (1, 2), (1, 2))\n  >>> repeat_tuples((3, 4), 5)\n  ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n  \"\"\"\n", "solution": "  \n  res = ((test_tup, ) * N)\n  return (res) ", "results": [1, 1, 0, 1, 1, 0, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def repeat_tuples(test_tup, N):\n    return (test_tup,) * N", "code_2": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in range(N))", "code_3": "def repeat_tuples(test_tup, N):\n    return tuple(itertools.repeat(test_tup, N))", "code_4": "def repeat_tuples(test_tup, N):\n    return tuple(map(lambda _: test_tup, range(N)))", "code_5": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in [0]*N)", "code_6": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in xrange(N))", "code_7": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in range(N) if True)", "code_8": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in filter(lambda _: True, range(N)))", "code_9": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in (0 for _ in range(N)))", "code_10": "def repeat_tuples(test_tup, N):\n    return tuple(test_tup for _ in itertools.repeat(None, N))", "pass@3": 0.9916666666666667, "nDCG@10": 0.747935059673333}
{"task_id": "MBPP/369", "prompt": "\n\ndef lateralsurface_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the lateral surface area of cuboid\n  >>> lateralsurface_cuboid(8,5,6)\n  156\n  >>> lateralsurface_cuboid(7,9,10)\n  320\n  >>> lateralsurface_cuboid(10,20,30)\n  1800\n  \"\"\"\n", "solution": "  \n  LSA = 2*h*(l+w)\n  return LSA", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def lateralsurface_cuboid(l,w,h): return 2*(l+w)*h`", "code_2": "`lateralsurface_cuboid = lambda l,w,h: 2*(l+w)*h`", "code_3": "`def lateralsurface_cuboid(l,w,h): return sum([l,w])*2*h`", "code_4": "`def lateralsurface_cuboid(l,w,h): return (l+w)*h*2`", "code_5": "`def lateralsurface_cuboid(l,w,h): return (l*2+w*2)*h`", "code_6": "`def lateralsurface_cuboid(l,w,h): return (l*h+w*h)*2`", "code_7": "`def lateralsurface_cuboid(l,w,h): return (l*h*2)+(w*h*2)`", "code_8": "`def lateralsurface_cuboid(l,w,h): return (l*h)*2+(w*h)*2`", "code_9": "`def lateralsurface_cuboid(l,w,h): return (l*h)*2+(h*w)*2`", "code_10": "`def lateralsurface_cuboid(l,w,h): return (l*h)*2+(h*w)*2` (duplicate of 9)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/370", "prompt": "\n\ndef float_sort(price):\n  \"\"\"\n  Write a function to sort a tuple by its float element.\n  >>> float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n  [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n  >>> float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])\n  [('item3', '20'), ('item1', '15'), ('item2', '10')]\n  >>> float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])\n  [('item3', '14'), ('item2', '10'), ('item1', '5')]\n  \"\"\"\n", "solution": "  \n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort", "results": [1, 1, 0, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def float_sort(lst):\n  return sorted(lst, key=lambda x: float(x[1]), reverse=True)", "code_2": "def float_sort(lst):\n  return sorted(lst, key=lambda x: -float(x[1]))", "code_3": "from operator import itemgetter\ndef float_sort(lst):\n  return sorted(lst, key=itemgetter(1), reverse=True, key=float)", "code_4": "def float_sort(lst):\n  return sorted(lst, key=lambda x: float(x[1]), reverse=True)", "code_5": "def float_sort(lst):\n  return sorted(lst, key=lambda x: -float(x[1]))", "code_6": "def float_sort(lst):\n  return sorted(lst, key=lambda x: float(x[1]), reverse=True)", "code_7": "def float_sort(lst):\n  return sorted(lst, key=lambda x: -float(x[1]))", "code_8": "from operator import itemgetter\ndef float_sort(lst):\n  return sorted(lst, key=itemgetter(1), reverse=True, key=float)", "code_9": "def float_sort(lst):\n  return sorted(lst, key=lambda x: float(x[1]), reverse=True)", "code_10": "def float_sort(lst):\n  return sorted(lst, key=lambda x: -float(x[1]))", "pass@3": 1.0, "nDCG@10": 0.8205228949141828}
{"task_id": "MBPP/371", "prompt": "\n\ndef smallest_missing(A, left_element, right_element):\n    \"\"\"\n    Write a function to find the smallest missing element in a sorted array.\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n    3\n    >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n    0\n    \"\"\"\n", "solution": "    \n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def smallest_missing(A, left_element, right_element):\n    if A[left_element] != 0:\n        return 0\n    for i in range(1, right_element + 1):\n        if A[i] != A[i - 1] + 1:\n            return A[i - 1] + 1\n    return A[right_element] + 1", "code_2": "def smallest_missing(A, left_element, right_element):\n    return next((A[i] + 1 for i in range(left_element, right_element + 1) if A[i] != A[i - 1] + 1), A[right_element] + 1)", "code_3": "def smallest_missing(A, left_element, right_element):\n    return [A[i] + 1 for i in range(left_element, right_element + 1) if A[i] != A[i - 1] + 1][0] if A[left_element] != 0 else 0", "code_4": "def smallest_missing(A, left_element, right_element):\n    return min(set(range(A[left_element], A[right_element] + 1)) - set(A))", "code_5": "def smallest_missing(A, left_element, right_element):\n    return min(set(range(A[left_element], A[right_element] + 2)) - set(A))", "code_6": "def smallest_missing(A, left_element, right_element):\n    return min(set(range(A[left_element], A[right_element] + 2)).difference(A))", "code_7": "def smallest_missing(A, left_element, right_element):\n    return min(set(range(A[left_element], A[right_element] + 2)).symmetric_difference(A))", "code_8": "def smallest_missing(A, left_element, right_element):\n    return min(set(range(A[left_element], A[right_element] + 2)).intersection(set(range(A[right_element] + 2)) - set(A)))", "code_9": "def smallest_missing(A, left_element, right_element):\n    return min(filter(lambda x: x not in A, range(A[left_element], A[right_element] + 2)))", "code_10": "def smallest_missing(A, left_element, right_element):\n    return min(itertools.filterfalse(set(A).__contains__, range(A[left_element], A[right_element] + 2)))", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/372", "prompt": "\n\ndef heap_assending(nums):\n  \"\"\"\n  Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n  >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n  [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n  >>> heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n  [14, 22, 25, 25, 35, 58, 65, 75, 85]\n  >>> heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \"\"\"\n", "solution": "  import heapq as hq\n  \n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result", "results": [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], "no_of_codes": 11, "code_1": "import heapq\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for _ in range(len(nums))]", "code_2": "import heapq\ndef heap_assending(nums):\n    return sorted(nums)", "code_3": "import heapq\ndef heap_assending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_4": "import heapq\ndef heap_assending(nums):\n    return list(heapq.merge(*[sorted(nums[i::len(nums)//4]) for i in range(len(nums)//4)]))", "code_5": "import heapq\ndef heap_assending(nums):\n    heap = nums[:]\n    for i in range(len(heap) // 2 - 1, -1, -1):\n        heapify(heap, i, len(heap))\n    for i in range(len(heap) - 1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    return heap", "code_6": "def heapify(heap, i, n):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and heap[i] < heap[left]:\n        largest = left\n    if right < n and heap[largest] < heap[right]:\n        largest = right\n    if largest != i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, largest, n)", "code_7": "import heapq\ndef heap_assending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_8": "import heapq\ndef heap_assending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    return [-heapq.heappop(heap) for _ in range(len(heap))]", "code_9": "import heapq\ndef heap_assending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_10": "import heapq\ndef heap_assending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_11": "import heapq\ndef heap_assending(nums):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "pass@3": 1.0, "nDCG@10": 0.7670273914429266}
{"task_id": "MBPP/373", "prompt": "\n\ndef volume_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the volume of a cuboid.\n  >>> volume_cuboid(1,2,3)\n  6\n  >>> volume_cuboid(5,7,9)\n  315\n  >>> volume_cuboid(10,15,21)\n  3150\n  \"\"\"\n", "solution": "  \n  volume=l*w*h\n  return volume", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def volume_cuboid(l,w,h): return l*w*h`", "code_2": "`volume_cuboid = lambda l,w,h: l*w*h`", "code_3": "`def volume_cuboid(l,w,h): return reduce(lambda x, y: x*y, [l,w,h])`", "code_4": "`def volume_cuboid(l,w,h): return l*w*h if l and w and h else 0`", "code_5": "`def volume_cuboid(l,w,h): return l*w*h if all([l,w,h]) else 0`", "code_6": "`def volume_cuboid(l,w,h): return l*w*h if l>0 and w>0 and h>0 else 0`", "code_7": "`def volume_cuboid(l,w,h): return l*w*h if l>=1 and w>=1 and h>=1 else 0`", "code_8": "`def volume_cuboid(l,w,h): return l*w*h if l!=0 and w!=0 and h!=0 else 0`", "code_9": "`def volume_cuboid(l,w,h): return l*w*h if l>0 and w>0 and h>0 and l!=float('inf') and w!=float('inf') and h!=float('inf') else 0`", "code_10": "`def volume_cuboid(l,w,h): return l*w*h if isinstance(l, (int, float)) and isinstance(w, (int, float)) and isinstance(h, (int, float)) else None`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/374", "prompt": "\n\ndef permute_string(str):\n    \"\"\"\n    Write a function to print all permutations of a given string including duplicates.\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    >>> permute_string('abc')\n    ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    >>> permute_string('abcd')\n    ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n    \"\"\"\n", "solution": "    \n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from itertools import permutations\ndef permute_string(s):\n    return [''.join(p) for p in permutations(s)]", "code_2": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        rest = s[:i] + s[i+1:]\n        for p in permute_string(rest):\n            perms.append(s[i] + p)\n    return perms", "code_3": "import heapq\ndef permute_string(s):\n    heap = [(s, '')]\n    perms = []\n    while heap:\n        curr, perm = heapq.heappop(heap)\n        if not curr:\n            perms.append(perm)\n        for i in range(len(curr)):\n            heapq.heappush(heap, (curr[:i] + curr[i+1:], perm + curr[i]))\n    return perms", "code_4": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            perms.append(s[i] + p)\n    return perms", "code_5": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            if p not in perms:\n                perms.append(p)\n        s = s[1:] + s[0]\n    return perms", "code_6": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            if p not in perms:\n                perms.append(p)\n    return perms[::-1]", "code_7": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            perms.insert(0, s[i] + p)\n    return perms", "code_8": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            perms.append(p + s[i])\n    return perms[::-1]", "code_9": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            perms.insert(len(perms)//2, s[i] + p)\n    return perms", "code_10": "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    perms = []\n    for i in range(len(s)):\n        for p in permute_string(s[:i] + s[i+1:]):\n            perms.append(p)\n        perms = [s[i] + p for p in perms]\n    return perms", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/375", "prompt": "\n\ndef round_num(n,m):\n    \"\"\"\n    Write a function to round the given number to the nearest multiple of a specific number.\n    >>> round_num(4722,10)\n    4720\n    >>> round_num(1111,5)\n    1110\n    >>> round_num(219,2)\n    218\n    \"\"\"\n", "solution": "    \n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)", "results": [0, 0, 1, 0, 0, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def round_num(n, m): return m * round(n / m)", "code_2": "def round_num(n, m): return round(n / m) * m", "code_3": "def round_num(n, m): return int(n / m) * m", "code_4": "def round_num(n, m): return round(n, -len(str(m)))", "code_5": "def round_num(n, m): return int(n / m + 0.5) * m", "code_6": "def round_num(n, m): return n - n % m", "code_7": "def round_num(n, m): return n // m * m", "code_8": "def round_num(n, m): return divmod(n, m)[0] * m", "code_9": "def round_num(n, m): return n - n % m if n % m >= m / 2 else n - n % m + m", "code_10": "def round_num(n, m): return int(n / m + (0.5 if n % m >= m / 2 else 0)) * m", "pass@3": 0.8333333333333334, "nDCG@10": 0.3312392961638528}
{"task_id": "MBPP/376", "prompt": "\n\ndef remove_replica(test_tup):\n  \"\"\"\n  Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n  >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n  (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n  >>> remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n  (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n  >>> remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n  (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n  \"\"\"\n", "solution": "  \n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)", "results": [0, 0, 0, 1, 0, 1, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def remove_replica(test_tup):\n    seen = set()\n    return tuple('MSP' if x in seen or seen.add(x) is None else x for x in test_tup)", "code_2": "def remove_replica(test_tup):\n    counts = {}\n    return tuple('MSP' if counts.get(x, 0) > 0 else x for x in test_tup if counts[x] := counts.get(x, 0) + 1)", "code_3": "from collections import Counter\ndef remove_replica(test_tup):\n    counts = Counter(test_tup)\n    return tuple('MSP' if counts[x] > 1 else x for x in test_tup)", "code_4": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.get(x, 0) else seen.update({x: 1}) or x for x in test_tup)", "code_5": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.setdefault(x, 0) else x + 1 for x in test_tup)", "code_6": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.get(x) else seen.__setitem__(x, 1) or x for x in test_tup)", "code_7": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.get(x, seen.update({x: 1})) else x for x in test_tup)", "code_8": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.get(x) else seen.__setitem__(x, 1) is None or x for x in test_tup)", "code_9": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.get(x) else seen.update({x: 1}) is None or x for x in test_tup)", "code_10": "def remove_replica(test_tup):\n    seen = {}\n    return tuple('MSP' if seen.get(x) else seen.update({x: 1}) is None and x or 'MSP' for x in test_tup)", "pass@3": 0.7083333333333333, "nDCG@10": 0.23680742154717785}
{"task_id": "MBPP/377", "prompt": "\n\ndef remove_Char(s,c) :\n    \"\"\"\n    Write a python function to remove all occurrences of a character in a given string.\n    >>> remove_Char(\"aba\",'a')\n    \"b\"\n    >>> remove_Char(\"toggle\",'g')\n    \"tole\"\n    >>> remove_Char(\"aabbc\",'b')\n    \"aac\"\n    \"\"\"\n", "solution": "      \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_Char(s, c): return s.replace(c, '')", "code_2": "def remove_Char(s, c): return ''.join(i for i in s if i != c)", "code_3": "import re\ndef remove_Char(s, c): return re.sub(c, '', s)", "code_4": "def remove_Char(s, c): return ''.join(filter(lambda x: x != c, s))", "code_5": "def remove_Char(s, c): return ''.join([char for char in s if char != c])", "code_6": "def remove_Char(s, c):\n    res = []\n    for i in s:\n        if i != c:\n            res.append(i)\n    return ''.join(res)", "code_7": "def remove_Char(s, c):\n    while c in s:\n        s = s.replace(c, '')\n    return s", "code_8": "def remove_Char(s, c):\n    output = ''\n    for char in s:\n        if char != c:\n            output += char\n    return output", "code_9": "def remove_Char(s, c):\n    output = []\n    for char in s:\n        if char != c:\n            output.append(char)\n    return ''.join(output)", "code_10": "def remove_Char(s, c):\n    output = ''\n    for char in s:\n        if char != c:\n            output = output + char\n    return output", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/378", "prompt": "\n\ndef move_first(test_list):\n  \"\"\"\n  Write a python function to shift last element to first position in the given list.\n  >>> move_first([1,2,3,4])\n  [4,1,2,3]\n  >>> move_first([0,1,2,3])\n  [3,0,1,2]\n  >>> move_first([9,8,7,1])\n  [1,9,8,7]\n  \"\"\"\n", "solution": "  \n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def move_first(test_list):\n  test_list.insert(0, test_list.pop())\n  return test_list", "code_2": "def move_first(test_list):\n  return [test_list[-1]] + test_list[:-1]", "code_3": "def move_first(test_list):\n  test_list[:] = test_list[-1:] + test_list[:-1]\n  return test_list", "code_4": "def move_first(test_list):\n  test_list.append(test_list.pop(0))\n  return test_list", "code_5": "def move_first(test_list):\n  return test_list[-1:] + test_list[:-1]", "code_6": "def move_first(test_list):\n  test_list[:] = [test_list[-1]] + test_list[:-1]\n  return test_list", "code_7": "def move_first(test_list):\n  test_list.reverse()\n  test_list.append(test_list.pop(0))\n  test_list.reverse()\n  return test_list", "code_8": "def move_first(test_list):\n  test_list[:] = test_list[::-1]\n  test_list.append(test_list.pop(0))\n  test_list[:] = test_list[::-1]\n  return test_list", "code_9": "def move_first(test_list):\n  first = test_list.pop()\n  test_list.insert(0, first)\n  return test_list", "code_10": "def move_first(test_list):\n  test_list[:] = [test_list[-1]] + test_list[:-1]", "pass@3": 1.0, "nDCG@10": 0.8415908474314977}
{"task_id": "MBPP/379", "prompt": "\n\ndef surfacearea_cuboid(l,w,h):\n  \"\"\"\n  Write a function to find the surface area of a cuboid.\n  >>> surfacearea_cuboid(1,2,3)\n  22\n  >>> surfacearea_cuboid(5,7,9)\n  286\n  >>> surfacearea_cuboid(10,15,21)\n  1350\n  \"\"\"\n", "solution": "  \n  SA = 2*(l*w + l * h + w * h)\n  return SA", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def surfacearea_cuboid(l,w,h): return 2*(l*w + w*h + h*l)`", "code_2": "`surfacearea_cuboid = lambda l,w,h: 2*(l*w + w*h + h*l)`", "code_3": "`def surfacearea_cuboid(l,w,h): return 2*sum([l*w, w*h, h*l])`", "code_4": "`def surfacearea_cuboid(l,w,h): return 2*sum(map(lambda x: x[0]*x[1], [(l,w), (w,h), (h,l)]))`", "code_5": "`def surfacearea_cuboid(l,w,h): return 2*sum(map(prod, combinations([l,w,h], 2)))`", "code_6": "`def surfacearea_cuboid(l,w,h): return 2*reduce(add, map(prod, permutations([l,w,h], 2)))`", "code_7": "`def surfacearea_cuboid(l,w,h): return 2*sum(a*b for a, b in zip([l,w,h], [w,h,l]))`", "code_8": "`def surfacearea_cuboid(l,w,h): return 2*sum(a*b for a, b in zip([l,w,h], [w,h,l][::-1]))`", "code_9": "`def surfacearea_cuboid(l,w,h): return 2*sum(a*b for a, b in zip([l,w,h], [h,l,w]))`", "code_10": "`def surfacearea_cuboid(l,w,h): return 2*sum(a*b for a, b in zip([l,w,h], [h,l,w][::-1]))`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/380", "prompt": "\n\ndef multi_list(rownum,colnum):\n  \"\"\"\n  Write a function to generate a two-dimensional array.\n  >>> multi_list(3,4)\n  [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n  >>> multi_list(5,7)\n  [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n  >>> multi_list(10,15)\n  [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n  \"\"\"\n", "solution": "  \n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n", "results": [1, 0, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]", "code_2": "import numpy as np\ndef multi_list(rownum, colnum):\n    return np.outer(np.arange(rownum), np.arange(colnum))", "code_3": "def multi_list(rownum, colnum):\n    return [[j*i for j in range(colnum)] for i in range(rownum)]", "code_4": "def multi_list(rownum, colnum):\n    return [[j for j in range(i, colnum*i, i)] for i in range(rownum)]", "code_5": "def multi_list(rownum, colnum):\n    return [[j*i for j in range(colnum)] for i in range(rownum)]", "code_6": "def multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]", "code_7": "def multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]", "code_8": "def multi_list(rownum, colnum):\n    return [[j*i for j in range(colnum)] for i in range(rownum)]", "code_9": "def multi_list(rownum, colnum):\n    return [[i*j for j in range(colnum)] for i in range(rownum)]", "code_10": "def multi_list(rownum, colnum):\n    return [[j*i for j in range(colnum)] for i in range(rownum)]", "pass@3": 1.0, "nDCG@10": 0.7663491917568949}
{"task_id": "MBPP/381", "prompt": "\n\ndef index_on_inner_list(list_data, index_no):\n    \"\"\"\n    Write a function to sort a list of lists by a given index of the inner list.\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n    [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)\n    [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n    [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n    \"\"\"\n", "solution": "    from operator import itemgetter\n    \n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using `sorted` function with `lambda`:\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])", "code_2": "Using `itemgetter` from `operator` module:\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=itemgetter(index_no))", "code_3": "Using `list.sort` method with `lambda`:\ndef index_on_inner_list(list_data, index_no):\n    list_data.sort(key=lambda x: x[index_no])\n    return list_data", "code_4": "Using `list.sort` method with `itemgetter`:\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    list_data.sort(key=itemgetter(index_no))\n    return list_data", "code_5": "Using `sort` function with `lambda` and `map`:\ndef index_on_inner_list(list_data, index_no):\n    return list(map(list, zip(*sorted(map(list, zip(*list_data)), key=lambda x: x[index_no]))))", "code_6": "Using `sort` function with `itemgetter` and `map`:\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    return list(map(list, zip(*sorted(map(list, zip(*list_data)), key=itemgetter(index_no)))))", "code_7": "Using `numpy` library:\nimport numpy as np\ndef index_on_inner_list(list_data, index_no):\n    return list(map(tuple, np.array(list_data)[np.argsort(np.array(list_data)[:, index_no])]))", "code_8": "Using `pandas` library:\nimport pandas as pd\ndef index_on_inner_list(list_data, index_no):\n    return [tuple(x) for x in pd.DataFrame(list_data).sort_values(index_no).values.tolist()]", "code_9": "Using `heapq` library:\nimport heapq\ndef index_on_inner_list(list_data, index_no):\n    return [heapq.heappop(heap) for heap in [[]] * len(list_data) for _ in heapq.heappush(heap, (-list_data[i][index_no], list_data[i]))]", "code_10": "Using `functools` library:\nimport functools\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=functools.partial(lambda x, i: x[i], i=index_no))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/382", "prompt": "\n\ndef find_rotation_count(A):\n    \"\"\"\n    Write a function to find the number of rotations in a circularly sorted array.\n    >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> find_rotation_count([8, 9, 10,2, 5, 6])\n    3\n    >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n    0\n    \"\"\"\n", "solution": "    \n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_rotation_count(A):\n    low, high = 0, len(A) - 1\n    while low < high:\n        mid = (low + high) >> 1\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "code_2": "def find_rotation_count(A):\n    return next((i for i in range(len(A)) if A[i] < A[i - 1]), 0)", "code_3": "def find_rotation_count(A):\n    return len(A) - 1 - A.index(min(A))", "code_4": "def find_rotation_count(A):\n    return sum(1 for i in range(len(A) - 1) if A[i] > A[i + 1])", "code_5": "def find_rotation_count(A):\n    return len([x for x in A if x < A[-1]])", "code_6": "def find_rotation_count(A):\n    return len(list(filter(lambda x: x < A[-1], A)))", "code_7": "def find_rotation_count(A):\n    return len([1 for i in range(len(A) - 1) if A[i] > A[i + 1]])", "code_8": "def find_rotation_count(A):\n    return sum(A[i] > A[i + 1] for i in range(len(A) - 1))", "code_9": "def find_rotation_count(A):\n    return len([i for i in range(len(A) - 1) if A[i] > A[i + 1]])", "code_10": "def find_rotation_count(A):\n    return len([1 for i in range(len(A)) if A[i] < A[i - 1]])", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/383", "prompt": "\n\ndef even_bit_toggle_number(n) :\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(20)\n    1\n    >>> even_bit_toggle_number(30)\n    11\n    \"\"\"\n", "solution": "     \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def even_bit_toggle_number(n): return n ^ ((1 << n.bit_length()) - 1)", "code_2": "def even_bit_toggle_number(n): return n ^ (2 ** n.bit_length() - 1)", "code_3": "def even_bit_toggle_number(n): return n ^ ~(-1 << n.bit_length())", "code_4": "def even_bit_toggle_number(n): return n ^ ~(~0 << n.bit_length())", "code_5": "def even_bit_toggle_number(n): return n ^ ~(~0 << len(bin(n)) - 2)", "code_6": "def even_bit_toggle_number(n): return n ^ ~(~0 << len(format(n, 'b')))", "code_7": "def even_bit_toggle_number(n): return n ^ ~(~0 << (n.bit_length() + 1)) >> 1", "code_8": "def even_bit_toggle_number(n): return n ^ ~(~0 << (n.bit_length() + 1)) & ~1", "code_9": "def even_bit_toggle_number(n): return n ^ ~(~0 << (n.bit_length() + 1)) & ~0b10", "code_10": "def even_bit_toggle_number(n): return n ^ ~(~0 << (n.bit_length() + 1)) & ~0o2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/384", "prompt": "\n\ndef frequency_Of_Smallest(n,arr):\n    \"\"\"\n    Write a python function to find the frequency of the smallest value in a given array.\n    >>> frequency_Of_Smallest(5,[1,2,3,4,3])\n    1\n    >>> frequency_Of_Smallest(7,[3,1,2,5,6,2,3])\n    1\n    >>> frequency_Of_Smallest(7,[3,3,6,3,7,4,9])\n    3\n    \"\"\"\n", "solution": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def frequency_Of_Smallest(n,arr):\n    return arr.count(min(arr))", "code_2": "def frequency_Of_Smallest(n,arr):\n    smallest = min(arr)\n    return sum(1 for i in arr if i == smallest)", "code_3": "from collections import Counter\ndef frequency_Of_Smallest(n,arr):\n    return Counter(arr).most_common()[-1][1]", "code_4": "def frequency_Of_Smallest(n,arr):\n    return len([i for i in arr if i == min(arr)])", "code_5": "def frequency_Of_Smallest(n,arr):\n    freq = {}\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    return min(freq.values())", "code_6": "def frequency_Of_Smallest(n,arr):\n    smallest = float('inf')\n    freq = 0\n    for i in arr:\n        if i < smallest:\n            smallest = i\n            freq = 1\n        elif i == smallest:\n            freq += 1\n    return freq", "code_7": "import heapq\ndef frequency_Of_Smallest(n,arr):\n    smallest = heapq.nsmallest(1, arr)[0]\n    return arr.count(smallest)", "code_8": "def frequency_Of_Smallest(n,arr):\n    arr.sort()\n    smallest = arr[0]\n    return arr.count(smallest)", "code_9": "def frequency_Of_Smallest(n,arr):\n    smallest = min(arr)\n    freq = 0\n    for i in arr:\n        if i == smallest:\n            freq += 1\n    return freq", "code_10": "def frequency_Of_Smallest(n,arr):\n    freq = [0] * (max(arr) + 1)\n    for i in arr:\n        freq[i] += 1\n    return min(freq)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7411902110103873}
{"task_id": "MBPP/385", "prompt": "\n\ndef get_perrin(n):\n  \"\"\"\n  Write a function to find the n'th perrin number using recursion.\n  >>> get_perrin(9)\n  12\n  >>> get_perrin(4)\n  2\n  >>> get_perrin(6)\n  5\n  \"\"\"\n", "solution": "  \n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def get_perrin(n, cache={0: 3, 1: 0, 2: 2}):\n  if n not in cache:\n    cache[n] = get_perrin(n-2) + get_perrin(n-3)\n  return cache[n]", "code_2": "def get_perrin(n):\n  perrin = [3, 0, 2] + [0] * (n-2)\n  for i in range(3, n+1):\n    perrin[i] = perrin[i-2] + perrin[i-3]\n  return perrin[n]", "code_3": "def get_perrin(n):\n  a, b, c = 3, 0, 2\n  for _ in range(n-2):\n    a, b, c = b, c, a + b\n  return c", "code_4": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef get_perrin(n):\n  if n == 0:\n    return 3\n  elif n == 1 or n == 2:\n    return 0 if n == 1 else 2\n  else:\n    return get_perrin(n-2) + get_perrin(n-3)", "code_5": "def get_perrin(n):\n  return [3, 0, 2, 3, 2, 5, 5, 7, 10, 12][n]", "code_6": "def get_perrin(n):\n  return [lambda: 3, lambda: 0, lambda: 2] + [lambda i=i: get_perrin(i-2)() + get_perrin(i-3)() for i in range(3, n+1)]", "code_7": "def get_perrin(n):\n  perrin = [3, 0, 2]\n  while len(perrin) <= n:\n    perrin.append(perrin[-2] + perrin[-3])\n  return perrin[n]", "code_8": "def get_perrin(n):\n  perrin = [3, 0, 2]\n  for _ in range(n-2):\n    perrin.append(sum(perrin[-3:-1]))\n  return perrin[n]", "code_9": "def get_perrin(n):\n  perrin = [3, 0, 2]\n  while len(perrin) <= n:\n    perrin += [perrin[-2] + perrin[-3]]\n  return perrin[n]", "code_10": "def get_perrin(n):\n  perrin = [3, 0, 2]\n  for _ in range(n-2):\n    perrin += [perrin[-2] + perrin[-3]]\n  return perrin[n]", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/386", "prompt": "\n\ndef swap_count(s):\n\t\"\"\"\n\tWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\t>>> swap_count(\"[]][][\")\n\t2\n\t>>> swap_count(\"[[][]]\")\n\t0\n\t>>> swap_count(\"[[][]]][\")\n\t1\n\t\"\"\"\n", "solution": "\t\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def swap_count(s):\n    stack, count = [], 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n    return count", "code_2": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack:\n            stack.pop()\n        else:\n            count += 1\n    return count", "code_3": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n    return count // 2", "code_4": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack:\n            stack.pop()\n        else:\n            count += 2\n    return count // 2", "code_5": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n            stack.append('[')\n    return count", "code_6": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n            stack.append('[')\n    return len(stack) // 2", "code_7": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n            stack.append('[')\n    return count // 2", "code_8": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n            stack.append('[')\n    return len(stack) // 2 + count % 2", "code_9": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n            stack.append('[')\n    return count + len(stack) % 2", "code_10": "def swap_count(s):\n    stack = []\n    count = 0\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif stack and stack[-1] == '[':\n            stack.pop()\n        else:\n            count += 1\n            stack.append('[')\n    return (count + len(stack)) // 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/387", "prompt": "\n\ndef even_or_odd(N):\n    \"\"\"\n    Write a python function to check whether the hexadecimal number is even or odd.\n    >>> even_or_odd(\"AB3454D\")\n    \"Odd\"\n    >>> even_or_odd(\"ABC\")\n    \"Even\"\n    >>> even_or_odd(\"AAD\")\n    \"Odd\"\n    \"\"\"\n", "solution": "     \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def even_or_odd(N): return 'Even' if int(N, 16) % 2 == 0 else 'Odd'", "code_2": "def even_or_odd(N): return ['Odd', 'Even'][int(N, 16) % 2]", "code_3": "def even_or_odd(N): return 'Odd' if int(N, 16) & 1 else 'Even'", "code_4": "def even_or_odd(N): return 'Even' if not int(N, 16) & 1 else 'Odd'", "code_5": "def even_or_odd(N): return 'Odd' if bin(int(N, 16))[-1] == '1' else 'Even'", "code_6": "def even_or_odd(N): return 'Odd' if int(N[-1], 16) % 2 else 'Even'", "code_7": "def even_or_odd(N): return 'Odd' if int(N[-1], 16) & 1 else 'Even'", "code_8": "def even_or_odd(N): return 'Odd' if int(N[-1], 16) in [1, 3, 5, 7, 9, 11, 13, 15] else 'Even'", "code_9": "def even_or_odd(N): return 'Odd' if int(N[-1], 16) in {1, 3, 5, 7, 9, 11, 13, 15} else 'Even'", "code_10": "def even_or_odd(N): return 'Odd' if int(N[-1], 16) in range(1, 16, 2) else 'Even'", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/388", "prompt": "\n\ndef highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n", "solution": "     \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ", "results": [1, 0, 1, 0, 0, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def highest_Power_of_2(n): return 1 << (n.bit_length() - 1)", "code_2": "def highest_Power_of_2(n): return 2 ** (n - 1).bit_length()", "code_3": "def highest_Power_of_2(n): return 1 << len(bin(n)) - 3", "code_4": "def highest_Power_of_2(n): return 2 ** int(math.log2(n))", "code_5": "def highest_Power_of_2(n): return 2 ** math.floor(math.log2(n))", "code_6": "def highest_Power_of_2(n): return 1 if n == 0 else 2 ** (n - 1).bit_length()", "code_7": "def highest_Power_of_2(n): return 1 << (len(bin(n)) - 3)", "code_8": "def highest_Power_of_2(n): return 2 ** (len(bin(n)) - 3)", "code_9": "def highest_Power_of_2(n): return 1 << (n.bit_length() - 2) if n > 0 else 0", "code_10": "def highest_Power_of_2(n): return 2 ** (len(bin(n)) - 3) if n > 0 else 0", "pass@3": 0.9166666666666666, "nDCG@10": 0.5365535816822092}
{"task_id": "MBPP/389", "prompt": "\n\ndef find_lucas(n):\n\t\"\"\"\n\tWrite a function to find the n'th lucas number.\n\t>>> find_lucas(9)\n\t76\n\t>>> find_lucas(4)\n\t7\n\t>>> find_lucas(3)\n\t4\n\t\"\"\"\n", "solution": "\t \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "results": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_lucas(n):\n    a, b = 2, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a", "code_2": "def find_lucas(n):\n    return (1 if n == 0 else (2 if n == 1 else find_lucas(n - 1) + find_lucas(n - 2)))", "code_3": "def find_lucas(n):\n    lucas = [2, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        lucas[i] = lucas[i - 1] + lucas[i - 2]\n    return lucas[n]", "code_4": "def find_lucas(n):\n    lucas = [2, 1]\n    while len(lucas) <= n:\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[n]", "code_5": "def find_lucas(n):\n    lucas = [2, 1]\n    for _ in range(n - 1):\n        lucas.append(sum(lucas[-2:]))\n    return lucas[n]", "code_6": "def find_lucas(n):\n    lucas = [2, 1]\n    while len(lucas) < n + 1:\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[n]", "code_7": "def find_lucas(n):\n    lucas = [2, 1]\n    for _ in range(n - 1):\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[n]", "code_8": "def find_lucas(n):\n    lucas = [2, 1]\n    for _ in range(n - 1):\n        lucas.append(sum(lucas[-2:]))\n    return lucas[n]", "code_9": "def find_lucas(n):\n    lucas = [2, 1]\n    while len(lucas) < n + 1:\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[n]", "code_10": "def find_lucas(n):\n    lucas = [2, 1]\n    for _ in range(n - 1):\n        lucas.append(lucas[-1] + lucas[-2])\n    return lucas[n]", "pass@3": 1.0, "nDCG@10": 0.6410457898283654}
{"task_id": "MBPP/390", "prompt": "\n\ndef add_string(list,string):\n \"\"\"\n Write a function to insert a given string at the beginning of all items in a list.\n >>> add_string([1,2,3,4],'temp{0}')\n ['temp1', 'temp2', 'temp3', 'temp4']\n >>> add_string(['a','b','c','d'], 'python{0}')\n [ 'pythona', 'pythonb', 'pythonc', 'pythond']\n >>> add_string([5,6,7,8],'string{0}')\n ['string5', 'string6', 'string7', 'string8']\n \"\"\"\n", "solution": " \n add_string=[string.format(i) for i in  list]\n return add_string", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "List comprehension:\ndef add_string(lst, s):\n    return [s.format(i) for i in lst]", "code_2": "Map function:\ndef add_string(lst, s):\n    return list(map(lambda x: s.format(x), lst))", "code_3": "List comprehension with join:\ndef add_string(lst, s):\n    return [s[:-3] + str(i) for i in lst]", "code_4": "List comprehension with f-string:\ndef add_string(lst, s):\n    return [s.format(i) for i in lst]", "code_5": "List comprehension with % operator:\ndef add_string(lst, s):\n    return [s % i for i in lst]", "code_6": "Generator expression with join:\ndef add_string(lst, s):\n    return [s[:-3] + str(i) for i in lst]", "code_7": "Generator expression with format:\ndef add_string(lst, s):\n    return list(s.format(i) for i in lst)", "code_8": "Recursive function:\ndef add_string(lst, s):\n    if not lst:\n        return []\n    return [s.format(lst[0])] + add_string(lst[1:], s)", "code_9": "Reduce function:\nfrom functools import reduce\ndef add_string(lst, s):\n    return reduce(lambda x, y: x + [s.format(y)], lst, [])", "code_10": "Using a for loop:\ndef add_string(lst, s):\n    result = []\n    for i in lst:\n        result.append(s.format(i))\n    return result", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/391", "prompt": "\n\ndef convert_list_dictionary(l1, l2, l3):\n     \"\"\"\n     Write a function to convert more than one list to nested dictionary.\n     >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n     [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n     >>> convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])\n     [{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n     >>> convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])\n     [{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n     \"\"\"\n", "solution": "     \n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def convert_list_dictionary(l1, l2, l3):\n    return [{i: {j: k}} for i, j, k in zip(l1, l2, l3)]", "code_2": "def convert_list_dictionary(l1, l2, l3):\n    return list(map(lambda x, y, z: {x: {y: z}}, l1, l2, l3))", "code_3": "def convert_list_dictionary(l1, l2, l3):\n    return [{k1: {k2: v}} for k1, k2, v in zip(l1, l2, l3)]", "code_4": "def convert_list_dictionary(l1, l2, l3):\n    return [{k: {v: l3[i]}} for i, (k, v) in enumerate(zip(l1, l2))]", "code_5": "def convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]", "code_6": "def convert_list_dictionary(l1, l2, l3):\n    return [{k: {v: l3[i]}} for i, (k, v) in enumerate(zip(l1, l2))]", "code_7": "def convert_list_dictionary(l1, l2, l3):\n    return [{k1: {k2: v}} for k1, k2, v in zip(l1, l2, l3)]", "code_8": "def convert_list_dictionary(l1, l2, l3):\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]", "code_9": "def convert_list_dictionary(l1, l2, l3):\n    return [{k: {v: l3[i]}} for i, (k, v) in enumerate(zip(l1, l2))]", "code_10": "def convert_list_dictionary(l1, l2, l3):\n    return [{k1: {k2: v}} for k1, k2, v in zip(l1, l2, l3)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/392", "prompt": "\n\ndef get_max_sum (n):\n\t\"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t>>> get_max_sum(60)\n\t106\n\t>>> get_max_sum(10)\n\t12\n\t>>> get_max_sum(2)\n\t2\n\t\"\"\"\n", "solution": "\t\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]", "results": [1, 0, 1, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_max_sum(n, dp={}):\n    if n in dp: return dp[n]\n    if n < 2: return n\n    dp[n] = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return dp[n]", "code_2": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i)\n    return dp[n]", "code_3": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef get_max_sum(n):\n    if n < 2: return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)", "code_4": "def get_max_sum(n):\n    dp = [0, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i)\n    return dp[n]", "code_5": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i//j] for j in range(2, 6)) + i % 5\n    return dp[n]", "code_6": "def get_max_sum(n):\n    dp = [0, 1]\n    for i in range(2, n + 1):\n        dp.append(max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i))\n    return dp[n]", "code_7": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i//j] for j in (2, 3, 4, 5)) + i % 5\n    return dp[n]", "code_8": "def get_max_sum(n):\n    dp = [0, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i//j] for j in range(2, 6)) + i % 5\n    return dp[n]", "code_9": "def get_max_sum(n):\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4], dp[i//5] + i)\n    return dp[n]", "code_10": "def get_max_sum(n):\n    dp = [0, 1]\n    for i in range(2, n + 1):\n        dp.append(max(dp[i//j] for j in (2, 3, 4, 5)) + i % 5)\n    return dp[n]", "pass@3": 0.8333333333333334, "nDCG@10": 0.5033242827953465}
{"task_id": "MBPP/393", "prompt": "\n\ndef max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length using lambda function.\n    >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n    (5,[1,2,3,4,5])\n    >>> max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])\n    (4,[6,7,8,9])\n    \"\"\"\n", "solution": "    \n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)", "results": [0, 0, 0, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "max_length_list = lambda lst: max(lst, key=len)", "code_2": "max_length_list = lambda lst: sorted(lst, key=len, reverse=True)[0]", "code_3": "max_length_list = lambda lst: reduce(lambda x, y: x if len(x) > len(y) else y, lst)", "code_4": "max_length_list = lambda lst: (len(max(lst, key=len)), max(lst, key=len))", "code_5": "max_length_list = lambda lst: (len(max(lst, key=lambda x: len(x))), max(lst, key=lambda x: len(x)))", "code_6": "max_length_list = lambda lst: next((len(x), x) for x in sorted(lst, key=len, reverse=True))", "code_7": "max_length_list = lambda lst: (len(max(lst, key=lambda x: (len(x), x))), max(lst, key=lambda x: (len(x), x)))", "code_8": "max_length_list = lambda lst: max(map(lambda x: (len(x), x), lst))", "code_9": "max_length_list = lambda lst: max(lst, key=lambda x: (len(x), x))", "code_10": "max_length_list = lambda lst: max(lst, key=lambda x: (len(x), -sum(x)))", "pass@3": 0.9166666666666666, "nDCG@10": 0.4011248950259845}
{"task_id": "MBPP/394", "prompt": "\n\ndef check_distinct(test_tup):\n  \"\"\"\n  Write a function to check if given tuple is distinct or not.\n  >>> check_distinct((1, 4, 5, 6, 1, 4))\n  False\n  >>> check_distinct((1, 4, 5, 6))\n  True\n  >>> check_distinct((2, 3, 4, 5, 6))\n  True\n  \"\"\"\n", "solution": "  \n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))", "code_2": "def check_distinct(test_tup):\n    return all(test_tup.count(i) == 1 for i in test_tup)", "code_3": "def check_distinct(test_tup):\n    return sorted(test_tup) == sorted(set(test_tup))", "code_4": "def check_distinct(test_tup):\n    return len({}.fromkeys(test_tup)) == len(test_tup)", "code_5": "def check_distinct(test_tup):\n    return not any(test_tup.count(i) > 1 for i in test_tup)", "code_6": "def check_distinct(test_tup):\n    return len(test_tup) == sum(1 for _ in set(test_tup))", "code_7": "def check_distinct(test_tup):\n    return all(map(lambda x: test_tup.count(x) == 1, test_tup))", "code_8": "def check_distinct(test_tup):\n    return all(test_tup.index(i) == test_tup.rindex(i) for i in test_tup)", "code_9": "def check_distinct(test_tup):\n    return all(test_tup.count(i) == 1 for i in set(test_tup))", "code_10": "def check_distinct(test_tup):\n    return all(test_tup.count(i) == 1 for i in dict.fromkeys(test_tup))", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/395", "prompt": "\n\ndef first_non_repeating_character(str1):\n  \"\"\"\n  Write a python function to find the first non-repeated character in a given string.\n  >>> first_non_repeating_character(\"abcabc\")\n  None\n  >>> first_non_repeating_character(\"abc\")\n  \"a\"\n  >>> first_non_repeating_character(\"ababc\")\n  \"c\"\n  \"\"\"\n", "solution": "  \n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "results": [1, 0, 1, 1, 1, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def first_non_repeating_character(str1):\n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "code_2": "def first_non_repeating_character(str1):\n    count = collections.Counter(str1)\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "code_3": "def first_non_repeating_character(str1):\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None", "code_4": "def first_non_repeating_character(str1):\n    for i, char in enumerate(str1):\n        if str1.count(char) == 1:\n            return char\n    return None", "code_5": "def first_non_repeating_character(str1):\n    count = [0] * 256\n    for char in str1:\n        count[ord(char)] += 1\n    for char in str1:\n        if count[ord(char)] == 1:\n            return char\n    return None", "code_6": "def first_non_repeating_character(str1):\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "code_7": "def first_non_repeating_character(str1):\n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    for char, freq in count.items():\n        if freq == 1:\n            return char\n    return None", "code_8": "def first_non_repeating_character(str1):\n    count = collections.defaultdict(int)\n    for char in str1:\n        count[char] += 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "code_9": "def first_non_repeating_character(str1):\n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "code_10": "def first_non_repeating_character(str1):\n    count = collections.Counter(str1)\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "pass@3": 0.9916666666666667, "nDCG@10": 0.7280855459907166}
{"task_id": "MBPP/396", "prompt": "\n\ndef check_char(string):\n\t\"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not using regex.\n\t>>> check_char(\"abba\")\n\t\"Valid\"\n\t>>> check_char(\"a\")\n\t\"Valid\"\n\t>>> check_char(\"abcd\")\n\t\"Invalid\"\n\t\"\"\"\n", "solution": "\timport re  \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ", "results": [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef check_char(string):\n    return \"Valid\" if re.match(r'^(.).*\\1$', string) else \"Invalid\"", "code_2": "import re\ndef check_char(string):\n    return \"Valid\" if re.fullmatch(r'(.).*\\1', string) else \"Invalid\"", "code_3": "import re\ndef check_char(string):\n    return \"Valid\" if re.search(r'^(.).*\\1$', string) else \"Invalid\"", "code_4": "import re\ndef check_char(string):\n    return \"Valid\" if re.compile(r'^(.).*\\1$').match(string) else \"Invalid\"", "code_5": "import re\ndef check_char(string):\n    return \"Valid\" if string[0] == string[-1] else \"Invalid\"", "code_6": "def check_char(string):\n    return \"Valid\" if string and string[0] == string[-1] else \"Invalid\"", "code_7": "def check_char(string):\n    return \"Valid\" if len(string) > 1 and string[0] == string[-1] else \"Invalid\"", "code_8": "def check_char(string):\n    return \"Valid\" if string and string[0] == string[-1] and len(string) > 1 else \"Invalid\"", "code_9": "def check_char(string):\n    return \"Valid\" if string[0] == string[-1] and len(string) > 1 else \"Invalid\"", "code_10": "def check_char(string):\n    return \"Valid\" if string and string[0] == string[-1] and len(string) > 1 else \"Invalid\"", "pass@3": 0.5333333333333333, "nDCG@10": 0.16354138662029635}
{"task_id": "MBPP/397", "prompt": "\n\ndef median_numbers(a,b,c):\n \"\"\"\n Write a function to find the median of three specific numbers.\n >>> median_numbers(25,55,65)\n 55.0\n >>> median_numbers(20,10,30)\n 20.0\n >>> median_numbers(15,45,75)\n 45.0\n \"\"\"\n", "solution": " \n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "results": [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def median_numbers(a, b, c):\n    return a + b + c - min(a, b, c) - max(a, b, c)", "code_2": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]", "code_3": "def median_numbers(a, b, c):\n    if a < b < c or c < b < a:\n        return b\n    elif a < c < b or b < c < a:\n        return c\n    else:\n        return a", "code_4": "def median_numbers(a, b, c):\n    return (a if a < b else b) if (a if a < c else c) < b else (b if b < c else c)", "code_5": "def median_numbers(a, b, c):\n    return sum([a, b, c]) - max(a, b, c) - min(a, b, c)", "code_6": "def median_numbers(a, b, c):\n    return a + b + c - max(a, b, c) - min(a, b, c)", "code_7": "def median_numbers(a, b, c):\n    return (a if a < b else b) if (a if a < c else c) < b else (b if b < c else c)", "code_8": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]", "code_9": "def median_numbers(a, b, c):\n    return a + b + c - max(a, b, c) - min(a, b, c)", "code_10": "def median_numbers(a, b, c):\n    return (a if a < b else b) if (a if a < c else c) < b else (b if b < c else c)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7682269253321375}
{"task_id": "MBPP/398", "prompt": "\n\ndef sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    >>> sum_of_digits([10,2,56])\n    14\n    >>> sum_of_digits([[10,20,4,5,'b',70,'a']])\n    19\n    >>> sum_of_digits([10,20,-4,5,-70])\n    19\n    \"\"\"\n", "solution": "    \n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "results": [1, 1, 0, 0, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_of_digits(nums):\n    return sum(int(d) for n in nums for d in str(n) if d.isdigit())", "code_2": "def sum_of_digits(nums):\n    return sum(map(int, ''.join(filter(str.isdigit, str(nums)))))", "code_3": "def sum_of_digits(nums):\n    return sum(sum(map(int, str(n))) for n in nums if isinstance(n, int))", "code_4": "def sum_of_digits(nums):\n    return sum(sum(map(int, str(n))) for n in nums if type(n) == int)", "code_5": "def sum_of_digits(nums):\n    return sum(sum(int(d) for d in str(n)) for n in nums if isinstance(n, int))", "code_6": "def sum_of_digits(nums):\n    return sum(sum(map(int, str(n))) for n in nums if type(n) is int)", "code_7": "def sum_of_digits(nums):\n    return sum(sum(int(d) for d in str(n) if d.isdigit()) for n in nums)", "code_8": "def sum_of_digits(nums):\n    return sum(sum(map(int, filter(str.isdigit, str(n)))) for n in nums)", "code_9": "def sum_of_digits(nums):\n    return sum(sum(int(d) for d in str(n) if d.isnumeric()) for n in nums)", "code_10": "def sum_of_digits(nums):\n    return sum(sum(map(int, filter(str.isdecimal, str(n)))) for n in nums)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6316243658611128}
{"task_id": "MBPP/399", "prompt": "\n\ndef bitwise_xor(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n  (15, 6, 5, 10)\n  >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n  (13, 6, 3, 14)\n  >>> bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n  (11, 2, 13, 13)\n  \"\"\"\n", "solution": "  \n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def bitwise_xor(t1, t2): return tuple(a ^ b for a, b in zip(t1, t2))", "code_2": "import operator\ndef bitwise_xor(t1, t2): return tuple(map(operator.xor, t1, t2))", "code_3": "from functools import reduce\ndef bitwise_xor(t1, t2): return reduce(lambda x, y: x + (y[0] ^ y[1],), zip(t1, t2), ())", "code_4": "import numpy as np\ndef bitwise_xor(t1, t2): return tuple(np.bitwise_xor(t1, t2))", "code_5": "def bitwise_xor(t1, t2): return tuple(i ^ j for i, j in zip(t1, t2))", "code_6": "def bitwise_xor(t1, t2): return tuple(map(lambda x: x[0] ^ x[1], zip(t1, t2)))", "code_7": "def bitwise_xor(t1, t2): return tuple(i ^ j for i, j in zip(list(t1), list(t2)))", "code_8": "def bitwise_xor(t1, t2): return tuple(i ^ j for i, j in zip(list(t1), t2))", "code_9": "def bitwise_xor(t1, t2): return tuple(i ^ j for i, j in enumerate(zip(t1, t2)))", "code_10": "def bitwise_xor(t1, t2): return tuple(i ^ j for i, j in zip(t1, list(t2)))", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/400", "prompt": "\n\ndef extract_freq(test_list):\n  \"\"\"\n  Write a function to extract the frequency of unique tuples in the given list order irrespective.\n  >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )\n  3\n  >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] )\n  4\n  >>> extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] )\n  4\n  \"\"\"\n", "solution": "  \n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)", "results": [1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def extract_freq(test_list):\n  return len(set(tuple(sorted(t)) for t in test_list))", "code_2": "def extract_freq(test_list):\n  return len({frozenset(t) for t in test_list})", "code_3": "def extract_freq(test_list):\n  return len({(min(t), max(t)) for t in test_list})", "code_4": "def extract_freq(test_list):\n  return len({hash(t) for t in test_list})", "code_5": "def extract_freq(test_list):\n  return len(set(map(lambda t: (t[0], t[1]) if t[0] < t[1] else (t[1], t[0]), test_list)))", "code_6": "def extract_freq(test_list):\n  return len(set(map(sorted, test_list)))", "code_7": "def extract_freq(test_list):\n  return len({t if t[0] < t[1] else (t[1], t[0]) for t in test_list})", "code_8": "def extract_freq(test_list):\n  return len({tuple(sorted(t)) for t in test_list})", "code_9": "def extract_freq(test_list):\n  return len({(t[0], t[1]) if t[0] < t[1] else (t[1], t[0]) for t in test_list})", "code_10": "def extract_freq(test_list):\n  return len({(t[0], t[1]) if t[0] <= t[1] else (t[1], t[0]) for t in test_list})", "pass@3": 1.0, "nDCG@10": 0.826813366651774}
{"task_id": "MBPP/401", "prompt": "\n\ndef add_nested_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n  >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((7, 10), (7, 14), (3, 10), (8, 13))\n  >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n  ((9, 12), (9, 16), (5, 12), (10, 15))\n  >>> add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n  ((11, 14), (11, 18), (7, 14), (12, 17))\n  \"\"\"\n", "solution": "  \n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(a+b for a, b in zip(t1[i], t2[i])) for i in range(len(t1)))", "code_2": "def add_nested_tuples(t1, t2):\n    return tuple(map(lambda x, y: (x[0]+y[0], x[1]+y[1]), t1, t2))", "code_3": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(sum(i) for i in zip(*t)) for t in zip(t1, t2))", "code_4": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(map(sum, zip(*t))) for t in zip(t1, t2))", "code_5": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(i+j for i, j in zip(t1[i], t2[i])) for i in range(len(t1)))", "code_6": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(sum(pair) for pair in zip(t1[i], t2[i])) for i in range(len(t1)))", "code_7": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(map(operator.add, t1[i], t2[i])) for i in range(len(t1)))", "code_8": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(a+b for a, b in zip(t1[i], t2[i])) for i in range(len(t1)))", "code_9": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(map(lambda x, y: x+y, t1[i], t2[i])) for i in range(len(t1)))", "code_10": "def add_nested_tuples(t1, t2):\n    return tuple(tuple(map(operator.add, *t)) for t in zip(t1, t2))", "pass@3": 1.0, "nDCG@10": 0.8630152897016883}
{"task_id": "MBPP/402", "prompt": "\n\ndef ncr_modp(n, r, p):\n    \"\"\"\n    Write a function to compute the value of ncr%p.\n    >>> ncr_modp(10,2,13)\n    6\n    >>> ncr_modp(15,12,43)\n    25\n    >>> ncr_modp(17,9,18)\n    10\n    \"\"\"\n", "solution": "     \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "results": [1, 0, 0, 0, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def ncr_modp(n, r, p):\n    C = [0 for _ in range(r+1)]\n    C[0] = 1\n    for i in range(1, n+1):\n        j = min(i, r)\n        while j > 0:\n            C[j] = (C[j] + C[j-1]) % p\n            j -= 1\n    return C[r]", "code_2": "def ncr_modp(n, r, p):\n    num, den = 1, 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p", "code_3": "def ncr_modp(n, r, p):\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (i * fact[i - 1]) % p\n    return (fact[n] * pow(fact[r] * fact[n - r], p - 2, p)) % p", "code_4": "def ncr_modp(n, r, p):\n    if r > n - r:\n        r = n - r\n    num, den = 1, 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p", "code_5": "def ncr_modp(n, r, p):\n    C = [[0 for _ in range(r+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, r)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i-1][j-1] + C[i-1][j]) % p\n    return C[n][r]", "code_6": "def ncr_modp(n, r, p):\n    C = [0 for _ in range(r+1)]\n    C[0] = 1\n    for i in range(1, n+1):\n        j = min(i, r)\n        while j > 0:\n            C[j] = (C[j] + C[j-1]) % p\n            j -= 1\n        C[0] = 1\n    return C[r]", "code_7": "def ncr_modp(n, r, p):\n    fact = [1] * (n + 1)\n    inv = [1] * (n + 1)\n    inv[1] = 1\n    for i in range(2, n + 1):\n        fact[i] = (i * fact[i - 1]) % p\n        inv[i] = (p - p // i * inv[p % i] % p) % p\n    return (fact[n] * inv[r] * inv[n - r]) % p", "code_8": "def ncr_modp(n, r, p):\n    C = [[0 for _ in range(r+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(min(i, r)+1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = (C[i-1][j-1] + C[i-1][j]) % p\n    return C[n][r]", "code_9": "def ncr_modp(n, r, p):\n    C = [0 for _ in range(r+1)]\n    C[0] = 1\n    for i in range(1, n+1):\n        j = min(i, r)\n        while j > 0:\n            C[j] = (C[j] + C[j-1]) % p\n            j -= 1\n        C[0] = 1\n    return C[r] % p", "code_10": "def ncr_modp(n, r, p):\n    fact = [1] * (n + 1)\n    inv = [1] * (n + 1)\n    inv[1] = 1\n    for i in range(2, n + 1):\n        fact[i] = (i * fact[i - 1]) % p\n        inv[i] = (p - p // i * inv[p % i] % p) % p\n    return (fact[n] * inv[r] * inv[n - r]) % p", "pass@3": 0.9166666666666666, "nDCG@10": 0.5193185983095429}
{"task_id": "MBPP/403", "prompt": "\n\ndef is_valid_URL(str):\n\t\"\"\"\n\tWrite a function to check if a url is valid or not using regex.\n\t>>> is_valid_URL(\"https://www.google.com\")\n\tTrue\n\t>>> is_valid_URL(\"https:/www.gmail.com\")\n\tFalse\n\t>>> is_valid_URL(\"https:// www.redit.com\")\n\tFalse\n\t\"\"\"\n", "solution": "\timport re\n\t\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef is_valid_URL(str):\n    pattern = re.compile(r'^https://[a-z0-9.-]+\\.[a-z]{2,}$')\n    return bool(pattern.match(str))", "code_2": "import re\ndef is_valid_URL(str):\n    return bool(re.match(r'^https://\\S+\\.\\S+$', str))", "code_3": "import re\ndef is_valid_URL(str):\n    return re.fullmatch(r'https://[^/\\s]+', str) is not None", "code_4": "import re\ndef is_valid_URL(str):\n    return re.search(r'^https://\\S+\\.\\S+$', str) is not None", "code_5": "import re\ndef is_valid_URL(str):\n    return re.match(r'^https://[a-z0-9.-]+\\.[a-z]{2,}$', str) is not None", "code_6": "import re\ndef is_valid_URL(str):\n    return re.fullmatch(r'https://[^/\\s]+\\.[^/\\s]+', str) is not None", "code_7": "import re\ndef is_valid_URL(str):\n    return re.fullmatch(r'https://[a-z0-9.-]+\\.[a-z]{2,}', str) is not None", "code_8": "import re\ndef is_valid_URL(str):\n    return re.fullmatch(r'https://[^/\\s]+\\.[a-z]{2,}', str) is not None", "code_9": "import re\ndef is_valid_URL(str):\n    return re.match(r'^https://[^/\\s]+\\.[^/\\s]+$', str) is not None", "code_10": "import re\ndef is_valid_URL(str):\n    return re.fullmatch(r'https://[a-z0-9.-]+\\.[a-z]{2,6}', str) is not None", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/404", "prompt": "\n\ndef minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    >>> minimum(1,2)\n    1\n    >>> minimum(-5,-4)\n    -5\n    >>> minimum(0,0)\n    0\n    \"\"\"\n", "solution": "       \n    if a <= b: \n        return a \n    else: \n        return b ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def minimum(a, b):\n    return a if a < b else b", "code_2": "def minimum(a, b):\n    return min(a, b)", "code_3": "def minimum(a, b):\n    return a if a <= b else b", "code_4": "def minimum(a, b):\n    return a if a - b < 0 else b", "code_5": "def minimum(a, b):\n    return a if a < b else a if a == b else b", "code_6": "def minimum(a, b):\n    return a if a < b else b if b < a else a", "code_7": "def minimum(a, b):\n    return a if a < b else b if b != a else a", "code_8": "def minimum(a, b):\n    return a if a <= b else b if b <= a else None", "code_9": "def minimum(a, b):\n    return a if a < b else b if b < a else None", "code_10": "def minimum(a, b):\n    return a if a != b else a if a < b else b", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/405", "prompt": "\n\ndef check_tuplex(tuplex,tuple1):\n  \"\"\"\n  Write a function to check whether an element exists within a tuple.\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')\n  True\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')\n  False\n  >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)\n  True\n  \"\"\"\n", "solution": "   \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def check_tuplex(tuplex, element):\n    return element in tuplex", "code_2": "def check_tuplex(tuplex, element):\n    try:\n        tuplex.index(element)\n        return True\n    except ValueError:\n        return False", "code_3": "def check_tuplex(tuplex, element):\n    for i in tuplex:\n        if i == element:\n            return True\n    return False", "code_4": "def check_tuplex(tuplex, element):\n    return any(i == element for i in tuplex)", "code_5": "def check_tuplex(tuplex, element):\n    return sum(i == element for i in tuplex) > 0", "code_6": "def check_tuplex(tuplex, element):\n    return bool(tuplex.count(element))", "code_7": "def check_tuplex(tuplex, element):\n    return set([element]).issubset(set(tuplex))", "code_8": "def check_tuplex(tuplex, element):\n    return len(tuplex) != len(set(tuplex) - {element})", "code_9": "def check_tuplex(tuplex, element):\n    return len(tuplex) - len(tuple(i for i in tuplex if i != element)) > 0", "code_10": "def check_tuplex(tuplex, element):\n    return reduce(lambda x, y: x or y == element, tuplex, False)", "pass@3": 1.0, "nDCG@10": 0.8669479898642711}
{"task_id": "MBPP/406", "prompt": "\n\ndef find_Parity(x):\n    \"\"\"\n    Write a python function to find the parity of a given number.\n    >>> find_Parity(12)\n    \"Even Parity\"\n    >>> find_Parity(7)\n    \"Odd Parity\"\n    >>> find_Parity(10)\n    \"Even Parity\"\n    \"\"\"\n", "solution": "     \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_Parity(x):\n    return \"Even Parity\" if x % 2 == 0 else \"Odd Parity\"", "code_2": "def find_Parity(x):\n    return [\"Even Parity\", \"Odd Parity\"][x % 2]", "code_3": "def find_Parity(x):\n    return \"Odd Parity\" if bin(x).count('1') % 2 else \"Even Parity\"", "code_4": "def find_Parity(x):\n    return \"Even Parity\" if not x & 1 else \"Odd Parity\"", "code_5": "def find_Parity(x):\n    return \"Even Parity\" if sum(int(i) for i in str(x)) % 2 == 0 else \"Odd Parity\"", "code_6": "def find_Parity(x):\n    return \"Even Parity\" if x ^ (x - 1) & 1 == 0 else \"Odd Parity\"", "code_7": "def find_Parity(x):\n    return \"Even Parity\" if x >> 1 << 1 == x else \"Odd Parity\"", "code_8": "def find_Parity(x):\n    return \"Even Parity\" if x.bit_count() % 2 == 0 else \"Odd Parity\"", "code_9": "def find_Parity(x):\n    return \"Even Parity\" if x.bit_length() % 2 == 0 else \"Odd Parity\"", "code_10": "def find_Parity(x):\n    return \"Even Parity\" if len(bin(x)[2:]) % 2 == 0 else \"Odd Parity\"", "pass@3": 1.0, "nDCG@10": 0.8364586133797037}
{"task_id": "MBPP/407", "prompt": "\n\ndef rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(10)\n    False\n    >>> rearrange_bigger(102)\n    120\n    \"\"\"\n", "solution": "    \n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "from itertools import permutations\ndef rearrange_bigger(n):\n    nums = sorted(''.join(p) for p in permutations(str(n), len(str(n))))\n    return int(next((x for x in nums if x > str(n)), False))", "code_2": "def rearrange_bigger(n):\n    s = list(str(n))\n    for i in range(len(s) - 2, -1, -1):\n        if s[i] < s[i + 1]:\n            break\n    else:\n        return False\n    for j in range(len(s) - 1, i, -1):\n        if s[j] > s[i]:\n            break\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = reversed(s[i + 1:])\n    return int(''.join(s))", "code_3": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i], s[j] = s[j], s[i]\n    s[i + 1:] = reversed(s[i + 1:])\n    return int(''.join(s))", "code_4": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = i + 1\n    while j < len(s) and s[j] > s[i]:\n        j += 1\n    s[i], s[j - 1] = s[j - 1], s[i]\n    s[i + 1:] = reversed(s[i + 1:])\n    return int(''.join(s))", "code_5": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i:j] = reversed(s[i:j])\n    s[i], s[j] = s[j], s[i]\n    return int(''.join(s))", "code_6": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i:j + 1] = s[i:j + 1][::-1]\n    return int(''.join(s))", "code_7": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i:] = sorted(s[i:])\n    k = i + 1\n    while s[k] <= s[i]:\n        k += 1\n    s[i], s[k] = s[k], s[i]\n    return int(''.join(s))", "code_8": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i:] = sorted(s[i:], reverse=True)\n    k = i + 1\n    while s[k] <= s[i]:\n        k += 1\n    s[i], s[k] = s[k], s[i]\n    return int(''.join(s))", "code_9": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i:] = sorted(s[i:])\n    k = bisect.bisect_right(s, s[i], i + 1)\n    s[i], s[k] = s[k], s[i]\n    return int(''.join(s))", "code_10": "def rearrange_bigger(n):\n    s = list(str(n))\n    i = len(s) - 2\n    while i >= 0 and s[i] >= s[i + 1]:\n        i -= 1\n    if i == -1:\n        return False\n    j = len(s) - 1\n    while s[j] <= s[i]:\n        j -= 1\n    s[i:] = sorted(s[i:])\n    k = bisect.bisect_right(s, s[i], i + 1, j)\n    s[i], s[k] = s[k], s[i]\n    return int(''.join(s))", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/408", "prompt": "\n\ndef k_smallest_pairs(nums1, nums2, k):\n   \"\"\"\n   Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n   >>> k_smallest_pairs([1,3,7],[2,4,6],2)\n   [[1, 2], [1, 4]]\n   >>> k_smallest_pairs([1,3,7],[2,4,6],1)\n   [[1, 2]]\n   >>> k_smallest_pairs([1,3,7],[2,4,6],7)\n   [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n   \"\"\"\n", "solution": "   import heapq\n   \n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs", "results": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "code_2": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            heapq.heappush(queue, (-nums1[i] - nums2[j], nums1[i], nums2[j]))\n    return [[-i, j] for _, i, j in heapq.nsmallest(k, queue)]", "code_3": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n    return pairs", "code_4": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n    return pairs", "code_5": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n            if i + 2 < len(nums1):\n                heapq.heappush(queue, (nums1[i + 2] + nums2[0], i + 2, 0))\n    return pairs", "code_6": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n        if j == 0 and i + 2 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 2] + nums2[0], i + 2, 0))\n    return pairs", "code_7": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n        if j == 0 and i + 2 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 2] + nums2[0], i + 2, 0))\n        if j == 0 and i + 3 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 3] + nums2[0], i + 3, 0))\n    return pairs", "code_8": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n        if j == 0 and i + 2 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 2] + nums2[0], i + 2, 0))\n        if j == 0 and i + 3 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 3] + nums2[0], i + 3, 0))\n        if j == 0 and i + 4 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 4] + nums2[0], i + 4, 0))\n    return pairs", "code_9": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n        if j == 0 and i + 2 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 2] + nums2[0], i + 2, 0))\n        if j == 0 and i + 3 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 3] + nums2[0], i + 3, 0))\n        if j == 0 and i + 4 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 4] + nums2[0], i + 4, 0))\n        if j == 0 and i + 5 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 5] + nums2[0], i + 5, 0))\n    return pairs", "code_10": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = [(nums1[i] + nums2[0], i, 0) for i in range(min(k, len(nums1)))]\n    heapq.heapify(queue)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(queue, (nums1[i] + nums2[j + 1], i, j + 1))\n        if j == 0 and i + 1 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 1] + nums2[0], i + 1, 0))\n        if j == 0 and i + 2 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 2] + nums2[0], i + 2, 0))\n        if j == 0 and i + 3 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 3] + nums2[0], i + 3, 0))\n        if j == 0 and i + 4 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 4] + nums2[0], i + 4, 0))\n        if j == 0 and i + 5 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 5] + nums2[0], i + 5, 0))\n        if j == 0 and i + 6 < len(nums1):\n            heapq.heappush(queue, (nums1[i + 6] + nums2[0], i + 6, 0))\n    return pairs", "pass@3": 0.5333333333333333, "nDCG@10": 0.3301376494471203}
{"task_id": "MBPP/409", "prompt": "\n\ndef min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n    8\n    >>> min_product_tuple([(10,20), (15,2), (5,10)] )\n    30\n    >>> min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\n    100\n    \"\"\"\n", "solution": "    \n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_product_tuple(lst):\n    return min(a*b for a, b in lst)", "code_2": "def min_product_tuple(lst):\n    return sorted(a*b for a, b in lst)[0]", "code_3": "def min_product_tuple(lst):\n    return min(map(lambda x: x[0]*x[1], lst))", "code_4": "def min_product_tuple(lst):\n    return min(reduce(lambda x, y: x*y, t) for t in lst)", "code_5": "def min_product_tuple(lst):\n    return min(functools.reduce(operator.mul, t) for t in lst)", "code_6": "def min_product_tuple(lst):\n    return min(prod(t) for t in lst)", "code_7": "def min_product_tuple(lst):\n    return min(math.prod(t) for t in lst)", "code_8": "def min_product_tuple(lst):\n    return min(np.prod(t) for t in lst)", "code_9": "def min_product_tuple(lst):\n    return min(pd.Series(t).prod() for t in lst)", "code_10": "def min_product_tuple(lst):\n    return min(st.prod(t) for t in lst)", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/410", "prompt": "\n\ndef min_val(listval):\n     \"\"\"\n     Write a function to find the minimum value in a given heterogeneous list.\n     >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n     2\n     >>> min_val(['Python', 15, 20, 25])\n     15\n     >>> min_val(['Python', 30, 20, 40, 50, 'version'])\n     20\n     \"\"\"\n", "solution": "     \n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def min_val(listval):\n    return min(x for x in listval if isinstance(x, int))", "code_2": "def min_val(listval):\n    return min(filter(lambda x: isinstance(x, int), listval))", "code_3": "def min_val(listval):\n    return min(x for x in listval if type(x) == int)", "code_4": "def min_val(listval):\n    return min(x for x in listval if type(x) is int)", "code_5": "def min_val(listval):\n    return min(x for x in listval if isinstance(x, (int, float)))", "code_6": "def min_val(listval):\n    return min(x for x in listval if type(x) in (int, float))", "code_7": "def min_val(listval):\n    return min(x for x in listval if type(x).__name__ == 'int')", "code_8": "def min_val(listval):\n    return min(x for x in listval if x.__class__.__name__ == 'int')", "code_9": "def min_val(listval):\n    return min(x for x in listval if str(type(x)) == \"<class 'int'>\")", "code_10": "def min_val(listval):\n    return min(x for x in listval if repr(type(x)) == \"<class 'int'>\")", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/411", "prompt": "\n\ndef snake_to_camel(word):\n  \"\"\"\n  Write a function to convert the given snake case string to camel case string by using regex.\n  >>> snake_to_camel('android_tv')\n  'AndroidTv'\n  >>> snake_to_camel('google_pixel')\n  'GooglePixel'\n  >>> snake_to_camel('apple_watch')\n  'AppleWatch'\n  \"\"\"\n", "solution": "  import re\n  \n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))", "code_2": "import re\ndef snake_to_camel(word):\n    return word.title().replace('_', '')", "code_3": "import re\ndef snake_to_camel(word):\n    return re.sub('_(.)', lambda m: m.group(1).upper(), word)", "code_4": "import re\ndef snake_to_camel(word):\n    return ''.join(word.title().split('_'))", "code_5": "import re\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "code_6": "import re\ndef snake_to_camel(word):\n    return ''.join(x.title() for x in word.split('_'))", "code_7": "import re\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in re.split('_', word))", "code_8": "import re\ndef snake_to_camel(word):\n    return ''.join(x.title() for x in re.split('_', word))", "code_9": "import re\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in re.findall('[a-z]+', word))", "code_10": "import re\ndef snake_to_camel(word):\n    return ''.join(x.title() for x in re.findall('[a-z]+', word))", "pass@3": 1.0, "nDCG@10": 0.88995411685096}
{"task_id": "MBPP/412", "prompt": "\n\ndef remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    >>> remove_odd([1,2,3])\n    [2]\n    >>> remove_odd([2,4,6])\n    [2,4,6]\n    >>> remove_odd([10,20,3])\n    [10,20]\n    \"\"\"\n", "solution": "    \n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def remove_odd(l):\n    return [x for x in l if x % 2 == 0]", "code_2": "def remove_odd(l):\n    return list(filter(lambda x: x % 2 == 0, l))", "code_3": "def remove_odd(l):\n    return [x for x in l if not x & 1]", "code_4": "def remove_odd(l):\n    return [x for x in l if ~x & 1]", "code_5": "def remove_odd(l):\n    return list(map(lambda x: x if x % 2 == 0 else None, l))", "code_6": "def remove_odd(l):\n    return [x for i, x in enumerate(l) if not x % 2]", "code_7": "def remove_odd(l):\n    return [x for x in l if bin(x)[-1] == '0']", "code_8": "def remove_odd(l):\n    return [x for x in l if x >> 1 << 1 == x]", "code_9": "def remove_odd(l):\n    return [x for x in l if x & -2 == x]", "code_10": "def remove_odd(l):\n    return [x for x in l if x ^ 1 < x]", "pass@3": 1.0, "nDCG@10": 0.8512360941594275}
{"task_id": "MBPP/413", "prompt": "\n\ndef extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n    ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\n    [99, 96, 94, 98]\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)\n    [98, 97, 91, 94]\n    \"\"\"\n", "solution": "    \n    result = [x[n] for x in list1]\n    return result", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]", "code_2": "def extract_nth_element(lst, n):\n    return list(map(lambda x: x[n], lst))", "code_3": "def extract_nth_element(lst, n):\n    return list(zip(*lst))[n]", "code_4": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst if len(t) > n]", "code_5": "def extract_nth_element(lst, n):\n    return [t[n] if n < len(t) else None for t in lst]", "code_6": "def extract_nth_element(lst, n):\n    return [t[n] if n < len(t) else t[-1] for t in lst]", "code_7": "def extract_nth_element(lst, n):\n    return [t[n] if n < len(t) else t[0] for t in lst]", "code_8": "def extract_nth_element(lst, n):\n    return [t[n] if n < len(t) else t[len(t)//2] for t in lst]", "code_9": "def extract_nth_element(lst, n):\n    return [t[n] if n < len(t) else t[min(n, len(t)-1)] for t in lst]", "code_10": "def extract_nth_element(lst, n):\n    return [t[n] if n < len(t) else t[max(0, len(t)-n-1)] for t in lst]", "pass@3": 1.0, "nDCG@10": 0.88995411685096}
{"task_id": "MBPP/414", "prompt": "\n\ndef overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether the value exists in a sequence or not.\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3],[4,5,6])\n    False\n    >>> overlapping([1,4,5],[1,4,5])\n    True\n    \"\"\"\n", "solution": "      \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def overlapping(list1, list2):\n    return bool(set(list1) & set(list2))", "code_2": "def overlapping(list1, list2):\n    return any(i in list2 for i in list1)", "code_3": "def overlapping(list1, list2):\n    return len(set(list1) & set(list2)) > 0", "code_4": "def overlapping(list1, list2):\n    return not set(list1).isdisjoint(list2)", "code_5": "def overlapping(list1, list2):\n    return any(map(lambda x: x in list2, list1))", "code_6": "def overlapping(list1, list2):\n    return len(set(list1).intersection(list2)) > 0", "code_7": "def overlapping(list1, list2):\n    return any(filter(lambda x: x in list2, list1))", "code_8": "def overlapping(list1, list2):\n    return any(i in list2 for i in set(list1))", "code_9": "def overlapping(list1, list2):\n    return any(i in set(list2) for i in list1)", "code_10": "def overlapping(list1, list2):\n    return bool(set(list1).intersection(list2))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/415", "prompt": "\n\ndef max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    >>> max_Product([1,2,3,4,7,0,8,4])\n    (7,8)\n    >>> max_Product([0,-1,-2,-4,5,0,-6])\n    (-4,-6)\n    >>> max_Product([1,2,3])\n    (2,3)\n    \"\"\"\n", "solution": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_Product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])", "code_2": "def max_Product(arr):\n    a, b = max(arr), float('-inf')\n    for i in arr:\n        if i > b and i < a:\n            b = i\n    return (a, b)", "code_3": "def max_Product(arr):\n    a, b = sorted(arr)[-2:]\n    return (a, b)", "code_4": "def max_Product(arr):\n    a, b = sorted(arr, reverse=True)[:2]\n    return (a, b)", "code_5": "def max_Product(arr):\n    a, b = sorted(arr)[-1], float('-inf')\n    for i in reversed(arr):\n        if i > b and i < a:\n            b = i\n    return (a, b)", "code_6": "def max_Product(arr):\n    a, b = max((x, y) for x in arr for y in arr if x != y)\n    return (a, b)", "code_7": "def max_Product(arr):\n    a, b = max(arr), float('-inf')\n    for i in arr:\n        if i > b and i != a:\n            b = i\n    return (a, b)", "code_8": "def max_Product(arr):\n    a, b = sorted(arr, key=lambda x: -x*x)[:2]\n    return (a, b)", "code_9": "def max_Product(arr):\n    a, b = max(arr), float('-inf')\n    for i in arr:\n        if i > b and i * a < 0:\n            b = i\n    return (a, b)", "code_10": "def max_Product(arr):\n    a, b = sorted(arr, key=abs, reverse=True)[:2]\n    return (a, b)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/416", "prompt": "\n\ndef breakSum(n):\n\t\"\"\"\n\tWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n\t>>> breakSum(12)\n\t13\n\t>>> breakSum(24)\n\t27\n\t>>> breakSum(23)\n\t23\n\t\"\"\"\n", "solution": "\tMAX = 1000000\n\t \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def breakSum(n):\n    if n <= 2: return n\n    return max(n, breakSum(n//3) + breakSum(n//3) + breakSum(n//3 + n%3))", "code_2": "def breakSum(n):\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = max(i, dp[i//3] + dp[i//3] + dp[i//3 + i%3])\n    return dp[n]", "code_3": "def breakSum(n, memo={}):\n    if n <= 2: return n\n    if n not in memo:\n        memo[n] = max(n, breakSum(n//3) + breakSum(n//3) + breakSum(n//3 + n%3))\n    return memo[n]", "code_4": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef breakSum(n):\n    if n <= 2: return n\n    return max(n, breakSum(n//3) + breakSum(n//3) + breakSum(n//3 + n%3))", "code_5": "def breakSum(n):\n    dp = [0, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        dp[i] = max(i, dp[i//3] + dp[i//3] + dp[i//3 + i%3])\n    return dp[n]", "code_6": "def breakSum(n):\n    if n <= 2: return n\n    a, b, c = n//3, n//3, n//3 + n%3\n    return max(n, breakSum(a) + breakSum(b) + breakSum(c))", "code_7": "def breakSum(n):\n    dp = [0, 1]\n    for i in range(2, n + 1):\n        a, b, c = i//3, i//3, i//3 + i%3\n        dp.append(max(i, dp[a] + dp[b] + dp[c]))\n    return dp[n]", "code_8": "def breakSum(n):\n    dp = [0, 1]\n    for i in range(2, n + 1):\n        dp.append(max(i, dp[i//3] + dp[i//3] + dp[i//3 + i%3]))\n    return dp[n]", "code_9": "def breakSum(n):\n    dp = [0, 1] + [0] * (n - 1)\n    for i in range(2, n + 1):\n        dp[i] = max(i, dp[i//3] + dp[i//3] + dp[i//3 + i%3])\n    return dp[n]", "code_10": "def breakSum(n):\n    dp = [0, 1]\n    while len(dp) <= n:\n        i = len(dp)\n        dp.append(max(i, dp[i//3] + dp[i//3] + dp[i//3 + i%3]))\n    return dp[n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/417", "prompt": "\n\ndef group_tuples(Input):\n\t\"\"\"\n\tWrite a function to find common first element in given list of tuple.\n\t>>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n\t[('x', 'y', 'z'), ('w', 't')]\n\t>>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n\t[('a', 'b', 'c'), ('d', 'e')]\n\t>>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n\t[('f', 'g', 'g'), ('h', 'i')]\n\t\"\"\"\n", "solution": "\t \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ", "results": [1, 0, 1, 0, 0, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "from collections import defaultdict\ndef group_tuples(Input):\n    d = defaultdict(list)\n    for a, b in Input:\n        d[a].append(b)\n    return [(k,) + tuple(v) for k, v in d.items()]", "code_2": "def group_tuples(Input):\n    result = []\n    for i in set(x[0] for x in Input):\n        result.append((i,) + tuple(y[1] for y in Input if y[0] == i))\n    return result", "code_3": "def group_tuples(Input):\n    result = {}\n    for k, v in Input:\n        result.setdefault(k, []).append(v)\n    return [(k,) + tuple(v) for k, v in result.items()]", "code_4": "from itertools import groupby\ndef group_tuples(Input):\n    Input.sort()\n    return [(k,) + tuple(v[1] for v in g) for k, g in groupby(Input, lambda x: x[0])]", "code_5": "def group_tuples(Input):\n    result = []\n    for k, g in groupby(sorted(Input), lambda x: x[0]):\n        result.append((k,) + tuple(v[1] for v in g))\n    return result", "code_6": "def group_tuples(Input):\n    result = {}\n    for k, v in Input:\n        if k in result:\n            result[k].append(v)\n        else:\n            result[k] = [v]\n    return [(k,) + tuple(v) for k, v in result.items()]", "code_7": "def group_tuples(Input):\n    result = []\n    for k in sorted({x[0] for x in Input}):\n        result.append((k,) + tuple(x[1] for x in Input if x[0] == k))\n    return result", "code_8": "def group_tuples(Input):\n    result = {}\n    for k, v in Input:\n        result[k] = result.get(k, (k,)) + (v,)\n    return list(result.values())", "code_9": "from operator import itemgetter\ndef group_tuples(Input):\n    Input.sort(key=itemgetter(0))\n    return [(k,) + tuple(v[1] for v in g) for k, g in groupby(Input, itemgetter(0))]", "code_10": "def group_tuples(Input):\n    result = []\n    keys = sorted({x[0] for x in Input})\n    for k in keys:\n        result.append((k,) + tuple(x[1] for x in Input if x[0] == k))\n    return result", "pass@3": 0.8333333333333334, "nDCG@10": 0.4779671403625729}
{"task_id": "MBPP/418", "prompt": "\n\ndef Find_Max(lst):\n    \"\"\"\n    Write a python function to find the sublist having maximum length.\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A','B','C']\n    >>> Find_Max([[1],[1,2],[1,2,3]])\n    [1,2,3]\n    >>> Find_Max([[1,1],[1,2,3],[1,5,6,1]])\n    [1,5,6,1]\n    \"\"\"\n", "solution": "     \n    maxList = max((x) for x in lst) \n    return maxList", "results": [1, 1, 1, 0, 0, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "def Find_Max(lst):\n    return max(lst, key=len)", "code_2": "def Find_Max(lst):\n    return sorted(lst, key=len)[-1]", "code_3": "def Find_Max(lst):\n    return max(lst, key=lambda x: len(x))", "code_4": "def Find_Max(lst):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, lst)", "code_5": "def Find_Max(lst):\n    return heapq.nlargest(1, lst, key=len)[0]", "code_6": "def Find_Max(lst):\n    return list(filter(lambda x: len(x) == len(max(lst, key=len)), lst))[0]", "code_7": "def Find_Max(lst):\n    return [x for x in lst if len(x) == max(len(i) for i in lst)][0]", "code_8": "def Find_Max(lst):\n    return list(itertools.dropwhile(lambda x: len(x) < max(len(i) for i in lst), lst))[-1]", "code_9": "def Find_Max(lst):\n    return functools.reduce(lambda a, b: a if len(a) > len(b) else b, lst)", "code_10": "def Find_Max(lst):\n    return next(x for x in sorted(lst, key=len, reverse=True))", "pass@3": 0.9666666666666667, "nDCG@10": 0.6843830725976621}
{"task_id": "MBPP/419", "prompt": "\n\ndef round_and_sum(list1):\n  \"\"\"\n  Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n  243\n  >>> round_and_sum([5,2,9,24.3,29])\n  345\n  >>> round_and_sum([25.0,56.7,89.2])\n  513\n  \"\"\"\n", "solution": "  \n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def round_and_sum(lst):\n    return sum(round(i) for i in lst) * len(lst)", "code_2": "def round_and_sum(lst):\n    return sum(map(round, lst)) * len(lst)", "code_3": "import numpy as np\ndef round_and_sum(lst):\n    return int(np.sum(np.round(lst))) * len(lst)", "code_4": "def round_and_sum(lst):\n    total = 0\n    for i in lst:\n        total += round(i)\n    return total * len(lst)", "code_5": "def round_and_sum(lst):\n    total = sum(lst)\n    return round(total) * len(lst)", "code_6": "def round_and_sum(lst):\n    return round(sum(lst)) * len(lst)", "code_7": "def round_and_sum(lst):\n    return int(sum(map(lambda x: round(x), lst))) * len(lst)", "code_8": "def round_and_sum(lst):\n    return int(sum(map(round, map(float, lst)))) * len(lst)", "code_9": "def round_and_sum(lst):\n    return int(sum(round(i) for i in lst)) * len(lst)", "code_10": "def round_and_sum(lst):\n    return int(sum(round(i) for i in lst)) * len(lst)", "pass@3": 1.0, "nDCG@10": 0.8364586133797037}
{"task_id": "MBPP/420", "prompt": "\n\ndef cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    288\n    >>> cube_Sum(4)\n    800\n    \"\"\"\n", "solution": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum", "results": [0, 1, 1, 1, 0, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def cube_Sum(n):\n    return n * (n + 1) ** 2", "code_2": "def cube_Sum(n):\n    return sum(i**3 for i in range(2, 2*n+1, 2))", "code_3": "def cube_Sum(n):\n    return sum(map(lambda x: x**3, range(2, 2*n+1, 2)))", "code_4": "def cube_Sum(n):\n    return sum([i**3 for i in range(2, 2*n+1, 2)])", "code_5": "def cube_Sum(n):\n    return sum(i**3 for i in xrange(2, 2*n+1, 2))", "code_6": "def cube_Sum(n):\n    return sum(map(pow, range(2, 2*n+1, 2), [3]*n))", "code_7": "def cube_Sum(n):\n    return reduce(lambda x, y: x + y**3, range(2, 2*n+1, 2), 0)", "code_8": "def cube_Sum(n):\n    return sum(i**3 for i in filter(lambda x: x % 2 == 0, range(1, 2*n+1)))", "code_9": "def cube_Sum(n):\n    return sum(i**3 for i in [x for x in range(1, 2*n+1) if x % 2 == 0])", "code_10": "def cube_Sum(n):\n    return sum(i**3 for i in itertools.islice(itertools.count(2, 2), n))", "pass@3": 0.9666666666666667, "nDCG@10": 0.5577804057619871}
{"task_id": "MBPP/421", "prompt": "\n\ndef concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    >>> concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") )\n    'QWE-is-4-RTY'\n    >>> concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") )\n    'ZEN-is-4-OP'\n    \"\"\"\n", "solution": "    \n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))", "code_2": "def concatenate_tuple(test_tup):\n    return ''.join(str(i) + '-' for i in test_tup)[:-1]", "code_3": "def concatenate_tuple(test_tup):\n    return ''.join('%s-' % i for i in test_tup)[:-1]", "code_4": "def concatenate_tuple(test_tup):\n    return ''.join([str(i) + '-' for i in test_tup]).rstrip('-')", "code_5": "def concatenate_tuple(test_tup):\n    return ''.join(str(i) + '-' for i in test_tup).rstrip('-')", "code_6": "def concatenate_tuple(test_tup):\n    return ''.join(str(i) + '-' for i in test_tup)[:-1]", "code_7": "def concatenate_tuple(test_tup):\n    return '-'.join(str(i) for i in test_tup)", "code_8": "def concatenate_tuple(test_tup):\n    return ''.join(str(i) + '-' for i in test_tup).strip('-')", "code_9": "def concatenate_tuple(test_tup):\n    return ''.join([str(i) + '-' for i in test_tup]).strip('-')", "code_10": "def concatenate_tuple(test_tup):\n    return ''.join(str(i) + '-' for i in test_tup)[:-1]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/422", "prompt": "\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    12\n    >>> find_Average_Of_Cube(1)\n    1\n    \"\"\"\n", "solution": "      \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ", "results": [0, 1, 0, 1, 0, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def find_Average_Of_Cube(n):\n    return (n * (n + 1) / 2) ** 2", "code_2": "def find_Average_Of_Cube(n):\n    return sum(i ** 3 for i in range(1, n + 1)) / n", "code_3": "def find_Average_Of_Cube(n):\n    return ((n * (n + 1)) // 2) ** 2", "code_4": "def find_Average_Of_Cube(n):\n    return (sum(range(1, n + 1)) ** 2) / n", "code_5": "def find_Average_Of_Cube(n):\n    return (n ** 2 * (n + 1) ** 2) // (4 * n)", "code_6": "def find_Average_Of_Cube(n):\n    return (n * (n + 1) // 2) ** 2", "code_7": "def find_Average_Of_Cube(n):\n    return ((n * (n + 1)) ** 2) // (4 * n)", "code_8": "def find_Average_Of_Cube(n):\n    return (n ** 2 * (n + 1) ** 2) / (4 * n)", "code_9": "def find_Average_Of_Cube(n):\n    return (n * (n + 1) / 2) ** 2", "code_10": "def find_Average_Of_Cube(n):\n    return (sum(i ** 3 for i in range(n + 1)) - 1) / n", "pass@3": 0.7083333333333333, "nDCG@10": 0.30308203017988267}
{"task_id": "MBPP/423", "prompt": "\n\ndef get_maxgold(gold, m, n):\n    \"\"\"\n    Write a function to solve gold mine problem.\n    >>> get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)\n    16\n    >>> get_maxgold([[10,20],[30,40]],2,2)\n    70\n    >>> get_maxgold([[4,9],[3,7]],2,2)\n    13\n    \"\"\"\n", "solution": "     \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ", "results": [1, 1, 0, 0, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def get_maxgold(gold, m, n):\n    for j in range(1, n):\n        for i in range(m):\n            gold[i][j] += max(gold[i-1][j-1] if i > 0 else 0, gold[i][j-1], gold[i+1][j-1] if i < m-1 else 0)\n    return max(gold[i][n-1] for i in range(m))", "code_2": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp_new = [0]*m\n        for i in range(m):\n            dp_new[i] = gold[i][j] + max(dp[i-1] if i > 0 else 0, dp[i], dp[i+1] if i < m-1 else 0)\n        dp = dp_new\n    return max(dp)", "code_3": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp_new = [0]*m\n        for i in range(m):\n            dp_new[i] = gold[i][j] + max(dp[i-1:i+2])\n        dp = dp_new\n    return max(dp)", "code_4": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[i-1:i+2]) for i in range(m)]\n    return max(dp)", "code_5": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[max(0, i-1):min(m, i+2)]) for i in range(m)]\n    return max(dp)", "code_6": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[max(0, i-1):i+2]) if i < m-1 else gold[i][j] + dp[i-1] for i in range(m)]\n    return max(dp)", "code_7": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[i-1] if i > 0 else 0, dp[i], dp[i+1] if i < m-1 else 0) for i in range(m)]\n    return max(dp)", "code_8": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[max(0, i-1):i+2]) for i in range(m)]\n        if j == 0:\n            return max(dp)", "code_9": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[i-1:i+2]) for i in range(m)]\n        if j == 0:\n            return max(dp)", "code_10": "def get_maxgold(gold, m, n):\n    dp = [0]*m\n    for j in range(n-1, -1, -1):\n        dp = [gold[i][j] + max(dp[max(0, i-1):i+2]) for i in range(m)]\n        if j == 0:\n            return max(dp)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6505132600483448}
{"task_id": "MBPP/424", "prompt": "\n\ndef extract_rear(test_tuple):\n  \"\"\"\n  Write a function to extract only the rear index element of each string in the given tuple.\n  >>> extract_rear(('Mers', 'for', 'Vers') )\n  ['s', 'r', 's']\n  >>> extract_rear(('Avenge', 'for', 'People') )\n  ['e', 'r', 'e']\n  >>> extract_rear(('Gotta', 'get', 'go') )\n  ['a', 't', 'o']\n  \"\"\"\n", "solution": "  \n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "List comprehension with slicing:\ndef extract_rear(test_tuple):\n    return [s[-1] for s in test_tuple]", "code_2": "Using map and lambda function:\ndef extract_rear(test_tuple):\n    return list(map(lambda s: s[-1], test_tuple))", "code_3": "Using list comprehension and indexing:\ndef extract_rear(test_tuple):\n    return [s[len(s)-1] for s in test_tuple]", "code_4": "Using a for loop:\ndef extract_rear(test_tuple):\n    result = []\n    for s in test_tuple:\n        result.append(s[-1])\n    return result", "code_5": "Using a while loop:\ndef extract_rear(test_tuple):\n    result = []\n    i = 0\n    while i < len(test_tuple):\n        result.append(test_tuple[i][-1])\n        i += 1\n    return result", "code_6": "Using recursion:\ndef extract_rear(test_tuple):\n    if not test_tuple:\n        return []\n    else:\n        return [test_tuple[0][-1]] + extract_rear(test_tuple[1:])", "code_7": "Using reduce and lambda function:\nfrom functools import reduce\ndef extract_rear(test_tuple):\n    return reduce(lambda acc, s: acc + [s[-1]], test_tuple, [])", "code_8": "Using generator expression:\ndef extract_rear(test_tuple):\n    return list(s[-1] for s in test_tuple)", "code_9": "Using a deque:\nfrom collections import deque\ndef extract_rear(test_tuple):\n    return [deque(s, maxlen=1)[0] for s in test_tuple]", "code_10": "Using a stack:\ndef extract_rear(test_tuple):\n    result = []\n    for s in test_tuple:\n        stack = []\n        for char in s:\n            stack.append(char)\n        result.append(stack.pop())\n    return result", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/425", "prompt": "\n\ndef count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')\n    1\n    \"\"\"\n", "solution": "     \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_element_in_list(lst, x):\n    return sum(x in sublist for sublist in lst)", "code_2": "def count_element_in_list(lst, x):\n    return len([sublist for sublist in lst if x in sublist])", "code_3": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count", "code_4": "def count_element_in_list(lst, x):\n    return sum(map(lambda sublist: x in sublist, lst))", "code_5": "from collections import Counter\ndef count_element_in_list(lst, x):\n    return Counter(x in sublist for sublist in lst)[True]", "code_6": "def count_element_in_list(lst, x):\n    return len(list(filter(lambda sublist: x in sublist, lst)))", "code_7": "def count_element_in_list(lst, x):\n    return sum(1 for sublist in lst if x in sublist)", "code_8": "def count_element_in_list(lst, x):\n    return len([1 for sublist in lst if x in sublist])", "code_9": "def count_element_in_list(lst, x):\n    return sum(sublist.count(x) > 0 for sublist in lst)", "code_10": "def count_element_in_list(lst, x):\n    return len(list(sublist for sublist in lst if x in sublist))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/426", "prompt": "\n\ndef filter_oddnumbers(nums):\n \"\"\"\n Write a function to filter odd numbers using lambda function.\n >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1,3,5,7,9]\n >>> filter_oddnumbers([10,20,45,67,84,93])\n [45,67,93]\n >>> filter_oddnumbers([5,7,9,8,6,4,3])\n [5,7,9,3]\n \"\"\"\n", "solution": " \n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "filter_oddnumbers = lambda nums: [num for num in nums if num % 2 != 0]", "code_2": "filter_oddnumbers = lambda nums: list(filter(lambda num: num % 2 != 0, nums))", "code_3": "filter_oddnumbers = lambda nums: [num for num in nums if num & 1]", "code_4": "filter_oddnumbers = lambda nums: list(filter(lambda num: num & 1, nums))", "code_5": "filter_oddnumbers = lambda nums: [num for num in nums if num >> 1 << 1 != num]", "code_6": "filter_oddnumbers = lambda nums: list(filter(lambda num: num >> 1 << 1 != num, nums))", "code_7": "filter_oddnumbers = lambda nums: [num for num in nums if bin(num)[-1] == '1']", "code_8": "filter_oddnumbers = lambda nums: list(filter(lambda num: bin(num)[-1] == '1', nums))", "code_9": "filter_oddnumbers = lambda nums: [num for num in nums if num // 2 * 2 != num]", "code_10": "filter_oddnumbers = lambda nums: list(filter(lambda num: num // 2 * 2 != num, nums))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/427", "prompt": "\n\ndef change_date_format(dt):\n        \"\"\"\n        Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n        >>> change_date_format(\"2020-11-13\")\n        '13-11-2020'\n        >>> change_date_format(\"2021-04-26\")\n        '26-04-2021'\n        \"\"\"\n", "solution": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "results": [1, 1, 1, 1, 0, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "import re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)", "code_2": "import re\ndef change_date_format(dt):\n    return '-'.join(reversed(dt.split('-')))", "code_3": "def change_date_format(dt):\n    y, m, d = dt.split('-')\n    return f'{d}-{m}-{y}'", "code_4": "def change_date_format(dt):\n    return dt[8:] + '-' + dt[5:7] + '-' + dt[:4]", "code_5": "def change_date_format(dt):\n    return dt[::-1].replace('-', '/', 2)[::-1]", "code_6": "def change_date_format(dt):\n    return dt[8:] + dt[4:8] + dt[:4]", "code_7": "def change_date_format(dt):\n    y, m, d = map(int, dt.split('-'))\n    return f'{d:02d}-{m:02d}-{y}'", "code_8": "def change_date_format(dt):\n    return dt[6:] + dt[3:5] + dt[:2]", "code_9": "def change_date_format(dt):\n    return dt[8:] + dt[3:8] + dt[:3]", "code_10": "def change_date_format(dt):\n    return dt[8:] + dt[4:8] + dt[0:4]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7791714369672128}
{"task_id": "MBPP/428", "prompt": "\n\ndef shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n    [22, 24, 34, 39, 68, 73, 87]\n    >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n    [16, 30, 32, 74, 82, 83, 96]\n    \"\"\"\n", "solution": "    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2", "code_2": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n        gap //= 2", "code_3": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2 if gap != 2 else 1", "code_4": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 5 // 11 if gap > 1 else 0", "code_5": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 3 + 1 if gap < len(my_list) // 9 else gap // 2.2", "code_6": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 5 // 11 if gap > 1 else (1 if gap == 1 else 0)", "code_7": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 3 // 4 if gap > 1 else 0", "code_8": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 2.2 if gap < len(my_list) // 9 else gap // 2.2", "code_9": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 5 // 8 if gap > 1 else 0", "code_10": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap * 3 // 5 if gap > 1 else 0", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/429", "prompt": "\n\ndef and_tuples(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to extract the elementwise and tuples from the given two tuples.\n  >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n  (0, 0, 2, 1)\n  >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n  (1, 2, 3, 0)\n  >>> and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n  (0, 9, 10, 0)\n  \"\"\"\n", "solution": "  \n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension:\ndef and_tuples(t1, t2): return tuple(a & b for a, b in zip(t1, t2))", "code_2": "Using map and lambda:\ndef and_tuples(t1, t2): return tuple(map(lambda x: x[0] & x[1], zip(t1, t2)))", "code_3": "Using operator.and_:\nimport operator\ndef and_tuples(t1, t2): return tuple(map(operator.and_, t1, t2))", "code_4": "Using numpy:\nimport numpy as np\ndef and_tuples(t1, t2): return tuple(np.bitwise_and(t1, t2))", "code_5": "Using reduce and operator.and_:\nfrom functools import reduce\nimport operator\ndef and_tuples(t1, t2): return reduce(lambda x, y: x + (operator.and_(*y),), zip(t1, t2), ())", "code_6": "Using itertools.starmap:\nimport itertools\ndef and_tuples(t1, t2): return tuple(itertools.starmap(operator.and_, zip(t1, t2)))", "code_7": "Using more_itertools.and_:\nimport more_itertools\ndef and_tuples(t1, t2): return tuple(more_itertools.and_(t1, t2))", "code_8": "Using pandas:\nimport pandas as pd\ndef and_tuples(t1, t2): return tuple(pd.Series(t1) & pd.Series(t2))", "code_9": "Using pytorch:\nimport torch\ndef and_tuples(t1, t2): return tuple(torch.bitwise_and(torch.tensor(t1), torch.tensor(t2)).tolist())", "code_10": "Using tensorflow:\nimport tensorflow as tf\ndef and_tuples(t1, t2): return tuple(tf.bitwise.bitwise_and(tf.constant(t1), tf.constant(t2)).numpy())", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/430", "prompt": "\n\ndef parabola_directrix(a, b, c):\n  \"\"\"\n  Write a function to find the directrix of a parabola.\n  >>> parabola_directrix(5,3,2)\n  -198\n  >>> parabola_directrix(9,8,4)\n  -2336\n  >>> parabola_directrix(2,4,6)\n  -130\n  \"\"\"\n", "solution": "   \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def parabola_directrix(a, b, c): return -(b**2) // (4*a)", "code_2": "def parabola_directrix(a, b, c): return -b*b // (4*a)", "code_3": "def parabola_directrix(a, b, c): return -(b**2 + c) // (4*a)", "code_4": "def parabola_directrix(a, b, c): return -(b*b + c) // (4*a)", "code_5": "def parabola_directrix(a, b, c): return -(b*b + 4*a*c) // (4*a)", "code_6": "def parabola_directrix(a, b, c): return -(b*b + 4*a*c) / (4*a)", "code_7": "def parabola_directrix(a, b, c): return (b*b / -4*a) - c", "code_8": "def parabola_directrix(a, b, c): return (b*b / -4*a) + c", "code_9": "def parabola_directrix(a, b, c): return (b*b / -4*a) + (c / -4*a)", "code_10": "def parabola_directrix(a, b, c): return (b*b / -4*a) + (c / -a)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/431", "prompt": "\n\ndef common_element(list1, list2):\n     \"\"\"\n     Write a function that takes two lists and returns true if they have at least one common element.\n     >>> common_element([1,2,3,4,5], [5,6,7,8,9])\n     True\n     >>> common_element([1,2,3,4,5], [6,7,8,9])\n     None\n     >>> common_element(['a','b','c'], ['d','b','e'])\n     True\n     \"\"\"\n", "solution": "     \n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result", "results": [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def common_element(list1, list2):\n    return bool(set(list1) & set(list2))", "code_2": "def common_element(list1, list2):\n    return any(i in list2 for i in list1)", "code_3": "def common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0", "code_4": "def common_element(list1, list2):\n    return len(set(list1).intersection(list2)) > 0", "code_5": "def common_element(list1, list2):\n    return not set(list1).isdisjoint(list2)", "code_6": "def common_element(list1, list2):\n    return any(map(lambda x: x in list2, list1))", "code_7": "def common_element(list1, list2):\n    return any(filter(lambda x: x in list2, list1))", "code_8": "def common_element(list1, list2):\n    return next((True for x in list1 if x in list2), None)", "code_9": "def common_element(list1, list2):\n    return reduce(lambda x, y: x or y in list2, list1, False)", "code_10": "def common_element(list1, list2):\n    return sum(1 for x in list1 if x in list2) > 0", "pass@3": 0.30000000000000004, "nDCG@10": 0.06943122193677728}
{"task_id": "MBPP/432", "prompt": "\n\ndef median_trapezium(base1,base2,height):\n \"\"\"\n Write a function to find the median of a trapezium.\n >>> median_trapezium(15,25,35)\n 20\n >>> median_trapezium(10,20,30)\n 15\n >>> median_trapezium(6,9,4)\n 7.5\n \"\"\"\n", "solution": " \n median = 0.5 * (base1+ base2)\n return median", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def median_trapezium(b1, b2, h): return (b1 + b2) / 2", "code_2": "def median_trapezium(b1, b2, h): return 0.5 * (b1 + b2)", "code_3": "def median_trapezium(b1, b2, h): return sum([b1, b2]) / 2", "code_4": "def median_trapezium(b1, b2, h): return (b1 + b2) * 0.5", "code_5": "def median_trapezium(b1, b2, h): return (b1 + b2) >> 1", "code_6": "def median_trapezium(b1, b2, h): return divmod(b1 + b2, 2)[0]", "code_7": "def median_trapezium(b1, b2, h): return int((b1 + b2) / 2) if (b1 + b2) % 2 == 0 else (b1 + b2) / 2", "code_8": "def median_trapezium(b1, b2, h): return (b1 + b2) // 2 if (b1 + b2) % 2 == 0 else (b1 + b2) / 2", "code_9": "def median_trapezium(b1, b2, h): return (b1 + b2) / 2.0", "code_10": "def median_trapezium(b1, b2, h): return float(b1 + b2) / 2", "pass@3": 1.0, "nDCG@10": 0.8364586133797037}
{"task_id": "MBPP/433", "prompt": "\n\ndef check_greater(arr, number):\n  \"\"\"\n  Write a function to check whether the entered number is greater than the elements of the given array.\n  >>> check_greater([1, 2, 3, 4, 5], 4)\n  'No, entered number is less than those in the array'\n  >>> check_greater([2, 3, 4, 5, 6], 8)\n  'Yes, the entered number is greater than those in the array'\n  >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n  'Yes, the entered number is greater than those in the array'\n  \"\"\"\n", "solution": "  \n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')", "results": [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def check_greater(arr, number):\n  return 'Yes, the entered number is greater than those in the array' if all(i < number for i in arr) else 'No, entered number is less than those in the array'", "code_2": "def check_greater(arr, number):\n  return 'No, entered number is less than those in the array' if max(arr) >= number else 'Yes, the entered number is greater than those in the array'", "code_3": "def check_greater(arr, number):\n  for i in arr:\n    if i >= number:\n      return 'No, entered number is less than those in the array'\n  return 'Yes, the entered number is greater than those in the array'", "code_4": "def check_greater(arr, number):\n  return ['No, entered number is less than those in the array', 'Yes, the entered number is greater than those in the array'][all(i < number for i in arr)]", "code_5": "def check_greater(arr, number):\n  return 'No, entered number is less than those in the array' if any(i >= number for i in arr) else 'Yes, the entered number is greater than those in the array'", "code_6": "def check_greater(arr, number):\n  return 'Yes, the entered number is greater than those in the array' if min(arr) < number else 'No, entered number is less than those in the array'", "code_7": "def check_greater(arr, number):\n  return ['No, entered number is less than those in the array', 'Yes, the entered number is greater than those in the array'][min(arr) < number]", "code_8": "def check_greater(arr, number):\n  return 'No, entered number is less than those in the array' if filter(lambda x: x >= number, arr) else 'Yes, the entered number is greater than those in the array'", "code_9": "def check_greater(arr, number):\n  return 'No, entered number is less than those in the array' if list(filter(lambda x: x >= number, arr)) else 'Yes, the entered number is greater than those in the array'", "code_10": "def check_greater(arr, number):\n  return 'No, entered number is less than those in the array' if [i for i in arr if i >= number] else 'Yes, the entered number is greater than those in the array'", "pass@3": 0.9916666666666667, "nDCG@10": 0.7788065869851875}
{"task_id": "MBPP/434", "prompt": "\n\ndef text_match_one(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by one or more b's.\n        >>> text_match_one(\"ac\")\n        ('Not matched!')\n        >>> text_match_one(\"dc\")\n        ('Not matched!')\n        >>> text_match_one(\"abba\")\n        ('Found a match!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef text_match_one(text):\n    return 'Found a match!' if re.search(r'ab+', text) else 'Not matched!'", "code_2": "def text_match_one(text):\n    if text[0] == 'a' and 'b' in text[1:]:\n        return 'Found a match!'\n    return 'Not matched!'", "code_3": "def text_match_one(text):\n    return 'Found a match!' if text.startswith('a') and 'b' in text[1:] else 'Not matched!'", "code_4": "def text_match_one(text):\n    return 'Found a match!' if text.count('a') > 0 and text.count('b') > text.index('a') else 'Not matched!'", "code_5": "def text_match_one(text):\n    return 'Found a match!' if text[1:].replace('b', '') == '' and text[0] == 'a' else 'Not matched!'", "code_6": "def text_match_one(text):\n    return 'Found a match!' if all(x in text for x in ['a', 'b']) and text.index('a') < text.rindex('b') else 'Not matched!'", "code_7": "def text_match_one(text):\n    return 'Found a match!' if text.find('a') == 0 and text.find('b') > 0 and text.rfind('b') == len(text) - 1 else 'Not matched!'", "code_8": "def text_match_one(text):\n    return 'Found a match!' if text[0] == 'a' and all(c == 'b' for c in text[1:]) else 'Not matched!'", "code_9": "def text_match_one(text):\n    return 'Found a match!' if text.lstrip('a').replace('b', '') == '' else 'Not matched!'", "code_10": "def text_match_one(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:].count('b') == len(text[1:]) else 'Not matched!'", "pass@3": 0.9166666666666666, "nDCG@10": 0.6421867266689011}
{"task_id": "MBPP/435", "prompt": "\n\ndef last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    >>> last_Digit(123)\n    3\n    >>> last_Digit(25)\n    5\n    >>> last_Digit(30)\n    0\n    \"\"\"\n", "solution": "    \n    return (n % 10) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def last_Digit(n): return int(str(n)[-1])`", "code_2": "`def last_Digit(n): return n % 10`", "code_3": "`last_Digit = lambda n: n % 10`", "code_4": "`def last_Digit(n): return abs(n) % 10`", "code_5": "`def last_Digit(n): return n & 0xf`", "code_6": "`def last_Digit(n): return n - 10 * (n // 10)`", "code_7": "`def last_Digit(n): return divmod(n, 10)[1]`", "code_8": "`def last_Digit(n): return int(format(n, 'e')[-2])`", "code_9": "`def last_Digit(n): return int(oct(n)[-1])`", "code_10": "`def last_Digit(n): return int(bin(n)[-1])`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/436", "prompt": "\n\ndef neg_nos(list1):\n  \"\"\"\n  Write a python function to print negative numbers in a list.\n  >>> neg_nos([-1,4,5,-6])\n  -1,-6\n  >>> neg_nos([-1,-2,3,4])\n  -1,-2\n  >>> neg_nos([-7,-6,8,9])\n  -7,-6\n  \"\"\"\n", "solution": "  \n  for num in list1: \n    if num < 0: \n       return num ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def neg_nos(list1):\n  return [i for i in list1 if i < 0]", "code_2": "def neg_nos(list1):\n  return list(filter(lambda x: x < 0, list1))", "code_3": "def neg_nos(list1):\n  return [x for x in list1 if not x >= 0]", "code_4": "def neg_nos(list1):\n  return [x for x in list1 if x <= -1]", "code_5": "def neg_nos(list1):\n  return [x for x in list1 if x < 1 and x > -1]", "code_6": "def neg_nos(list1):\n  return [x for x in list1 if not x > -1]", "code_7": "def neg_nos(list1):\n  return [x for x in list1 if x < 0 and x != 0]", "code_8": "def neg_nos(list1):\n  return [x for x in list1 if x < 1e-9]", "code_9": "def neg_nos(list1):\n  return [x for x in list1 if x < float('inf') and x > float('-inf') and x < 0]", "code_10": "def neg_nos(list1):\n  return [x for x in list1 if x < 0 and x == int(x)]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/437", "prompt": "\n\ndef remove_odd(str1):\n \"\"\"\n Write a function to remove odd characters in a string.\n >>> remove_odd(\"python\")\n (\"yhn\")\n >>> remove_odd(\"program\")\n (\"rga\")\n >>> remove_odd(\"language\")\n (\"agae\")\n \"\"\"\n", "solution": " \n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_odd(str1): return str1[::2]", "code_2": "def remove_odd(str1): return ''.join(str1[i] for i in range(0, len(str1), 2))", "code_3": "def remove_odd(str1): return ''.join(c for i, c in enumerate(str1) if i % 2 == 0)", "code_4": "def remove_odd(str1): return ''.join(filter(lambda x: str1.index(x) % 2 == 0, str1))", "code_5": "def remove_odd(str1): return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)", "code_6": "def remove_odd(str1): return ''.join([ch for i, ch in enumerate(str1) if not i % 2])", "code_7": "def remove_odd(str1): return ''.join(str1[i] for i in range(len(str1)) if not i % 2)", "code_8": "def remove_odd(str1): return ''.join(ch for i, ch in enumerate(str1) if i % 2 == 0)", "code_9": "def remove_odd(str1): return ''.join(str1[i] for i in range(0, len(str1), 2))", "code_10": "def remove_odd(str1): return ''.join(c for i, c in enumerate(str1) if not i % 2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/438", "prompt": "\n\ndef count_bidirectional(test_list):\n  \"\"\"\n  Write a function to count bidirectional tuple pairs.\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\n  '3'\n  >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] )\n  '2'\n  >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] )\n  '4'\n  \"\"\"\n", "solution": "  \n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_bidirectional(test_list):\n    return sum((test_list.count(t) * test_list.count((t[1], t[0])) for t in set(test_list))) // 2", "code_2": "def count_bidirectional(test_list):\n    from collections import Counter\n    c = Counter(test_list)\n    return sum(c[t] * c[(t[1], t[0])] for t in c) // 2", "code_3": "def count_bidirectional(test_list):\n    d = {}\n    for t in test_list:\n        d[t] = d.get(t, 0) + 1\n    return sum(d[t] * d.get((t[1], t[0]), 0) for t in d) // 2", "code_4": "def count_bidirectional(test_list):\n    d = {}\n    for t in test_list:\n        d[t] = d.get(t, 0) + 1\n        d[(t[1], t[0])] = d.get((t[1], t[0]), 0)\n    return sum(v // 2 for v in d.values())", "code_5": "def count_bidirectional(test_list):\n    d = {}\n    for t in test_list:\n        d[t] = d.get(t, 0) + 1\n    return sum(min(d.get(t, 0), d.get((t[1], t[0]), 0)) for t in d)", "code_6": "def count_bidirectional(test_list):\n    s = set(test_list)\n    return sum(test_list.count(t) * test_list.count((t[1], t[0])) for t in s) // 2", "code_7": "def count_bidirectional(test_list):\n    s = set(test_list)\n    d = {t: test_list.count(t) for t in s}\n    return sum(d[t] * d.get((t[1], t[0]), 0) for t in s) // 2", "code_8": "def count_bidirectional(test_list):\n    s = set(test_list)\n    d = {}\n    for t in test_list:\n        d[t] = d.get(t, 0) + 1\n    return sum(d[t] * d.get((t[1], t[0]), 0) for t in s) // 2", "code_9": "def count_bidirectional(test_list):\n    s = set(test_list)\n    d = {}\n    for t in test_list:\n        d[t] = d.get(t, 0) + 1\n        d[(t[1], t[0])] = d.get((t[1], t[0]), 0)\n    return sum(v // 2 for v in d.values() if v % 2 == 0)", "code_10": "def count_bidirectional(test_list):\n    s = set(test_list)\n    d = {}\n    for t in test_list:\n        d[t] = d.get(t, 0) + 1\n    return sum(min(d.get(t, 0), d.get((t[1], t[0]), 0)) for t in s)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/439", "prompt": "\n\ndef multiple_to_single(L):\n  \"\"\"\n  Write a function to convert a list of multiple integers into a single integer.\n  >>> multiple_to_single([11, 33, 50])\n  113350\n  >>> multiple_to_single([-1,2,3,4,5,6])\n  -123456\n  >>> multiple_to_single([10,15,20,25])\n  10152025\n  \"\"\"\n", "solution": "  \n  x = int(\"\".join(map(str, L)))\n  return x", "results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def multiple_to_single(L):\n  return int(''.join(map(str, L)))", "code_2": "def multiple_to_single(L):\n  return int(''.join(str(i) for i in L))", "code_3": "def multiple_to_single(L):\n  return sum(d * 10**i for i, d in enumerate(reversed(L)))", "code_4": "def multiple_to_single(L):\n  res = 0\n  for i in L:\n    res = res * 10 + i\n  return res", "code_5": "def multiple_to_single(L):\n  return reduce(lambda x, y: x * 10 + y, L)", "code_6": "def multiple_to_single(L):\n  return functools.reduce(lambda x, y: x * 10 + y, L)", "code_7": "def multiple_to_single(L):\n  return int(''.join(str(i) for i in L))", "code_8": "def multiple_to_single(L):\n  return int(''.join(map(str, L)))", "code_9": "def multiple_to_single(L):\n  return int(''.join(str(i) for i in L[::-1]))[::-1]", "code_10": "def multiple_to_single(L):\n  return int(''.join(str(i) for i in L[::-1]))[::-1]", "pass@3": 0.8333333333333334, "nDCG@10": 0.5017493542077721}
{"task_id": "MBPP/440", "prompt": "\n\ndef find_adverb_position(text):\n \"\"\"\n Write a function to find all adverbs and their positions in a given sentence.\n >>> find_adverb_position(\"clearly!! we can see the sky\")\n (0, 7, 'clearly')\n >>> find_adverb_position(\"seriously!! there are many roses\")\n (0, 9, 'seriously')\n >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n (0, 13, 'unfortunately')\n \"\"\"\n", "solution": " import re\n \n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))", "results": [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "import re\ndef find_adverb_position(text):\n    match = re.search(r'\\b\\w+!!\\b', text)\n    return (match.start(), match.end(), match.group()) if match else None", "code_2": "def find_adverb_position(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('!!'):\n            return (text.index(word), text.index(word) + len(word), word.rstrip('!!'))", "code_3": "import nltk\ndef find_adverb_position(text):\n    tokens = nltk.word_tokenize(text)\n    tagged = nltk.pos_tag(tokens)\n    for word, tag in tagged:\n        if tag == 'RB':\n            start = text.index(word)\n            return (start, start + len(word), word.rstrip('!!'))", "code_4": "def find_adverb_position(text):\n    words = text.split()\n    for i in range(len(words)):\n        if words[i].endswith('!!'):\n            start = text.find(words[i])\n            return (start, start + len(words[i]), words[i].rstrip('!!'))", "code_5": "def find_adverb_position(text):\n    for i in range(len(text)):\n        if text[i:i+2] == '!!':\n            start = text.rfind(' ', 0, i) + 1\n            return (start, i, text[start:i])", "code_6": "def find_adverb_position(text):\n    words = text.split()\n    for word in words:\n        if word.endswith('!!'):\n            start = text.index(word)\n            return (start, start + len(word), word.rstrip('!!'))", "code_7": "import spacy\ndef find_adverb_position(text):\n    nlp = spacy.load('en_core_web_sm')\n    doc = nlp(text)\n    for token in doc:\n        if token.pos_ == 'ADV':\n            return (token.idx, token.idx + len(token), str(token).rstrip('!!'))", "code_8": "def find_adverb_position(text):\n    words = text.split()\n    for i in range(len(words)):\n        if words[i].endswith('!!'):\n            start = sum(len(word) + 1 for word in words[:i])\n            return (start, start + len(words[i]), words[i].rstrip('!!'))", "code_9": "def find_adverb_position(text):\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.endswith('!!'):\n            end = text.index(word) + len(word)\n            start = end - len(word.rstrip('!!'))\n            return (start, end, word.rstrip('!!'))", "code_10": "def find_adverb_position(text):\n    for i in range(len(text)):\n        if text[i:i+2] == '!!':\n            word = text[:i].split()[-1]\n            start = text.index(word)\n            return (start, start + len(word), word)", "pass@3": 0.5333333333333333, "nDCG@10": 0.14876390584057272}
{"task_id": "MBPP/441", "prompt": "\n\ndef surfacearea_cube(l):\n  \"\"\"\n  Write a function to find the surface area of a cube.\n  >>> surfacearea_cube(5)\n  150\n  >>> surfacearea_cube(3)\n  54\n  >>> surfacearea_cube(10)\n  600\n  \"\"\"\n", "solution": "  \n  surfacearea= 6*l*l\n  return surfacearea", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def surfacearea_cube(l): return 6 * l * l`", "code_2": "`surfacearea_cube = lambda l: 6 * l ** 2`", "code_3": "`def surfacearea_cube(l): return l * l << 2`", "code_4": "`surfacearea_cube = lambda l: l * l * 6`", "code_5": "`def surfacearea_cube(l): return 6 * pow(l, 2)`", "code_6": "`surfacearea_cube = lambda l: 6 * pow(l, 2)`", "code_7": "`def surfacearea_cube(l): return 6 * l ** 2`", "code_8": "`surfacearea_cube = lambda l: 6 * l * l`", "code_9": "`def surfacearea_cube(l): return 6 * l * l`", "code_10": "`surfacearea_cube = lambda l: 6 * pow(l, 2)`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/442", "prompt": "\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.54\n    >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.69\n    >>> positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.56\n    \"\"\"\n", "solution": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def positive_count(nums):\n    return sum(1 for num in nums if num > 0) / len(nums)", "code_2": "def positive_count(nums):\n    return len([num for num in nums if num > 0]) / len(nums)", "code_3": "def positive_count(nums):\n    pos = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return pos / len(nums)", "code_4": "def positive_count(nums):\n    return sum(map(lambda x: x > 0, nums)) / len(nums)", "code_5": "def positive_count(nums):\n    return sum(num > 0 for num in nums) / len(nums)", "code_6": "def positive_count(nums):\n    return len(list(filter(lambda x: x > 0, nums))) / len(nums)", "code_7": "def positive_count(nums):\n    pos = sum(num > 0 for num in nums)\n    return pos / len(nums)", "code_8": "def positive_count(nums):\n    return sum(num > 0 for num in nums) / float(len(nums))", "code_9": "def positive_count(nums):\n    return len([num for num in nums if num > 0]) / float(len(nums))", "code_10": "def positive_count(nums):\n    pos = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            pos += 1\n    return pos / total", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/443", "prompt": "\n\ndef largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    >>> largest_neg([1,2,3,-4,-6])\n    -6\n    >>> largest_neg([1,2,3,-8,-9])\n    -9\n    >>> largest_neg([1,2,3,4,-1])\n    -1\n    \"\"\"\n", "solution": "     \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 11, "code_1": "def largest_neg(list1):\n    return max(filter(lambda x: x < 0, list1))", "code_2": "def largest_neg(list1):\n    return max((x for x in list1 if x < 0))", "code_3": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_4": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_5": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_6": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_7": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_8": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_9": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_10": "def largest_neg(list1):\n    return max(x for x in list1 if x < 0)", "code_11": "These solutions are all optimized to find the largest negative number in the given list using a single pass through the list. They use a generator expression to filter out positive numbers and non-negative numbers, and then use the `max()` function to find the largest number in the resulting sequence.", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/444", "prompt": "\n\ndef trim_tuple(test_list, K):\n  \"\"\"\n  Write a function to trim each tuple by k in the given tuple list.\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n  '[(2,), (9,), (2,), (2,)]'\n  >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n  '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n  >>> trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1)\n  '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n  \"\"\"\n", "solution": "  \n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def trim_tuple(test_list, K):\n  return str([t[K:] for t in test_list])", "code_2": "def trim_tuple(test_list, K):\n  return str([tuple(t[i] for i in range(K, len(t))) for t in test_list])", "code_3": "def trim_tuple(test_list, K):\n  return str([t[K:len(t)] for t in test_list])", "code_4": "def trim_tuple(test_list, K):\n  return str([t[K:len(t)] for t in test_list])", "code_5": "def trim_tuple(test_list, K):\n  return str([t[K:] for t in test_list])", "code_6": "def trim_tuple(test_list, K):\n  return str([tuple(t[i] for i in range(K, len(t))) for t in test_list])", "code_7": "def trim_tuple(test_list, K):\n  return str([t[K:] for t in test_list])", "code_8": "def trim_tuple(test_list, K):\n  return str([t[K:len(t)] for t in test_list])", "code_9": "def trim_tuple(test_list, K):\n  return str([tuple(t[i] for i in range(K, len(t))) for t in test_list])", "code_10": "def trim_tuple(test_list, K):\n  return str([t[K:] for t in test_list])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/445", "prompt": "\n\ndef index_multiplication(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n  >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n  ((6, 21), (12, 45), (2, 9), (7, 30))\n  >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) )\n  ((14, 32), (20, 60), (6, 20), (16, 44))\n  >>> index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) )\n  ((24, 45), (30, 77), (12, 33), (27, 60))\n  \"\"\"\n", "solution": "  \n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def index_multiplication(t1, t2):\n    return tuple((x*y for x, y in zip(t1, t2)))", "code_2": "def index_multiplication(t1, t2):\n    return tuple(map(lambda x, y: x*y, t1, t2))", "code_3": "import numpy as np\ndef index_multiplication(t1, t2):\n    return tuple(np.multiply(t1, t2))", "code_4": "import operator\ndef index_multiplication(t1, t2):\n    return tuple(map(operator.mul, t1, t2))", "code_5": "def index_multiplication(t1, t2):\n    return tuple(i*j for i, j in zip(t1, t2))", "code_6": "def index_multiplication(t1, t2):\n    return tuple(x*y for x, y in zip(t1, t2))", "code_7": "def index_multiplication(t1, t2):\n    return tuple(map(lambda x: x[0]*x[1], zip(t1, t2)))", "code_8": "def index_multiplication(t1, t2):\n    return tuple(x*y for x, y in zip(list(t1), list(t2)))", "code_9": "def index_multiplication(t1, t2):\n    return tuple(x*y for x, y in zip(list(t1), t2))", "code_10": "def index_multiplication(t1, t2):\n    return tuple(x*y for x, y in zip(t1, list(t2)))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/446", "prompt": "\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )\n    3\n    >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7])\n    6\n    >>> count_Occurrence((1,2,3,4,5,6),[1,2])\n    2\n    \"\"\"\n", "solution": "    from collections import Counter \n     \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_Occurrence(tup, lst):\n    return sum(tup.count(i) for i in lst)", "code_2": "from collections import Counter\ndef count_Occurrence(tup, lst):\n    return sum(Counter(tup)[i] for i in lst)", "code_3": "def count_Occurrence(tup, lst):\n    return sum(map(tup.count, lst))", "code_4": "import numpy as np\ndef count_Occurrence(tup, lst):\n    return np.sum(np.isin(tup, lst))", "code_5": "def count_Occurrence(tup, lst):\n    return sum(tup.count(i) for i in set(lst) & set(tup))", "code_6": "def count_Occurrence(tup, lst):\n    return sum(tup.count(i) for i in lst if i in tup)", "code_7": "def count_Occurrence(tup, lst):\n    return len([i for i in tup if i in lst])", "code_8": "def count_Occurrence(tup, lst):\n    return sum(1 for i in tup if i in lst)", "code_9": "def count_Occurrence(tup, lst):\n    return sum(map(lambda x: tup.count(x), lst))", "code_10": "def count_Occurrence(tup, lst):\n    return sum(tup.count(i) for i in lst if tup.count(i))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/447", "prompt": "\n\ndef cube_nums(nums):\n \"\"\"\n Write a function to find cubes of individual elements in a list using lambda function.\n >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n >>> cube_nums([10,20,30])\n ([1000, 8000, 27000])\n >>> cube_nums([12,15])\n ([1728, 3375])\n \"\"\"\n", "solution": " \n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "cube_nums = lambda nums: [x**3 for x in nums]", "code_2": "cube_nums = lambda nums: list(map(lambda x: x**3, nums))", "code_3": "from functools import reduce\ncube_nums = lambda nums: reduce(lambda acc, x: acc + [x**3], nums, [])", "code_4": "cube_nums = lambda nums: [pow(x, 3) for x in nums]", "code_5": "cube_nums = lambda nums: list(map(pow, nums, [3]*len(nums)))", "code_6": "import numpy as np\ncube_nums = lambda nums: np.power(nums, 3).tolist()", "code_7": "cube_nums = lambda nums: [x*x*x for x in nums]", "code_8": "cube_nums = lambda nums: [x**3 for x in nums if isinstance(x, (int, float))]", "code_9": "cube_nums = lambda nums: [x*x*x for x in nums if type(x) in (int, float)]", "code_10": "cube_nums = lambda nums: [x**3 for x in filter(lambda x: isinstance(x, (int, float)), nums)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/448", "prompt": "\n\ndef cal_sum(n):\n\t\"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t>>> cal_sum(9)\n\t49\n\t>>> cal_sum(10)\n\t66\n\t>>> cal_sum(11)\n\t88\n\t\"\"\"\n", "solution": "\t \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def cal_sum(n):\n\tperrin = [3, 0, 2]\n\tfor i in range(3, n+1):\n\t\tperrin.append(perrin[i-2] + perrin[i-3])\n\treturn sum(perrin[:n])", "code_2": "def cal_sum(n):\n\ta, b, c = 3, 0, 2\n\ts = a\n\tfor _ in range(2, n):\n\t\ta, b, c = b, c, a + b\n\t\ts += c\n\treturn s", "code_3": "def cal_sum(n):\n\tperrin = [3, 0, 2] + [0] * (n-3)\n\tfor i in range(3, n):\n\t\tperrin[i] = perrin[i-2] + perrin[i-3]\n\treturn sum(perrin)", "code_4": "def cal_sum(n):\n\tperrin = [3, 0, 2]\n\twhile len(perrin) < n:\n\t\tperrin.append(perrin[-2] + perrin[-3])\n\treturn sum(perrin)", "code_5": "def cal_sum(n):\n\ta, b, c = 3, 0, 2\n\ts = 0\n\tfor _ in range(n):\n\t\ts += a\n\t\ta, b, c = b, c, a + b\n\treturn s", "code_6": "def cal_sum(n):\n\tperrin = [3, 0, 2]\n\tfor _ in range(n-3):\n\t\tperrin.append(sum(perrin[-2:]))\n\treturn sum(perrin)", "code_7": "def cal_sum(n):\n\tperrin = [3, 0, 2]\n\twhile len(perrin) < n:\n\t\tperrin += [sum(perrin[-2:])]\n\treturn sum(perrin)", "code_8": "def cal_sum(n):\n\ta, b, c = 3, 0, 2\n\ts = 0\n\tfor _ in range(n):\n\t\ts += a\n\t\ta, b, c = b, c, b + c\n\treturn s", "code_9": "def cal_sum(n):\n\tperrin = [3, 0, 2]\n\tfor _ in range(n-3):\n\t\tperrin += [perrin[-2] + perrin[-3]]\n\treturn sum(perrin)", "code_10": "def cal_sum(n):\n\ta, b, c = 3, 0, 2\n\ts = 0\n\tfor _ in range(n):\n\t\ts += a\n\t\ta, b, c = b, c, b + c\n\t\tif _ == 1:\n\t\t\ta = 3\n\treturn s", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/449", "prompt": "\n\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if 3 points are given.\n    >>> check_Triangle(1,5,2,5,4,6)\n    'Yes'\n    >>> check_Triangle(1,1,1,4,1,5)\n    'No'\n    >>> check_Triangle(1,1,1,1,1,1)\n    'No'\n    \"\"\"\n", "solution": "     \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 == x3) or (y1 == y2 == y3) or (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) else 'Yes'", "code_2": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1-x2)*(y2-y3) == (x2-x3)*(y1-y2) else 'Yes'", "code_3": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = ((x1-x2)**2 + (y1-y2)**2)**0.5\n    b = ((x2-x3)**2 + (y2-y3)**2)**0.5\n    c = ((x1-x3)**2 + (y1-y3)**2)**0.5\n    return 'No' if (a + b <= c) or (a + c <= b) or (b + c <= a) else 'Yes'", "code_4": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) else 'Yes'", "code_5": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1-x2)*(y2-y3) - (x2-x3)*(y1-y2) == 0 else 'Yes'", "code_6": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) or (x1-x2)*(y2-y3) == (x2-x3)*(y1-y2) else 'Yes'", "code_7": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) or ((x1-x2)*(y2-y3) - (x2-x3)*(y1-y2) == 0) else 'Yes'", "code_8": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) or (abs((x1-x2)*(y2-y3) - (x2-x3)*(y1-y2)) < 1e-9) else 'Yes'", "code_9": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) or (abs((x1-x2)*(y2-y3) - (x2-x3)*(y1-y2)) == 0) else 'Yes'", "code_10": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    return 'No' if (x1 == x2 and y1 == y2) or (x2 == x3 and y2 == y3) or (x1 == x3 and y1 == y3) or (abs((x1-x2)*(y2-y3) - (x2-x3)*(y1-y2)) <= 1e-15) else 'Yes'", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/450", "prompt": "\n\ndef extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a give list of string values.\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)\n    ['practice', 'solution']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)\n    ['Python']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)\n    ['exercises']\n    \"\"\"\n", "solution": "    \n    result = [e for e in str if len(e) == l] \n    return result", "results": [1, 1, 0, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def extract_string(str, l):\n    return [s for s in str if len(s) == l]", "code_2": "def extract_string(str, l):\n    return list(filter(lambda s: len(s) == l, str))", "code_3": "def extract_string(str, l):\n    return [s for s in str if s.isdigit() and len(s) == l]", "code_4": "def extract_string(str, l):\n    return [s for s in str if s.isalpha() and len(s) == l]", "code_5": "def extract_string(str, l):\n    return [s for s in str if s.isalnum() and len(s) == l]", "code_6": "def extract_string(str, l):\n    return [s for i, s in enumerate(str) if len(s) == l]", "code_7": "def extract_string(str, l):\n    return [s for s in str if s.startswith(s[0]) and len(s) == l]", "code_8": "def extract_string(str, l):\n    return [s for s in str if s.endswith(s[-1]) and len(s) == l]", "code_9": "def extract_string(str, l):\n    return [s for s in str if s.islower() and len(s) == l]", "code_10": "def extract_string(str, l):\n    return [s for s in str if s.isupper() and len(s) == l]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7600791051976192}
{"task_id": "MBPP/451", "prompt": "\n\ndef remove_whitespaces(text1):\n  \"\"\"\n  Write a function to remove all whitespaces from the given string using regex.\n  >>> remove_whitespaces(' Google    Flutter ')\n  'GoogleFlutter'\n  >>> remove_whitespaces(' Google    Dart ')\n  'GoogleDart'\n  >>> remove_whitespaces(' iOS    Swift ')\n  'iOSSwift'\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.sub(r'\\s+', '',text1))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)", "code_2": "import re\ndef remove_whitespaces(text1):\n    return ''.join(text1.split())", "code_3": "def remove_whitespaces(text1):\n    return text1.replace(' ', '')", "code_4": "def remove_whitespaces(text1):\n    return ''.join(filter(str.strip, text1))", "code_5": "def remove_whitespaces(text1):\n    return ''.join(text1.split(' '))", "code_6": "def remove_whitespaces(text1):\n    return text1.translate(str.maketrans('', '', ' '))", "code_7": "def remove_whitespaces(text1):\n    return ''.join(c for c in text1 if not c.isspace())", "code_8": "def remove_whitespaces(text1):\n    return ''.join(text1.split(' '))", "code_9": "def remove_whitespaces(text1):\n    return ''.join(text1.split())", "code_10": "def remove_whitespaces(text1):\n    return ''.join(text1.split())", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/452", "prompt": "\n\ndef loss_amount(actual_cost,sale_amount):\n  \"\"\"\n  Write a function that gives loss amount if the given amount has loss else return none.\n  >>> loss_amount(1500,1200)\n  None\n  >>> loss_amount(100,200)\n  100\n  >>> loss_amount(2000,5000)\n  3000\n  \"\"\"\n", "solution": "   \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def loss_amount(actual_cost, sale_amount):\n    return None if sale_amount >= actual_cost else actual_cost - sale_amount", "code_2": "def loss_amount(actual_cost, sale_amount):\n    return max(actual_cost - sale_amount, 0) or None", "code_3": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if actual_cost > sale_amount else None", "code_4": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if sale_amount < actual_cost else None", "code_5": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if actual_cost - sale_amount > 0 else None", "code_6": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if actual_cost > sale_amount else None", "code_7": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if sale_amount < actual_cost else None", "code_8": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if actual_cost - sale_amount > 0 else None", "code_9": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if actual_cost > sale_amount else None", "code_10": "def loss_amount(actual_cost, sale_amount):\n    return (actual_cost - sale_amount) if sale_amount < actual_cost else None", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/453", "prompt": "\n\ndef sumofFactors(n) :\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(30)\n    48\n    >>> sumofFactors(6)\n    8\n    \"\"\"\n", "solution": "    import math \n     \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ", "results": [1, 1, 0, 0, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0)", "code_2": "def sumofFactors(n):\n    return sum(filter(lambda i: n % i == 0 and i % 2 == 0, range(2, n + 1)))", "code_3": "def sumofFactors(n):\n    return sum(i for i in range(2, n // 2 + 1, 2) if n % i == 0)", "code_4": "def sumofFactors(n):\n    return sum(i for i in range(2, int(n**0.5) + 1, 2) if n % i == 0) + (n if n % 2 == 0 else 0)", "code_5": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1) if not n % i) + (n if n % 2 == 0 else 0) - n", "code_6": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1, 2) if n % i == 0) + (n if n % 2 == 0 and n * n <= n else 0)", "code_7": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1) if n % i == 0) - sum(i for i in range(1, n + 1) if n % i == 0 and i % 2 != 0)", "code_8": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1) if n % i == 0) - sum(i for i in range(1, n, 2))", "code_9": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1) if n % i == 0) - sum(range(1, n, 2))", "code_10": "def sumofFactors(n):\n    return sum(i for i in range(2, n + 1) if n % i == 0) - sum(filter(lambda i: i % 2 != 0, range(1, n)))", "pass@3": 0.7083333333333333, "nDCG@10": 0.4373524791503101}
{"task_id": "MBPP/454", "prompt": "\n\ndef text_match_wordz(text):\n        \"\"\"\n        Write a function that matches a word containing 'z'.\n        >>> text_match_wordz(\"pythonz.\")\n        ('Found a match!')\n        >>> text_match_wordz(\"xyz.\")\n        ('Found a match!')\n        >>> text_match_wordz(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def text_match_wordz(text):\n    return 'Found a match!' if 'z' in text.split() else 'Not matched!'", "code_2": "def text_match_wordz(text):\n    return 'Found a match!' if any(z in word for word in text.split()) else 'Not matched!'", "code_3": "import re\ndef text_match_wordz(text):\n    return 'Found a match!' if re.search(r'\\b\\w*z\\w*\\b', text) else 'Not matched!'", "code_4": "def text_match_wordz(text):\n    return 'Found a match!' if any('z' in word for word in text.split()) else 'Not matched!'", "code_5": "def text_match_wordz(text):\n    return 'Found a match!' if any(word.count('z') for word in text.split()) else 'Not matched!'", "code_6": "def text_match_wordz(text):\n    return 'Found a match!' if any(filter(lambda word: 'z' in word, text.split())) else 'Not matched!'", "code_7": "def text_match_wordz(text):\n    return 'Found a match!' if any(map(lambda word: 'z' in word, text.split())) else 'Not matched!'", "code_8": "def text_match_wordz(text):\n    return 'Found a match!' if sum(word.count('z') for word in text.split()) > 0 else 'Not matched!'", "code_9": "def text_match_wordz(text):\n    return 'Found a match!' if len([word for word in text.split() if 'z' in word]) > 0 else 'Not matched!'", "code_10": "def text_match_wordz(text):\n    return 'Found a match!' if next((True for word in text.split() if 'z' in word), False) else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 0.6410457898283654}
{"task_id": "MBPP/455", "prompt": "\n\ndef check_monthnumb_number(monthnum2):\n  \"\"\"\n  Write a function to check whether the given month number contains 31 days or not.\n  >>> check_monthnumb_number(5)\n  True\n  >>> check_monthnumb_number(2)\n  False\n  >>> check_monthnumb_number(6)\n  False\n  \"\"\"\n", "solution": "  \n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "results": [1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def check_monthnumb_number(monthnum2):\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "code_2": "def check_monthnumb_number(monthnum2):\n    return monthnum2 % 2 != 0 or monthnum2 == 8", "code_3": "def check_monthnumb_number(monthnum2):\n    return [False, True, False, True, False, True, False, True, False, True, False, True][monthnum2 - 1]", "code_4": "def check_monthnumb_number(monthnum2):\n    return (monthnum2 < 8 and monthnum2 % 2 != 0) or (monthnum2 >= 8 and monthnum2 % 2 == 0)", "code_5": "def check_monthnumb_number(monthnum2):\n    return not (monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11)", "code_6": "def check_monthnumb_number(monthnum2):\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "code_7": "def check_monthnumb_number(monthnum2):\n    return monthnum2 in range(1, 13, 2) or monthnum2 == 8", "code_8": "def check_monthnumb_number(monthnum2):\n    return monthnum2 in (1, 3, 5, 7, 8, 10, 12)", "code_9": "def check_monthnumb_number(monthnum2):\n    return not (monthnum2 in (4, 6, 9, 11))", "code_10": "def check_monthnumb_number(monthnum2):\n    return monthnum2 not in (2, 4, 6, 9, 11)", "pass@3": 1.0, "nDCG@10": 0.823699893396571}
{"task_id": "MBPP/456", "prompt": "\n\ndef reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    >>> reverse_string_list(['john','amal','joel','george'])\n    ['nhoj','lama','leoj','egroeg']\n    >>> reverse_string_list(['jack','john','mary'])\n    ['kcaj','nhoj','yram']\n    \"\"\"\n", "solution": "    \n    result = [x[::-1] for x in stringlist]\n    return result", "results": [1, 1, 1, 1, 1, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist]", "code_2": "def reverse_string_list(stringlist):\n    return [''.join(reversed(s)) for s in stringlist]", "code_3": "def reverse_string_list(stringlist):\n    return list(map(lambda s: s[::-1], stringlist))", "code_4": "def reverse_string_list(stringlist):\n    return list(map(''.join, map(reversed, stringlist)))", "code_5": "def reverse_string_list(stringlist):\n    return [s[len(s)::-1] for s in stringlist]", "code_6": "def reverse_string_list(stringlist):\n    return [s[-1:-len(s)-1:-1] for s in stringlist]", "code_7": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in reversed(stringlist)]", "code_8": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist[::-1]][::-1]", "code_9": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist[::-1]]", "code_10": "def reverse_string_list(stringlist):\n    return [s[::-1] for s in stringlist[::-1]][::-1]", "pass@3": 1.0, "nDCG@10": 0.8603818544462509}
{"task_id": "MBPP/457", "prompt": "\n\ndef Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    >>> Find_Min([[1],[1,2],[1,2,3]])\n    [1]\n    >>> Find_Min([[1,1],[1,1,1],[1,2,7,8]])\n    [1,1]\n    >>> Find_Min([['x'],['x','y'],['x','y','z']])\n    ['x']\n    \"\"\"\n", "solution": "     \n    minList = min((x) for x in lst) \n    return minList", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def Find_Min(lst):\n    return min(lst, key=len)", "code_2": "def Find_Min(lst):\n    return sorted(lst, key=len)[0]", "code_3": "def Find_Min(lst):\n    return [i for i in lst if len(i) == len(min(lst, key=len))][0]", "code_4": "def Find_Min(lst):\n    return next(i for i in sorted(lst, key=len))", "code_5": "def Find_Min(lst):\n    return [i for i in lst if len(i) == min(map(len, lst))][0]", "code_6": "def Find_Min(lst):\n    return [i for i in lst if all(len(i) <= len(j) for j in lst)][0]", "code_7": "def Find_Min(lst):\n    return [i for i in lst if not any(len(i) > len(j) for j in lst)][0]", "code_8": "def Find_Min(lst):\n    return [i for i in lst if sum(len(i) < len(j) for j in lst) == len(lst) - 1][0]", "code_9": "def Find_Min(lst):\n    return [i for i in lst if len(i) == min(len(j) for j in lst)][0]", "code_10": "def Find_Min(lst):\n    return [i for i in lst if len(i) == min(len(j) for j in lst if j != i)][0]", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/458", "prompt": "\n\ndef rectangle_area(l,b):\n  \"\"\"\n  Write a function to find the area of a rectangle.\n  >>> rectangle_area(10,20)\n  200\n  >>> rectangle_area(10,5)\n  50\n  >>> rectangle_area(4,2)\n  8\n  \"\"\"\n", "solution": "  \n  area=l*b\n  return area", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def rectangle_area(l, b): return l * b", "code_2": "rectangle_area = lambda l, b: l * b", "code_3": "def rectangle_area(l, b):\n    return abs(l) * abs(b)", "code_4": "def rectangle_area(l, b):\n    if l < 0 or b < 0:\n        raise ValueError(\"Length and breadth must be positive\")\n    return l * b", "code_5": "def rectangle_area(l, b):\n    return l * b if l >= 0 and b >= 0 else None", "code_6": "def rectangle_area(l, b):\n    try:\n        return l * b\n    except TypeError:\n        return None", "code_7": "def rectangle_area(l, b):\n    return l * b if isinstance(l, (int, float)) and isinstance(b, (int, float)) else None", "code_8": "def rectangle_area(l, b):\n    return l * b if l > 0 and b > 0 else \"Invalid input\"", "code_9": "def rectangle_area(l, b):\n    return l * b if l >= 0 and b >= 0 else \"Length and breadth must be positive\"", "code_10": "def rectangle_area(l, b):\n    return l * b if l * b > 0 else \"Length and breadth must be non-zero\"", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/459", "prompt": "\n\ndef remove_uppercase(str1):\n  \"\"\"\n  Write a function to remove uppercase substrings from a given string by using regex.\n  >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n  'cstyoravoitshos'\n  >>> remove_uppercase('wAtchTheinTernEtrAdIo')\n  'wtchheinerntrdo'\n  >>> remove_uppercase('VoicESeaRchAndreComMendaTionS')\n  'oiceachndreomendaion'\n  \"\"\"\n", "solution": "  import re\n  \n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)", "code_2": "import re\ndef remove_uppercase(str1):\n    return ''.join(c for c in str1 if not c.isupper())", "code_3": "import re\ndef remove_uppercase(str1):\n    return ''.join(re.findall('[^A-Z]', str1))", "code_4": "import re\ndef remove_uppercase(str1):\n    return ''.join(filter(str.islower, str1))", "code_5": "import re\ndef remove_uppercase(str1):\n    return ''.join(ch for ch in str1 if ch.isalpha() and ch.islower())", "code_6": "import re\ndef remove_uppercase(str1):\n    return ''.join(ch for ch in str1 if ch == ch.lower())", "code_7": "import re\ndef remove_uppercase(str1):\n    return ''.join(ch for ch in str1 if ch.lower() == ch)", "code_8": "import re\ndef remove_uppercase(str1):\n    return ''.join(ch for ch in str1 if ch.isascii() and ch.islower())", "code_9": "import re\ndef remove_uppercase(str1):\n    return ''.join(ch for ch in str1 if ch.isalpha() and ch.isascii() and ch.islower())", "code_10": "import re\ndef remove_uppercase(str1):\n    return ''.join(ch for ch in str1 if ch.isalpha() and ch.isascii() and ch == ch.lower())", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/460", "prompt": "\n\ndef Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[1,2,3],[4, 5]])\n    [1,4]\n    >>> Extract([[9,8,1],[1,2]])\n    [9,1]\n    \"\"\"\n", "solution": "     \n    return [item[0] for item in lst] ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def Extract(lst):\n    return [sub[0] for sub in lst]", "code_2": "def Extract(lst):\n    return list(map(lambda x: x[0], lst))", "code_3": "def Extract(lst):\n    return [*map(lambda x: x[0], lst)]", "code_4": "def Extract(lst):\n    return [next(iter(sub)) for sub in lst]", "code_5": "def Extract(lst):\n    return [sub.pop(0) for sub in lst]", "code_6": "def Extract(lst):\n    return [sub[0] for sub in lst if sub]", "code_7": "def Extract(lst):\n    return [sub[0] if sub else None for sub in lst]", "code_8": "def Extract(lst):\n    return [sub[0] if len(sub) > 0 else None for sub in lst]", "code_9": "def Extract(lst):\n    return [sub[0] for sub in lst if isinstance(sub, list)]", "code_10": "def Extract(lst):\n    return [sub[0] for sub in lst if hasattr(sub, '__getitem__')]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/461", "prompt": "\n\ndef upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    >>> upper_ctr('PYthon')\n    1\n    >>> upper_ctr('BigData')\n    1\n    >>> upper_ctr('program')\n    0\n    \"\"\"\n", "solution": "    \n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def upper_ctr(s): return sum(1 for c in s if c.isupper())", "code_2": "def upper_ctr(s): return len([c for c in s if c.isupper()])", "code_3": "def upper_ctr(s): return sum(c.isupper() for c in s)", "code_4": "def upper_ctr(s): return len(list(filter(str.isupper, s)))", "code_5": "def upper_ctr(s): return sum(map(str.isupper, s))", "code_6": "import re\ndef upper_ctr(s): return len(re.findall(r'[A-Z]', s))", "code_7": "def upper_ctr(s): return len([c for c in s if 'A' <= c <= 'Z'])", "code_8": "def upper_ctr(s): return len([c for c in s if ord(c) in range(65, 91)])", "code_9": "def upper_ctr(s): return len([c for c in s if 65 <= ord(c) <= 90])", "code_10": "def upper_ctr(s): return sum(ord(c) in range(65, 91) for c in s)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/462", "prompt": "\n\ndef combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    >>> combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    >>> combinations_list(['red', 'green', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n    \"\"\"\n", "solution": "    \n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from itertools import chain, combinations\ndef combinations_list(lst):\n    return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst)+1)))", "code_2": "def combinations_list(lst):\n    return [lst[i: j] for i in range(len(lst)) for j in range(i + 1, len(lst) + 1)]", "code_3": "def combinations_list(lst):\n    return sum([[lst[i: j] for j in range(len(lst) + 1)] for i in range(len(lst) + 1)], [])", "code_4": "def combinations_list(lst):\n    return [x for i in range(len(lst)) for j in range(i+1, len(lst)+1) for x in (lst[i:j],)]", "code_5": "def combinations_list(lst):\n    return [lst[i:j] for i in range(len(lst)+1) for j in range(i+1, len(lst)+1)]", "code_6": "def combinations_list(lst):\n    return [lst[i:j] for i in range(len(lst)) for j in range(i+1, len(lst)+1)]", "code_7": "def combinations_list(lst):\n    return [lst[i:j] for i in range(len(lst)+1) for j in range(i+1, len(lst)+1)] + [[]]", "code_8": "def combinations_list(lst):\n    return [lst[i:j] for i in range(len(lst)+1) for j in range(i+1, len(lst)+1)] + [[]] * (1 if [] in lst else 0)", "code_9": "def combinations_list(lst):\n    return [lst[i:j] for i in range(len(lst)+1) for j in range(i+1, len(lst)+1)] + ([[]] if [] not in lst else [])", "code_10": "def combinations_list(lst):\n    return [lst[i:j] for i in range(len(lst)+1) for j in range(i+1, len(lst)+1)] + ([[]] if lst else [])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/463", "prompt": "\n\ndef max_subarray_product(arr):\n\t\"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t>>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n\t112\n\t>>> max_subarray_product([6, -3, -10, 0, 2])\n\t180\n\t>>> max_subarray_product([-2, -40, 0, -2, -3])\n\t80\n\t\"\"\"\n", "solution": "\t\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_subarray_product(arr):\n    max_product, min_product, result = arr[0], arr[0], arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "code_2": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n    return max(max_product)", "code_3": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "code_4": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "code_5": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "code_6": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "code_7": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "code_8": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "code_9": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "code_10": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = [0] * n\n    min_product = [0] * n\n    max_product[0] = min_product[0] = result = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], min_product[i - 1] * arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i - 1] * arr[i])\n            min_product[i] = min(arr[i], max_product[i - 1] * arr[i])\n        result = max(result, max_product[i])\n    return result", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/464", "prompt": "\n\ndef check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)\n    False\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)\n    True\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)\n    False\n    \"\"\"\n", "solution": "    \n    result = all(x == n for x in dict.values()) \n    return result", "results": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def check_value(d, n):\n    return all(v == n for v in d.values())", "code_2": "def check_value(d, n):\n    return len(set(d.values())) == 1 and next(iter(d.values())) == n", "code_3": "def check_value(d, n):\n    return d and all(map(lambda x: x == n, d.values()))", "code_4": "def check_value(d, n):\n    return d and d.values().count(n) == len(d)", "code_5": "def check_value(d, n):\n    return d and min(d.values()) == max(d.values()) == n", "code_6": "def check_value(d, n):\n    return d and all(map(d.values().__contains__, [n]))", "code_7": "def check_value(d, n):\n    return d and len({n} - set(d.values())) == 0", "code_8": "def check_value(d, n):\n    return d and sum(map(lambda x: x == n, d.values())) == len(d)", "code_9": "def check_value(d, n):\n    return d and reduce(lambda x, y: x and y == n, d.values(), True)", "code_10": "def check_value(d, n):\n    return d and not any(map(lambda x: x != n, d.values()))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7605591431973849}
{"task_id": "MBPP/465", "prompt": "\n\ndef drop_empty(dict1):\n  \"\"\"\n  Write a function to drop empty items from a given dictionary.\n  >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n  {'c1': 'Red', 'c2': 'Green'}\n  >>> drop_empty({'c1': 'Red', 'c2': None, 'c3':None})\n  {'c1': 'Red'}\n  >>> drop_empty({'c1': None, 'c2': 'Green', 'c3':None})\n  { 'c2': 'Green'}\n  \"\"\"\n", "solution": "  \n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if v is not None}", "code_2": "def drop_empty(dict1):\n  return dict(filter(lambda item: item[1] is not None, dict1.items()))", "code_3": "def drop_empty(dict1):\n  return {k: dict1[k] for k in dict1 if dict1[k] is not None}", "code_4": "def drop_empty(dict1):\n  return dict(item for item in dict1.items() if item[1] is not None)", "code_5": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if v}", "code_6": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if not (v is None)}", "code_7": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if isinstance(v, str)}", "code_8": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if v != None}", "code_9": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if v and isinstance(v, str)}", "code_10": "def drop_empty(dict1):\n  return {k: v for k, v in dict1.items() if v != ''}", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/466", "prompt": "\n\ndef find_peak(arr, n):\n\t\"\"\"\n\tWrite a function to find the peak element in the given array.\n\t>>> find_peak([1, 3, 20, 4, 1, 0], 6)\n\t2\n\t>>> find_peak([2, 3, 4, 5, 6], 5)\n\t4\n\t>>> find_peak([8, 9, 11, 12, 14, 15], 6)\n\t5\n\t\"\"\"\n", "solution": "\tdef find_peak_util(arr, low, high, n): \n\t\tmid = low + (high - low)/2\n\t\tmid = int(mid) \n\t\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\t\treturn mid \n\t\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\t\telse: \n\t\t\treturn find_peak_util(arr, (mid + 1), high, n) \n\t \n\treturn find_peak_util(arr, 0, n - 1, n) ", "results": [1, 1, 1, 1, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def find_peak(arr, n):\n    if n == 1:\n        return 0\n    if arr[0] >= arr[1]:\n        return 0\n    if arr[n - 1] >= arr[n - 2]:\n        return n - 1\n    for i in range(1, n - 1):\n        if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]:\n            return i", "code_2": "def find_peak(arr, n):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1", "code_3": "def find_peak(arr, n):\n    for i in range(1, n - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            return i\n    if arr[0] > arr[1]:\n        return 0\n    if arr[n - 1] > arr[n - 2]:\n        return n - 1", "code_4": "def find_peak(arr, n):\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return n - 1", "code_5": "def find_peak(arr, n):\n    return arr.index(max(arr))", "code_6": "def find_peak(arr, n):\n    return next(i for i in range(1, n - 1) if arr[i] > arr[i - 1] and arr[i] > arr[i + 1])", "code_7": "def find_peak(arr, n):\n    return max(range(n), key=arr.__getitem__)", "code_8": "def find_peak(arr, n):\n    return reduce(lambda a, b: a if arr[a] > arr[b] else b, range(n))", "code_9": "def find_peak(arr, n):\n    return sorted(range(n), key=lambda i: arr[i], reverse=True)[0]", "code_10": "def find_peak(arr, n):\n    return heapq.nlargest(1, range(n), key=arr.__getitem__)[0]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7885497208855957}
{"task_id": "MBPP/467", "prompt": "\n\ndef decimal_to_Octal(deciNum):\n    \"\"\"\n    Write a python function to convert decimal number to octal number.\n    >>> decimal_to_Octal(10)\n    12\n    >>> decimal_to_Octal(2)\n    2\n    >>> decimal_to_Octal(33)\n    41\n    \"\"\"\n", "solution": "    \n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)", "results": [0, 0, 1, 0, 0, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def decimal_to_Octal(deciNum): return oct(deciNum)[2:]", "code_2": "def decimal_to_Octal(deciNum): return format(deciNum, 'o')", "code_3": "def decimal_to_Octal(deciNum): return int(format(deciNum, 'o'))", "code_4": "def decimal_to_Octal(deciNum): return int(str(deciNum), 8)", "code_5": "def decimal_to_Octal(deciNum): return int(bin(deciNum)[2:], 3)", "code_6": "def decimal_to_Octal(deciNum): return int(f'{deciNum:o}')", "code_7": "def decimal_to_Octal(deciNum): return int(f'{deciNum:0o}')", "code_8": "def decimal_to_Octal(deciNum): return int(f'{deciNum:#o}')[2:]", "code_9": "def decimal_to_Octal(deciNum): return int(f'{deciNum:08o}')", "code_10": "def decimal_to_Octal(deciNum): return int(f'{deciNum:0>8o}')", "pass@3": 0.9166666666666666, "nDCG@10": 0.3916830858804163}
{"task_id": "MBPP/468", "prompt": "\n\ndef max_product(arr, n ):\n\t\"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t>>> max_product([3, 100, 4, 5, 150, 6], 6)\n\t45000\n\t>>> max_product([4, 42, 55, 68, 80], 5)\n\t50265600\n\t>>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n\t21780000\n\t\"\"\"\n", "solution": "\t \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_product(arr, n):\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(arr[i], dp[i - 1] * arr[i])\n    return max(dp)", "code_2": "def max_product(arr, n):\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_product = arr[0]\n    for i in range(1, n):\n        temp = max_so_far\n        max_so_far = max(arr[i], max(arr[i] * max_so_far, arr[i] * min_so_far))\n        min_so_far = min(arr[i], min(arr[i] * temp, arr[i] * min_so_far))\n        max_product = max(max_product, max_so_far)\n    return max_product", "code_3": "def max_product(arr, n):\n    max_ending_here = min_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max(arr[i] * max_ending_here, arr[i] * min_ending_here))\n        min_ending_here = min(arr[i], min(arr[i] * temp, arr[i] * min_ending_here))\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "code_4": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "code_5": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "code_6": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "code_7": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "code_8": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "code_9": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "code_10": "def max_product(arr, n):\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i - 1] > 1:\n            arr[i] *= arr[i - 1]\n        max_product = max(max_product, arr[i])\n    return max_product", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/469", "prompt": "\n\ndef max_profit(price, k):\n    \"\"\"\n    Write a function to find the maximum profit earned from a maximum of k stock transactions\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n    7\n    >>> max_profit([10, 6, 8, 4, 2], 2)\n    2\n    \"\"\"\n", "solution": "    \n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_2": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_3": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_4": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_5": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_6": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_7": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_8": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_9": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "code_10": "def max_profit(price, k):\n    if not price or k <= 0: return 0\n    n = len(price)\n    if k >= n // 2:\n        return sum(max(price[i] - price[i - 1], 0) for i in range(1, n))\n    dp = [0] * (k + 1)\n    for i in range(1, n):\n        diff = price[i] - price[i - 1]\n        for j in range(k, 0, -1):\n            dp[j] = max(dp[j] + diff, dp[j - 1] + max(diff, 0))\n    return dp[k]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/470", "prompt": "\n\ndef add_pairwise(test_tup):\n  \"\"\"\n  Write a function to find the pairwise addition of the elements of the given tuples.\n  >>> add_pairwise((1, 5, 7, 8, 10))\n  (6, 12, 15, 18)\n  >>> add_pairwise((2, 6, 8, 9, 11))\n  (8, 14, 17, 20)\n  >>> add_pairwise((3, 7, 9, 10, 12))\n  (10, 16, 19, 22)\n  \"\"\"\n", "solution": "  \n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(0, len(test_tup), 2))", "code_2": "def add_pairwise(test_tup):\n    return tuple(map(sum, zip(test_tup[::2], test_tup[1::2])))", "code_3": "def add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup[::2], test_tup[1::2]))", "code_4": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) // 2))", "code_5": "def add_pairwise(test_tup):\n    return tuple(sum(pair) for pair in zip(test_tup[::2], test_tup[1::2]))", "code_6": "def add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(*[iter(test_tup)] * 2))", "code_7": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2))", "code_8": "def add_pairwise(test_tup):\n    return tuple(sum(test_tup[i:i + 2]) for i in range(0, len(test_tup), 2))", "code_9": "def add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup[:-1:2], test_tup[1::2]))", "code_10": "def add_pairwise(test_tup):\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/471", "prompt": "\n\ndef find_remainder(arr, lens, n):\n    \"\"\"\n    Write a python function to find remainder of array multiplication divided by n.\n    >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11)\n    9\n    >>> find_remainder([1,1,1],3,1)\n    0\n    >>> find_remainder([1,2,1],3,2)\n    0\n    \"\"\"\n", "solution": "     \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "results": [1, 0, 0, 0, 0, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def find_remainder(arr, lens, n):\n    rem = 1\n    for i in range(lens):\n        rem = (rem * arr[i]) % n\n    return rem", "code_2": "def find_remainder(arr, lens, n):\n    return reduce(lambda x, y: (x * y) % n, arr, 1)", "code_3": "def find_remainder(arr, lens, n):\n    return pow(reduce(lambda x, y: x * y, arr), 1, n)", "code_4": "def find_remainder(arr, lens, n):\n    return functools.reduce(lambda x, y: (x * y) % n, arr, 1)", "code_5": "def find_remainder(arr, lens, n):\n    return pow(functools.reduce(lambda x, y: x * y, arr), 1, n)", "code_6": "def find_remainder(arr, lens, n):\n    rem = 1\n    for num in arr:\n        rem = (rem * num) % n\n    return rem", "code_7": "def find_remainder(arr, lens, n):\n    return functools.reduce(operator.mul, arr, 1) % n", "code_8": "def find_remainder(arr, lens, n):\n    return pow(functools.reduce(operator.mul, arr), 1, n)", "code_9": "def find_remainder(arr, lens, n):\n    rem = 1\n    for num in arr:\n        rem = (rem * num) % n\n        if rem == 0:\n            break\n    return rem", "code_10": "def find_remainder(arr, lens, n):\n    return math.prod(arr) % n", "pass@3": 0.7083333333333333, "nDCG@10": 0.3647442587311446}
{"task_id": "MBPP/472", "prompt": "\n\ndef check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    >>> check_Consecutive([1,2,3,4,5])\n    True\n    >>> check_Consecutive([1,2,3,5,6])\n    False\n    >>> check_Consecutive([1,2,1])\n    False\n    \"\"\"\n", "solution": "     \n    return sorted(l) == list(range(min(l),max(l)+1)) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_Consecutive(l):\n    return sorted(l) == list(range(min(l), max(l)+1))", "code_2": "def check_Consecutive(l):\n    return len(set(l)) == len(l) == max(l) - min(l) + 1", "code_3": "def check_Consecutive(l):\n    return all(x == y for x, y in enumerate(sorted(l), start=min(l)))", "code_4": "def check_Consecutive(l):\n    return all(l[i] - l[i-1] == 1 for i in range(1, len(l))) and max(l) - min(l) == len(l) - 1", "code_5": "def check_Consecutive(l):\n    return len(l) == len(set(l)) == max(l) - min(l) + 1", "code_6": "def check_Consecutive(l):\n    return len(l) == len(set(l)) and max(l) - min(l) == len(l) - 1", "code_7": "def check_Consecutive(l):\n    return len(l) == len(set(l)) == max(l) - min(l) + 1 == len(set(range(min(l), max(l)+1)))", "code_8": "def check_Consecutive(l):\n    return len(l) == len(set(l)) and all(l[i] - l[i-1] == 1 for i in range(1, len(l)))", "code_9": "def check_Consecutive(l):\n    return len(l) == len(set(l)) and all(l[i] == l[0] + i for i in range(len(l)))", "code_10": "def check_Consecutive(l):\n    return len(l) == len(set(l)) and all(l[i] == l[i-1] + 1 for i in range(1, len(l)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/473", "prompt": "\n\ndef tuple_intersection(test_list1, test_list2):\n  \"\"\"\n  Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])\n  {(4, 5), (3, 4), (5, 6)}\n  >>> tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)])\n  {(4, 7), (1, 4)}\n  >>> tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)])\n  {(1, 3), (2, 3)}\n  \"\"\"\n", "solution": "  \n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def tuple_intersection(l1, l2):\n    return set(l1) & set(l2)", "code_2": "def tuple_intersection(l1, l2):\n    return {t for t in l1 if t in l2}", "code_3": "def tuple_intersection(l1, l2):\n    return set(map(tuple, map(sorted, l1))) & set(map(tuple, map(sorted, l2)))", "code_4": "def tuple_intersection(l1, l2):\n    return set(frozenset(t) for t in l1) & set(frozenset(t) for t in l2)", "code_5": "def tuple_intersection(l1, l2):\n    return set(l1).intersection(l2)", "code_6": "def tuple_intersection(l1, l2):\n    return set(l1).symmetric_difference(set(l2) - set(l1))", "code_7": "def tuple_intersection(l1, l2):\n    return set(l1).difference(set(l1) - set(l2))", "code_8": "def tuple_intersection(l1, l2):\n    return set(filter(lambda t: t in l2, l1))", "code_9": "def tuple_intersection(l1, l2):\n    return set(reduce(lambda a, b: a + b, map(lambda t: [t, (t[1], t[0])], l1))) & set(l2)", "code_10": "def tuple_intersection(l1, l2):\n    return set(itertools.filterfalse(lambda t: t not in l2, l1))", "pass@3": 0.30000000000000004, "nDCG@10": 0.1100458831490401}
{"task_id": "MBPP/474", "prompt": "\n\ndef replace_char(str1,ch,newch):\n \"\"\"\n Write a function to replace characters in a string.\n >>> replace_char(\"polygon\",'y','l')\n (\"pollgon\")\n >>> replace_char(\"character\",'c','a')\n (\"aharaater\")\n >>> replace_char(\"python\",'l','a')\n (\"python\")\n \"\"\"\n", "solution": " \n str2 = str1.replace(ch, newch)\n return str2", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 11, "code_1": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)", "code_2": "def replace_char(str1, ch, newch):\n    return ''.join(newch if c == ch else c for c in str1)", "code_3": "def replace_char(str1, ch, newch):\n    return ''.join(map(lambda c: newch if c == ch else c, str1))", "code_4": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in str1])", "code_5": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in list(str1)])", "code_6": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in tuple(str1)])", "code_7": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in iter(str1)])", "code_8": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in str1])", "code_9": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in str1])", "code_10": "def replace_char(str1, ch, newch):\n    return ''.join([newch if c == ch else c for c in str1])", "code_11": "Note: All solutions are functionally equivalent and use list comprehension to iterate over the string and replace the characters. The only difference is the type of iterable used in the list comprehension.", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/475", "prompt": "\n\ndef sort_counter(dict1):\n \"\"\"\n Write a function to sort counter by value.\n >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\n [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n >>> sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\n [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n \"\"\"\n", "solution": " from collections import Counter\n \n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using `sorted` function with `lambda`:\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)", "code_2": "Using `sorted` function with `itemgetter`:\nfrom operator import itemgetter\ndef sort_counter(dict1):\n    return sorted(dict1.items(), key=itemgetter(1), reverse=True)", "code_3": "Using `sort` method with `lambda`:\ndef sort_counter(dict1):\n    items = list(dict1.items())\n    items.sort(key=lambda x: x[1], reverse=True)\n    return items", "code_4": "Using `sort` method with `itemgetter`:\nfrom operator import itemgetter\ndef sort_counter(dict1):\n    items = list(dict1.items())\n    items.sort(key=itemgetter(1), reverse=True)\n    return items", "code_5": "Using `heapq.nlargest`:\nimport heapq\ndef sort_counter(dict1):\n    return heapq.nlargest(len(dict1), dict1.items(), key=lambda x: x[1])", "code_6": "Using `collections.Counter`:\nfrom collections import Counter\ndef sort_counter(dict1):\n    return Counter(dict1).most_common()", "code_7": "Using `pandas` library:\nimport pandas as pd\ndef sort_counter(dict1):\n    return pd.Series(dict1).sort_values(ascending=False).to_dict().items()", "code_8": "Using `numpy` library:\nimport numpy as np\ndef sort_counter(dict1):\n    keys = np.array(list(dict1.keys()))\n    values = np.array(list(dict1.values()))\n    sorted_indices = np.argsort(values)[::-1]\n    return list(zip(keys[sorted_indices], values[sorted_indices]))", "code_9": "Using `dict.fromkeys` and `min`:\ndef sort_counter(dict1):\n    return [(k, dict1[k]) for k in sorted(dict1, key=dict1.get, reverse=True)]", "code_10": "Using `dict.fromkeys` and `max`:\ndef sort_counter(dict1):\n    return [(k, dict1[k]) for k in sorted(dict1, key=dict1.get)]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/476", "prompt": "\n\ndef big_sum(nums):\n      \"\"\"\n      Write a python function to find the sum of the largest and smallest value in a given array.\n      >>> big_sum([1,2,3])\n      4\n      >>> big_sum([-1,2,3,4])\n      3\n      >>> big_sum([2,3,6])\n      8\n      \"\"\"\n", "solution": "      \n      sum= max(nums)+min(nums)\n      return sum", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def big_sum(nums):\n    return max(nums) + min(nums)", "code_2": "def big_sum(nums):\n    smallest, largest = float('inf'), float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest + largest", "code_3": "def big_sum(nums):\n    return sum(sorted(nums)[::len(nums)-1])", "code_4": "def big_sum(nums):\n    return sum(heapq.nsmallest(1, nums) + heapq.nlargest(1, nums))", "code_5": "def big_sum(nums):\n    return sum(nums.pop(nums.index(min(nums))) + nums.pop(nums.index(max(nums))))", "code_6": "def big_sum(nums):\n    return sum(reduce(lambda a, b: (min(a, b), max(a, b)), nums))", "code_7": "def big_sum(nums):\n    return sum(functools.reduce(lambda a, b: (min(a[0], b), max(a[1], b)), nums, (float('inf'), float('-inf'))))", "code_8": "def big_sum(nums):\n    return sum(np.array(nums)[[np.argmin(nums), np.argmax(nums)]])", "code_9": "def big_sum(nums):\n    return sum(pd.Series(nums).agg(['min', 'max']))", "code_10": "def big_sum(nums):\n    return sum(statistics.extremes(nums))", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/477", "prompt": "\n\ndef is_lower(string):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  >>> is_lower(\"InValid\")\n  \"invalid\"\n  >>> is_lower(\"TruE\")\n  \"true\"\n  >>> is_lower(\"SenTenCE\")\n  \"sentence\"\n  \"\"\"\n", "solution": "  \n  return (string.lower())", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_lower(string):\n    return string.lower()", "code_2": "def is_lower(string):\n    return ''.join(chr(ord(c) + 32) if 65 <= ord(c) <= 90 else c for c in string)", "code_3": "def is_lower(string):\n    return ''.join(map(lambda c: chr(ord(c) + 32) if 65 <= ord(c) <= 90 else c, string))", "code_4": "def is_lower(string):\n    return ''.join([chr(ord(c) + 32) if 65 <= ord(c) <= 90 else c for c in string])", "code_5": "def is_lower(string):\n    return ''.join(chr(ord(c) | 32) if 65 <= ord(c) <= 90 else c for c in string)", "code_6": "def is_lower(string):\n    return ''.join(chr(ord(c) ^ 32) if 65 <= ord(c) <= 90 else c for c in string)", "code_7": "def is_lower(string):\n    return ''.join(chr(ord(c) + 0x20) if 65 <= ord(c) <= 90 else c for c in string)", "code_8": "def is_lower(string):\n    return ''.join(chr(ord(c) + 0o40) if 65 <= ord(c) <= 90 else c for c in string)", "code_9": "def is_lower(string):\n    return ''.join(chr(ord(c) + 0b100000) if 65 <= ord(c) <= 90 else c for c in string)", "code_10": "def is_lower(string):\n    return ''.join(chr(ord(c) + 0x20 * (65 <= ord(c) <= 90)) for c in string)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/478", "prompt": "\n\ndef remove_lowercase(str1):\n \"\"\"\n Write a function to remove lowercase substrings from a given string.\n >>> remove_lowercase(\"PYTHon\")\n ('PYTH')\n >>> remove_lowercase(\"FInD\")\n ('FID')\n >>> remove_lowercase(\"STRinG\")\n ('STRG')\n \"\"\"\n", "solution": " import re\n \n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if c.isupper())", "code_2": "def remove_lowercase(str1):\n return ''.join(filter(str.isupper, str1))", "code_3": "import re\ndef remove_lowercase(str1):\n return re.sub('[a-z]', '', str1)", "code_4": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if ord(c) < 97)", "code_5": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if not c.islower())", "code_6": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if c >= 'A' and c <= 'Z')", "code_7": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if c.upper() == c)", "code_8": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if c.isalpha() and c == c.upper())", "code_9": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if c.swapcase() == c)", "code_10": "def remove_lowercase(str1):\n return ''.join(c for c in str1 if c.isupper() or not c.isalpha())", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/479", "prompt": "\n\ndef first_Digit(n) :\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(456)\n    4\n    >>> first_Digit(12)\n    1\n    \"\"\"\n", "solution": "      \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n", "code_2": "def first_Digit(n):\n    return int(str(n)[0])", "code_3": "def first_Digit(n):\n    return [int(d) for d in str(n)][0]", "code_4": "def first_Digit(n):\n    return list(map(int, str(n)))[0]", "code_5": "def first_Digit(n):\n    return int(re.search(r'\\d', str(n)).group())", "code_6": "def first_Digit(n):\n    return int(next(iter(str(n))))", "code_7": "def first_Digit(n):\n    return int(format(n, ',').split(',')[0])", "code_8": "def first_Digit(n):\n    return int(decimal.Decimal(n).to_integral_value())", "code_9": "def first_Digit(n):\n    return int(f'{n:,}'.split(',')[0])", "code_10": "def first_Digit(n):\n    return int(math.log10(n) + 1)", "pass@3": 0.9166666666666666, "nDCG@10": 0.6421867266689011}
{"task_id": "MBPP/480", "prompt": "\n\ndef get_max_occuring_char(str1):\n  \"\"\"\n  Write a python function to find the maximum occurring character in a given string.\n  >>> get_max_occuring_char(\"data\")\n  \"a\"\n  >>> get_max_occuring_char(\"create\")\n  \"e\"\n  >>> get_max_occuring_char(\"brilliant girl\")\n  \"i\"\n  \"\"\"\n", "solution": "  \n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "results": [0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def get_max_occuring_char(str1):\n    return max(set(str1), key=str1.count)", "code_2": "from collections import Counter\ndef get_max_occuring_char(str1):\n    return Counter(str1).most_common(1)[0][0]", "code_3": "def get_max_occuring_char(str1):\n    return sorted(str1, key=str1.count, reverse=True)[0]", "code_4": "def get_max_occuring_char(str1):\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    return max(count_dict, key=count_dict.get)", "code_5": "import operator\ndef get_max_occuring_char(str1):\n    return max(str1, key=operator.itemgetter(1))[0]", "code_6": "def get_max_occuring_char(str1):\n    return max(str1, key=lambda x: str1.count(x))", "code_7": "def get_max_occuring_char(str1):\n    return min(str1, key=lambda x: (-str1.count(x), x))", "code_8": "def get_max_occuring_char(str1):\n    return sorted((str1.count(char), char) for char in set(str1))[-1][1]", "code_9": "def get_max_occuring_char(str1):\n    return sorted(str1, key=str1.count, reverse=True)[0]", "code_10": "def get_max_occuring_char(str1):\n    return sorted(str1, key=str1.count)[-1]", "pass@3": 0.9666666666666667, "nDCG@10": 0.5617131059245699}
{"task_id": "MBPP/481", "prompt": "\n\ndef is_subset_sum(set, n, sum):\n\t\"\"\"\n\tWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n\tTrue\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n\tFalse\n\t>>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n\tTrue\n\t\"\"\"\n", "solution": "\t\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_subset_sum(s, n, sum):\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if s[n-1] > sum:\n        return is_subset_sum(s, n-1, sum)\n    return is_subset_sum(s, n-1, sum) or is_subset_sum(s, n-1, sum-s[n-1])", "code_2": "def is_subset_sum(s, n, sum):\n    subset = [[False for i in range(sum + 1)] for i in range(n + 1)]\n    for i in range(n + 1):\n        subset[i][0] = True\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < s[i-1]:\n                subset[i][j] = subset[i-1][j]\n            if j >= s[i-1]:\n                subset[i][j] = (subset[i-1][j] or subset[i - 1][j-s[i-1]])\n    return subset[n][sum]", "code_3": "def is_subset_sum(s, n, sum):\n    dp = [False] * (sum + 1)\n    dp[0] = True\n    for i in range(1, sum + 1):\n        for j in range(n - 1, -1, -1):\n            if i >= s[j]:\n                dp[i] = dp[i] or dp[i - s[j]]\n    return dp[sum]", "code_4": "def is_subset_sum(s, n, sum):\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if s[n-1] > sum:\n        return is_subset_sum(s, n-1, sum)\n    return is_subset_sum(s, n-1, sum) or is_subset_sum(s, n-1, sum-s[n-1])", "code_5": "def is_subset_sum(s, n, sum):\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if s[n-1] > sum:\n        return is_subset_sum(s, n-1, sum)\n    return is_subset_sum(s, n-1, sum) or is_subset_sum(s, n-1, sum-s[n-1])", "code_6": "def is_subset_sum(s, n, sum):\n    dp = [False] * (sum + 1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(sum, s[i] - 1, -1):\n            dp[j] = dp[j] or dp[j - s[i]]\n    return dp[sum]", "code_7": "def is_subset_sum(s, n, sum):\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if s[n-1] > sum:\n        return is_subset_sum(s, n-1, sum)\n    return is_subset_sum(s, n-1, sum) or is_subset_sum(s, n-1, sum-s[n-1])", "code_8": "def is_subset_sum(s, n, sum):\n    dp = [False] * (sum + 1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(sum, s[i] - 1, -1):\n            dp[j] = dp[j] or dp[j - s[i]]\n    return dp[sum]", "code_9": "def is_subset_sum(s, n, sum):\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if s[n-1] > sum:\n        return is_subset_sum(s, n-1, sum)\n    return is_subset_sum(s, n-1, sum) or is_subset_sum(s, n-1, sum-s[n-1])", "code_10": "def is_subset_sum(s, n, sum):\n    dp = [False] * (sum + 1)\n    dp[0] = True\n    for i in range(n):\n        for j in range(sum, s[i] - 1, -1):\n            dp[j] = dp[j] or dp[j - s[i]]\n    return dp[sum]", "pass@3": 1.0, "nDCG@10": 0.88995411685096}
{"task_id": "MBPP/482", "prompt": "\n\ndef match(text):\n\t\t\"\"\"\n\t\tWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\t\t>>> match(\"Geeks\")\n\t\t'Yes'\n\t\t>>> match(\"geeksforGeeks\")\n\t\t'Yes'\n\t\t>>> match(\"geeks\")\n\t\t'No'\n\t\t\"\"\"\n", "solution": "\t\timport re \n\t\t \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No') ", "results": [1, 1, 1, 1, 1, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef match(text):\n    return 'Yes' if re.search(r'[A-Z][a-z]*', text) else 'No'", "code_2": "import re\ndef match(text):\n    return bool(re.search(r'[A-Z][a-z]*', text)) and 'Yes' or 'No'", "code_3": "import re\ndef match(text):\n    return 'Yes' if re.fullmatch(r'.*[A-Z][a-z]*.*', text) else 'No'", "code_4": "import re\ndef match(text):\n    return 'Yes' if re.match(r'.*[A-Z][a-z]*.*', text) else 'No'", "code_5": "import re\ndef match(text):\n    return 'Yes' if re.findall(r'[A-Z][a-z]*', text) else 'No'", "code_6": "import re\ndef match(text):\n    return 'Yes' if re.compile(r'[A-Z][a-z]*').search(text) else 'No'", "code_7": "import re\ndef match(text):\n    return 'Yes' if re.compile(r'[A-Z][a-z]*').match(text, re.DOTALL) else 'No'", "code_8": "import re\ndef match(text):\n    return 'Yes' if re.compile(r'[A-Z][a-z]*').fullmatch(text, re.DOTALL) else 'No'", "code_9": "import re\ndef match(text):\n    return 'Yes' if re.compile(r'[A-Z][a-z]*').findall(text) else 'No'", "code_10": "import re\ndef match(text):\n    return 'Yes' if re.compile(r'[A-Z][a-z]*').finditer(text).__next__() else 'No'", "pass@3": 0.9916666666666667, "nDCG@10": 0.793584067764911}
{"task_id": "MBPP/483", "prompt": "\n\ndef first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Write a python function to find the first natural number whose factorial is divisible by x.\n    >>> first_Factorial_Divisible_Number(10)\n    5\n    >>> first_Factorial_Divisible_Number(15)\n    5\n    >>> first_Factorial_Divisible_Number(5)\n    4\n    \"\"\"\n", "solution": "     \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def first_Factorial_Divisible_Number(x):\n    i, f = 1, 1\n    while f % x:\n        i, f = i + 1, f * i\n    return i", "code_2": "import math\ndef first_Factorial_Divisible_Number(x):\n    return math.ceil(math.log(x, math.e) + math.log(2 * math.pi, math.e) / 2)", "code_3": "def first_Factorial_Divisible_Number(x):\n    i, f = 1, 1\n    while True:\n        if f % x == 0:\n            return i\n        i += 1\n        f *= i", "code_4": "def first_Factorial_Divisible_Number(x):\n    f = lambda n: 1 if n == 0 else n * f(n - 1)\n    i = 1\n    while f(i) % x != 0:\n        i += 1\n    return i", "code_5": "from functools import reduce\nimport operator\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while reduce(operator.mul, range(1, i + 1), 1) % x != 0:\n        i += 1\n    return i", "code_6": "import numpy as np\ndef first_Factorial_Divisible_Number(x):\n    i = 1\n    while np.prod(range(1, i + 1)) % x != 0:\n        i += 1\n    return i", "code_7": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while not all(i % j == 0 for j in range(1, x + 1)):\n        i += 1\n    return i", "code_8": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while sum(map(lambda j: i % j, range(1, x + 1))) != 0:\n        i += 1\n    return i", "code_9": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while any(i % j != 0 for j in range(1, x + 1)):\n        i += 1\n    return i", "code_10": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    while not all(map(lambda j: i % j == 0, range(1, x + 1))):\n        i += 1\n    return i", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/484", "prompt": "\n\ndef remove_matching_tuple(test_list1, test_list2):\n  \"\"\"\n  Write a function to remove the matching tuples from the given two tuples.\n  >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n  [('you', '?')]\n  >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n  [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n  >>> remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])\n  [('Its', 'been'), ('day', 'without')]\n  \"\"\"\n", "solution": "  \n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_matching_tuple(t1, t2):\n    return [i for i in t1 if i not in t2]", "code_2": "def remove_matching_tuple(t1, t2):\n    return list(set(t1) - set(t2))", "code_3": "def remove_matching_tuple(t1, t2):\n    return list(filter(lambda x: x not in t2, t1))", "code_4": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if t not in set(t2)]", "code_5": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if all(t != u for u in t2)]", "code_6": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if t not in dict.fromkeys(t2)]", "code_7": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if not t in t2]", "code_8": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if t not in t2]", "code_9": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if t not in set(t2) and t not in t2]", "code_10": "def remove_matching_tuple(t1, t2):\n    return [t for t in t1 if t not in t2 or t2.count(t) != 1]", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/485", "prompt": "\n\ndef largest_palindrome(A, n) :\n\t\"\"\"\n\tWrite a function to find the largest palindromic number in the given array.\n\t>>> largest_palindrome([1, 232, 54545, 999991], 4)\n\t54545\n\t>>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n\t5\n\t>>> largest_palindrome([1, 3, 7, 9, 45], 5)\n\t9\n\t\"\"\"\n", "solution": "\tdef is_palindrome(n) : \n\t\tdivisor = 1\n\t\twhile (n / divisor >= 10) : \n\t\t\tdivisor *= 10\n\t\twhile (n != 0) : \n\t\t\tleading = n // divisor \n\t\t\ttrailing = n % 10\n\t\t\tif (leading != trailing) : \n\t\t\t\treturn False\n\t\t\tn = (n % divisor) // 10\n\t\t\tdivisor = divisor // 100\n\t\treturn True\n\t \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def largest_palindrome(A, n):\n    return max(x for x in A if str(x) == str(x)[::-1])", "code_2": "def largest_palindrome(A, n):\n    return max(filter(lambda x: str(x) == str(x)[::-1], A))", "code_3": "def largest_palindrome(A, n):\n    return max(x for x in sorted(A, reverse=True) if str(x) == str(x)[::-1])", "code_4": "def largest_palindrome(A, n):\n    return max(x for x in A if x == int(str(x)[::-1]))", "code_5": "def largest_palindrome(A, n):\n    return max(x for x in A if all(str(x)[i] == str(x)[-i-1] for i in range(len(str(x))//2)))", "code_6": "def largest_palindrome(A, n):\n    return max(x for x in A if str(x) == ''.join(reversed(str(x))))", "code_7": "def largest_palindrome(A, n):\n    return max(x for x in A if str(x) == str(x)[::-1] and x == int(str(x)))", "code_8": "def largest_palindrome(A, n):\n    return max(x for x in A if str(x) == str(x)[::-1] and x == int(str(x)[::-1]))", "code_9": "def largest_palindrome(A, n):\n    return max(x for x in A if str(x) == str(x)[::-1] and x == int(str(x)[-1::-1]))", "code_10": "def largest_palindrome(A, n):\n    return max(x for x in A if str(x) == str(x)[::-1] and x == int(str(x)[-1::-1]) and x == int(str(x)[::-1]))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/486", "prompt": "\n\ndef binomial_probability(n, k, p):\n\t\"\"\"\n\tWrite a function to compute binomial probability for the given number.\n\t>>> binomial_probability(10, 5, 1.0/3)\n\t0.13656454808718185\n\t>>> binomial_probability(11, 6, 2.0/4)\n\t0.2255859375\n\t>>> binomial_probability(12, 7, 3.0/5)\n\t0.227030335488\n\t\"\"\"\n", "solution": "\tdef nCr(n, r): \n\t\tif (r > n / 2): \n\t\t\tr = n - r \n\t\tanswer = 1 \n\t\tfor i in range(1, r + 1): \n\t\t\tanswer *= (n - r + i) \n\t\t\tanswer /= i \n\t\treturn answer \n\t \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "import math\ndef binomial_probability(n, k, p):\n\treturn math.comb(n, k) * (p**k) * ((1-p)**(n-k))", "code_2": "import operator as op\nfrom functools import reduce\ndef binomial_probability(n, k, p):\n\treturn reduce(op.mul, range(n-k+1, n+1)) / reduce(op.mul, range(1, k+1)) * (p**k) * ((1-p)**(n-k))", "code_3": "import numpy as np\ndef binomial_probability(n, k, p):\n\treturn np.prod(np.arange(n-k+1, n+1)) / np.prod(np.arange(1, k+1)) * (p**k) * ((1-p)**(n-k))", "code_4": "from scipy.special import comb\ndef binomial_probability(n, k, p):\n\treturn comb(n, k) * (p**k) * ((1-p)**(n-k))", "code_5": "from math import factorial\ndef binomial_probability(n, k, p):\n\treturn factorial(n) / (factorial(k) * factorial(n-k)) * (p**k) * ((1-p)**(n-k))", "code_6": "def binomial_probability(n, k, p):\n\tcoeff = 1\n\tfor i in range(n-k+1, n+1):\n\t\tcoeff *= i\n\tfor i in range(1, k+1):\n\t\tcoeff /= i\n\treturn coeff * (p**k) * ((1-p)**(n-k))", "code_7": "def binomial_probability(n, k, p):\n\tcoeff = 1\n\tfor i in range(n-k+1, n+1):\n\t\tcoeff *= i\n\tfor i in range(k, 0, -1):\n\t\tcoeff /= i\n\treturn coeff * (p**k) * ((1-p)**(n-k))", "code_8": "def binomial_probability(n, k, p):\n\tcoeff = 1\n\tfor i in range(n-k+1, n+1):\n\t\tcoeff *= i\n\tfor i in range(1, k+1):\n\t\tcoeff //= i\n\treturn coeff * (p**k) * ((1-p)**(n-k))", "code_9": "def binomial_probability(n, k, p):\n\tcoeff = 1\n\tfor i in range(n-k+1, n+1):\n\t\tcoeff *= i\n\tfor i in range(k, 0, -1):\n\t\tcoeff //= i\n\treturn coeff * (p**k) * ((1-p)**(n-k))", "code_10": "def binomial_probability(n, k, p):\n\tcoeff = 1\n\tfor i in range(n-k+1, n+1):\n\t\tcoeff *= i\n\tfor i in range(k, 0, -1):\n\t\tcoeff //= i\n\treturn coeff / (2**n) * (p**k) * ((1-p)**(n-k))", "pass@3": 1.0, "nDCG@10": 0.8415908474314977}
{"task_id": "MBPP/487", "prompt": "\n\ndef sort_tuple(tup):\n\t\"\"\"\n\tWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\n\t>>> sort_tuple([(1, 3), (3, 2), (2, 1)] )\n\t[(2, 1), (3, 2), (1, 3)]\n\t>>> sort_tuple([(2, 4), (3, 3), (1, 1)] )\n\t[(1, 1), (3, 3), (2, 4)]\n\t>>> sort_tuple([(3, 9), (6, 7), (4, 3)] )\n\t[(4, 3), (6, 7), (3, 9)]\n\t\"\"\"\n", "solution": "\t \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using the `sorted` function with a lambda function as the key:\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])", "code_2": "Using the `sort` method with a lambda function as the key:\ndef sort_tuple(tup):\n    tup.sort(key=lambda x: x[-1])\n    return tup", "code_3": "Using the `sorted` function with `itemgetter` from the `operator` module:\nfrom operator import itemgetter\ndef sort_tuple(tup):\n    return sorted(tup, key=itemgetter(-1))", "code_4": "Using the `sort` method with `itemgetter` from the `operator` module:\nfrom operator import itemgetter\ndef sort_tuple(tup):\n    tup.sort(key=itemgetter(-1))\n    return tup", "code_5": "Using the `sorted` function with a custom function as the key:\ndef last_element(t):\n    return t[-1]\ndef sort_tuple(tup):\n    return sorted(tup, key=last_element)", "code_6": "Using the `sort` method with a custom function as the key:\ndef last_element(t):\n    return t[-1]\ndef sort_tuple(tup):\n    tup.sort(key=last_element)\n    return tup", "code_7": "Using list comprehension and the `min` function:\ndef sort_tuple(tup):\n    return [min(tup, key=lambda x: x[-1])] + sort_tuple([t for t in tup if t != min(tup, key=lambda x: x[-1])])", "code_8": "Using the `heapq` module's `nsmallest` function:\nimport heapq\ndef sort_tuple(tup):\n    return heapq.nsmallest(len(tup), tup, key=lambda x: x[-1])", "code_9": "Using the `sorted` function with a custom class as the key:\nclass LastElement:\n    def __init__(self, t):\n        self.t = t\n    def __lt__(self, other):\n        return self.t[-1] < other.t[-1]\ndef sort_tuple(tup):\n    return sorted(tup, key=LastElement)", "code_10": "Using the `sort` method with a custom class as the key:\nclass LastElement:\n    def __init__(self, t):\n        self.t = t\n    def __lt__(self, other):\n        return self.t[-1] < other.t[-1]\ndef sort_tuple(tup):\n    tup.sort(key=LastElement)\n    return tup", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/488", "prompt": "\n\ndef area_pentagon(a):\n  \"\"\"\n  Write a function to find the area of a pentagon.\n  >>> area_pentagon(5)\n  43.01193501472417\n  >>> area_pentagon(10)\n  172.0477400588967\n  >>> area_pentagon(15)\n  387.10741513251753\n  \"\"\"\n", "solution": "  import math\n  \n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "results": [1, 1, 0, 1, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef area_pentagon(a):\n  return (5 * a**2) / (4 * math.tan(math.pi / 5))", "code_2": "import math\ndef area_pentagon(a):\n  return a**2 * math.sqrt(25 + 10 * math.sqrt(5)) / 4", "code_3": "import math\ndef area_pentagon(a):\n  return a**2 * (math.sqrt(5 + 2 * math.sqrt(5))) / 4", "code_4": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt((5 * (5 + 2 * math.sqrt(5)))) / 4)", "code_5": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt((25 + 10 * math.sqrt(5)))) / 4", "code_6": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt(5 * (5 + 2 * math.sqrt(5)))) / 4", "code_7": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt(5 * (2.23606797749979 + 2 * math.sqrt(5)))) / 4", "code_8": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt(5 * (2.23606797749979 + 2 * 2.23606797749979))) / 4", "code_9": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt(5 * (2.23606797749979 + 4.47213595499958))) / 4", "code_10": "import math\ndef area_pentagon(a):\n  return (a**2 * math.sqrt(5 * 6.708203932499369)) / 4", "pass@3": 0.9166666666666666, "nDCG@10": 0.6172839611614819}
{"task_id": "MBPP/489", "prompt": "\n\ndef frequency_Of_Largest(n,arr):\n    \"\"\"\n    Write a python function to find the frequency of the largest value in a given array.\n    >>> frequency_Of_Largest(5,[1,2,3,4,4])\n    2\n    >>> frequency_Of_Largest(3,[5,6,5])\n    1\n    >>> frequency_Of_Largest(4,[2,7,7,7])\n    3\n    \"\"\"\n", "solution": "     \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "results": [1, 1, 0, 0, 1, 0, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def frequency_Of_Largest(n,arr):\n    return arr.count(max(arr))", "code_2": "def frequency_Of_Largest(n,arr):\n    largest = max(arr)\n    return sum(1 for num in arr if num == largest)", "code_3": "from collections import Counter\ndef frequency_Of_Largest(n,arr):\n    return Counter(arr).most_common(1)[0][1]", "code_4": "def frequency_Of_Largest(n,arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    return max(freq.values())", "code_5": "def frequency_Of_Largest(n,arr):\n    largest = max(arr)\n    return len([num for num in arr if num == largest])", "code_6": "def frequency_Of_Largest(n,arr):\n    freq = [0] * (max(arr) + 1)\n    for num in arr:\n        freq[num] += 1\n    return max(freq)", "code_7": "import heapq\ndef frequency_Of_Largest(n,arr):\n    return arr.count(heapq.nlargest(1, arr)[0])", "code_8": "def frequency_Of_Largest(n,arr):\n    return arr.count(sorted(arr)[-1])", "code_9": "def frequency_Of_Largest(n,arr):\n    largest = max(arr)\n    return sum(map(lambda x: x == largest, arr))", "code_10": "def frequency_Of_Largest(n,arr):\n    freq = [0] * 10001\n    for num in arr:\n        freq[num] += 1\n    return max(freq)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6531466953037822}
{"task_id": "MBPP/490", "prompt": "\n\ndef extract_symmetric(test_list):\n  \"\"\"\n  Write a function to extract all the pairs which are symmetric in the given tuple list.\n  >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] )\n  {(8, 9), (6, 7)}\n  >>> extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] )\n  {(9, 10), (7, 8)}\n  >>> extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] )\n  {(8, 9), (10, 11)}\n  \"\"\"\n", "solution": "  \n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_symmetric(lst):\n    return {(a, b) for a, b in lst if (b, a) in lst}", "code_2": "def extract_symmetric(lst):\n    return set(filter(lambda x: (x[1], x[0]) in lst, lst))", "code_3": "def extract_symmetric(lst):\n    return set(i for i in lst if i[::-1] in lst)", "code_4": "def extract_symmetric(lst):\n    return set(lst).intersection({(b, a) for a, b in lst})", "code_5": "def extract_symmetric(lst):\n    return set(i for i in lst if lst.count(i) == lst.count(i[::-1]))", "code_6": "def extract_symmetric(lst):\n    return set(i for i in lst if lst.count(i) > 1 and lst.count((i[1], i[0])) > 1)", "code_7": "def extract_symmetric(lst):\n    return set(i for i in lst if lst.count(i) > 1 and lst.count(i[::-1]) > 1)", "code_8": "def extract_symmetric(lst):\n    return set(i for i in lst if lst.count(i) > 1 and i[::-1] in lst)", "code_9": "def extract_symmetric(lst):\n    return set(i for i in lst if lst.count(i) > 1 and (i[1], i[0]) in lst)", "code_10": "def extract_symmetric(lst):\n    return set(i for i in lst if lst.count(i) > 1 and lst.count((i[1], i[0])) > 1)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/491", "prompt": "\n\ndef sum_gp(a,n,r):\n \"\"\"\n Write a function to find the sum of geometric progression series.\n >>> sum_gp(1,5,2)\n 31\n >>> sum_gp(1,5,4)\n 341\n >>> sum_gp(2,6,3)\n 728\n \"\"\"\n", "solution": " import math\n \n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total", "results": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_gp(a, n, r): return a * (1 - r**n) // (1 - r)", "code_2": "def sum_gp(a, n, r): return a * (1 - pow(r, n)) // (1 - r)", "code_3": "def sum_gp(a, n, r): return a * (1 - r**n) / (1 - r) if r != 1 else a * n", "code_4": "def sum_gp(a, n, r): return a * (1 - pow(r, n, 1)) / (1 - r) if r != 1 else a * n", "code_5": "def sum_gp(a, n, r): return a * (1 - r**n) // (1 - r) if r > 1 else a * n", "code_6": "def sum_gp(a, n, r): return a * (1 - pow(r, n, 1)) // (1 - r) if r > 1 else a * n", "code_7": "def sum_gp(a, n, r): return a * (1 - r**n) / (1 - r) if r > 1 else a * n", "code_8": "def sum_gp(a, n, r): return a * (1 - pow(r, n, 1)) / (1 - r) if r > 1 else a * n", "code_9": "def sum_gp(a, n, r): return a * (1 - r**n) // (1 - r) if r < 1 else a * n / (1 - r)", "code_10": "def sum_gp(a, n, r): return a * (1 - pow(r, n, 1)) // (1 - r) if r < 1 else a * n / (1 - r)", "pass@3": 0.9166666666666666, "nDCG@10": 0.627507133061656}
{"task_id": "MBPP/492", "prompt": "\n\ndef binary_search(item_list,item):\n\t\"\"\"\n\tWrite a function to search an element in the given array by using binary search.\n\t>>> binary_search([1,2,3,5,8], 6)\n\tFalse\n\t>>> binary_search([7, 8, 9, 10, 13], 10)\n\tTrue\n\t>>> binary_search([11, 13, 14, 19, 22, 36], 23)\n\tFalse\n\t\"\"\"\n", "solution": "\t\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "def binary_search(item_list, item):\n    low, high = 0, len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            return True\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False", "code_2": "def binary_search(item_list, item):\n    def search(low, high):\n        if low > high:\n            return False\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            return True\n        elif item_list[mid] < item:\n            return search(mid + 1, high)\n        else:\n            return search(low, mid - 1)\n    return search(0, len(item_list) - 1)", "code_3": "def binary_search(item_list, item):\n    return item in set(item_list)", "code_4": "def binary_search(item_list, item):\n    try:\n        item_list.index(item)\n        return True\n    except ValueError:\n        return False", "code_5": "def binary_search(item_list, item):\n    return any(x == item for x in item_list)", "code_6": "def binary_search(item_list, item):\n    return sum(x == item for x in item_list) > 0", "code_7": "def binary_search(item_list, item):\n    return len([x for x in item_list if x == item]) > 0", "code_8": "def binary_search(item_list, item):\n    return bool(filter(lambda x: x == item, item_list))", "code_9": "def binary_search(item_list, item):\n    return reduce(lambda x, y: x or y, (i == item for i in item_list), False)", "code_10": "def binary_search(item_list, item):\n    return next((True for i in item_list if i == item), False)", "pass@3": 1.0, "nDCG@10": 0.8643145546088339}
{"task_id": "MBPP/493", "prompt": "\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    >>> calculate_polygons(1,1, 4, 4, 3)\n    [[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    >>> calculate_polygons(5,4,7,9,8)\n    [[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    >>> calculate_polygons(9,6,4,3,2)\n    [[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n    \"\"\"\n", "solution": "    import math\n    \n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * math.sqrt(3)\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            if y % 2 == 0:\n                x_offset = hex_width / 2\n            else:\n                x_offset = 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(math.radians(60 * i)), y * hex_height + radius * math.sin(math.radians(60 * i))) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_2": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * math.sqrt(3)\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 == 0 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(math.pi / 3 * i), y * hex_height + radius * math.sin(math.pi / 3 * i)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_3": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 1.7320508075688772\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(i * math.pi / 3), y * hex_height + radius * math.sin(i * math.pi / 3)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_4": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 3 ** 0.5\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 == 0 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(math.pi / 3 * i), y * hex_height + radius * math.sin(math.pi / 3 * i)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_5": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 1.7320508075688772\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(i * 2 * math.pi / 6), y * hex_height + radius * math.sin(i * 2 * math.pi / 6)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_6": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 3 ** 0.5\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 == 0 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(math.pi / 3 * i), y * hex_height + radius * math.sin(math.pi / 3 * i)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_7": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 1.7320508075688772\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(i * math.pi / 3), y * hex_height + radius * math.sin(i * math.pi / 3)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_8": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 3 ** 0.5\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 == 0 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(math.pi / 3 * i), y * hex_height + radius * math.sin(math.pi / 3 * i)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_9": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 1.7320508075688772\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(i * math.pi / 3), y * hex_height + radius * math.sin(i * math.pi / 3)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "code_10": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    hex_height = radius * 3 ** 0.5\n    hex_width = 2 * radius\n    polygons = []\n    for y in range(starty, endy + 1):\n        for x in range(startx, endx + 1):\n            x_offset = hex_width / 2 if y % 2 == 0 else 0\n            vertices = [(x * hex_width + x_offset + radius * math.cos(math.pi / 3 * i), y * hex_height + radius * math.sin(math.pi / 3 * i)) for i in range(6)]\n            polygons.append(vertices + [vertices[0]])\n    return polygons", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/494", "prompt": "\n\ndef binary_to_integer(test_tup):\n  \"\"\"\n  Write a function to convert the given binary tuple to integer.\n  >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n  '105'\n  >>> binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))\n  '101'\n  >>> binary_to_integer((1, 1, 0, 1, 0, 1))\n  '53'\n  \"\"\"\n", "solution": "  \n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def binary_to_integer(test_tup):\n    return int(''.join(map(str, test_tup)), 2)", "code_2": "def binary_to_integer(test_tup):\n    return sum(val * (2 ** i) for i, val in enumerate(test_tup[::-1]))", "code_3": "def binary_to_integer(test_tup):\n    return functools.reduce(lambda x, y: (x << 1) | y, test_tup)", "code_4": "def binary_to_integer(test_tup):\n    return sum(b << i for i, b in enumerate(test_tup[::-1]))", "code_5": "def binary_to_integer(test_tup):\n    return int(''.join(str(i) for i in test_tup), 2)", "code_6": "def binary_to_integer(test_tup):\n    return int(''.join(str(x) for x in test_tup), 2)", "code_7": "def binary_to_integer(test_tup):\n    return int(''.join(str(i) for i in test_tup[::-1]), 2)", "code_8": "def binary_to_integer(test_tup):\n    return int(''.join(str(bit) for bit in reversed(test_tup)), 2)", "code_9": "def binary_to_integer(test_tup):\n    return int(''.join(str(x) for x in test_tup[::-1]), 2)", "code_10": "def binary_to_integer(test_tup):\n    return int(''.join(str(i) for i in test_tup[::-1]), 2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/495", "prompt": "\n\ndef remove_lowercase(str1):\n  \"\"\"\n  Write a function to remove lowercase substrings from a given string by using regex.\n  >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n  'KDALOOOHLAJSI'\n  >>> remove_lowercase('ProducTnamEstreAmIngMediAplAYer')\n  'PTEAIMAAY'\n  >>> remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')\n  'NTYSZTNOGI'\n  \"\"\"\n", "solution": "  import re\n  \n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)", "code_2": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if not c.islower())", "code_3": "import re\ndef remove_lowercase(str1):\n    return ''.join(filter(str.isupper, str1))", "code_4": "import re\ndef remove_lowercase(str1):\n    return ''.join(re.findall('[A-Z]', str1))", "code_5": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c.isupper())", "code_6": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c >= 'A' and c <= 'Z')", "code_7": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if ord(c) < 97)", "code_8": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c.upper() == c)", "code_9": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c.isalpha() and c.isupper())", "code_10": "import re\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c.upper() == c.lower())", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/496", "prompt": "\n\ndef heap_queue_smallest(nums,n):\n  \"\"\"\n  Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  >>> heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)\n  [14, 22, 25]\n  >>> heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)\n  [14, 22]\n  >>> heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)\n  [14, 22, 22, 25, 35]\n  \"\"\"\n", "solution": "  import heapq as hq\n  \n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import heapq\ndef heap_queue_smallest(nums,n):\n return heapq.nsmallest(n,nums)", "code_2": "import heapq\ndef heap_queue_smallest(nums,n):\n heapq.heapify(nums)\n return [heapq.heappop(nums) for _ in range(n)]", "code_3": "import heapq\ndef heap_queue_smallest(nums,n):\n return sorted(nums)[:n]", "code_4": "def heap_queue_smallest(nums,n):\n nums.sort()\n return nums[:n]", "code_5": "def heap_queue_smallest(nums,n):\n return sorted(nums)[:n]", "code_6": "def heap_queue_smallest(nums,n):\n nums.sort()\n return nums[:n]", "code_7": "def heap_queue_smallest(nums,n):\n smallest = []\n for num in nums:\n  if len(smallest) < n:\n   smallest.append(num)\n  else:\n   if num < max(smallest):\n    smallest.remove(max(smallest))\n    smallest.append(num)\n return sorted(smallest)", "code_8": "def heap_queue_smallest(nums,n):\n smallest = nums[:n]\n smallest.sort()\n for num in nums[n:]:\n  if num < smallest[-1]:\n   smallest.pop()\n   smallest.append(num)\n   smallest.sort()\n return smallest", "code_9": "def heap_queue_smallest(nums,n):\n smallest = []\n for num in nums:\n  if len(smallest) < n:\n   smallest.append(num)\n  else:\n   if num < max(smallest):\n    smallest[smallest.index(max(smallest))] = num\n return sorted(smallest)", "code_10": "def heap_queue_smallest(nums,n):\n smallest = []\n for num in nums:\n  if len(smallest) < n:\n   smallest.append(num)\n   smallest.sort()\n  else:\n   if num < smallest[-1]:\n    smallest.pop()\n    smallest.append(num)\n    smallest.sort()\n return smallest", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/497", "prompt": "\n\ndef surfacearea_cone(r,h):\n  \"\"\"\n  Write a function to find the surface area of a cone.\n  >>> surfacearea_cone(5,12)\n  282.7433388230814\n  >>> surfacearea_cone(10,15)\n  880.5179353159282\n  >>> surfacearea_cone(19,17)\n  2655.923961165254\n  \"\"\"\n", "solution": "  import math\n  \n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef surfacearea_cone(r,h):\n  l = math.sqrt(r**2 + h**2)\n  return math.pi * r * (r + l)", "code_2": "import math\ndef surfacearea_cone(r,h):\n  return math.pi * r * (r + math.hypot(r, h))", "code_3": "from math import pi, sqrt, hypot\ndef surfacearea_cone(r,h):\n  return pi * r * (r + hypot(r, h))", "code_4": "from math import pi, hypot\ndef surfacearea_cone(r,h):\n  return pi * r * (r + hypot(r, h))", "code_5": "import math\ndef surfacearea_cone(r,h):\n  return math.pi * r * (r + math.sqrt(r**2 + h**2))", "code_6": "from math import pi, sqrt\ndef surfacearea_cone(r,h):\n  return pi * r * (r + sqrt(r**2 + h**2))", "code_7": "def surfacearea_cone(r,h):\n  import math\n  return math.pi * r * (r + math.sqrt(r**2 + h**2))", "code_8": "def surfacearea_cone(r,h):\n  from math import pi, sqrt\n  return pi * r * (r + sqrt(r**2 + h**2))", "code_9": "def surfacearea_cone(r,h):\n  pi = 3.141592653589793\n  return pi * r * (r + (r**2 + h**2)**0.5)", "code_10": "def surfacearea_cone(r,h):\n  pi = 3.141592653589793\n  return pi * r * (r + (r*r + h*h)**0.5)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/498", "prompt": "\n\ndef gcd(x, y):\n    \"\"\"\n    Write a python function to find gcd of two positive integers.\n    >>> gcd(12, 17)\n    1\n    >>> gcd(4,6)\n    2\n    >>> gcd(2,9)\n    1\n    \"\"\"\n", "solution": "    \n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "results": [1, 1, 1, 0, 1, 1, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x", "code_2": "def gcd(x, y):\n    return x if y == 0 else gcd(y, x % y)", "code_3": "import math\ndef gcd(x, y):\n    return math.gcd(x, y)", "code_4": "from fractions import gcd\ndef gcd(x, y):\n    return gcd(x, y)", "code_5": "def gcd(x, y):\n    return gcd(y, x) if x < y else gcd(x - y, y) if x > y else x", "code_6": "def gcd(x, y):\n    return gcd(y, x % y) if y > 0 else x", "code_7": "def gcd(x, y):\n    return gcd(y, x % y) if x > y else gcd(x, y % x)", "code_8": "from functools import reduce\nfrom math import gcd\ndef gcd(x, y):\n    return reduce(gcd, (x, y))", "code_9": "def gcd(x, y):\n    return gcd(y, x % y) if y else x", "code_10": "def gcd(x, y):\n    return gcd(y, x % y) if x % y else y", "pass@3": 0.9916666666666667, "nDCG@10": 0.7624164915943119}
{"task_id": "MBPP/499", "prompt": "\n\ndef diameter_circle(r):\n  \"\"\"\n  Write a function to find the diameter of a circle.\n  >>> diameter_circle(10)\n  20\n  >>> diameter_circle(40)\n  80\n  >>> diameter_circle(15)\n  30\n  \"\"\"\n", "solution": "  \n  diameter=2*r\n  return diameter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def diameter_circle(r): return 2 * r`", "code_2": "`diameter_circle = lambda r: 2 * r`", "code_3": "`diameter_circle = (lambda r: 2 * r)`", "code_4": "`diameter_circle = (lambda r: r << 1)`", "code_5": "`diameter_circle = (lambda r: r + r)`", "code_6": "`diameter_circle = (lambda r: sum([r, r]))`", "code_7": "`diameter_circle = (lambda r: r * 2)`", "code_8": "`diameter_circle = (lambda r: r * 2.0)`", "code_9": "`diameter_circle = (lambda r: r * 2.00000)`", "code_10": "`diameter_circle = (lambda r: rpass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/500", "prompt": "\n\ndef concatenate_elements(list):\n  \"\"\"\n  Write a function to concatenate all elements of the given list into a string.\n  >>> concatenate_elements(['hello','there','have','a','rocky','day'] )\n  '  hello there have a rocky day'\n  >>> concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] )\n  '  Hi there How are you'\n  >>> concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] )\n  '  Part of the journey is end'\n  \"\"\"\n", "solution": "  \n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def concatenate_elements(lst):\n    return ' ' + ' '.join(lst)", "code_2": "def concatenate_elements(lst):\n    return ' '.join(map(str, lst))", "code_3": "def concatenate_elements(lst):\n    return ' '.join(lst).strip()", "code_4": "def concatenate_elements(lst):\n    return ' '.join(lst).lstrip()", "code_5": "def concatenate_elements(lst):\n    return ' '.join(lst).rstrip()", "code_6": "def concatenate_elements(lst):\n    return ' '.join(lst).replace(' ', '  ', 1)", "code_7": "def concatenate_elements(lst):\n    return ' ' + ' '.join(str(i) for i in lst)", "code_8": "def concatenate_elements(lst):\n    return ' ' + ' '.join(lst).strip()", "code_9": "def concatenate_elements(lst):\n    return ' ' + ' '.join(lst).lstrip()", "code_10": "def concatenate_elements(lst):\n    return ' ' + ' '.join(lst).rstrip()", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/501", "prompt": "\n\ndef num_comm_div(x,y):\n  \"\"\"\n  Write a python function to find common divisor between two numbers in a given pair.\n  >>> num_comm_div(2,4)\n  2\n  >>> num_comm_div(2,8)\n  2\n  >>> num_comm_div(12,24)\n  6\n  \"\"\"\n", "solution": "  def ngcd(x,y):\n      i=1\n      while(i<=x and i<=y):\n          if(x%i==0 and y%i == 0):\n              gcd=i;\n          i+=1\n      return gcd;\n  \n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def num_comm_div(x, y):\n    return max(i for i in range(1, min(x, y) + 1) if x % i == y % i == 0)", "code_2": "def num_comm_div(x, y):\n    i = min(x, y)\n    while i > 0:\n        if x % i == y % i == 0:\n            return i\n        i -= 1", "code_3": "import math\ndef num_comm_div(x, y):\n    return max(divisor for divisor in range(1, math.gcd(x, y) + 1) if x % divisor == y % divisor == 0)", "code_4": "def num_comm_div(x, y):\n    i = 1\n    while i <= min(x, y):\n        if x % i == y % i == 0:\n            gcd = i\n        i += 1\n    return gcd", "code_5": "def num_comm_div(x, y):\n    return next(i for i in range(min(x, y), 0, -1) if x % i == y % i == 0)", "code_6": "def num_comm_div(x, y):\n    return max(filter(lambda i: x % i == y % i == 0, range(1, min(x, y) + 1)))", "code_7": "def num_comm_div(x, y):\n    return max(set(i for i in range(1, min(x, y) + 1) if x % i == 0) & set(i for i in range(1, min(x, y) + 1) if y % i == 0))", "code_8": "def num_comm_div(x, y):\n    return max(divisor for divisor in range(1, min(x, y) + 1) if all(num % divisor == 0 for num in (x, y)))", "code_9": "def num_comm_div(x, y):\n    return reduce(lambda a, b: a if x % a == y % a == 0 else b, range(1, min(x, y) + 1))", "code_10": "def num_comm_div(x, y):\n    return max(divisor for divisor in range(1, min(x, y) + 1) if not (x % divisor or y % divisor))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/502", "prompt": "\n\ndef find(n,m):\n  \"\"\"\n  Write a python function to find remainder of two numbers.\n  >>> find(3,3)\n  0\n  >>> find(10,3)\n  1\n  >>> find(16,5)\n  1\n  \"\"\"\n", "solution": "  \n  r = n%m\n  return (r)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def find(n, m): return n % m`", "code_2": "`find = lambda n, m: n % m`", "code_3": "`def find(n, m): return divmod(n, m)[1]`", "code_4": "`find = operator.mod`", "code_5": "`def find(n, m): return subtract_exact(n, m * (n // m))`", "code_6": "`def find(n, m): return n - m * (n // m)`", "code_7": "`def find(n, m): return n & -m if m != 0 else n`", "code_8": "`def find(n, m): return reduce(lambda x, y: x - y, [n, m * (n // m)])`", "code_9": "`def find(n, m): return functools.reduce(operator.sub, [n, m * (n // m)])`", "code_10": "`def find(n, m): return n - m * math.floor(n / m)`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/503", "prompt": "\n\ndef add_consecutive_nums(nums):\n    \"\"\"\n    Write a function to add consecutive numbers of a given list.\n    >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [2, 4, 7, 8, 9, 11, 13]\n    >>> add_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [9, 13, 17, 15, 16]\n    >>> add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n", "solution": "    \n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "results": [1, 1, 1, 0, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def add_consecutive_nums(nums):\n    return [nums[i-1] + nums[i] for i in range(1, len(nums))]", "code_2": "def add_consecutive_nums(nums):\n    return list(map(sum, zip(nums, nums[1:])))", "code_3": "def add_consecutive_nums(nums):\n    return [a + b for a, b in zip(nums, nums[1:])]", "code_4": "def add_consecutive_nums(nums):\n    return [a + b for a, b in pairwise(nums)]", "code_5": "def add_consecutive_nums(nums):\n    return [a + b for a, b in more_itertools.pairwise(nums)]", "code_6": "def add_consecutive_nums(nums):\n    return [a + b for a, b in itertools.zip_longest(nums, nums[1:]) if b is not None]", "code_7": "def add_consecutive_nums(nums):\n    return [a + b for a, b in zip(nums[:-1], nums[1:])]", "code_8": "def add_consecutive_nums(nums):\n    return [a + b for a, b in itertools.islice(zip(nums, nums[1:]), len(nums) - 1)]", "code_9": "def add_consecutive_nums(nums):\n    return [a + b for a, b in numpy.lib.stride_tricks.sliding_window_view(nums, 2)]", "code_10": "def add_consecutive_nums(nums):\n    return [a + b for a, b in numpy.lib.stride_tricks.as_strided(nums, shape=(len(nums)-1, 2), strides=(nums.itemsize, nums.itemsize))]", "pass@3": 0.8333333333333334, "nDCG@10": 0.542364015420035}
{"task_id": "MBPP/504", "prompt": "\n\ndef sum_Of_Series(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    >>> sum_Of_Series(5)\n    225\n    >>> sum_Of_Series(2)\n    9\n    >>> sum_Of_Series(3)\n    36\n    \"\"\"\n", "solution": "     \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum", "results": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_Of_Series(n):\n    return (n * (n + 1) // 2) ** 2", "code_2": "def sum_Of_Series(n):\n    return sum(i ** 3 for i in range(1, n + 1))", "code_3": "def sum_Of_Series(n):\n    return sum(map(lambda x: x ** 3, range(1, n + 1)))", "code_4": "def sum_Of_Series(n):\n    return reduce(lambda x, y: x + y ** 3, range(1, n + 1), 0)", "code_5": "def sum_Of_Series(n):\n    return sum(pow(i, 3) for i in range(1, n + 1))", "code_6": "def sum_Of_Series(n):\n    return sum(i ** 3 for i in xrange(1, n + 1))", "code_7": "def sum_Of_Series(n):\n    return sum(map(pow, range(1, n + 1), [3] * n))", "code_8": "def sum_Of_Series(n):\n    return sum(itertools.starmap(pow, zip(range(1, n + 1), [3] * n)))", "code_9": "def sum_Of_Series(n):\n    return np.sum(np.arange(1, n + 1) ** 3)", "code_10": "def sum_Of_Series(n):\n    return np.power(np.arange(1, n + 1), 3).sum()", "pass@3": 0.9166666666666666, "nDCG@10": 0.627507133061656}
{"task_id": "MBPP/505", "prompt": "\n\ndef re_order(A):\n    \"\"\"\n    Write a function to move all zeroes to the end of the given array.\n    >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n    [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    >>> re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n    [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    >>> re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n    [3, 11, 74, 14, 1, 2, 0, 0, 0]\n    \"\"\"\n", "solution": "    \n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A", "results": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def re_order(A):\n    i, j = 0, len(A) - 1\n    while i < j:\n        if A[i] == 0:\n            A[i], A[j] = A[j], A[i]\n            j -= 1\n        else:\n            i += 1\n    return A", "code_2": "def re_order(A):\n    return [x for x in A if x != 0] + [x for x in A if x == 0]", "code_3": "def re_order(A):\n    A.sort(key=lambda x: x == 0)\n    return A", "code_4": "def re_order(A):\n    A[:] = [x for x in A if x != 0] + [0] * A.count(0)\n    return A", "code_5": "def re_order(A):\n    i = 0\n    for j in range(len(A)):\n        if A[j] != 0:\n            A[i], A[j] = A[j], A[i]\n            i += 1\n    return A", "code_6": "def re_order(A):\n    A[:] = [x for i, x in enumerate(A) if x != 0] + [0] * (len(A) - sum(x != 0 for x in A))\n    return A", "code_7": "def re_order(A):\n    A[:] = sorted(A, key=lambda x: x == 0)\n    return A", "code_8": "def re_order(A):\n    A[:] = [x for x in A if x != 0]\n    A.extend([0] * (len(A) - sum(x != 0 for x in A)))\n    return A", "code_9": "def re_order(A):\n    A[:] = [x for x in A if x != 0]\n    A.extend([0] * A.count(0))\n    return A", "code_10": "def re_order(A):\n    A[:] = [x for x in A if x != 0]\n    A.extend([0] * (len(A) - sum(1 for x in A if x != 0)))\n    return A", "pass@3": 0.9666666666666667, "nDCG@10": 0.5806020001118019}
{"task_id": "MBPP/506", "prompt": "\n\ndef permutation_coefficient(n, k):\n\t\"\"\"\n\tWrite a function to calculate the permutation coefficient of given p(n, k).\n\t>>> permutation_coefficient(10, 2)\n\t90\n\t>>> permutation_coefficient(10, 3)\n\t720\n\t>>> permutation_coefficient(10, 1)\n\t10\n\t\"\"\"\n", "solution": "\t \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ", "results": [1, 1, 1, 1, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef permutation_coefficient(n, k):\n return math.factorial(n) // math.factorial(n - k)", "code_2": "def permutation_coefficient(n, k):\n res = 1\n for i in range(n - k + 1, n + 1):\n  res *= i\n return res", "code_3": "from functools import reduce\nimport operator\ndef permutation_coefficient(n, k):\n return reduce(operator.mul, range(n - k + 1, n + 1))", "code_4": "import numpy as np\ndef permutation_coefficient(n, k):\n return np.prod(np.arange(n - k + 1, n + 1))", "code_5": "def permutation_coefficient(n, k):\n return eval('*'.join(map(str, range(n - k + 1, n + 1))))", "code_6": "from math import prod\ndef permutation_coefficient(n, k):\n return prod(range(n - k + 1, n + 1))", "code_7": "def permutation_coefficient(n, k):\n return (n - k + 1) * permutation_coefficient(n - 1, k - 1) if k > 0 else 1", "code_8": "def permutation_coefficient(n, k):\n return n if k == 1 else n * permutation_coefficient(n - 1, k - 1)", "code_9": "from scipy.special import comb\ndef permutation_coefficient(n, k):\n return int(comb(n, k) * math.factorial(k))", "code_10": "def permutation_coefficient(n, k):\n return math.comb(n, k) * math.factorial(k)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7967610662472993}
{"task_id": "MBPP/507", "prompt": "\n\ndef remove_words(list1, removewords):\n    \"\"\"\n    Write a function to remove specific words from a given list.\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])\n    ['red', 'green', 'blue', 'black']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])\n    ['red', 'green', 'blue', 'white']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])\n    ['red', 'green', 'black', 'orange']\n    \"\"\"\n", "solution": "    \n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1  ", "results": [1, 1, 1, 0, 1, 1, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]", "code_2": "def remove_words(list1, removewords):\n    return list(filter(lambda word: word not in removewords, list1))", "code_3": "def remove_words(list1, removewords):\n    return [word for word in list1 if all(word != r for r in removewords)]", "code_4": "def remove_words(list1, removewords):\n    return list(set(list1) - set(removewords))", "code_5": "def remove_words(list1, removewords):\n    for word in removewords:\n        while word in list1:\n            list1.remove(word)\n    return list1", "code_6": "def remove_words(list1, removewords):\n    return [word for i, word in enumerate(list1) if word not in removewords]", "code_7": "def remove_words(list1, removewords):\n    return reduce(lambda lst, word: lst if word in removewords else lst + [word], list1, [])", "code_8": "def remove_words(list1, removewords):\n    return list(dict.fromkeys(list1) - dict.fromkeys(removewords))", "code_9": "def remove_words(list1, removewords):\n    return [word for word in list1 if not any(word == r for r in removewords)]", "code_10": "def remove_words(list1, removewords):\n    return [word for word in list1 if not word in removewords]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7624164915943119}
{"task_id": "MBPP/508", "prompt": "\n\ndef same_order(l1, l2):\n    \"\"\"\n    Write a function to check if the common elements between two given lists are in the same order or not.\n    >>> same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n    True\n    >>> same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])\n    False\n    >>> same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])\n    True\n    \"\"\"\n", "solution": "    \n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2", "results": [0, 0, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def same_order(l1, l2):\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            i += 1\n        j += 1\n    return i == len(l1)", "code_2": "def same_order(l1, l2):\n    return all(l1[i] == l2[j] for i, j in zip(range(len(l1)), range(len(l2))) if l1[i] in l2)", "code_3": "def same_order(l1, l2):\n    return all(l1[i] == l2[l2.index(l1[i])] for i in range(len(l1)) if l1[i] in l2)", "code_4": "def same_order(l1, l2):\n    return ''.join(filter(lambda x: x in l2, l1)) == ''.join(filter(lambda x: x in l1, l2))", "code_5": "def same_order(l1, l2):\n    return [x for x in l1 if x in l2] == [x for x in l2 if x in l1]", "code_6": "def same_order(l1, l2):\n    return sorted(l1, key=l2.index) == l1", "code_7": "def same_order(l1, l2):\n    return all(l1.index(x) == l2.index(x) for x in l1 if x in l2)", "code_8": "def same_order(l1, l2):\n    return all(l1[i] == l2[l2[i:].index(l1[i]) + i] for i in range(len(l1)) if l1[i] in l2)", "code_9": "def same_order(l1, l2):\n    return reduce(lambda x, y: x and y, (l1[i] == l2[l2[i:].index(l1[i]) + i] for i in range(len(l1)) if l1[i] in l2), True)", "code_10": "def same_order(l1, l2):\n    return all(starmap(eq, zip(filter(l2.__contains__, l1), filter(l1.__contains__, l2))))", "pass@3": 0.5333333333333333, "nDCG@10": 0.17993148201117182}
{"task_id": "MBPP/509", "prompt": "\n\ndef average_Odd(n) :\n    \"\"\"\n    Write a python function to find the average of odd numbers till a given odd number.\n    >>> average_Odd(9)\n    5\n    >>> average_Odd(5)\n    3\n    >>> average_Odd(11)\n    6\n    \"\"\"\n", "solution": "     \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ", "results": [0, 0, 1, 0, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def average_Odd(n): return sum(range(1, n+1, 2)) // (n//2)", "code_2": "def average_Odd(n): return (n*n) // (2*(n//2))", "code_3": "def average_Odd(n): return (n+1) // 2", "code_4": "def average_Odd(n): return (n**2 + 1) // (2*n)", "code_5": "def average_Odd(n): return (n+1) >> 1", "code_6": "def average_Odd(n): return n - (n//2 - 1)", "code_7": "def average_Odd(n): return (n+1) // 2", "code_8": "def average_Odd(n): return (n*(n+1)) // (2*n)", "code_9": "def average_Odd(n): return (n+1) // 2", "code_10": "def average_Odd(n): return (n*(n+1)) // (2*n)", "pass@3": 0.9666666666666667, "nDCG@10": 0.46785915648013926}
{"task_id": "MBPP/510", "prompt": "\n\ndef no_of_subsequences(arr, k):\n\t\"\"\"\n\tWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\n\t>>> no_of_subsequences([1,2,3,4], 10)\n\t11\n\t>>> no_of_subsequences([4,8,7,2], 50)\n\t9\n\t>>> no_of_subsequences([5,6,7,8], 15)\n\t4\n\t\"\"\"\n", "solution": "\t \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp)", "code_2": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, -1, -1):\n            if j + arr[i] < k:\n                dp[j + arr[i]] += dp[j]\n    return sum(dp)", "code_3": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k])", "code_4": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k]) - 1", "code_5": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, -1, -1):\n            if j + arr[i] < k:\n                dp[j + arr[i]] += dp[j]\n    return sum(dp[:k])", "code_6": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k]) - (1 if 0 < arr[i] < k else 0)", "code_7": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k]) - (1 if any(x < k for x in arr) else 0)", "code_8": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k]) - (1 if min(arr) < k else 0)", "code_9": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k]) - (1 if any(x < k for x in arr[:-1]) else 0)", "code_10": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k - 1, arr[i] - 1, -1):\n            dp[j] += dp[j - arr[i]]\n    return sum(dp[:k]) - (1 if any(x < k for x in arr[1:]) else 0)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/511", "prompt": "\n\ndef find_Min_Sum(num):\n    \"\"\"\n    Write a python function to find minimum sum of factors of a given number.\n    >>> find_Min_Sum(12)\n    7\n    >>> find_Min_Sum(105)\n    15\n    >>> find_Min_Sum(2)\n    2\n    \"\"\"\n", "solution": "     \n    sum = 0\n    i = 2\n    while(i * i <= num): \n        while(num % i == 0): \n            sum += i \n            num /= i \n        i += 1\n    sum += num \n    return sum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_2": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_3": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_4": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_5": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_6": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_7": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_8": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_9": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "code_10": "def find_Min_Sum(num):\n    if num == 2: return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i + find_Min_Sum(num // i)\n    return num + 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/512", "prompt": "\n\ndef count_element_freq(test_tuple):\n  \"\"\"\n  Write a function to count the element frequency in the mixed nested tuple.\n  >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) )\n  {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n  >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) )\n  {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n  >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) )\n  {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n  \"\"\"\n", "solution": "  def flatten(test_tuple): \n  \tfor tup in test_tuple: \n  \t\tif isinstance(tup, tuple): \n  \t\t\tyield from flatten(tup) \n  \t\telse: \n  \t\t\tyield tup \n  \n  res = {}\n  for ele in flatten(test_tuple):\n    if ele not in res:\n      res[ele] = 0\n    res[ele] += 1\n  return (res) ", "results": [1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef count_element_freq(test_tuple):\n    return Counter(x for t in test_tuple for x in (t if isinstance(t, tuple) else (t,)))", "code_2": "def count_element_freq(test_tuple):\n    freq = {}\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            for j in i:\n                freq[j] = freq.get(j, 0) + 1\n        else:\n            freq[i] = freq.get(i, 0) + 1\n    return freq", "code_3": "import collections\ndef count_element_freq(test_tuple):\n    return collections.Counter(sum(test_tuple, ()))", "code_4": "def count_element_freq(test_tuple):\n    freq = {}\n    for i in test_tuple:\n        if type(i) is tuple:\n            for j in i:\n                freq[j] = freq.get(j, 0) + 1\n        else:\n            freq[i] = freq.get(i, 0) + 1\n    return freq", "code_5": "from collections import defaultdict\ndef count_element_freq(test_tuple):\n    freq = defaultdict(int)\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            for j in i:\n                freq[j] += 1\n        else:\n            freq[i] += 1\n    return freq", "code_6": "def count_element_freq(test_tuple):\n    freq = {}\n    for i in test_tuple:\n        if type(i) == tuple:\n            for j in i:\n                freq[j] = freq.get(j, 0) + 1\n        else:\n            freq[i] = freq.get(i, 0) + 1\n    return freq", "code_7": "def count_element_freq(test_tuple):\n    freq = {}\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            for j in i:\n                freq[j] = freq[j] + 1 if j in freq else 1\n        else:\n            freq[i] = freq[i] + 1 if i in freq else 1\n    return freq", "code_8": "def count_element_freq(test_tuple):\n    freq = {}\n    for i in test_tuple:\n        if type(i) == int:\n            freq[i] = freq.get(i, 0) + 1\n        else:\n            for j in i:\n                freq[j] = freq.get(j, 0) + 1\n    return freq", "code_9": "from collections import Counter\ndef count_element_freq(test_tuple):\n    return dict(Counter(sum(test_tuple, ())))", "code_10": "def count_element_freq(test_tuple):\n    freq = {}\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            for j in i:\n                freq[j] = freq[j] + 1 if j in freq else 1\n        else:\n            freq[i] = freq[i] + 1 if i in freq else 1\n    return freq", "pass@3": 1.0, "nDCG@10": 0.823699893396571}
{"task_id": "MBPP/513", "prompt": "\n\ndef add_str(test_tup, K):\n  \"\"\"\n  Write a function to convert tuple into list by adding the given string after every element.\n  >>> add_str((5, 6, 7, 4, 9) , \"FDF\")\n  [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n  >>> add_str((7, 8, 9, 10) , \"PF\")\n  [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n  >>> add_str((11, 14, 12, 1, 4) , \"JH\")\n  [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n  \"\"\"\n", "solution": "  \n  res = [ele for sub in test_tup for ele in (sub, K)]\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def add_str(test_tup, K):\n  return [i for t in test_tup for i in (t, K)][:-1]", "code_2": "def add_str(test_tup, K):\n  return sum([[i, K] for i in test_tup], [])[:-1]", "code_3": "def add_str(test_tup, K):\n  return list(reduce(lambda x, y: x + [y, K], test_tup, []))[:-1]", "code_4": "def add_str(test_tup, K):\n  return list(chain.from_iterable(zip_longest(test_tup, (), fillvalue=K)))[:-1]", "code_5": "def add_str(test_tup, K):\n  return list(itertools.chain(*zip(test_tup, repeat(K)))) + [K]", "code_6": "def add_str(test_tup, K):\n  return [i for sublist in map(lambda x: [x, K], test_tup) for i in sublist][:-1]", "code_7": "def add_str(test_tup, K):\n  return [x for t in zip(test_tup, repeat(K)) for x in t][:-1]", "code_8": "def add_str(test_tup, K):\n  return [x for t in zip_longest(test_tup, repeat(K)) for x in t if x is not None][:-1]", "code_9": "def add_str(test_tup, K):\n  return [x for t in zip(test_tup, [K]*len(test_tup)) for x in t] + [K]", "code_10": "def add_str(test_tup, K):\n  return [x for i in range(len(test_tup)) for x in (test_tup[i], K)][:-1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/514", "prompt": "\n\ndef sum_elements(test_tup):\n  \"\"\"\n  Write a function to find the summation of tuple elements in the given tuple list.\n  >>> sum_elements((7, 8, 9, 1, 10, 7))\n  42\n  >>> sum_elements((1, 2, 3, 4, 5, 6))\n  21\n  >>> sum_elements((11, 12 ,13 ,45, 14))\n  95\n  \"\"\"\n", "solution": "  \n  res = sum(list(test_tup))\n  return (res) ", "results": [1, 1, 0, 1, 0, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_elements(test_tup):\n  return sum(test_tup)", "code_2": "def sum_elements(test_tup):\n  total = 0\n  for num in test_tup:\n    total += num\n  return total", "code_3": "def sum_elements(test_tup):\n  return reduce(lambda a, b: a + b, test_tup)", "code_4": "def sum_elements(test_tup):\n  return sum(i for i in test_tup)", "code_5": "def sum_elements(test_tup):\n  return functools.reduce(operator.add, test_tup)", "code_6": "def sum_elements(test_tup):\n  return sum(test_tup, 0)", "code_7": "def sum_elements(test_tup):\n  return sum(test_tup, start=0)", "code_8": "def sum_elements(test_tup):\n  return sum(test_tup, initial=0)", "code_9": "def sum_elements(test_tup):\n  return sum(test_tup, start=0, step=1)", "code_10": "def sum_elements(test_tup):\n  return sum(test_tup, initial=0, step=1)", "pass@3": 0.9166666666666666, "nDCG@10": 0.605504765619221}
{"task_id": "MBPP/515", "prompt": "\n\ndef modular_sum(arr, n, m):\n\t\"\"\"\n\tWrite a function to check if there is a subset with sum divisible by m.\n\t>>> modular_sum([3, 1, 7, 5], 4, 6)\n\tTrue\n\t>>> modular_sum([1, 7], 2, 5)\n\tFalse\n\t>>> modular_sum([1, 6], 2, 5)\n\tFalse\n\t\"\"\"\n", "solution": "\t \n\tif (n > m): \n\t\treturn True\n\tDP = [False for i in range(m)] \n\tfor i in range(n): \n\t\tif (DP[0]): \n\t\t\treturn True\n\t\ttemp = [False for i in range(m)] \n\t\tfor j in range(m): \n\t\t\tif (DP[j] == True): \n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\n\t\tfor j in range(m): \n\t\t\tif (temp[j]): \n\t\t\t\tDP[j] = True\n\t\tDP[arr[i] % m] = True\n\treturn DP[0]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in range(n):\n\t\ttemp = [0] * m\n\t\tfor j in range(m):\n\t\t\tif dp[j] == 1:\n\t\t\t\ttemp[j] = 1\n\t\t\t\tif j + arr[i] < m:\n\t\t\t\t\ttemp[j + arr[i]] = 1\n\t\t\t\telse:\n\t\t\t\t\ttemp[j + arr[i] - m] = 1\n\t\tdp = temp\n\treturn dp[0] == 1", "code_2": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tdp = [dp[j] or dp[(j - i) % m] for j in range(m)]\n\treturn dp[0]", "code_3": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tfor j in range(m - 1, i - 1, -1):\n\t\t\tdp[j] = dp[j] or dp[j - i]\n\treturn dp[0]", "code_4": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tfor j in range(m - 1, i - 1, -1):\n\t\t\tdp[j] |= dp[j - i]\n\treturn dp[0]", "code_5": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tdp = [dp[j] or (dp[j - i] if j >= i else 0) for j in range(m)]\n\treturn dp[0]", "code_6": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tdp = [dp[j] or dp[(j - i) % m] for j in range(m)]\n\treturn dp[0]", "code_7": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tfor j in range(m - 1, i - 1, -1):\n\t\t\tdp[j] = dp[j] or dp[j - i]\n\treturn dp[0]", "code_8": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tdp = [dp[j] or dp[(j - i) % m] for j in range(m)]\n\treturn dp[0]", "code_9": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tfor j in range(m - 1, i - 1, -1):\n\t\t\tdp[j] |= dp[j - i]\n\treturn dp[0]", "code_10": "def modular_sum(arr, n, m):\n\tdp = [0] * m\n\tdp[0] = 1\n\tfor i in arr:\n\t\tdp = [dp[j] or (dp[j - i] if j >= i else 0) for j in range(m)]\n\treturn dp[0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/516", "prompt": "\n\ndef radix_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using radix sort.\n    >>> radix_sort([15, 79, 25, 68, 37])\n    [15, 25, 37, 68, 79]\n    >>> radix_sort([9, 11, 8, 7, 3, 2])\n    [2, 3, 7, 8, 9, 11]\n    >>> radix_sort([36, 12, 24, 26, 29])\n    [12, 24, 26, 29, 36]\n    \"\"\"\n", "solution": "    \n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    while placement < max_digit:\n      buckets = [list() for _ in range( RADIX )]\n      for i in nums:\n        tmp = int((i / placement) % RADIX)\n        buckets[tmp].append(i)\n      a = 0\n      for b in range( RADIX ):\n        buck = buckets[b]\n        for i in buck:\n          nums[a] = i\n          a += 1\n      placement *= RADIX\n    return nums", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 19, "code_1": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_2": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = (nums[i] // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for i in range(n - 1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n    for i in range(n):\n        nums[i] = output[i]", "code_3": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        nums = counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_4": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for i in nums[::-1]:\n        index = (i // exp) % 10\n        output[count[index] - 1] = i\n        count[index] -= 1\n    return output", "code_5": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        nums = [0] * len(nums)\n        count = [0] * 10\n        for i in range(len(nums)):\n            index = (nums[i] // exp) % 10\n            count[index] += 1\n        for i in range(1, 10):\n            count[i] += count[i - 1]\n        for i in range(len(nums) - 1, -1, -1):\n            index = (nums[i] // exp) % 10\n            nums[count[index] - 1] = nums[i]\n            count[index] -= 1\n        exp *= 10\n    return nums", "code_6": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        nums = counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_7": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n        i -= 1\n    return output", "code_8": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_9": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for i in range(n - 1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n    nums[:] = output", "code_10": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        nums = counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_11": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n        i -= 1\n    return output", "code_12": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_13": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for i in range(n - 1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n    nums[:] = output[:]", "code_14": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        nums = counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_15": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n        i -= 1\n    return output[:]", "code_16": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_17": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for i in range(n - 1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n    nums[:] = output[:]", "code_18": "def radix_sort(nums):\n    max_val = max(nums)\n    exp = 1\n    while max_val // exp > 0:\n        nums = counting_sort(nums, exp)\n        exp *= 10\n    return nums", "code_19": "def counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in nums:\n        index = (i // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = (nums[i] // exp) % 10\n        output[count[index] - 1] = nums[i]\n        count[index] -= 1\n        i -= 1\n    return output[:]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/517", "prompt": "\n\ndef largest_pos(list1):\n    \"\"\"\n    Write a python function to find the largest postive number from the given list.\n    >>> largest_pos([1,2,3,4,-1])\n    4\n    >>> largest_pos([0,1,2,-5,-1,6])\n    6\n    >>> largest_pos([0,0,1,0])\n    1\n    \"\"\"\n", "solution": "     \n    max = list1[0] \n    for x in list1: \n        if x > max : \n             max = x  \n    return max", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def largest_pos(list1):\n    return max(x for x in list1 if x > 0)", "code_2": "def largest_pos(list1):\n    return max(filter(lambda x: x > 0, list1))", "code_3": "def largest_pos(list1):\n    pos = [x for x in list1 if x > 0]\n    return max(pos) if pos else None", "code_4": "def largest_pos(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num > largest:\n            largest = num\n    return largest if largest > 0 else None", "code_5": "def largest_pos(list1):\n    return sorted([x for x in list1 if x > 0], reverse=True)[0] if [x for x in list1 if x > 0] else None", "code_6": "def largest_pos(list1):\n    pos = [x for x in list1 if x > 0]\n    return max(pos) if pos else float('-inf')", "code_7": "def largest_pos(list1):\n    return max(list1) if max(list1) > 0 else None", "code_8": "def largest_pos(list1):\n    return max(x for x in list1 if x > 0) if any(x > 0 for x in list1) else None", "code_9": "def largest_pos(list1):\n    pos = [x for x in list1 if x > 0]\n    return max(pos) if pos else 'No positive numbers'", "code_10": "def largest_pos(list1):\n    largest = None\n    for num in list1:\n        if num > 0 and (largest is None or num > largest):\n            largest = num\n    return largest", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/518", "prompt": "\n\ndef sqrt_root(num):\n \"\"\"\n Write a function to find the square root of a perfect number.\n >>> sqrt_root(4)\n 2\n >>> sqrt_root(16)\n 4\n >>> sqrt_root(400)\n 20\n \"\"\"\n", "solution": " import math\n \n sqrt_root = math.pow(num, 0.5)\n return sqrt_root ", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef sqrt_root(num): return int(math.sqrt(num))", "code_2": "def sqrt_root(num): return num ** 0.5", "code_3": "def sqrt_root(num): return int(num ** 0.5)", "code_4": "def sqrt_root(num): return num // 1 if (num // 1) ** 2 == num else None", "code_5": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n    if num == 0:\n        return 0\n    x = num\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + num // x) // 2\n    return x", "code_6": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n    if num == 0:\n        return 0\n    x = num\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + num // x) >> 1\n    return x", "code_7": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n    if num == 0:\n        return 0\n    x = num\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + num // x) // 2\n    return x if x * x == num else None", "code_8": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n    if num == 0:\n        return 0\n    x = num\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + num // x) >> 1\n    return x if x * x == num else None", "code_9": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n    if num == 0:\n        return 0\n    x = num\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + num // x) // 2\n    return x if x * x == num else \"No perfect square root\"", "code_10": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n    if num == 0:\n        return 0\n    x = num\n    y = (x + 1) // 2\n    while y < x:\n        x = y\n        y = (x + num // x) >> 1\n    return x if x * x == num else \"No perfect square root\"", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/519", "prompt": "\n\ndef volume_tetrahedron(num):\n\t\"\"\"\n\tWrite a function to calculate volume of a tetrahedron.\n\t>>> volume_tetrahedron(10)\n\t117.85\n\t>>> volume_tetrahedron(15)\n\t397.75\n\t>>> volume_tetrahedron(20)\n\t942.81\n\t\"\"\"\n", "solution": "\timport math\n\t\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\n\treturn round(volume, 2)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def volume_tetrahedron(num):\n    return (num ** 3) / (6 * 2 ** 0.5)", "code_2": "import math\ndef volume_tetrahedron(num):\n    return (num ** 3) / (6 * math.sqrt(2))", "code_3": "from math import sqrt\ndef volume_tetrahedron(num):\n    return (num ** 3) / (6 * sqrt(2))", "code_4": "def volume_tetrahedron(num):\n    return num * num * num / 12.0", "code_5": "def volume_tetrahedron(num):\n    return num ** 3 / 12.0", "code_6": "def volume_tetrahedron(num):\n    return num * num * num / 12", "code_7": "def volume_tetrahedron(num):\n    return num ** 3 / 12", "code_8": "def volume_tetrahedron(num):\n    return (num ** 3) / 12.0 ** (1 / 3) / 2 ** (1 / 6)", "code_9": "def volume_tetrahedron(num):\n    return (num ** 3) / 12 ** (1 / 3) / 2 ** (1 / 6)", "code_10": "def volume_tetrahedron(num):\n    return (num * num * num) / 12", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/520", "prompt": "\n\ndef get_lcm(l):\n  \"\"\"\n  Write a function to find the lcm of the given array elements.\n  >>> get_lcm([2, 7, 3, 9, 4])\n  252\n  >>> get_lcm([1, 2, 8, 3])\n  24\n  >>> get_lcm([3, 8, 4, 10, 5])\n  120\n  \"\"\"\n", "solution": "  def find_lcm(num1, num2): \n  \tif(num1>num2): \n  \t\tnum = num1 \n  \t\tden = num2 \n  \telse: \n  \t\tnum = num2 \n  \t\tden = num1 \n  \trem = num % den \n  \twhile (rem != 0): \n  \t\tnum = den \n  \t\tden = rem \n  \t\trem = num % den \n  \tgcd = den \n  \tlcm = int(int(num1 * num2)/int(gcd)) \n  \treturn lcm \n  \n  num1 = l[0]\n  num2 = l[1]\n  lcm = find_lcm(num1, num2)\n  for i in range(2, len(l)):\n    lcm = find_lcm(lcm, l[i])\n  return lcm ", "results": [1, 1, 0, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from math import gcd\ndef get_lcm(l):\n    lcm = l[0]\n    for i in l[1:]:\n        lcm = lcm*i//gcd(lcm, i)\n    return lcm", "code_2": "from functools import reduce\nimport math\ndef get_lcm(l):\n    return reduce(lambda x, y: x*y // math.gcd(x, y), l)", "code_3": "from math import gcd\ndef get_lcm(l):\n    return abs(reduce(lambda x, y: x*y // gcd(x, y), l))", "code_4": "from math import gcd\ndef get_lcm(l):\n    return reduce(lambda a, b: a*b // gcd(a, b), l, 1)", "code_5": "from math import gcd\ndef get_lcm(l):\n    lcm = 1\n    for i in l:\n        lcm = lcm*i//gcd(lcm, i)\n    return lcm", "code_6": "from math import gcd\ndef get_lcm(l):\n    return abs(reduce(lambda a, b: a*b // gcd(a, b), l, 1))", "code_7": "from math import gcd\ndef get_lcm(l):\n    return reduce(lambda a, b: a*b // gcd(a, b), l, 1) if l else 0", "code_8": "from math import gcd\ndef get_lcm(l):\n    return reduce(lambda a, b: a*b // gcd(a, b), l) if l else None", "code_9": "from math import gcd\ndef get_lcm(l):\n    return reduce(lambda a, b: a*b // gcd(a, b), l, 1) if l else 0", "code_10": "from math import gcd\ndef get_lcm(l):\n    return reduce(lambda a, b: a*b // gcd(a, b), l, 1) if l else None", "pass@3": 0.7083333333333333, "nDCG@10": 0.44409732781325584}
{"task_id": "MBPP/521", "prompt": "\n\ndef check_isosceles(x,y,z):\n  \"\"\"\n  Write a function to print check if the triangle is scalene or not.\n  >>> check_isosceles(6,8,12)\n  True\n  >>> check_isosceles(6,6,12)\n  False\n  >>> check_isosceles(6,15,20)\n  True\n  \"\"\"\n", "solution": "  \n  if x!=y & y!=z & z!=x:\n\t   return True\n  else:\n     return False", "results": [1, 1, 1, 1, 1, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def check_isosceles(x, y, z):\n    return x != y and y != z and x != z", "code_2": "def check_isosceles(x, y, z):\n    return len(set([x, y, z])) == 3", "code_3": "def check_isosceles(x, y, z):\n    return (x + y > z) and (y + z > x) and (z + x > y) and (x != y or y != z or x != z)", "code_4": "def check_isosceles(x, y, z):\n    sides = sorted([x, y, z])\n    return sides[0] != sides[1] and sides[1] != sides[2]", "code_5": "def check_isosceles(x, y, z):\n    return not (x == y == z or x == y or y == z or x == z)", "code_6": "def check_isosceles(x, y, z):\n    return sum([x == y, y == z, x == z]) == 1", "code_7": "def check_isosceles(x, y, z):\n    return (x == y and z != x) or (y == z and x != y) or (z == x and y != z)", "code_8": "def check_isosceles(x, y, z):\n    return (x == y < z) or (y == z < x) or (z == x < y)", "code_9": "def check_isosceles(x, y, z):\n    return (x + y > z) and (x != y or y != z)", "code_10": "def check_isosceles(x, y, z):\n    return (x + y > z) and (x + z > y) and (y + z > x) and (x != y or y != z)", "pass@3": 0.9916666666666667, "nDCG@10": 0.7788065869851875}
{"task_id": "MBPP/522", "prompt": "\n\ndef lbs(arr):\n\t\"\"\"\n\tWrite a function to find the longest bitonic subsequence for the given array.\n\t>>> lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15])\n\t7\n\t>>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n\t6\n\t>>> lbs([80, 60, 30, 40, 20, 10])\n\t5\n\t\"\"\"\n", "solution": "\t \n\tn = len(arr) \n\tlis = [1 for i in range(n+1)] \n\tfor i in range(1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \n\t\t\t\tlis[i] = lis[j] + 1\n\tlds = [1 for i in range(n+1)] \n\tfor i in reversed(range(n-1)): \n\t\tfor j in reversed(range(i-1 ,n)): \n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \n\t\t\t\tlds[i] = lds[j] + 1\n\tmaximum = lis[0] + lds[0] - 1\n\tfor i in range(1 , n): \n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \n\treturn maximum", "results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                lds[i] = max(lds[i], lds[j] + 1)\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_2": "def lbs(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n    lis[0] = 1\n    lds[n - 1] = 1\n    for i in range(1, n):\n        lis[i] = max(lis[j] + 1 for j in range(i) if arr[i] > arr[j]) or 1\n    for i in range(n - 2, -1, -1):\n        lds[i] = max(lds[j] + 1 for j in range(n - 1, i, -1) if arr[i] > arr[j]) or 1\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_3": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n    for i in range(1, n):\n        lis[i] = max(lis[j] + 1 for j in range(i) if arr[i] > arr[j])\n    for i in range(n - 2, -1, -1):\n        lds[i] = max(lds[j] + 1 for j in range(n - 1, i, -1) if arr[i] > arr[j])\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_4": "def lbs(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n    for i in range(n - 1, -1, -1):\n        lis[i] = max(lis[j] + 1 for j in range(i + 1, n) if arr[i] > arr[j]) or 1\n    for i in range(n):\n        lds[i] = max(lds[j] + 1 for j in range(i) if arr[i] > arr[j]) or 1\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_5": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                lds[i] = max(lds[i], lds[j] + 1)\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_6": "def lbs(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n    for i in range(n - 1, -1, -1):\n        lis[i] = max(lis[j] + 1 for j in range(i + 1, n) if arr[i] > arr[j]) or 1\n    for i in range(n):\n        lds[i] = max(lds[j] + 1 for j in range(i) if arr[i] > arr[j]) or 1\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_7": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n    for i in range(1, n):\n        lis[i] = max(lis[j] + 1 for j in range(i) if arr[i] > arr[j])\n    for i in range(n - 2, -1, -1):\n        lds[i] = max(lds[j] + 1 for j in range(n - 1, i, -1) if arr[i] > arr[j])\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_8": "def lbs(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n    for i in range(n - 1, -1, -1):\n        lis[i] = max(lis[j] + 1 for j in range(i + 1, n) if arr[i] > arr[j]) or 1\n    for i in range(n):\n        lds[i] = max(lds[j] + 1 for j in range(i) if arr[i] > arr[j]) or 1\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_9": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                lds[i] = max(lds[i], lds[j] + 1)\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "code_10": "def lbs(arr):\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n    for i in range(n - 1, -1, -1):\n        lis[i] = max(lis[j] + 1 for j in range(i + 1, n) if arr[i] > arr[j]) or 1\n    for i in range(n):\n        lds[i] = max(lds[j] + 1 for j in range(i) if arr[i] > arr[j]) or 1\n    return max(lis[i] + lds[i] - 1 for i in range(n))", "pass@3": 0.7083333333333333, "nDCG@10": 0.37148910739409025}
{"task_id": "MBPP/523", "prompt": "\n\ndef check_string(str1):\n    \"\"\"\n    Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n    >>> check_string('python')\n    ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n    >>> check_string('123python')\n    ['String must have 1 upper case character.']\n    >>> check_string('123Python')\n    ['Valid string.']\n    \"\"\"\n", "solution": "    \n    messg = [\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append('Valid string.')\n    return result  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "check_string = lambda s: ['Valid string.'] if all(any(c.isupper(), c.islower(), c.isdigit()) for c in s) and len(s) >= 8 else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(c.isupper() for c in s), any(c.islower() for c in s), any(c.isdigit() for c in s), len(s) >= 8]) if not c]", "code_2": "check_string = lambda s: ['Valid string.'] if all(sum(c.isupper() for c in s), sum(c.islower() for c in s), sum(c.isdigit() for c in s), len(s) >= 8) else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [sum(c.isupper() for c in s), sum(c.islower() for c in s), sum(c.isdigit() for c in s), len(s) >= 8]) if not c]", "code_3": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit])) and len(s) >= 8 else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8]]) if not c]", "code_4": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8])) else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8]]) if not c]", "code_5": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit])) and len(s) >= 8 else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit]]) + (['String length should be atleast 8.'] if len(s) < 8 else [])]", "code_6": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8])) else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8]]) if not c]", "code_7": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit])) and len(s) >= 8 else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit]]) + (['String length should be atleast 8.'] if len(s) < 8 else [])]", "code_8": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8])) else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8]]) if not c]", "code_9": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit])) and len(s) >= 8 else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit]]) + (['String length should be atleast 8.'] if len(s) < 8 else [])]", "code_10": "check_string = lambda s: ['Valid string.'] if all(map(lambda f: any(map(f, s)), [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8])) else [i for i, c in zip(['String must have 1 upper case character.', 'String must have 1 lower case character.', 'String must have 1 number.', 'String length should be atleast 8.'], [any(map(f, s)) for f in [str.isupper, str.islower, str.isdigit, lambda s: len(s) >= 8]]) if not c]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/524", "prompt": "\n\ndef max_sum_increasing_subsequence(arr, n):\n\t\"\"\"\n\tWrite a function to find the sum of maximum increasing subsequence of the given array.\n\t>>> max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)\n\t106\n\t>>> max_sum_increasing_subsequence([3, 4, 5, 10], 4)\n\t22\n\t>>> max_sum_increasing_subsequence([10, 5, 4, 3], 4)\n\t10\n\t\"\"\"\n", "solution": "\t \n\tmax = 0\n\tmsis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \n\t\t\t\tmsis[i] = msis[j] + arr[i] \n\tfor i in range(n): \n\t\tif max < msis[i]: \n\t\t\tmax = msis[i] \n\treturn max", "results": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_sum_increasing_subsequence(arr, n):\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)", "code_2": "def max_sum_increasing_subsequence(arr, n):\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[j] for j in range(i) if arr[j] < arr[i]) + arr[i]\n    return max(dp)", "code_3": "def max_sum_increasing_subsequence(arr, n):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i] + max(dp[j] for j in range(i) if arr[j] < arr[i])\n    return max(dp)", "code_4": "def max_sum_increasing_subsequence(arr, n):\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)", "code_5": "def max_sum_increasing_subsequence(arr, n):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i] + max((dp[j] for j in range(i) if arr[j] < arr[i]), default=0)\n    return max(dp)", "code_6": "def max_sum_increasing_subsequence(arr, n):\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)", "code_7": "def max_sum_increasing_subsequence(arr, n):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i] + max((dp[j] for j in range(i) if arr[j] < arr[i]), default=0)\n    return max(dp)", "code_8": "def max_sum_increasing_subsequence(arr, n):\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)", "code_9": "def max_sum_increasing_subsequence(arr, n):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i] + max((dp[j] for j in range(i) if arr[j] < arr[i]), default=0)\n    return max(dp)", "code_10": "def max_sum_increasing_subsequence(arr, n):\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)", "pass@3": 1.0, "nDCG@10": 0.7510916729774055}
{"task_id": "MBPP/525", "prompt": "\n\ndef parallel_lines(line1, line2):\n  \"\"\"\n  Write a python function to check whether two given lines are parallel or not.\n  >>> parallel_lines([2,3,4], [2,3,8])\n  True\n  >>> parallel_lines([2,3,4], [4,-3,8])\n  False\n  >>> parallel_lines([3,3],[5,5])\n  True\n  \"\"\"\n", "solution": "  \n  return line1[0]/line1[1] == line2[0]/line2[1]", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def parallel_lines(l1, l2):\n    return (l1[1] * l2[0] == l1[0] * l2[1])", "code_2": "def parallel_lines(l1, l2):\n    return abs(l1[0] * l2[1] - l1[1] * l2[0]) < 1e-9", "code_3": "def parallel_lines(l1, l2):\n    return math.isclose(l1[0] * l2[1], l1[1] * l2[0], rel_tol=1e-9)", "code_4": "def parallel_lines(l1, l2):\n    return np.isclose(np.cross(l1, l2), 0)", "code_5": "def parallel_lines(l1, l2):\n    return np.allclose(np.cross(l1, l2), np.zeros(3))", "code_6": "def parallel_lines(l1, l2):\n    return np.linalg.norm(np.cross(l1, l2)) < 1e-9", "code_7": "def parallel_lines(l1, l2):\n    return np.dot(l1, l2) == np.linalg.norm(l1) * np.linalg.norm(l2) * np.cos(0)", "code_8": "def parallel_lines(l1, l2):\n    return np.isclose(np.dot(l1, l2), np.linalg.norm(l1) * np.linalg.norm(l2))", "code_9": "def parallel_lines(l1, l2):\n    return np.allclose(np.dot(l1, l2), np.linalg.norm(l1) * np.linalg.norm(l2))", "code_10": "def parallel_lines(l1, l2):\n    return np.abs(np.dot(l1, l2) / (np.linalg.norm(l1) * np.linalg.norm(l2))) < 1e-9", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/526", "prompt": "\n\ndef capitalize_first_last_letters(str1):\n     \"\"\"\n     Write a python function to capitalize first and last letters of each word of a given string.\n     >>> capitalize_first_last_letters(\"python\")\n     \"PythoN\"\n     >>> capitalize_first_last_letters(\"bigdata\")\n     \"BigdatA\"\n     >>> capitalize_first_last_letters(\"Hadoop\")\n     \"HadooP\"\n     \"\"\"\n", "solution": "     \n     str1 = result = str1.title()\n     result =  \"\"\n     for word in str1.split():\n        result += word[:-1] + word[-1].upper() + \" \"\n     return result[:-1]  ", "results": [0, 1, 1, 1, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def capitalize_first_last_letters(str1):\n    return ''.join(word[:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in str1.split())", "code_2": "def capitalize_first_last_letters(str1):\n    return ' '.join(word[0].upper() + word[1:-1] + word[-1].upper() for word in str1.split())", "code_3": "def capitalize_first_last_letters(str1):\n    return ' '.join(map(lambda word: word[0].upper() + word[1:-1] + word[-1].upper(), str1.split()))", "code_4": "def capitalize_first_last_letters(str1):\n    return ' '.join([word[0].upper() + word[1:-1] + word[-1].upper() for word in str1.split()])", "code_5": "def capitalize_first_last_letters(str1):\n    return ' '.join(word.capitalize()[:-1] + word[-1].upper() for word in str1.split())", "code_6": "def capitalize_first_last_letters(str1):\n    return ' '.join(word[:-1] + word[-1].upper() if len(word) > 1 else word for word in str1.split()).title()", "code_7": "def capitalize_first_last_letters(str1):\n    return ' '.join(word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in str1.split())", "code_8": "def capitalize_first_last_letters(str1):\n    return ' '.join(word[:-1] + word[-1].upper() if len(word) > 1 else word for word in str1.lower().split()).title()", "code_9": "def capitalize_first_last_letters(str1):\n    return ' '.join(word.capitalize()[:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in str1.split())", "code_10": "def capitalize_first_last_letters(str1):\n    return ' '.join(word[:-1] + word[-1].upper() if len(word) > 1 else word for word in str1.lower().split()).capitalize()", "pass@3": 0.9666666666666667, "nDCG@10": 0.5684579545875156}
{"task_id": "MBPP/527", "prompt": "\n\ndef get_pairs_count(arr, n, sum):\n    \"\"\"\n    Write a function to find all pairs in an integer array whose sum is equal to a given number.\n    >>> get_pairs_count([1, 5, 7, -1, 5], 5, 6)\n    3\n    >>> get_pairs_count([1, 5, 7, -1], 4, 6)\n    2\n    >>> get_pairs_count([1, 1, 1, 1], 4, 2)\n    6\n    \"\"\"\n", "solution": "    \n    count = 0 \n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "results": [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_pairs_count(arr, n, sum):\n    count = 0\n    s = set()\n    for i in range(0, n):\n        temp = sum - arr[i]\n        if temp in s:\n            count += 1\n        s.add(arr[i])\n    return count", "code_2": "def get_pairs_count(arr, n, sum):\n    arr.sort()\n    count = 0\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count", "code_3": "from collections import Counter\ndef get_pairs_count(arr, n, sum):\n    count = 0\n    freq = Counter(arr)\n    for i in range(0, n):\n        count += freq[sum - arr[i]]\n        if sum - arr[i] == arr[i]:\n            count -= 1\n    return count // 2", "code_4": "def get_pairs_count(arr, n, sum):\n    count = 0\n    hashmap = {}\n    for i in range(0, n):\n        if sum - arr[i] in hashmap:\n            count += hashmap[sum - arr[i]]\n        if arr[i] in hashmap:\n            hashmap[arr[i]] += 1\n        else:\n            hashmap[arr[i]] = 1\n    return count", "code_5": "def get_pairs_count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(0, n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left <= right:\n            if arr[i] + arr[left] + arr[right] == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif arr[i] + arr[left] + arr[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return count", "code_6": "def get_pairs_count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(0, n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        while j < n:\n            if arr[i] + arr[j] == sum:\n                count += 1\n                j += 1\n            elif arr[i] + arr[j] < sum:\n                j += 1\n            else:\n                break\n    return count", "code_7": "def get_pairs_count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(0, n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        while j < n:\n            if arr[i] + arr[j] == sum:\n                count += 1\n                while j < n - 1 and arr[j] == arr[j + 1]:\n                    j += 1\n                j += 1\n            elif arr[i] + arr[j] < sum:\n                j += 1\n            else:\n                break\n    return count", "code_8": "def get_pairs_count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(0, n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum:\n                count += 1\n                while j < k and arr[j] == arr[j + 1]:\n                    j += 1\n                while j < k and arr[k] == arr[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < sum:\n                j += 1\n            else:\n                k -= 1\n    return count", "code_9": "def get_pairs_count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(0, n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum:\n                count += 1\n                while j < k and arr[j] == arr[j + 1]:\n                    j += 1\n                while j < k and arr[k] == arr[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < sum:\n                j += 1\n            else:\n                k -= 1\n        if arr[i] + arr[i + 1] == sum:\n            count += 1\n    return count", "code_10": "def get_pairs_count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(0, n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum:\n                count += 1\n                while j < k and arr[j] == arr[j + 1]:\n                    j += 1\n                while j < k and arr[k] == arr[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < sum:\n                j += 1\n            else:\n                k -= 1\n        if arr[i] + arr[i + 1] == sum:\n            count += 1\n        if arr[i] + arr[n - 1] == sum:\n            count += 1\n    return count // 2", "pass@3": 0.5333333333333333, "nDCG@10": 0.20483424751859092}
{"task_id": "MBPP/528", "prompt": "\n\ndef min_length(list1):\n   \"\"\"\n   Write a function to find the list of lists with minimum length.\n   >>> min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n   (1, [0])\n   >>> min_length([[1], [5, 7], [10, 12, 14,15]])\n   (1, [1])\n   >>> min_length([[5], [15,20,25]])\n   (1, [5])\n   \"\"\"\n", "solution": "   \n   min_length = min(len(x) for x in  list1 )  \n   min_list = min((x) for x in   list1)\n   return(min_length, min_list)     ", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_length(list1):\n    return min((len(sub), sub) for sub in list1)", "code_2": "def min_length(list1):\n    return sorted((len(sub), sub) for sub in list1)[0]", "code_3": "def min_length(list1):\n    return min(map(lambda sub: (len(sub), sub), list1))", "code_4": "def min_length(list1):\n    return min(list1, key=len)", "code_5": "def min_length(list1):\n    return min(list1, key=lambda sub: len(sub))", "code_6": "def min_length(list1):\n    return reduce(lambda a, b: a if len(a) <= len(b) else b, list1)", "code_7": "def min_length(list1):\n    return functools.reduce(lambda a, b: a if len(a) <= len(b) else b, list1)", "code_8": "def min_length(list1):\n    return heapq.nsmallest(1, list1, key=len)[0]", "code_9": "def min_length(list1):\n    return sorted(list1, key=len)[0]", "code_10": "def min_length(list1):\n    return next(iter(sorted(list1, key=len)))", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/529", "prompt": "\n\ndef jacobsthal_lucas(n):\n\t\"\"\"\n\tWrite a function to find the nth jacobsthal-lucas number.\n\t>>> jacobsthal_lucas(5)\n\t31\n\t>>> jacobsthal_lucas(2)\n\t5\n\t>>> jacobsthal_lucas(4)\n\t17\n\t\"\"\"\n", "solution": "\t \n\tdp=[0] * (n + 1) \n\tdp[0] = 2\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \n\treturn dp[n]", "results": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def jacobsthal_lucas(n):\n\ta, b = 2, 1\n\tfor _ in range(n):\n\t\ta, b = b, a + 2 * b\n\treturn a", "code_2": "def jacobsthal_lucas(n):\n\treturn [2, 1][n] if n < 2 else jacobsthal_lucas(n - 1) + 2 * jacobsthal_lucas(n - 2)", "code_3": "def jacobsthal_lucas(n):\n\treturn (2 ** (n + 1) + (-1) ** n) // 3 if n > 0 else 2", "code_4": "def jacobsthal_lucas(n):\n\treturn sum((2 if i == 0 else 1) * (2 ** (n - i)) * ((-1) ** i) for i in range(n + 1)) // 3", "code_5": "def jacobsthal_lucas(n):\n\treturn int((((1 + 5 ** 0.5) / 2) ** n + ((1 - 5 ** 0.5) / 2) ** n) / 5 ** 0.5)", "code_6": "def jacobsthal_lucas(n):\n\tphi = (1 + 5 ** 0.5) / 2\n\treturn int((phi ** n + (-1 / phi) ** n) / 5 ** 0.5)", "code_7": "def jacobsthal_lucas(n):\n\treturn int((((1 + 5 ** 0.5) / 2) ** n - ((1 - 5 ** 0.5) / 2) ** n) / (2 * 5 ** 0.5))", "code_8": "def jacobsthal_lucas(n):\n\treturn int((((1 + 5 ** 0.5) / 2) ** n + ((1 - 5 ** 0.5) / 2) ** (n + 1)) / (2 * 5 ** 0.5))", "code_9": "def jacobsthal_lucas(n):\n\treturn int((((1 + 5 ** 0.5) / 2) ** (n + 1) + ((1 - 5 ** 0.5) / 2) ** (n + 2)) / (2 * 5 ** 0.5))", "code_10": "def jacobsthal_lucas(n):\n\treturn int((((1 + 5 ** 0.5) / 2) ** (n + 2) - ((1 - 5 ** 0.5) / 2) ** (n + 2)) / (2 * 5 ** 0.5))", "pass@3": 0.30000000000000004, "nDCG@10": 0.13886244387355456}
{"task_id": "MBPP/530", "prompt": "\n\ndef negative_count(nums):\n    \"\"\"\n    Write a function to find the ration of negative numbers in an array of integers.\n    >>> negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.31\n    >>> negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.31\n    >>> negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.44\n    \"\"\"\n", "solution": "    from array import array\n    \n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def negative_count(nums):\n    return sum(1 for num in nums if num < 0) / len(nums)", "code_2": "def negative_count(nums):\n    return len([num for num in nums if num < 0]) / len(nums)", "code_3": "def negative_count(nums):\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += 1\n    return negatives / len(nums)", "code_4": "def negative_count(nums):\n    return sum(num < 0 for num in nums) / len(nums)", "code_5": "def negative_count(nums):\n    return len(list(filter(lambda x: x < 0, nums))) / len(nums)", "code_6": "def negative_count(nums):\n    negatives = [num for num in nums if num < 0]\n    return len(negatives) / len(nums)", "code_7": "def negative_count(nums):\n    return sum(map(lambda x: x < 0, nums)) / len(nums)", "code_8": "def negative_count(nums):\n    return sum(num < 0 for num in nums) / float(len(nums))", "code_9": "def negative_count(nums):\n    return len([num for num in nums if num < 0]) / float(len(nums))", "code_10": "def negative_count(nums):\n    return sum(1 for num in nums if num < 0) / float(len(nums))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/531", "prompt": "\n\ndef min_coins(coins, m, V):\n    \"\"\"\n    Write a function to find minimum number of coins that make a given value.\n    >>> min_coins([9, 6, 5, 1] ,4,11)\n    2\n    >>> min_coins([4,5,6,7,8,9],6,9)\n    1\n    >>> min_coins([1, 2, 3],3,4)\n    2\n    \"\"\"\n", "solution": "    import sys \n     \n    if (V == 0): \n        return 0\n    res = sys.maxsize \n    for i in range(0, m): \n        if (coins[i] <= V): \n            sub_res = min_coins(coins, m, V-coins[i]) \n            if (sub_res != sys.maxsize and sub_res + 1 < res): \n                res = sub_res + 1  \n    return res ", "results": [1, 1, 1, 0, 1, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def min_coins(coins, m, V):\n    dp = [float('inf')] * (V + 1)\n    dp[0] = 0\n    for i in range(1, V + 1):\n        for coin in coins:\n            if i >= coin:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[V] if dp[V] != float('inf') else -1", "code_2": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for i in range(1, V + 1):\n        dp[i] = min(dp[i - c] if i - c >= 0 else float('inf') for c in coins) + 1\n    return dp[V] if dp[V] != float('inf') else -1", "code_3": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for coin in coins:\n        for i in range(coin, V + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[V] if dp[V] != float('inf') else -1", "code_4": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for i in range(1, V + 1):\n        dp[i] = min(dp[i - c] for c in coins if i - c >= 0) + 1\n    return dp[V] if dp[V] != float('inf') else -1", "code_5": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for i in range(1, V + 1):\n        dp[i] = min(dp[i - c] if i - c >= 0 else float('inf') for c in coins) + 1\n    return dp[V] if dp[V] != float('inf') else -1", "code_6": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for coin in coins:\n        for i in range(coin, V + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[V] if dp[V] != float('inf') else -1", "code_7": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for i in range(1, V + 1):\n        dp[i] = min(dp[i - c] for c in coins if i - c >= 0) + 1\n    return dp[V] if dp[V] != float('inf') else -1", "code_8": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for coin in coins:\n        for i in range(coin, V + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[V] if dp[V] != float('inf') else -1", "code_9": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for i in range(1, V + 1):\n        dp[i] = min(dp[i - c] for c in coins if i - c >= 0) + 1\n    return dp[V] if dp[V] != float('inf') else -1", "code_10": "def min_coins(coins, m, V):\n    dp = [0] + [float('inf')] * V\n    for coin in coins:\n        for i in range(coin, V + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[V] if dp[V] != float('inf') else -1", "pass@3": 0.9916666666666667, "nDCG@10": 0.7655934900767002}
{"task_id": "MBPP/532", "prompt": "\n\ndef check_permutation(str1, str2):\n  \"\"\"\n  Write a function to check if the two given strings are permutations of each other.\n  >>> check_permutation(\"abc\", \"cba\")\n  True\n  >>> check_permutation(\"test\", \"ttew\")\n  False\n  >>> check_permutation(\"xxyz\", \"yxzx\")\n  True\n  \"\"\"\n", "solution": "  \n  n1=len(str1)\n  n2=len(str2)\n  if(n1!=n2):\n    return False\n  a=sorted(str1)\n  str1=\" \".join(a)\n  b=sorted(str2)\n  str2=\" \".join(b)\n  for i in range(0, n1, 1):\n    if(str1[i] != str2[i]):\n      return False\n  return True", "results": [1, 0, 1, 1, 1, 0, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def check_permutation(str1, str2):\n    return sorted(str1) == sorted(str2)", "code_2": "def check_permutation(str1, str2):\n    return Counter(str1) == Counter(str2)", "code_3": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    count = [0] * 256\n    for i in range(len(str1)):\n        count[ord(str1[i])] += 1\n        count[ord(str2[i])] -= 1\n    for i in range(256):\n        if count[i] != 0:\n            return False\n    return True", "code_4": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return all(str1.count(char) == str2.count(char) for char in set(str1))", "code_5": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return set(str1) == set(str2) and all(str1.count(char) == str2.count(char) for char in set(str1))", "code_6": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sum(map(lambda x: (x[0] - x[1]) ** 2, zip(Counter(str1).values(), Counter(str2).values()))) == 0", "code_7": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return reduce(lambda x, y: x * y, (factorial(str1.count(char)) for char in set(str1))) == reduce(lambda x, y: x * y, (factorial(str2.count(char)) for char in set(str2)))", "code_8": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return all(str1.count(char) == str2.count(char) for char in string.ascii_lowercase)", "code_9": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return all(str1.count(char) == str2.count(char) for char in string.ascii_uppercase + string.ascii_lowercase + string.digits)", "code_10": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return all(str1.count(char) == str2.count(char) for char in set(str1 + str2))", "pass@3": 0.9166666666666666, "nDCG@10": 0.5736899196572437}
{"task_id": "MBPP/533", "prompt": "\n\ndef remove_datatype(test_tuple, data_type):\n  \"\"\"\n  Write a function to remove particular data type elements from the given tuple.\n  >>> remove_datatype((4, 5, 4, 7.7, 1.2), int)\n  [7.7, 1.2]\n  >>> remove_datatype((7, 8, 9, \"SR\"), str)\n  [7, 8, 9]\n  >>> remove_datatype((7, 1.1, 2, 2.2), float)\n  [7, 2]\n  \"\"\"\n", "solution": "  \n  res = []\n  for ele in test_tuple:\n    if not isinstance(ele, data_type):\n      res.append(ele)\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_datatype(test_tuple, data_type):\n  return [i for i in test_tuple if not isinstance(i, data_type)]", "code_2": "def remove_datatype(test_tuple, data_type):\n  return list(filter(lambda x: not isinstance(x, data_type), test_tuple))", "code_3": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if type(x) != data_type]", "code_4": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if type(x) is not data_type]", "code_5": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if isinstance(x, data_type) == False]", "code_6": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if type(x) is not data_type]", "code_7": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if type(x) != data_type]", "code_8": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if not type(x) == data_type]", "code_9": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if type(x) is not data_type]", "code_10": "def remove_datatype(test_tuple, data_type):\n  return [x for x in test_tuple if type(x) != data_type]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/534", "prompt": "\n\ndef search_literal(pattern,text):\n \"\"\"\n Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n >>> search_literal('python','python programming language')\n (0,6)\n >>> search_literal('programming','python programming language')\n (7,18)\n >>> search_literal('language','python programming language')\n (19,27)\n \"\"\"\n", "solution": " import re\n \n match = re.search(pattern, text)\n s = match.start()\n e = match.end()\n return (s, e)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    return (start, start + len(pattern)) if start != -1 else None", "code_2": "def search_literal(pattern, text):\n    try:\n        start = text.index(pattern)\n        return (start, start + len(pattern))\n    except ValueError:\n        return None", "code_3": "def search_literal(pattern, text):\n    if pattern in text:\n        start = text.index(pattern)\n        return (start, start + len(pattern))\n    return None", "code_4": "def search_literal(pattern, text):\n    start = text.index(pattern) if pattern in text else -1\n    return (start, start + len(pattern)) if start != -1 else None", "code_5": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    return (start, start + len(pattern)) if start >= 0 else None", "code_6": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    end = start + len(pattern)\n    return (start, end) if start != -1 else None", "code_7": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    return start != -1 and (start, start + len(pattern))", "code_8": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    return start >= 0 and (start, start + len(pattern))", "code_9": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    return start != -1 and (start, start + len(pattern)) or None", "code_10": "def search_literal(pattern, text):\n    start = text.find(pattern)\n    return start >= 0 and (start, start + len(pattern)) or None", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/535", "prompt": "\n\ndef topbottom_surfacearea(r):\n  \"\"\"\n  Write a function to find the top or bottom surface area of a cylinder.\n  >>> topbottom_surfacearea(10)\n  314.15000000000003\n  >>> topbottom_surfacearea(5)\n  78.53750000000001\n  >>> topbottom_surfacearea(4)\n  50.264\n  \"\"\"\n", "solution": "  \n  toporbottomarea=3.1415*r*r\n  return toporbottomarea", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef topbottom_surfacearea(r):\n return math.pi * r * r", "code_2": "from math import pi\ndef topbottom_surfacearea(r):\n return pi * r ** 2", "code_3": "def topbottom_surfacearea(r):\n return 3.141592653589793 * r * r", "code_4": "def topbottom_surfacearea(r):\n return 3.141592653589793 * r ** 2", "code_5": "def topbottom_surfacearea(r):\n return 3.14159 * r * r", "code_6": "def topbottom_surfacearea(r):\n return 3.14159 * r ** 2", "code_7": "def topbottom_surfacearea(r):\n return 3.14 * r * r", "code_8": "def topbottom_surfacearea(r):\n return 3.14 * r ** 2", "code_9": "def topbottom_surfacearea(r):\n return 3.1416 * r * r", "code_10": "def topbottom_surfacearea(r):\n return 3.1416 * r ** 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/536", "prompt": "\n\ndef nth_items(list,n):\n \"\"\"\n Write a function to select the nth items of a list.\n >>> nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)\n [1, 3, 5, 7, 9]\n >>> nth_items([10,15,19,17,16,18],3)\n [10,17]\n >>> nth_items([14,16,19,15,17],4)\n [14,17]\n \"\"\"\n", "solution": " \n return list[::n]", "results": [1, 1, 0, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def nth_items(lst, n):\n    return lst[::n]", "code_2": "def nth_items(lst, n):\n    return [lst[i] for i in range(0, len(lst), n)]", "code_3": "def nth_items(lst, n):\n    return [x for i, x in enumerate(lst) if (i+1) % n == 0]", "code_4": "def nth_items(lst, n):\n    return [lst[i] for i in range(n-1, len(lst), n)]", "code_5": "def nth_items(lst, n):\n    return list(filter(lambda x: lst.index(x) % n == 0, lst))", "code_6": "def nth_items(lst, n):\n    return [x for i, x in enumerate(lst) if not (i+1) % n]", "code_7": "def nth_items(lst, n):\n    return [x for i, x in enumerate(lst, 1) if i % n == 0]", "code_8": "def nth_items(lst, n):\n    return [lst[i] for i in range(0, len(lst), n) if i < len(lst)]", "code_9": "def nth_items(lst, n):\n    return [x for i, x in enumerate(lst) if i % n == n-1]", "code_10": "def nth_items(lst, n):\n    return [lst[i] for i in range(0, len(lst)) if (i+1) % n == 0]", "pass@3": 0.8333333333333334, "nDCG@10": 0.513528549750033}
{"task_id": "MBPP/537", "prompt": "\n\ndef first_repeated_word(str1):\n  \"\"\"\n  Write a python function to find the first repeated word in a given string.\n  >>> first_repeated_word(\"ab ca bc ab\")\n  \"ab\"\n  >>> first_repeated_word(\"ab ca bc\")\n  'None'\n  >>> first_repeated_word(\"ab ca bc ca ab bc\")\n  \"ca\"\n  \"\"\"\n", "solution": "  \n  temp = set()\n  for word in str1.split():\n    if word in temp:\n      return word;\n    else:\n      temp.add(word)\n  return 'None'", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def first_repeated_word(str1):\n    words = str1.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None", "code_2": "def first_repeated_word(str1):\n    words = str1.split()\n    seen = {}\n    for word in words:\n        if word in seen:\n            return word\n        seen[word] = True\n    return None", "code_3": "def first_repeated_word(str1):\n    words = str1.split()\n    for i in range(len(words)):\n        if words[i] in words[:i]:\n            return words[i]\n    return None", "code_4": "def first_repeated_word(str1):\n    words = str1.split()\n    for i in range(len(words)):\n        if words[i] in words[i+1:]:\n            return words[i]\n    return None", "code_5": "def first_repeated_word(str1):\n    words = str1.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            return word\n        word_count[word] = 1\n    return None", "code_6": "def first_repeated_word(str1):\n    words = str1.split()\n    word_set = set()\n    for word in words:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    return None", "code_7": "def first_repeated_word(str1):\n    words = str1.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            return word\n        word_dict[word] = 0\n    return None", "code_8": "def first_repeated_word(str1):\n    words = str1.split()\n    for i in range(len(words)):\n        if words.count(words[i]) > 1:\n            return words[i]\n    return None", "code_9": "def first_repeated_word(str1):\n    words = str1.split()\n    word_list = []\n    for word in words:\n        if word in word_list:\n            return word\n        word_list.append(word)\n    return None", "code_10": "def first_repeated_word(str1):\n    words = str1.split()\n    word_dict = {}\n    for word in words:\n        word_dict[word] = word_dict.get(word, 0) + 1\n        if word_dict[word] > 1:\n            return word\n    return None", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/538", "prompt": "\n\ndef string_list_to_tuple(str1):\n    \"\"\"\n    Write a python function to convert a given string list to a tuple.\n    >>> string_list_to_tuple((\"python 3.0\"))\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_list_to_tuple((\"bigdata\"))\n    ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    >>> string_list_to_tuple((\"language\"))\n    ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')\n    \"\"\"\n", "solution": "    \n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def string_list_to_tuple(str1):\n    return tuple(str1)", "code_2": "def string_list_to_tuple(str1):\n    return tuple(char for char in str1)", "code_3": "def string_list_to_tuple(str1):\n    return tuple(map(lambda x: x, str1))", "code_4": "def string_list_to_tuple(str1):\n    return tuple(filter(None, str1))", "code_5": "def string_list_to_tuple(str1):\n    return tuple(iter(str1))", "code_6": "def string_list_to_tuple(str1):\n    return tuple(str1[i] for i in range(len(str1)))", "code_7": "def string_list_to_tuple(str1):\n    return tuple(reversed(list(str1)))[::-1]", "code_8": "def string_list_to_tuple(str1):\n    return tuple(str1[::1])", "code_9": "def string_list_to_tuple(str1):\n    return tuple(str1[i:i+1] for i in range(len(str1)))", "code_10": "def string_list_to_tuple(str1):\n    return tuple(str1.strip(char) for char in str1)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/539", "prompt": "\n\ndef basesnum_coresspondingnum(bases_num,index):\n  \"\"\"\n  Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n  >>> basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n  >>> basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])\n  [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n  >>> basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])\n  [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n  \"\"\"\n", "solution": "  \n  result = list(map(pow, bases_num, index))\n  return result", "results": [1, 0, 1, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base, index in zip(bases, indices)]", "code_2": "import numpy as np\ndef basesnum_coresspondingnum(bases, indices):\n    return np.power(bases, indices).tolist()", "code_3": "from operator import pow\ndef basesnum_coresspondingnum(bases, indices):\n    return list(map(pow, bases, indices))", "code_4": "import math\ndef basesnum_coresspondingnum(bases, indices):\n    return [math.pow(base, index) for base, index in zip(bases, indices)]", "code_5": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base in bases for index in indices if bases.index(base) == indices.index(index)]", "code_6": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base in bases for index in indices if bases[bases.index(base)] == indices[indices.index(index)]]", "code_7": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base in bases for index in indices if bases[bases.index(base)] == indices[indices.index(base)]]", "code_8": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base in bases for index in indices if bases[bases.index(base)] == indices[bases.index(index)]]", "code_9": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base in bases for index in indices if bases[bases.index(base)] == indices[indices.index(base)] if bases.index(base) == indices.index(index)]", "code_10": "def basesnum_coresspondingnum(bases, indices):\n    return [base ** index for base in bases for index in indices if bases[bases.index(base)] == indices[indices.index(base)] if bases.index(base) == indices.index(base)]", "pass@3": 0.7083333333333333, "nDCG@10": 0.4152807670887413}
{"task_id": "MBPP/540", "prompt": "\n\ndef find_Diff(arr,n):\n    \"\"\"\n    Write a python function to find the difference between highest and least frequencies in a given array.\n    >>> find_Diff([1,1,2,2,7,8,4,5,1,4],10)\n    2\n    >>> find_Diff([1,7,9,2,3,3,1,3,3],9)\n    3\n    >>> find_Diff([1,2,1,2],4)\n    0\n    \"\"\"\n", "solution": "     \n    arr.sort()  \n    count = 0; max_count = 0; min_count = n \n    for i in range(0,(n-1)): \n        if arr[i] == arr[i + 1]: \n            count += 1\n            continue\n        else: \n            max_count = max(max_count,count) \n            min_count = min(min_count,count) \n            count = 0\n    return max_count - min_count ", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_Diff(arr,n):\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return max(freq.values()) - min(freq.values())", "code_2": "def find_Diff(arr,n):\n    freq = [0] * (max(arr) + 1)\n    for i in arr:\n        freq[i] += 1\n    return max(freq) - min(i for i in freq if i > 0)", "code_3": "from collections import Counter\ndef find_Diff(arr,n):\n    freq = Counter(arr)\n    return max(freq.values()) - min(freq.values())", "code_4": "def find_Diff(arr,n):\n    freq = [0] * 10000\n    for i in arr:\n        freq[i] += 1\n    return max(freq) - min(i for i in freq if i > 0)", "code_5": "def find_Diff(arr,n):\n    freq = [0] * (max(arr) + 1)\n    for i in arr:\n        freq[i] += 1\n    return max(freq) - min(freq[i] for i in range(len(freq)) if freq[i] > 0)", "code_6": "def find_Diff(arr,n):\n    freq = {}\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    return max(freq.values()) - min(freq.values())", "code_7": "def find_Diff(arr,n):\n    freq = [0] * (max(arr) + 1)\n    for i in arr:\n        freq[i] += 1\n    return max(freq) - min(freq)", "code_8": "from collections import defaultdict\ndef find_Diff(arr,n):\n    freq = defaultdict(int)\n    for i in arr:\n        freq[i] += 1\n    return max(freq.values()) - min(freq.values())", "code_9": "def find_Diff(arr,n):\n    freq = [0] * (max(arr) + 1)\n    for i in arr:\n        freq[i] += 1\n    return max(freq) - min(freq[i] for i in range(len(freq)) if freq[i] != 0)", "code_10": "def find_Diff(arr,n):\n    freq = [0] * 10000\n    for i in arr:\n        freq[i] += 1\n    return max(freq) - min(i for i in freq if i != 0)", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/541", "prompt": "\n\ndef check_abundant(n):\n\t\"\"\"\n\tWrite a function to find if the given number is abundant or not.\n\t>>> check_abundant(12)\n\tTrue\n\t>>> check_abundant(15)\n\tFalse\n\t>>> check_abundant(18)\n\tTrue\n\t\"\"\"\n", "solution": "\timport math \n\tdef get_sum(n): \n\t\tsum = 0\n\t\ti = 1\n\t\twhile i <= (math.sqrt(n)): \n\t\t\tif n%i == 0: \n\t\t\t\tif n/i == i : \n\t\t\t\t\tsum = sum + i \n\t\t\t\telse: \n\t\t\t\t\tsum = sum + i \n\t\t\t\t\tsum = sum + (n / i ) \n\t\t\ti = i + 1\n\t\tsum = sum - n \n\t\treturn sum\n\t \n\tif (get_sum(n) > n): \n\t\treturn True\n\telse: \n\t\treturn False", "results": [1, 1, 0, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n", "code_2": "def check_abundant(n):\n    s = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                s = s + i + n//i\n            else:\n                s = s + i\n            i += 1\n    return s > n", "code_3": "def check_abundant(n):\n    div_sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                div_sum += i\n            else:\n                div_sum += (i + n // i)\n            i += 1\n    return div_sum > n", "code_4": "def check_abundant(n):\n    return sum(i for i in range(1, n//2 + 1) if n % i == 0) > n", "code_5": "def check_abundant(n):\n    return sum(filter(lambda x: n % x == 0, range(1, n))) > n", "code_6": "def check_abundant(n):\n    return sum(i for i in range(1, n) if not n % i) > n", "code_7": "def check_abundant(n):\n    return sum(i for i in range(1, n//2 + 1) if n % i == 0) + (n if n % (n//2 + 1) == 0 else 0) > n", "code_8": "def check_abundant(n):\n    return sum(i for i in range(1, int(n**0.5) + 1) if n % i == 0) + sum(n // i for i in range(1, int(n**0.5) + 1) if n % i == 0 and i * i != n) > n", "code_9": "def check_abundant(n):\n    return sum(set(i for i in range(1, n//2 + 1) if n % i == 0) | {n // i for i in range(1, int(n**0.5) + 1) if n % i == 0}) > n", "code_10": "def check_abundant(n):\n    return sum(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))) > n", "pass@3": 0.9666666666666667, "nDCG@10": 0.6906478832608419}
{"task_id": "MBPP/542", "prompt": "\n\ndef fill_spaces(text):\n  \"\"\"\n  Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n  >>> fill_spaces('Boult Curve Wireless Neckband')\n  'Boult:Curve:Wireless:Neckband'\n  >>> fill_spaces('Stereo Sound Sweatproof')\n  'Stereo:Sound:Sweatproof'\n  >>> fill_spaces('Probass Curve Audio')\n  'Probass:Curve:Audio'\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.sub(\"[ ,.]\", \":\", text))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)", "code_2": "import re\ndef fill_spaces(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "code_3": "import re\ndef fill_spaces(text):\n    return text.translate(str.maketrans(' ,.', ':::'))", "code_4": "import re\ndef fill_spaces(text):\n    return ':'.join(text.split(' ')).replace(',', ':').replace('.', ':')", "code_5": "import re\ndef fill_spaces(text):\n    return ''.join([':' if c in ' ,.' else c for c in text])", "code_6": "import re\ndef fill_spaces(text):\n    return ':'.join(re.split(r'[ ,.]', text))", "code_7": "import re\ndef fill_spaces(text):\n    return ':'.join(filter(None, re.split(r'[ ,.]', text)))", "code_8": "import re\ndef fill_spaces(text):\n    return ':'.join(text.split()).replace(',', ':').replace('.', ':')", "code_9": "import re\ndef fill_spaces(text):\n    return ':'.join(re.findall(r'\\w+', text))", "code_10": "import re\ndef fill_spaces(text):\n    return ':'.join(re.split(r'\\W+', text))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/543", "prompt": "\n\ndef count_digits(num1,num2):\n    \"\"\"\n    Write a function to add two numbers and print number of digits of sum.\n    >>> count_digits(9875,10)\n    (4)\n    >>> count_digits(98759853034,100)\n    (11)\n    >>> count_digits(1234567,500)\n    (7)\n    \"\"\"\n", "solution": "    \n    number=num1+num2\n    count = 0\n    while(number > 0):\n        number = number // 10\n        count = count + 1\n    return count", "results": [1, 0, 1, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_digits(num1, num2):\n    return len(str(num1 + num2))", "code_2": "def count_digits(num1, num2):\n    return int(math.log10(num1 + num2)) + 1", "code_3": "def count_digits(num1, num2):\n    sum = num1 + num2\n    count = 0\n    while sum > 0:\n        sum //= 10\n        count += 1\n    return count", "code_4": "def count_digits(num1, num2):\n    return len(f\"{num1 + num2}\")", "code_5": "def count_digits(num1, num2):\n    return len(str(sum([num1, num2])))", "code_6": "def count_digits(num1, num2):\n    return len(str(num1).__add__(str(num2)))", "code_7": "def count_digits(num1, num2):\n    return len(str(num1).__add__(str(num2)))", "code_8": "def count_digits(num1, num2):\n    return len(str(num1).__add__(str(num2)))", "code_9": "def count_digits(num1, num2):\n    return len(str(num1).__add__(str(num2)))", "code_10": "def count_digits(num1, num2):\n    return len(str(num1).__add__(str(num2)))", "pass@3": 0.8333333333333334, "nDCG@10": 0.510069131458292}
{"task_id": "MBPP/544", "prompt": "\n\ndef flatten_tuple(test_list):\n  \"\"\"\n  Write a function to flatten the tuple list to a string.\n  >>> flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])\n  '1 4 6 5 8 2 9 1 10'\n  >>> flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])\n  '2 3 4 6 9 3 2 2 11'\n  >>> flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])\n  '14 21 9 24 19 12 29 23 17'\n  \"\"\"\n", "solution": "  \n  res = ' '.join([idx for tup in test_list for idx in tup])\n  return (res) ", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def flatten_tuple(test_list):\n  return ' '.join(sum(test_list, ()))", "code_2": "def flatten_tuple(test_list):\n  return ' '.join(item for sublist in test_list for item in sublist)", "code_3": "def flatten_tuple(test_list):\n  return ' '.join(map(str, sum(test_list, ())))", "code_4": "def flatten_tuple(test_list):\n  return ' '.join(chain.from_iterable(test_list))", "code_5": "def flatten_tuple(test_list):\n  return ' '.join(reduce(lambda x, y: x + y, test_list))", "code_6": "def flatten_tuple(test_list):\n  return ' '.join(itertools.chain(*test_list))", "code_7": "def flatten_tuple(test_list):\n  return ' '.join(list(itertools.chain(*test_list)))", "code_8": "def flatten_tuple(test_list):\n  return ' '.join(np.hstack(test_list))", "code_9": "def flatten_tuple(test_list):\n  return ' '.join(pd.Series(test_list).explode())", "code_10": "def flatten_tuple(test_list):\n  return ' '.join(re.findall(r'\\d+', str(test_list)))", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/545", "prompt": "\n\ndef toggle_F_and_L_bits(n) :\n    \"\"\"\n    Write a python function to toggle only first and last bits of a given number.\n    >>> toggle_F_and_L_bits(10)\n    3\n    >>> toggle_F_and_L_bits(15)\n    6\n    >>> toggle_F_and_L_bits(20)\n    5\n    \"\"\"\n", "solution": "    def take_L_and_F_set_bits(n) : \n        n = n | n >> 1\n        n = n | n >> 2\n        n = n | n >> 4\n        n = n | n >> 8\n        n = n | n >> 16 \n        return ((n + 1) >> 1) + 1      \n      \n    if (n == 1) : \n        return 0 \n    return n ^ take_L_and_F_set_bits(n) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 11, "code_1": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (n.bit_length() - 1)) | 1", "code_2": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << len(bin(n)) - 3) | 1", "code_3": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(format(n, 'b')) - 1)) | 1", "code_4": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)[2:]) - 1)) | 1", "code_5": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)) - 3)) | 1", "code_6": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)) - 3)) | 1", "code_7": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)) - 3)) | 1", "code_8": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)) - 3)) | 1", "code_9": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)) - 3)) | 1", "code_10": "def toggle_F_and_L_bits(n):\n    return n ^ (1 << (len(bin(n)) - 3)) | 1", "code_11": "Note: All solutions are equivalent and optimized for time complexity. They use bitwise operations to toggle the first and last bits of the given number.", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/546", "prompt": "\n\ndef last_occurence_char(string,char):\n \"\"\"\n Write a function to find the last occurrence of a character in a string.\n >>> last_occurence_char(\"hello world\",'l')\n 10\n >>> last_occurence_char(\"language\",'g')\n 7\n >>> last_occurence_char(\"little\",'y')\n None\n \"\"\"\n", "solution": " \n flag = -1\n for i in range(len(string)):\n     if(string[i] == char):\n         flag = i\n if(flag == -1):\n    return None\n else:\n    return flag + 1", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def last_occurence_char(string, char):\n    return string.rfind(char)", "code_2": "def last_occurence_char(string, char):\n    return next((i for i in reversed(range(len(string))) if string[i] == char), None)", "code_3": "def last_occurence_char(string, char):\n    try:\n        return len(string) - string[::-1].index(char) - 1\n    except ValueError:\n        return None", "code_4": "def last_occurence_char(string, char):\n    return max((i for i, c in enumerate(string) if c == char), default=None)", "code_5": "def last_occurence_char(string, char):\n    index = string.find(char)\n    if index == -1:\n        return None\n    while True:\n        new_index = string.find(char, index + 1)\n        if new_index == -1:\n            return index\n        index = new_index", "code_6": "def last_occurence_char(string, char):\n    return reduce(lambda x, y: y if string[y] == char else x, range(len(string)), None)", "code_7": "def last_occurence_char(string, char):\n    return functools.reduce(lambda x, y: y if string[y] == char else x, reversed(range(len(string))), None)", "code_8": "def last_occurence_char(string, char):\n    stack = [i for i, c in enumerate(string) if c == char]\n    return stack[-1] if stack else None", "code_9": "def last_occurence_char(string, char):\n    index = -1\n    for i, c in enumerate(string):\n        if c == char:\n            index = i\n    return index", "code_10": "def last_occurence_char(string, char):\n    return max(map(string.rfind, char))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/547", "prompt": "\n\ndef Total_Hamming_Distance(n):\n    \"\"\"\n    Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\n    >>> Total_Hamming_Distance(4)\n    7\n    >>> Total_Hamming_Distance(2)\n    3\n    >>> Total_Hamming_Distance(5)\n    8\n    \"\"\"\n", "solution": "       \n    i = 1\n    sum = 0\n    while (n // i > 0):  \n        sum = sum + n // i  \n        i = i * 2     \n    return sum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Total_Hamming_Distance(n):\n    return sum(bin(i).count('1') * (n - i + 1) for i in range(n + 1))", "code_2": "def Total_Hamming_Distance(n):\n    return sum(bin(n).count('1') * (i + 1) for i in range(n))", "code_3": "def Total_Hamming_Distance(n):\n    return sum(bin(n ^ i).count('1') for i in range(n))", "code_4": "def Total_Hamming_Distance(n):\n    return sum(bin(n).count('1') * i for i in range(1, n + 1))", "code_5": "def Total_Hamming_Distance(n):\n    return sum(bin(i).count('1') * (n - i) for i in range(n))", "code_6": "def Total_Hamming_Distance(n):\n    return sum(bin(n - i).count('1') * i for i in range(n))", "code_7": "def Total_Hamming_Distance(n):\n    return sum(bin(n ^ (n - i)).count('1') * i for i in range(n))", "code_8": "def Total_Hamming_Distance(n):\n    return sum(bin(i ^ (i + 1)).count('1') * (n - i) for i in range(n))", "code_9": "def Total_Hamming_Distance(n):\n    return sum(bin(n).count('1') * i * (n - i) for i in range(n + 1))", "code_10": "def Total_Hamming_Distance(n):\n    return sum(bin(n - i).count('1') * (i + 1) for i in range(n))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/548", "prompt": "\n\ndef longest_increasing_subsequence(arr):\n\t\"\"\"\n\tWrite a function to find the length of the longest increasing subsequence of the given sequence.\n\t>>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])\n\t5\n\t>>> longest_increasing_subsequence([3, 10, 2, 1, 20])\n\t3\n\t>>> longest_increasing_subsequence([50, 3, 10, 7, 40, 80])\n\t4\n\t\"\"\"\n", "solution": "\t \n\tn = len(arr) \n\tlongest_increasing_subsequence = [1]*n \n\tfor i in range (1 , n): \n\t\tfor j in range(0 , i): \n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\n\tmaximum = 0\n\tfor i in range(n): \n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \n\treturn maximum", "results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_2": "def longest_increasing_subsequence(arr):\n    tails = [0] * len(arr)\n    size = 0\n    for x in arr:\n        i, j = 0, size\n        while i != j:\n            m = (i + j) // 2\n            if tails[m] < x:\n                i = m + 1\n            else:\n                j = m\n        tails[i] = x\n        size = max(i + 1, size)\n    return size", "code_3": "from bisect import bisect_left\ndef longest_increasing_subsequence(arr):\n    dp = []\n    for i in arr:\n        idx = bisect_left(dp, i)\n        if idx == len(dp):\n            dp.append(i)\n        else:\n            dp[idx] = i\n    return len(dp)", "code_4": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)", "code_5": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        dp[i] = max(dp[j] + 1 for j in range(i) if arr[j] < arr[i])\n    return max(dp)", "code_6": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_7": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        dp[i] = max(dp[j] + 1 for j in range(i) if arr[i] > arr[j])\n    return max(dp)", "code_8": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_9": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_10": "def longest_increasing_subsequence(arr):\n    dp = [1] * len(arr)\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "pass@3": 1.0, "nDCG@10": 0.841492960259019}
{"task_id": "MBPP/549", "prompt": "\n\ndef odd_Num_Sum(n) :\n    \"\"\"\n    Write a python function to find the sum of fifth power of first n odd natural numbers.\n    >>> odd_Num_Sum(1)\n    1\n    >>> odd_Num_Sum(2)\n    244\n    >>> odd_Num_Sum(3)\n    3369\n    \"\"\"\n", "solution": "     \n    j = 0\n    sm = 0\n    for i in range(1,n+1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j*j)     \n    return sm ", "results": [1, 1, 1, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def odd_Num_Sum(n):\n    return sum(i**5 for i in range(1, 2*n, 2))", "code_2": "def odd_Num_Sum(n):\n    return sum(map(lambda i: i**5, range(1, 2*n, 2)))", "code_3": "def odd_Num_Sum(n):\n    return sum([i**5 for i in range(1, 2*n, 2)])", "code_4": "def odd_Num_Sum(n):\n    return sum(i**5 for i in xrange(1, 2*n, 2))", "code_5": "def odd_Num_Sum(n):\n    return sum(map(pow, range(1, 2*n, 2), [5]*n))", "code_6": "def odd_Num_Sum(n):\n    return reduce(lambda x, y: x + y**5, range(1, 2*n, 2), 0)", "code_7": "def odd_Num_Sum(n):\n    return sum(i**5 for i in itertools.islice(itertools.count(1, 2), n))", "code_8": "def odd_Num_Sum(n):\n    return sum(i**5 for i in numpy.arange(1, 2*n, 2))", "code_9": "def odd_Num_Sum(n):\n    return numpy.sum(numpy.arange(1, 2*n, 2)**5)", "code_10": "def odd_Num_Sum(n):\n    return numpy.sum(numpy.power(numpy.arange(1, 2*n, 2), 5))", "pass@3": 0.8333333333333334, "nDCG@10": 0.5541432109622959}
{"task_id": "MBPP/550", "prompt": "\n\ndef find_Max(arr,low,high):\n    \"\"\"\n    Write a python function to find the maximum element in a sorted and rotated array.\n    >>> find_Max([2,3,5,6,9],0,4)\n    9\n    >>> find_Max([3,4,5,2,1],0,4)\n    5\n    >>> find_Max([1,2,3],0,2)\n    3\n    \"\"\"\n", "solution": "     \n    if (high < low): \n        return arr[0] \n    if (high == low): \n        return arr[low] \n    mid = low + (high - low) // 2 \n    if (mid < high and arr[mid + 1] < arr[mid]): \n        return arr[mid] \n    if (mid > low and arr[mid] < arr[mid - 1]): \n        return arr[mid - 1]  \n    if (arr[low] > arr[mid]): \n        return find_Max(arr,low,mid - 1) \n    else: \n        return find_Max(arr,mid + 1,high) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid]\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid-1]\n    if arr[high] > arr[mid]:\n        return find_Max(arr, mid+1, high)\n    return find_Max(arr, low, mid-1)", "code_2": "def find_Max(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        if arr[mid - 1] > arr[mid]:\n            return arr[mid - 1]\n        if arr[mid] > arr[0]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[low]", "code_3": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid - 1]\n    if arr[high] > arr[mid]:\n        return find_Max(arr, mid + 1, high)\n    return find_Max(arr, low, mid - 1)", "code_4": "def find_Max(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] < arr[mid - 1]:\n            return arr[mid - 1]\n        if arr[mid] > arr[0]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[low]", "code_5": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid - 1]\n    if arr[high] > arr[mid]:\n        return find_Max(arr, mid + 1, high)\n    return find_Max(arr, low, mid - 1)", "code_6": "def find_Max(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] < arr[mid - 1]:\n            return arr[mid - 1]\n        if arr[mid] > arr[0]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]", "code_7": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid]\n    if mid > low and arr[mid - 1] > arr[mid]:\n        return arr[mid - 1]\n    if arr[high] > arr[mid]:\n        return find_Max(arr, mid + 1, high)\n    return find_Max(arr, low, mid - 1)", "code_8": "def find_Max(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] < arr[mid - 1]:\n            return arr[mid - 1]\n        if arr[mid] > arr[0]:\n            low = mid\n        else:\n            high = mid - 1\n    return arr[low]", "code_9": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid]\n    if mid > low and arr[mid - 1] > arr[mid]:\n        return arr[mid - 1]\n    if arr[high] > arr[mid]:\n        return find_Max(arr, mid, high)\n    return find_Max(arr, low, mid)", "code_10": "def find_Max(arr, low, high):\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        if arr[mid] < arr[mid - 1]:\n            return arr[mid - 1]\n        if arr[mid] > arr[0]:\n            low = mid\n        else:\n            high = mid\n    return arr[low]", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/551", "prompt": "\n\ndef extract_column(list1, n):\n   \"\"\"\n   Write a function to extract a specified column from a given nested list.\n   >>> extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)\n   [1, 2, 1]\n   >>> extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)\n   [3, -5, 1]\n   >>> extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)\n   [1, 5, 1, 13, 5, 9]\n   \"\"\"\n", "solution": "   \n   result = [i.pop(n) for i in list1]\n   return result ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def extract_column(lst, n):\n    return [row[n] for row in lst if n < len(row)]", "code_2": "def extract_column(lst, n):\n    return list(map(lambda row: row[n], filter(lambda row: n < len(row), lst)))", "code_3": "def extract_column(lst, n):\n    return [row[n] for row in lst if len(row) > n]", "code_4": "def extract_column(lst, n):\n    return [row[n] for row in lst if row[n:]]", "code_5": "def extract_column(lst, n):\n    return [row[n] for row in lst if len(row) > n]", "code_6": "def extract_column(lst, n):\n    return [row[n] for row in lst if n < len(row)]", "code_7": "def extract_column(lst, n):\n    return [row[n] for row in lst if n < len(row)]", "code_8": "def extract_column(lst, n):\n    return [row[n] for row in lst if n < len(row)]", "code_9": "def extract_column(lst, n):\n    return [row[n] for row in lst if n < len(row)]", "code_10": "def extract_column(lst, n):\n    return [row[n] for row in lst if n < len(row)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/552", "prompt": "\n\ndef Seq_Linear(seq_nums):\n  \"\"\"\n  Write a python function to check whether a given sequence is linear or not.\n  >>> Seq_Linear([0,2,4,6,8,10])\n  \"Linear Sequence\"\n  >>> Seq_Linear([1,2,3])\n  \"Linear Sequence\"\n  >>> Seq_Linear([1,5,2])\n  \"Non Linear Sequence\"\n  \"\"\"\n", "solution": "  \n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\n  if len(set(seq_nums)) == 1: \n    return \"Linear Sequence\"\n  else:\n    return \"Non Linear Sequence\"", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if all(seq_nums[i] - seq_nums[i - 1] == seq_nums[1] - seq_nums[0] for i in range(2, len(seq_nums))) else \"Non Linear Sequence\"", "code_2": "def Seq_Linear(seq_nums):\n    diff = seq_nums[1] - seq_nums[0]\n    return \"Linear Sequence\" if all(seq_nums[i] - seq_nums[i - 1] == diff for i in range(2, len(seq_nums))) else \"Non Linear Sequence\"", "code_3": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if len(set(seq_nums[i] - seq_nums[i - 1] for i in range(1, len(seq_nums)))) == 1 else \"Non Linear Sequence\"", "code_4": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if seq_nums == list(range(seq_nums[0], seq_nums[-1] + 1, (seq_nums[-1] - seq_nums[0]) // len(seq_nums))) else \"Non Linear Sequence\"", "code_5": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if seq_nums == [seq_nums[0] + i * (seq_nums[-1] - seq_nums[0]) // (len(seq_nums) - 1) for i in range(len(seq_nums))] else \"Non Linear Sequence\"", "code_6": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if len(seq_nums) == len(set(seq_nums)) and seq_nums == sorted(seq_nums) else \"Non Linear Sequence\"", "code_7": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if all(seq_nums[i] == seq_nums[0] + i * (seq_nums[-1] - seq_nums[0]) // (len(seq_nums) - 1) for i in range(len(seq_nums))) else \"Non Linear Sequence\"", "code_8": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if seq_nums == [seq_nums[0] + i * (seq_nums[-1] - seq_nums[0]) / (len(seq_nums) - 1) for i in range(len(seq_nums))] else \"Non Linear Sequence\"", "code_9": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if all(seq_nums[i] - seq_nums[i - 1] == seq_nums[1] - seq_nums[0] for i in range(2, len(seq_nums))) and len(seq_nums) == len(set(seq_nums)) else \"Non Linear Sequence\"", "code_10": "def Seq_Linear(seq_nums):\n    return \"Linear Sequence\" if all(seq_nums[i] == seq_nums[0] + i * (seq_nums[-1] - seq_nums[0]) / (len(seq_nums) - 1) for i in range(len(seq_nums))) else \"Non Linear Sequence\"", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/553", "prompt": "\n\ndef tuple_to_float(test_tup):\n  \"\"\"\n  Write a function to convert the given tuple to a floating-point number.\n  >>> tuple_to_float((4, 56))\n  4.56\n  >>> tuple_to_float((7, 256))\n  7.256\n  >>> tuple_to_float((8, 123))\n  8.123\n  \"\"\"\n", "solution": "  \n  res = float('.'.join(str(ele) for ele in test_tup))\n  return (res) ", "results": [1, 0, 0, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def tuple_to_float(test_tup):\n    return float(str(test_tup[0]) + '.' + str(test_tup[1]))", "code_2": "def tuple_to_float(test_tup):\n    return test_tup[0] + test_tup[1] / 10 ** len(str(test_tup[1]))", "code_3": "def tuple_to_float(test_tup):\n    return test_tup[0] + test_tup[1] / pow(10, len(str(test_tup[1])))", "code_4": "def tuple_to_float(test_tup):\n    return float('{}.{}'.format(*test_tup))", "code_5": "def tuple_to_float(test_tup):\n    return float('%d.%d' % test_tup)", "code_6": "def tuple_to_float(test_tup):\n    return float(f'{test_tup[0]}.{test_tup[1]}')", "code_7": "def tuple_to_float(test_tup):\n    return float(f'{test_tup[0]}.{test_tup[1]}')", "code_8": "def tuple_to_float(test_tup):\n    return float(''.join(map(str, test_tup)).replace('.', '.', 1))", "code_9": "def tuple_to_float(test_tup):\n    return float(str(test_tup[0]) + '.' + str(test_tup[1]))", "code_10": "def tuple_to_float(test_tup):\n    return float(str(test_tup[0]) + '.' + str(test_tup[1]))", "pass@3": 0.9916666666666667, "nDCG@10": 0.6816604510406282}
{"task_id": "MBPP/554", "prompt": "\n\ndef Split(list):\n    \"\"\"\n    Write a python function to find odd numbers from a mixed list.\n    >>> Split([1,2,3,4,5,6])\n    [1,3,5]\n    >>> Split([10,11,12,13])\n    [11,13]\n    >>> Split([7,8,9,1])\n    [7,9,1]\n    \"\"\"\n", "solution": "     \n    od_li = [] \n    for i in list: \n        if (i % 2 != 0): \n            od_li.append(i)  \n    return od_li", "results": [1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]", "code_2": "def Split(lst):\n    return list(filter(lambda x: x % 2 != 0, lst))", "code_3": "def Split(lst):\n    return [x for x in lst if x & 1]", "code_4": "def Split(lst):\n    return [x for x in lst if bin(x)[-1] == '1']", "code_5": "def Split(lst):\n    return list(map(int, filter(lambda x: x[-1] == '1', map(bin, lst))))", "code_6": "def Split(lst):\n    return [x for x in lst if bool(x & 1)]", "code_7": "def Split(lst):\n    return [x for x in lst if x >> 1 << 1 != x]", "code_8": "def Split(lst):\n    return [x for x in lst if ~(~x & 1)]", "code_9": "def Split(lst):\n    return [x for x in lst if x ^ 1 < x]", "code_10": "def Split(lst):\n    return [x for x in lst if divmod(x, 2)[1]]", "pass@3": 1.0, "nDCG@10": 0.8454256604216018}
{"task_id": "MBPP/555", "prompt": "\n\ndef difference(n) :\n    \"\"\"\n    Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n    >>> difference(3)\n    30\n    >>> difference(5)\n    210\n    >>> difference(2)\n    6\n    \"\"\"\n", "solution": "      \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def difference(n): return n**2 * (n+1)**2 // 4 - n * (n+1) // 2", "code_2": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(1, n+1))", "code_3": "def difference(n): return (n*(n+1)//2)**2 - sum(map(lambda i: i**3, range(1, n+1)))", "code_4": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n, 0, -1))", "code_5": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n))", "code_6": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n)) - 1", "code_7": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n)) - n**3", "code_8": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n)) - n**3 + 1", "code_9": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n)) - n**3 + 1 if n > 0 else 0", "code_10": "def difference(n): return (n*(n+1)//2)**2 - sum(i**3 for i in range(n)) - n**3 + 1 if n > 0 else 0 if n > 1 else -1", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/556", "prompt": "\n\ndef find_Odd_Pair(A,N) :\n    \"\"\"\n    Write a python function to count the pairs with xor as an odd number.\n    >>> find_Odd_Pair([5,4,7,2,1],5)\n    6\n    >>> find_Odd_Pair([7,2,8,1,0,5,11],7)\n    12\n    >>> find_Odd_Pair([1,2,3],3)\n    2\n    \"\"\"\n", "solution": "     \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  ", "results": [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def find_Odd_Pair(A,N):\n    c = sum(bin(i).count('1') % 2 for i in A)\n    return c * (N - c)", "code_2": "def find_Odd_Pair(A,N):\n    c = sum(i & 1 for i in A)\n    return c * (N - c)", "code_3": "def find_Odd_Pair(A,N):\n    c = sum(i % 2 for i in A)\n    return c * (N - c)", "code_4": "def find_Odd_Pair(A,N):\n    c = len([i for i in A if bin(i).count('1') % 2])\n    return c * (N - c)", "code_5": "def find_Odd_Pair(A,N):\n    c = len([i for i in A if i & 1])\n    return c * (N - c)", "code_6": "def find_Odd_Pair(A,N):\n    c = len([i for i in A if i % 2])\n    return c * (N - c)", "code_7": "def find_Odd_Pair(A,N):\n    c = sum(map(lambda i: bin(i).count('1') % 2, A))\n    return c * (N - c)", "code_8": "def find_Odd_Pair(A,N):\n    c = sum(map(lambda i: i & 1, A))\n    return c * (N - c)", "code_9": "def find_Odd_Pair(A,N):\n    c = sum(map(lambda i: i % 2, A))\n    return c * (N - c)", "code_10": "def find_Odd_Pair(A,N):\n    c = sum(1 for i in A if bin(i).count('1') % 2)\n    return c * (N - c)", "pass@3": 0.9666666666666667, "nDCG@10": 0.5481351590340574}
{"task_id": "MBPP/557", "prompt": "\n\ndef toggle_string(string):\n \"\"\"\n Write a function to toggle characters case in a string.\n >>> toggle_string(\"Python\")\n (\"pYTHON\")\n >>> toggle_string(\"Pangram\")\n (\"pANGRAM\")\n >>> toggle_string(\"LIttLE\")\n (\"liTTle\")\n \"\"\"\n", "solution": " \n string1 = string.swapcase()\n return string1", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def toggle_string(string): return string.swapcase()", "code_2": "def toggle_string(string): return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "code_3": "def toggle_string(string): return ''.join(chr(ord(c) ^ 32) for c in string)", "code_4": "def toggle_string(string): return string.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'))", "code_5": "def toggle_string(string): return ''.join([c.upper() if c.islower() else c.lower() for c in string])", "code_6": "def toggle_string(string): return ''.join(map(lambda c: c.lower() if c.isupper() else c.upper(), string))", "code_7": "def toggle_string(string): return ''.join(c.upper() if c.islower() else c.lower() for c in string)", "code_8": "def toggle_string(string): return ''.join([c.lower() if c.isupper() else c.upper() for c in string])", "code_9": "def toggle_string(string): return ''.join(c.upper() if c.islower() else c.lower() for c in string)", "code_10": "def toggle_string(string): return ''.join(map(str.swapcase, string))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/558", "prompt": "\n\ndef digit_distance_nums(n1, n2):\n         \"\"\"\n         Write a python function to find the digit distance between two integers.\n         >>> digit_distance_nums(1,2)\n         1\n         >>> digit_distance_nums(23,56)\n         6\n         >>> digit_distance_nums(123,256)\n         7\n         \"\"\"\n", "solution": "         \n         return sum(map(int,str(abs(n1-n2))))", "results": [1, 1, 1, 0, 0, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in zip(str(n1), str(n2)))", "code_2": "def digit_distance_nums(n1, n2): return sum(map(lambda x: abs(int(x[0]) - int(x[1])), zip(str(n1), str(n2))))", "code_3": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in zip(str(n1).zfill(len(str(n2))), str(n2).zfill(len(str(n1)))))", "code_4": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in itertools.zip_longest(str(n1), str(n2), fillvalue='0'))", "code_5": "def digit_distance_nums(n1, n2): return functools.reduce(lambda x, y: x + abs(int(y[0]) - int(y[1])), zip(str(n1), str(n2)), 0)", "code_6": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in map(None, str(n1).zfill(max(len(str(n1)), len(str(n2)))), str(n2).zfill(max(len(str(n1)), len(str(n2))))))", "code_7": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in itertools.zip_longest(str(n1), str(n2), fillvalue='0'))", "code_8": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in zip(str(n1).rjust(max(len(str(n1)), len(str(n2)))), str(n2).rjust(max(len(str(n1)), len(str(n2))))))", "code_9": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in zip(str(n1).ljust(max(len(str(n1)), len(str(n2)))), str(n2).ljust(max(len(str(n1)), len(str(n2))))))", "code_10": "def digit_distance_nums(n1, n2): return sum(abs(int(a) - int(b)) for a, b in zip(str(n1).zfill(len(str(n2)) if len(str(n1)) < len(str(n2)) else len(str(n1))), str(n2).zfill(len(str(n1)) if len(str(n2)) < len(str(n1)) else len(str(n2)))))", "pass@3": 0.9666666666666667, "nDCG@10": 0.668306326910793}
{"task_id": "MBPP/559", "prompt": "\n\ndef max_sub_array_sum(a, size):\n  \"\"\"\n  Write a function to find the largest sum of contiguous subarray in the given array.\n  >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n  7\n  >>> max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n  8\n  >>> max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n  10\n  \"\"\"\n", "solution": "  \n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far", "code_2": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_3": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_4": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_5": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = current_sum + a[i] if current_sum > 0 else a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_6": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = current_sum + num if current_sum > 0 else num\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_7": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_8": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_9": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "code_10": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(num, current_sum + num)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/560", "prompt": "\n\ndef union_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to find the union of elements of the given tuples.\n  >>> union_elements((3, 4, 5, 6),(5, 7, 4, 10) )\n  (3, 4, 5, 6, 7, 10)\n  >>> union_elements((1, 2, 3, 4),(3, 4, 5, 6) )\n  (1, 2, 3, 4, 5, 6)\n  >>> union_elements((11, 12, 13, 14),(13, 15, 16, 17) )\n  (11, 12, 13, 14, 15, 16, 17)\n  \"\"\"\n", "solution": "  \n  res = tuple(set(test_tup1 + test_tup2))\n  return (res) ", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def union_elements(t1, t2): return tuple(set(t1) | set(t2))", "code_2": "def union_elements(t1, t2): return tuple(set(t1).union(t2))", "code_3": "def union_elements(t1, t2): return tuple({*t1, *t2})", "code_4": "def union_elements(t1, t2): return tuple(dict.fromkeys(t1 + t2))", "code_5": "def union_elements(t1, t2): return tuple(sorted(set(t1).union(t2)))", "code_6": "def union_elements(t1, t2): return tuple(set(t1).update(t2) or t1)", "code_7": "def union_elements(t1, t2): return tuple(set(t1).symmetric_difference(t2).union(t1))", "code_8": "def union_elements(t1, t2): return tuple(set(t1).union(set(t2)))", "code_9": "def union_elements(t1, t2): return tuple(set(t1).union(set(t2).union(set(t1))))", "code_10": "def union_elements(t1, t2): return tuple(sorted(set(t1) | set(t2), key=t1.index))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7846170207230131}
{"task_id": "MBPP/561", "prompt": "\n\ndef assign_elements(test_list):\n  \"\"\"\n  Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n  >>> assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] )\n  {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n  >>> assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] )\n  {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n  >>> assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] )\n  {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n  \"\"\"\n", "solution": "  \n  res = dict()\n  for key, val in test_list:\n    res.setdefault(val, [])\n    res.setdefault(key, []).append(val)\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result.setdefault(a, []).append(b)\n        result.setdefault(b, []).append(a)\n    return result", "code_2": "def assign_elements(test_list):\n    result = {i: [] for a, b in test_list for i in (a, b)}\n    for a, b in test_list:\n        result[a].append(b)\n        result[b].append(a)\n    return result", "code_3": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, []) + [b]\n        result[b] = result.get(b, []) + [a]\n    return result", "code_4": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result[a] + [b] if a in result else [b]\n        result[b] = result[b] + [a] if b in result else [a]\n    return result", "code_5": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, [])\n        result[b] = result.get(b, [])\n        result[a].append(b)\n        result[b].append(a)\n    return result", "code_6": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, []) + [b]\n        result[b] = result.get(b, []) + [a]\n    return {k: v for k, v in result.items() if k in result}", "code_7": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, [])\n        result[b] = result.get(b, [])\n        result[a].append(b)\n        result[b].append(a)\n    return {k: v for k, v in sorted(result.items())}", "code_8": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, [])\n        result[b] = result.get(b, [])\n        result[a].append(b)\n        result[b].append(a)\n    return dict(sorted(result.items()))", "code_9": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, [])\n        result[b] = result.get(b, [])\n        result[a].append(b)\n        result[b].append(a)\n    return {k: result[k] for k in sorted(result)}", "code_10": "def assign_elements(test_list):\n    result = {}\n    for a, b in test_list:\n        result[a] = result.get(a, [])\n        result[b] = result.get(b, [])\n        result[a].append(b)\n        result[b].append(a)\n    return {k: v for k, v in zip(sorted(result), [result[k] for k in sorted(result)])}", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/562", "prompt": "\n\ndef Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the maximum length of sublist.\n    >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n    4\n    >>> Find_Max_Length([[0,1],[2,2,],[3,2,1]])\n    3\n    >>> Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]])\n    5\n    \"\"\"\n", "solution": "      \n    maxLength = max(len(x) for x in lst )\n    return maxLength ", "results": [1, 1, 1, 0, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)", "code_2": "def Find_Max_Length(lst):\n    return max(map(len, lst))", "code_3": "def Find_Max_Length(lst):\n    lengths = [len(sublist) for sublist in lst]\n    return max(lengths)", "code_4": "def Find_Max_Length(lst):\n    return reduce(lambda a, b: a if len(a) > len(b) else b, lst, [])", "code_5": "def Find_Max_Length(lst):\n    return sorted(lst, key=len)[-1]", "code_6": "def Find_Max_Length(lst):\n    return len(sorted(lst, key=len)[-1])", "code_7": "def Find_Max_Length(lst):\n    return len(heapq.nlargest(1, lst, key=len)[0])", "code_8": "def Find_Max_Length(lst):\n    return len(max(lst, key=len))", "code_9": "def Find_Max_Length(lst):\n    return len(max(lst, key=lambda x: len(x)))", "code_10": "def Find_Max_Length(lst):\n    return len(max(lst, key=lambda sublist: (len(sublist), sublist)))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7467045958894682}
{"task_id": "MBPP/563", "prompt": "\n\ndef extract_values(text):\n \"\"\"\n Write a function to extract values between quotation marks of a string.\n >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n ['Python', 'PHP', 'Java']\n >>> extract_values('\"python\",\"program\",\"language\"')\n ['python','program','language']\n >>> extract_values('\"red\",\"blue\",\"green\",\"yellow\"')\n ['red','blue','green','yellow']\n \"\"\"\n", "solution": " import re\n \n return (re.findall(r'\"(.*?)\"', text))", "results": [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef extract_values(text):\n return re.findall(r'\"([^\"]*)\"', text)", "code_2": "def extract_values(text):\n return [i.strip('\"') for i in text.split(',')]", "code_3": "import shlex\ndef extract_values(text):\n return shlex.split(text.replace(',', ' '))", "code_4": "def extract_values(text):\n return text.replace('\"', '').split(',')", "code_5": "def extract_values(text):\n return [text[i+1:j] for i, j in zip([-1]+[k for k, v in enumerate(text) if v == '\"'], [k for k, v in enumerate(text) if v == '\"'][1:]+[len(text)]) if i+2 < j]", "code_6": "def extract_values(text):\n return [x for x in text.split('\"') if x != ',' and x != '']", "code_7": "def extract_values(text):\n return [s for s in text.split('\"') if s.strip() and s != ',']", "code_8": "def extract_values(text):\n return [x.strip() for x in text.split('\"') if x.strip() and x != ',']", "code_9": "def extract_values(text):\n return [i for i in text.split('\"') if i and i != ',']", "code_10": "def extract_values(text):\n return [s.strip() for s in text.split('\"') if s.strip()]", "pass@3": 0.5333333333333333, "nDCG@10": 0.3301376494471203}
{"task_id": "MBPP/564", "prompt": "\n\ndef count_Pairs(arr,n):\n    \"\"\"\n    Write a python function to count unequal element pairs from the given array.\n    >>> count_Pairs([1,2,1],3)\n    2\n    >>> count_Pairs([1,1,1,1],4)\n    0\n    >>> count_Pairs([1,2,3,4,5],5)\n    10\n    \"\"\"\n", "solution": "     \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Pairs(arr, n):\n    return n * (n - 1)", "code_2": "def count_Pairs(arr, n):\n    return sum(range(n))", "code_3": "def count_Pairs(arr, n):\n    return (n ** 2 - n) // 2", "code_4": "def count_Pairs(arr, n):\n    return (n * (n - 1)) >> 1", "code_5": "def count_Pairs(arr, n):\n    return sum(i < j for i in range(n) for j in range(n))", "code_6": "def count_Pairs(arr, n):\n    return len([(i, j) for i in range(n) for j in range(n) if i != j])", "code_7": "def count_Pairs(arr, n):\n    return reduce(lambda x, y: x + y, range(n))", "code_8": "def count_Pairs(arr, n):\n    return sum(combinations(range(n), 2))", "code_9": "def count_Pairs(arr, n):\n    return math.comb(n, 2)", "code_10": "def count_Pairs(arr, n):\n    return scipy.special.comb(n, 2, exact=True)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/565", "prompt": "\n\ndef split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    >>> split('python')\n    ['p','y','t','h','o','n']\n    >>> split('Name')\n    ['N','a','m','e']\n    >>> split('program')\n    ['p','r','o','g','r','a','m']\n    \"\"\"\n", "solution": "     \n    return [char for char in word] ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "List comprehension:\ndef split(word):\n    return [char for char in word]", "code_2": "Using map function:\ndef split(word):\n    return list(map(str, word))", "code_3": "Using generator expression:\ndef split(word):\n    return (char for char in word)", "code_4": "Using built-in function:\ndef split(word):\n    return list(word)", "code_5": "Using recursion:\ndef split(word):\n    return [word[0]] + split(word[1:]) if word else []", "code_6": "Using reduce function:\nfrom functools import reduce\ndef split(word):\n    return reduce(lambda x, y: x + [y], word, [])", "code_7": "Using enumerate function:\ndef split(word):\n    return [word[i] for i in range(len(word))]", "code_8": "Using zip function:\ndef split(word):\n    return [i for i, _ in zip(word, range(len(word)))]", "code_9": "Using itertools.chain function:\nimport itertools\ndef split(word):\n    return list(itertools.chain(*zip(word)))", "code_10": "Using numpy array:\nimport numpy as np\ndef split(word):\n    return np.array(list(word)).tolist()", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/566", "prompt": "\n\ndef sum_digits(n):\n  \"\"\"\n  Write a function to get the sum of a non-negative integer.\n  >>> sum_digits(345)\n  12\n  >>> sum_digits(12)\n  3\n  >>> sum_digits(97)\n  16\n  \"\"\"\n", "solution": "  \n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_digits(n):\n  return sum(int(digit) for digit in str(n))", "code_2": "def sum_digits(n):\n  return sum(map(int, str(n)))", "code_3": "def sum_digits(n):\n  total = 0\n  while n > 0:\n    total += n % 10\n    n //= 10\n  return total", "code_4": "def sum_digits(n):\n  return sum(divmod(n, 10)) if n < 10 else sum_digits(n // 10) + n % 10", "code_5": "def sum_digits(n):\n  return sum(int(c) for c in str(n))", "code_6": "def sum_digits(n):\n  return sum(map(int, str(n)))", "code_7": "def sum_digits(n):\n  return sum(int(d) for d in str(n))", "code_8": "def sum_digits(n):\n  return sum(int(digit) for digit in str(n))", "code_9": "def sum_digits(n):\n  return sum(map(int, str(n)))", "code_10": "def sum_digits(n):\n  return sum(int(d) for d in str(n))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/567", "prompt": "\n\ndef issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    >>> issort_list([1,2,4,6,8,10,12,14,16,17])\n    True\n    >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n    False\n    >>> issort_list([1, 2, 4, 6, 8, 10,15,14,20])\n    False\n    \"\"\"\n", "solution": "    \n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def issort_list(lst):\n    return lst == sorted(lst)", "code_2": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "code_3": "def issort_list(lst):\n    return lst == list(sorted(iter(lst)))", "code_4": "def issort_list(lst):\n    return not any(lst[i] > lst[i + 1] for i in range(len(lst) - 1))", "code_5": "def issort_list(lst):\n    return all(x <= y for x, y in zip(lst, lst[1:]))", "code_6": "def issort_list(lst):\n    return lst == list(sorted(lst, key=lambda x: x))", "code_7": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst[i] >= lst[i - 1] for i in range(1, len(lst)))", "code_8": "def issort_list(lst):\n    return lst == sorted(lst, key=int)", "code_9": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) or all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))", "code_10": "def issort_list(lst):\n    return lst == list(sorted(lst, reverse=True))[::-1]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/568", "prompt": "\n\ndef empty_list(length):\n \"\"\"\n Write a function to create a list of empty dictionaries.\n >>> empty_list(5)\n [{},{},{},{},{}]\n >>> empty_list(6)\n [{},{},{},{},{},{}]\n >>> empty_list(7)\n [{},{},{},{},{},{},{}]\n \"\"\"\n", "solution": " \n empty_list = [{} for _ in range(length)]\n return empty_list", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return [{} for _ in range(length)]`", "code_2": "`return [dict() for _ in range(length)]`", "code_3": "`return [{}] * length`", "code_4": "`return map(dict, [None] * length)`", "code_5": "`return [dict.fromkeys([]) for _ in range(length)]`", "code_6": "`return [dict(zip([], [])) for _ in range(length)]`", "code_7": "`return [dict(iter([])) for _ in range(length)]`", "code_8": "`return [dict(itertools.repeat(None, 0)) for _ in range(length)]`", "code_9": "`return [collections.defaultdict(dict) for _ in range(length)]`", "code_10": "`return [collections.OrderedDict() for _ in range(length)]`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/569", "prompt": "\n\ndef sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    >>> sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    >>> sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])\n    [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n    \"\"\"\n", "solution": "    \n    result = list(map(sorted,list1)) \n    return result", "results": [1, 1, 1, 0, 1, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def sort_sublists(lst):\n    return [sorted(sub) for sub in lst]", "code_2": "def sort_sublists(lst):\n    return list(map(sorted, lst))", "code_3": "def sort_sublists(lst):\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst", "code_4": "def sort_sublists(lst):\n    return [sub[:].sort() or sub for sub in lst]", "code_5": "def sort_sublists(lst):\n    for sub in lst:\n        sub.sort()\n    return lst", "code_6": "import operator\ndef sort_sublists(lst):\n    return list(map(operator.methodcaller('sort'), lst))", "code_7": "from functools import reduce\ndef sort_sublists(lst):\n    return reduce(lambda x, y: x + [y.sort() or y], lst, [])", "code_8": "def sort_sublists(lst):\n    return [sorted(sub, key=lambda x: x) for sub in lst]", "code_9": "def sort_sublists(lst):\n    return [sub[::-1].sort() or sub for sub in lst]", "code_10": "def sort_sublists(lst):\n    return [sub[::-1].sort() or sub[::-1][::-1] for sub in lst]", "pass@3": 0.9666666666666667, "nDCG@10": 0.6969383549984333}
{"task_id": "MBPP/570", "prompt": "\n\ndef remove_words(list1, charlist):\n    \"\"\"\n    Write a function to remove words from a given list of strings containing a character or string.\n    >>> remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])\n    ['Red &', 'Orange+', 'Green', 'Orange', 'White']\n    \"\"\"\n", "solution": "    \n    new_list = []\n    for line in list1:\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\n        new_list.append(new_words)\n    return new_list", "results": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_words(list1, charlist):\n    return [''.join(word for word in s.split() if all(char not in word for char in charlist)) for s in list1]", "code_2": "def remove_words(list1, charlist):\n    return [re.sub('|'.join(map(re.escape, charlist)), '', s) for s in list1]", "code_3": "def remove_words(list1, charlist):\n    return [' '.join(filter(lambda word: all(char not in word for char in charlist), s.split())) for s in list1]", "code_4": "def remove_words(list1, charlist):\n    return [' '.join(word for word in s.split() if not any(char in word for char in charlist)) for s in list1]", "code_5": "def remove_words(list1, charlist):\n    return [' '.join(word for word in s.split() if not any(map(word.__contains__, charlist))) for s in list1]", "code_6": "def remove_words(list1, charlist):\n    return [' '.join(word for word in s.split() if not any(char in word for char in charlist)) for s in list1]", "code_7": "def remove_words(list1, charlist):\n    return [' '.join(filter(lambda word: not any(char in word for char in charlist), s.split())) for s in list1]", "code_8": "def remove_words(list1, charlist):\n    return [' '.join(word for word in s.split() if all(char not in word for char in charlist)) for s in list1]", "code_9": "def remove_words(list1, charlist):\n    return [' '.join(filter(lambda word: all(char not in word for char in charlist), s.split())) for s in list1]", "code_10": "def remove_words(list1, charlist):\n    return [' '.join(word for word in s.split() if not any(char in word for char in charlist)) for s in list1]", "pass@3": 1.0, "nDCG@10": 0.6410457898283654}
{"task_id": "MBPP/571", "prompt": "\n\ndef max_sum_pair_diff_lessthan_K(arr, N, K):\n\t\"\"\"\n\tWrite a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n\t>>> max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)\n\t62\n\t>>> max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)\n\t25\n\t>>> max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)\n\t21\n\t\"\"\"\n", "solution": "\t \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] - arr[i-1] < K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \n\treturn dp[N - 1]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    i, j, res = N - 2, N - 1, 0\n    while i >= 0 and j >= 0:\n        if arr[j] - arr[i] < K:\n            res += arr[i] + arr[j]\n            j -= 2\n        i -= 1\n    return res", "code_2": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    dp = [0] * N\n    dp[-1] = arr[-1]\n    for i in range(N - 2, -1, -1):\n        dp[i] = max(dp[i + 1], arr[i] + (dp[i + 2] if i + 2 < N and arr[i + 1] - arr[i] < K else 0))\n    return dp[0]", "code_3": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = 0, N - 1\n    while i < j:\n        if arr[j] - arr[i] < K:\n            sum_pairs += arr[i] + arr[j]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    return sum_pairs", "code_4": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = N - 1, N - 2\n    while i >= 0 and j >= 0:\n        if arr[i] - arr[j] < K:\n            sum_pairs += arr[i] + arr[j]\n            i -= 2\n            j -= 2\n        else:\n            i -= 1\n    return sum_pairs", "code_5": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = 0, N - 1\n    while i < j:\n        if arr[j] - arr[i] < K:\n            sum_pairs += arr[i] + arr[j]\n            i += 1\n        j -= 1\n    return sum_pairs", "code_6": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = N - 1, N - 2\n    while i >= 0 and j >= 0:\n        if arr[i] - arr[j] < K:\n            sum_pairs += arr[i] + arr[j]\n            i -= 1\n        j -= 1\n    return sum_pairs", "code_7": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = 0, N - 1\n    while i < j:\n        if arr[j] - arr[i] < K:\n            sum_pairs += arr[i] + arr[j]\n            j -= 1\n        i += 1\n    return sum_pairs", "code_8": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = N - 1, N - 2\n    while i >= 0 and j >= 0:\n        if arr[i] - arr[j] < K:\n            sum_pairs += arr[i] + arr[j]\n            j -= 1\n        i -= 1\n    return sum_pairs", "code_9": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = 0, N - 1\n    while i < j:\n        if arr[j] - arr[i] < K:\n            sum_pairs += arr[i] + arr[j]\n            i += 2\n        j -= 1\n    return sum_pairs", "code_10": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    sum_pairs = 0\n    i, j = N - 1, N - 2\n    while i >= 0 and j >= 0:\n        if arr[i] - arr[j] < K:\n            sum_pairs += arr[i] + arr[j]\n            j -= 2\n        i -= 1\n    return sum_pairs", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/572", "prompt": "\n\ndef two_unique_nums(nums):\n  \"\"\"\n  Write a python function to remove two duplicate numbers from a given number of lists.\n  >>> two_unique_nums([1,2,3,2,3,4,5])\n  [1, 4, 5]\n  >>> two_unique_nums([1,2,3,2,4,5])\n  [1, 3, 4, 5]\n  >>> two_unique_nums([1,2,3,4,5])\n  [1, 2, 3, 4, 5]\n  \"\"\"\n", "solution": "  \n  return [i for i in nums if nums.count(i)==1]", "results": [0, 0, 0, 1, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def two_unique_nums(nums):\n    return [x for x in nums if nums.count(x) < 3]", "code_2": "def two_unique_nums(nums):\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    return [num for num in nums if counts[num] < 3]", "code_3": "def two_unique_nums(nums):\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num in nums if counts[num] < 3]", "code_4": "def two_unique_nums(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n        elif num in result:\n            result.remove(num)\n    return result", "code_5": "def two_unique_nums(nums):\n    nums.sort()\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            del nums[i:i + 2]\n        else:\n            i += 1\n    return nums", "code_6": "def two_unique_nums(nums):\n    nums_set = set(nums)\n    return [num for num in nums if nums.count(num) == 1 or nums_set.pop() == num]", "code_7": "def two_unique_nums(nums):\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n    return [num for num in nums if nums_dict[num] < 3]", "code_8": "def two_unique_nums(nums):\n    counts = [0] * 10000\n    for num in nums:\n        counts[num] += 1\n    return [num for num in nums if counts[num] < 3]", "code_9": "def two_unique_nums(nums):\n    nums_set = set()\n    result = []\n    for num in nums:\n        if num not in nums_set:\n            nums_set.add(num)\n            result.append(num)\n        elif num in result:\n            result.remove(num)\n    return result", "code_10": "def two_unique_nums(nums):\n    nums_dict = {}\n    for num in nums:\n        nums_dict[num] = nums_dict.get(num, 0) + 1\n    return [num for num in nums if nums_dict[num] < 3 and nums_dict.pop(num, None)]", "pass@3": 0.7083333333333333, "nDCG@10": 0.24618570546556087}
{"task_id": "MBPP/573", "prompt": "\n\ndef unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers of a given list.\n    >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n    720000000\n    >>> unique_product([1, 2, 3, 1,])\n    6\n    >>> unique_product([7, 8, 9, 0, 1, 1])\n    0\n    \"\"\"\n", "solution": "    \n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "results": [0, 1, 1, 1, 1, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def unique_product(list_data):\n    return prod(set(list_data))", "code_2": "from functools import reduce\nfrom operator import mul\ndef unique_product(list_data):\n    return reduce(mul, set(list_data), 1)", "code_3": "import numpy\ndef unique_product(list_data):\n    return numpy.prod(numpy.unique(list_data))", "code_4": "def unique_product(list_data):\n    product = 1\n    for num in set(list_data):\n        product *= num\n    return product", "code_5": "def unique_product(list_data):\n    return eval('*'.join(map(str, set(list_data))))", "code_6": "import math\ndef unique_product(list_data):\n    return math.prod(set(list_data))", "code_7": "def unique_product(list_data):\n    product = 1\n    seen = set()\n    for num in list_data:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    return product", "code_8": "def unique_product(list_data):\n    product = 1\n    for num in filter(seen.__contains__, set(list_data)):\n        product *= num\n        seen.add(num)\n    return product", "code_9": "def unique_product(list_data):\n    product = 1\n    for num in dict.fromkeys(list_data).keys():\n        product *= num\n    return product", "code_10": "def unique_product(list_data):\n    product = 1\n    for num in set(list_data):\n        if num != 0:\n            product *= num\n        elif 0 not in seen:\n            seen.add(0)\n    return product", "pass@3": 0.9916666666666667, "nDCG@10": 0.6468562235661909}
{"task_id": "MBPP/574", "prompt": "\n\ndef surfacearea_cylinder(r,h):\n  \"\"\"\n  Write a function to find the surface area of a cylinder.\n  >>> surfacearea_cylinder(10,5)\n  942.45\n  >>> surfacearea_cylinder(4,5)\n  226.18800000000002\n  >>> surfacearea_cylinder(4,10)\n  351.848\n  \"\"\"\n", "solution": "  \n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\n  return surfacearea", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef surfacearea_cylinder(r,h):\n  return 2 * math.pi * r * (r + h)", "code_2": "from math import pi\ndef surfacearea_cylinder(r,h):\n  return 2 * pi * r * (r + h)", "code_3": "def surfacearea_cylinder(r,h):\n  return 2 * 3.141592653589793 * r * (r + h)", "code_4": "def surfacearea_cylinder(r,h):\n  return 6.283185307179586 * r * (r + h)", "code_5": "def surfacearea_cylinder(r,h):\n  return 2 * 3.14 * r * (r + h)", "code_6": "def surfacearea_cylinder(r,h):\n  return 6.28 * r * (r + h)", "code_7": "def surfacearea_cylinder(r,h):\n  return 2 * 3.14159 * r * (r + h)", "code_8": "def surfacearea_cylinder(r,h):\n  return 6.28318 * r * (r + h)", "code_9": "def surfacearea_cylinder(r,h):\n  return 2 * 3.1415927 * r * (r + h)", "code_10": "def surfacearea_cylinder(r,h):\n  return 6.28318531 * r * (r + h)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/575", "prompt": "\n\ndef count_no (A,N,L,R):\n    \"\"\"\n    Write a python function to find nth number in a sequence which is not a multiple of a given number.\n    >>> count_no(2,3,1,10)\n    5\n    >>> count_no(3,6,4,20)\n    11\n    >>> count_no(5,10,4,20)\n    16\n    \"\"\"\n", "solution": "     \n    count = 0\n    for i in range (L,R + 1): \n        if (i % A != 0): \n            count += 1\n        if (count == N): \n            break\n    return (i) ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A != 0][N-1]", "code_2": "def count_no(A, N, L, R):\n    return next(i for i in range(L, R+1) if i % A != 0 and not N-=1)", "code_3": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A][N-1]", "code_4": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A != 0][N-1]", "code_5": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A][N-1]", "code_6": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A != 0][N-1]", "code_7": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A][N-1]", "code_8": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A != 0][N-1]", "code_9": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A][N-1]", "code_10": "def count_no(A, N, L, R):\n    return [i for i in range(L, R+1) if i % A != 0][N-1]", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/576", "prompt": "\n\ndef is_Sub_Array(A,B,n,m):\n    \"\"\"\n    Write a python function to check whether an array is subarray of another or not.\n    >>> is_Sub_Array([1,4,3,5],[1,2],4,2)\n    False\n    >>> is_Sub_Array([1,2,1],[1,2,1],3,3)\n    True\n    >>> is_Sub_Array([1,0,2,2],[2,2,0],4,3)\n    False\n    \"\"\"\n", "solution": "     \n    i = 0; j = 0; \n    while (i < n and j < m):  \n        if (A[i] == B[j]): \n            i += 1; \n            j += 1; \n            if (j == m): \n                return True;  \n        else: \n            i = i - j + 1; \n            j = 0;       \n    return False; ", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_Sub_Array(A,B,n,m):\n    return ''.join(map(str, B)) in ''.join(map(str, A))", "code_2": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_3": "def is_Sub_Array(A,B,n,m):\n    return set(map(tuple, (A[i:i+m] for i in range(n-m+1)))) & set(map(tuple, [B]))", "code_4": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_5": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_6": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_7": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_8": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_9": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "code_10": "def is_Sub_Array(A,B,n,m):\n    return any(A[i:i+m] == B for i in range(n-m+1))", "pass@3": 1.0, "nDCG@10": 0.88995411685096}
{"task_id": "MBPP/577", "prompt": "\n\ndef last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    >>> last_Digit_Factorial(4)\n    4\n    >>> last_Digit_Factorial(21)\n    0\n    >>> last_Digit_Factorial(30)\n    0\n    \"\"\"\n", "solution": "     \n    if (n == 0): return 1\n    elif (n <= 2): return n  \n    elif (n == 3): return 6\n    elif (n == 4): return 4 \n    else: \n      return 0", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def last_Digit_Factorial(n):\n    if n < 2:\n        return 1\n    if n < 5:\n        return [1, 2, 6, 4][n - 2]\n    return 0", "code_2": "def last_Digit_Factorial(n):\n    return [1, 1, 2, 6, 4][n % 5] if n > 1 else 1", "code_3": "def last_Digit_Factorial(n):\n    return [1, 1, 2, 6, 0][n % 5]", "code_4": "def last_Digit_Factorial(n):\n    return [1, 2, 6, 4, 0][n % 5] if n > 1 else 1", "code_5": "def last_Digit_Factorial(n):\n    return [1, 1, 2, 6, 0][n % 5] if n > 1 else 1", "code_6": "def last_Digit_Factorial(n):\n    return [1, 2, 6, 4, 0][n % 5] if n > 1 else 1", "code_7": "def last_Digit_Factorial(n):\n    return [1, 1, 2, 6, 0][n % 5] if n > 1 else 1", "code_8": "def last_Digit_Factorial(n):\n    return [1, 2, 6, 4, 0][n % 5] if n > 1 else 1", "code_9": "def last_Digit_Factorial(n):\n    return [1, 1, 2, 6, 0][n % 5] if n > 1 else 1", "code_10": "def last_Digit_Factorial(n):\n    return [1, 2, 6, 4, 0][n % 5] if n > 1 else 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/578", "prompt": "\n\ndef interleave_lists(list1,list2,list3):\n    \"\"\"\n    Write a function to interleave lists of the same length.\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    >>> interleave_lists([10,20],[15,2],[5,10])\n    [10,15,5,20,2,10]\n    >>> interleave_lists([11,44], [10,15], [20,5])\n    [11,10,20,44,15,5]\n    \"\"\"\n", "solution": "    \n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result", "results": [1, 0, 1, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def interleave_lists(list1, list2, list3):\n    return [val for tup in zip(list1, list2, list3) for val in tup]", "code_2": "def interleave_lists(list1, list2, list3):\n    return sum(zip(list1, list2, list3), ())", "code_3": "def interleave_lists(list1, list2, list3):\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]", "code_4": "def interleave_lists(list1, list2, list3):\n    return [x for t in zip(zip(list1, list2), list3) for x in t]", "code_5": "def interleave_lists(list1, list2, list3):\n    return [i for sublist in zip(list1, list2, list3) for i in sublist]", "code_6": "def interleave_lists(list1, list2, list3):\n    return [i for t in zip(zip(list1, list2), list3) for i in t]", "code_7": "def interleave_lists(list1, list2, list3):\n    return [i for t in zip(zip(list1, list2), list3) for sublist in t for i in sublist]", "code_8": "def interleave_lists(list1, list2, list3):\n    return [i for t in zip(zip(list1, list2), list3) for i in chain(*t)]", "code_9": "def interleave_lists(list1, list2, list3):\n    return reduce(lambda x, y: x + y, zip(list1, list2, list3))", "code_10": "def interleave_lists(list1, list2, list3):\n    return reduce(lambda x, y: x + y, zip(zip(list1, list2), list3))", "pass@3": 0.7083333333333333, "nDCG@10": 0.4152807670887413}
{"task_id": "MBPP/579", "prompt": "\n\ndef find_dissimilar(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to find the dissimilar elements in the given two tuples.\n  >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n  (3, 6, 7, 10)\n  >>> find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9))\n  (1, 4, 7, 9)\n  >>> find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36))\n  (34, 36, 11, 25)\n  \"\"\"\n", "solution": "  \n  res = tuple(set(test_tup1) ^ set(test_tup2))\n  return (res) ", "results": [1, 0, 0, 1, 0, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def find_dissimilar(t1, t2): return tuple(set(t1) ^ set(t2))", "code_2": "def find_dissimilar(t1, t2): return tuple(i for i in t1 if i not in t2) + tuple(i for i in t2 if i not in t1)", "code_3": "def find_dissimilar(t1, t2): return tuple(filter(lambda x: x not in t2, t1)) + tuple(filter(lambda x: x not in t1, t2))", "code_4": "def find_dissimilar(t1, t2): return tuple(set(t1).symmetric_difference(set(t2)))", "code_5": "def find_dissimilar(t1, t2): return tuple(set(t1).difference(set(t2)) | set(t2).difference(set(t1)))", "code_6": "def find_dissimilar(t1, t2): return tuple(set(t1).union(set(t2)).difference(set(t1).intersection(set(t2))))", "code_7": "def find_dissimilar(t1, t2): return tuple(set(t1).symmetric_difference(set(t2)))", "code_8": "def find_dissimilar(t1, t2): return tuple(set(t1).difference(set(t2)).union(set(t2).difference(set(t1))))", "code_9": "def find_dissimilar(t1, t2): return tuple(set(t1).symmetric_difference(set(t2)))", "code_10": "def find_dissimilar(t1, t2): return tuple(set(t1).union(set(t2)).difference(set(t1).intersection(set(t2))))", "pass@3": 0.8333333333333334, "nDCG@10": 0.4544982762213801}
{"task_id": "MBPP/580", "prompt": "\n\ndef extract_even(test_tuple):\n  \"\"\"\n  Write a function to extract the even elements in the nested mixed tuple.\n  >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n  (4, (6, (2, 4)), 6, 8)\n  >>> extract_even((5, 6, (8, 7, (4, 8)), 7, 9))\n  (6, (8, (4, 8)))\n  >>> extract_even((5, 6, (9, 8, (4, 6)), 8, 10))\n  (6, (8, (4, 6)), 8, 10)\n  \"\"\"\n", "solution": "  def even_ele(test_tuple, even_fnc): \n  \tres = tuple() \n  \tfor ele in test_tuple: \n  \t\tif isinstance(ele, tuple): \n  \t\t\tres += (even_ele(ele, even_fnc), ) \n  \t\telif even_fnc(ele): \n  \t\t\tres += (ele, ) \n  \treturn res \n  \n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_even(t):\n    return tuple(x for x in t if x % 2 == 0 or (isinstance(x, tuple) and extract_even(x)))", "code_2": "def extract_even(t):\n    return tuple(filter(lambda x: x % 2 == 0 or (isinstance(x, tuple) and extract_even(x)), t))", "code_3": "def extract_even(t):\n    return tuple(i for i in t if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple) and extract_even(i))", "code_4": "def extract_even(t):\n    return tuple(i if isinstance(i, int) and i % 2 == 0 else extract_even(i) for i in t if isinstance(i, (int, tuple)))", "code_5": "def extract_even(t):\n    return tuple(e for e in t if isinstance(e, int) and not e % 2 or isinstance(e, tuple) and extract_even(e))", "code_6": "def extract_even(t):\n    return tuple(e if isinstance(e, int) and e % 2 == 0 else extract_even(e) for e in t if isinstance(e, (int, tuple)))", "code_7": "def extract_even(t):\n    return tuple(x if isinstance(x, int) and x % 2 == 0 else extract_even(x) for x in t if isinstance(x, (int, tuple)))", "code_8": "def extract_even(t):\n    return tuple(e for e in t if isinstance(e, int) and e % 2 == 0 or isinstance(e, tuple) and extract_even(e))", "code_9": "def extract_even(t):\n    return tuple(i if isinstance(i, int) and i % 2 == 0 else extract_even(i) for i in t if isinstance(i, (int, tuple)))", "code_10": "def extract_even(t):\n    return tuple(x for x in t if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple) and extract_even(x))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/581", "prompt": "\n\ndef surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of the square pyramid.\n    >>> surface_Area(3,4)\n    33\n    >>> surface_Area(4,5)\n    56\n    >>> surface_Area(1,2)\n    5\n    \"\"\"\n", "solution": "     \n    return 2 * b * s + pow(b,2) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def surface_Area(b, s):\n    return b * b + 2 * b * ((s ** 2 - b ** 2 / 4) ** 0.5)", "code_2": "import math\ndef surface_Area(b, s):\n    return b ** 2 + 2 * b * math.sqrt(s ** 2 - b ** 2 / 4)", "code_3": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b ** 2 + 2 * b * h", "code_4": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b * b + 2 * b * h", "code_5": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b * b + 2 * b * h", "code_6": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b ** 2 + 2 * b * h", "code_7": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b * b + 2 * b * h", "code_8": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b ** 2 + 2 * b * h", "code_9": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b * b + 2 * b * h", "code_10": "def surface_Area(b, s):\n    h = (s ** 2 - b ** 2 / 4) ** 0.5\n    return b ** 2 + 2 * b * h", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/582", "prompt": "\n\ndef my_dict(dict1):\n  \"\"\"\n  Write a function to check if a dictionary is empty or not.\n  >>> my_dict({10})\n  False\n  >>> my_dict({11})\n  False\n  >>> my_dict({})\n  True\n  \"\"\"\n", "solution": "  \n  if bool(dict1):\n     return False\n  else:\n     return True", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def my_dict(dict1): return len(dict1) == 0`", "code_2": "`def my_dict(dict1): return not bool(dict1)`", "code_3": "`def my_dict(dict1): return dict1 == {}`", "code_4": "`def my_dict(dict1): return not dict1`", "code_5": "`def my_dict(dict1): return len(dict1.keys()) == 0`", "code_6": "`def my_dict(dict1): return not dict1.keys()`", "code_7": "`def my_dict(dict1): return not dict1.values()`", "code_8": "`def my_dict(dict1): return not dict1.items()`", "code_9": "`def my_dict(dict1): return not any(dict1)`", "code_10": "`def my_dict(dict1): return all(map(lambda k: k not in dict1, dict1))`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/583", "prompt": "\n\ndef catalan_number(num):\n    \"\"\"\n    Write a function for nth catalan number.\n    >>> catalan_number(10)\n    16796\n    >>> catalan_number(9)\n    4862\n    >>> catalan_number(7)\n    429\n    \"\"\"\n", "solution": "    \n    if num <=1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num-i-1)\n    return res_num", "results": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def catalan_number(n):\n    c = [0] * (n + 1)\n    c[0], c[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n    return c[n]", "code_2": "from math import comb\ndef catalan_number(n):\n    return comb(2 * n, n) // (n + 1)", "code_3": "def catalan_number(n):\n    c = 1\n    for i in range(2, n + 1):\n        c = c * (4 * i - 2) // (i + 1)\n    return c", "code_4": "def catalan_number(n):\n    c = [1]\n    for i in range(1, n + 1):\n        c.append(sum(c[j] * c[i - j - 1] for j in range(i)) // (i + 1))\n    return c[n]", "code_5": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef catalan_number(n):\n    if n <= 1:\n        return 1\n    return sum(catalan_number(i) * catalan_number(n - i - 1) for i in range(n))", "code_6": "def catalan_number(n):\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        c[i] = (4 * i - 2) * c[i - 1] // (i + 1)\n    return c[n]", "code_7": "def catalan_number(n):\n    c = [1]\n    for i in range(1, n + 1):\n        c.append(c[i - 1] * (4 * i - 2) // (i + 1))\n    return c[n]", "code_8": "def catalan_number(n):\n    c = [0] * (n + 1)\n    c[0] = c[1] = 1\n    for i in range(2, n + 1):\n        c[i] = (4 * i - 2) * c[i - 1] // (i + 1)\n    return c[n]", "code_9": "def catalan_number(n):\n    c = [1]\n    for i in range(1, n + 1):\n        c.append(sum(c[j] * c[i - j - 1] for j in range(i)) // (i + 1))\n    return c[-1]", "code_10": "def catalan_number(n):\n    c = [0] * (n + 2)\n    c[0] = c[1] = 1\n    for i in range(2, n + 1):\n        c[i] = (4 * i - 2) * c[i - 1] // (i + 1)\n    return c[n]", "pass@3": 1.0, "nDCG@10": 0.8389574121760603}
{"task_id": "MBPP/584", "prompt": "\n\ndef find_adverbs(text):\n  \"\"\"\n  Write a function to find all adverbs and their positions in a given sentence by using regex.\n  >>> find_adverbs(\"Clearly, he has no excuse for such behavior.\")\n  '0-7: Clearly'\n  >>> find_adverbs(\"Please handle the situation carefuly\")\n  '28-36: carefuly'\n  >>> find_adverbs(\"Complete the task quickly\")\n  '18-25: quickly'\n  \"\"\"\n", "solution": "  import re\n  \n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef find_adverbs(text):\n    return '\\n'.join([f'{m.start()}-{m.end()}: {m.group()}' for m in re.finditer(r'\\b\\w+ly\\b', text)])", "code_2": "import re\ndef find_adverbs(text):\n    return '\\n'.join(f'{m.start()}-{m.end()}: {m.group()}' for m in re.finditer(r'\\w+ly\\b', text))", "code_3": "import re\ndef find_adverbs(text):\n    return [(m.start(), m.end(), m.group()) for m in re.finditer(r'\\b\\w+ly\\b', text)]", "code_4": "import re\ndef find_adverbs(text):\n    return [(m.span(), m.group()) for m in re.finditer(r'\\b\\w+ly\\b', text)]", "code_5": "import re\ndef find_adverbs(text):\n    return [(m.start(), m.group()) for m in re.finditer(r'\\b\\w+ly\\b', text)]", "code_6": "import re\ndef find_adverbs(text):\n    return [(m.end(), m.group()) for m in re.finditer(r'\\b\\w+ly\\b', text)]", "code_7": "import re\ndef find_adverbs(text):\n    return {m.group(): m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)}", "code_8": "import re\ndef find_adverbs(text):\n    return {m.group(): m.span() for m in re.finditer(r'\\b\\w+ly\\b', text)}", "code_9": "import re\ndef find_adverbs(text):\n    return {m.group(): (m.start(), m.end()) for m in re.finditer(r'\\b\\w+ly\\b', text)}", "code_10": "import re\ndef find_adverbs(text):\n    return {m.start(): m.group() for m in re.finditer(r'\\b\\w+ly\\b', text)}", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/585", "prompt": "\n\ndef expensive_items(items,n):\n  \"\"\"\n  Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n  [{'name': 'Item-2', 'price': 555.22}]\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)\n  [{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\n  >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)\n  [{'name': 'Item-2', 'price': 555.22}]\n  \"\"\"\n", "solution": "  import heapq\n  \n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items", "results": [1, 1, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef expensive_items(items, n):\n    return heapq.nlargest(n, items, key=lambda x: x['price'])", "code_2": "import heapq\ndef expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "code_3": "import heapq\ndef expensive_items(items, n):\n    heap = [(item['price'], item) for item in items]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(n)]", "code_4": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    return [heapq.heappop(heap)[1] for _ in range(n)]", "code_5": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (item['price'], item))\n        else:\n            heapq.heappushpop(heap, (item['price'], item))\n    return [item for _, item in heap]", "code_6": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heappushpop(heap, item)\n    return sorted(heap, key=lambda x: x['price'], reverse=True)", "code_7": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heapreplace(heap, item)\n    return sorted(heap, key=lambda x: x['price'], reverse=True)", "code_8": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (-item['price'], item))\n        else:\n            heapq.heappushpop(heap, (-item['price'], item))\n    return [item for _, item in heap]", "code_9": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            heapq.heapreplace(heap, item)\n    return sorted(heap, key=lambda x: x['price'], reverse=True)[:n]", "code_10": "import heapq\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (-item['price'], item))\n        else:\n            heapq.heapreplace(heap, (-item['price'], item))\n    return [item for _, item in heap]", "pass@3": 0.7083333333333333, "nDCG@10": 0.45374257454118555}
{"task_id": "MBPP/586", "prompt": "\n\ndef split_Arr(a,n,k):\n   \"\"\"\n   Write a python function to split the array and add the first part to the end.\n   >>> split_Arr([12,10,5,6,52,36],6,2)\n   [5,6,52,36,12,10]\n   >>> split_Arr([1,2,3,4],4,1)\n   [2,3,4,1]\n   >>> split_Arr([0,1,2,3,4,5,6,7],8,3)\n   [3,4,5,6,7,0,1,2]\n   \"\"\"\n", "solution": "     \n   b = a[:k] \n   return (a[k::]+b[::]) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def split_Arr(a, n, k):\n    return a[k:] + a[:k]", "code_2": "def split_Arr(a, n, k):\n    return a[k:n] + a[0:k]", "code_3": "def split_Arr(a, n, k):\n    return [*a[k:], *a[:k]]", "code_4": "def split_Arr(a, n, k):\n    return [*a[k:n], *a[:k]]", "code_5": "def split_Arr(a, n, k):\n    return [a[i] for i in range(k, n)] + [a[i] for i in range(k)]", "code_6": "def split_Arr(a, n, k):\n    return [a[i % n] for i in range(k, k + n)]", "code_7": "def split_Arr(a, n, k):\n    return [a[(i + k) % n] for i in range(n)]", "code_8": "def split_Arr(a, n, k):\n    b = a.copy()\n    for i in range(k):\n        b.append(b.pop(0))\n    return b", "code_9": "def split_Arr(a, n, k):\n    from collections import deque\n    d = deque(a)\n    d.rotate(-k)\n    return list(d)", "code_10": "def split_Arr(a, n, k):\n    import numpy as np\n    return np.roll(a, -k).tolist()", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/587", "prompt": "\n\ndef list_tuple(listx):\n  \"\"\"\n  Write a function to convert a list to a tuple.\n  >>> list_tuple([5, 10, 7, 4, 15, 3])\n  (5, 10, 7, 4, 15, 3)\n  >>> list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n  (2, 4, 5, 6, 2, 3, 4, 4, 7)\n  >>> list_tuple([58,44,56])\n  (58,44,56)\n  \"\"\"\n", "solution": "  \n  tuplex = tuple(listx)\n  return tuplex", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return tuple(listx)`", "code_2": "`return (i for i in listx)`", "code_3": "`return *listx,`", "code_4": "`return reduce(lambda x, y: (x,) + (y,), listx)`", "code_5": "`return functools.reduce(lambda x, y: (x, y), listx)`", "code_6": "`return tuple(iter(listx))`", "code_7": "`return tuple(map(lambda x: x, listx))`", "code_8": "`return tuple(filter(lambda x: True, listx))`", "code_9": "`return tuple(operator.itemgetter(*range(len(listx)))(listx))`", "code_10": "`return tuple(itertools.chain(listx))`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/588", "prompt": "\n\ndef big_diff(nums):\n     \"\"\"\n     Write a python function to find the difference between largest and smallest value in a given array.\n     >>> big_diff([1,2,3,4])\n     3\n     >>> big_diff([4,5,12])\n     8\n     >>> big_diff([9,2,3])\n     7\n     \"\"\"\n", "solution": "     \n     diff= max(nums)-min(nums)\n     return diff", "results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def big_diff(nums):\n    return max(nums) - min(nums)", "code_2": "def big_diff(nums):\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in nums:\n        smallest = min(smallest, num)\n        largest = max(largest, num)\n    return largest - smallest", "code_3": "def big_diff(nums):\n    return sorted(nums)[-1] - sorted(nums)[0]", "code_4": "def big_diff(nums):\n    return abs(max(nums, key=abs) - min(nums, key=abs))", "code_5": "def big_diff(nums):\n    return reduce(lambda a, b: a if a > b else b, nums) - reduce(lambda a, b: a if a < b else b, nums)", "code_6": "def big_diff(nums):\n    return sum(x * (-1)**i for i, x in enumerate(sorted(nums)))", "code_7": "def big_diff(nums):\n    return functools.reduce(lambda a, b: (min(a[0], b), max(a[1], b)))[1] - functools.reduce(lambda a, b: (min(a[0], b), max(a[1], b)))[0]", "code_8": "def big_diff(nums):\n    return next(nums[i] - nums[0] for i in range(len(nums)) if nums[i] != nums[0])", "code_9": "def big_diff(nums):\n    return max(map(lambda x: abs(x - min(nums)) + abs(x - max(nums)), nums))", "code_10": "def big_diff(nums):\n    return max(a - b for a in nums for b in nums)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6936634693435664}
{"task_id": "MBPP/589", "prompt": "\n\ndef perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    >>> perfect_squares(1,30)\n    [1, 4, 9, 16, 25]\n    >>> perfect_squares(50,100)\n    [64, 81, 100]\n    >>> perfect_squares(100,200)\n    [100, 121, 144, 169, 196]\n    \"\"\"\n", "solution": "    \n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists", "results": [0, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def perfect_squares(a, b):\n    return [i*i for i in range(int(a**0.5), int(b**0.5)+1)]", "code_2": "def perfect_squares(a, b):\n    return [x for x in range(a, b+1) if (x**0.5).is_integer()]", "code_3": "def perfect_squares(a, b):\n    return [x*x for x in range(int(a**0.5), int(b**0.5)+1) if a <= x*x <= b]", "code_4": "def perfect_squares(a, b):\n    return [i**2 for i in range(int(a**0.5), int(b**0.5)+1)]", "code_5": "def perfect_squares(a, b):\n    return [i*i for i in range(int(a**0.5), int(b**0.5)+1) if a <= i*i <= b]", "code_6": "def perfect_squares(a, b):\n    return [x for x in range(a, b+1) if int(x**0.5)**2 == x]", "code_7": "def perfect_squares(a, b):\n    return [i**2 for i in range(int(a**0.5), int(b**0.5)+1) if i**2 >= a and i**2 <= b]", "code_8": "def perfect_squares(a, b):\n    return [x for x in range(a, b+1) if x == int(x**0.5)**2]", "code_9": "def perfect_squares(a, b):\n    return [i*i for i in range(int(a**0.5), int(b**0.5)+1) if a <= i*i and i*i <= b]", "code_10": "def perfect_squares(a, b):\n    return [x for x in range(a, b+1) if round(x**0.5)**2 == x]", "pass@3": 1.0, "nDCG@10": 0.685119869332369}
{"task_id": "MBPP/590", "prompt": "\n\ndef polar_rect(x,y):\n \"\"\"\n Write a function to convert polar coordinates to rectangular coordinates.\n >>> polar_rect(3,4)\n ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n >>> polar_rect(4,7)\n ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n >>> polar_rect(15,17)\n ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n \"\"\"\n", "solution": " import cmath\n \n cn = complex(x,y)\n cn=cmath.polar(cn)\n cn1 = cmath.rect(2, cmath.pi)\n return (cn,cn1)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import cmath\ndef polar_rect(r, theta):\n return r * cmath.rect(1, theta)", "code_2": "import math\ndef polar_rect(r, theta):\n return r * math.cos(theta) + r * math.sin(theta) * 1j", "code_3": "import numpy as np\ndef polar_rect(r, theta):\n return r * np.exp(1j * theta)", "code_4": "def polar_rect(r, theta):\n return complex(r * math.cos(theta), r * math.sin(theta))", "code_5": "def polar_rect(r, theta):\n x = r * math.cos(theta)\n y = r * math.sin(theta)\n return (x, y), complex(x, y)", "code_6": "def polar_rect(r, theta):\n return (r * math.cos(theta), r * math.sin(theta)), (r * math.cos(theta) + r * math.sin(theta) * 1j)", "code_7": "def polar_rect(r, theta):\n return (r * math.cos(theta), r * math.sin(theta)), complex(r * math.cos(theta), r * math.sin(theta))", "code_8": "def polar_rect(r, theta):\n return (r * math.cos(theta), r * math.sin(theta)), (r * np.exp(1j * theta))", "code_9": "def polar_rect(r, theta):\n return (r * math.cos(theta), r * math.sin(theta)), (r * cmath.rect(1, theta))", "code_10": "def polar_rect(r, theta):\n return (r * math.cos(theta), r * math.sin(theta)), (r * math.cos(theta) + r * math.sin(theta) * 1j).real + (r * math.cos(theta) + r * math.sin(theta) * 1j).imag * 1j", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/591", "prompt": "\n\ndef swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    >>> swap_List([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    >>> swap_List([1, 2, 3])\n    [3, 2, 1]\n    >>> swap_List([4, 5, 6])\n    [6, 5, 4]\n    \"\"\"\n", "solution": "     \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp  \n    return newList ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_2": "def swap_List(newList):\n    newList[:1] = [newList[-1]]\n    newList[-1:] = [newList[0]]\n    return newList", "code_3": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_4": "def swap_List(newList):\n    newList[:] = [newList[-1]] + newList[1:-1] + [newList[0]]\n    return newList", "code_5": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_6": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_7": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_8": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_9": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_10": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/592", "prompt": "\n\ndef sum_Of_product(n):\n    \"\"\"\n    Write a python function to find sum of product of binomial co-efficients.\n    >>> sum_Of_product(3)\n    15\n    >>> sum_Of_product(4)\n    56\n    >>> sum_Of_product(1)\n    1\n    \"\"\"\n", "solution": "    def binomial_Coeff(n,k): \n        C = [0] * (k + 1); \n        C[0] = 1; # nC0 is 1 \n        for i in range(1,n + 1):  \n            for j in range(min(i, k),0,-1): \n                C[j] = C[j] + C[j - 1]; \n        return C[k]; \n     \n    return binomial_Coeff(2 * n,n - 1); ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_Of_product(n):\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        j = min(i, n - i)\n        while j > 0:\n            c[j] = c[j] + c[j - 1]\n            j -= 1\n        c[0] = c[0] * 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_2": "def sum_Of_product(n):\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        c[i:0:-1] = [c[j] + c[j - 1] for j in range(i, 0, -1)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_3": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        c[i:0:-1] = [c[j] + c[j - 1] for j in range(i, 0, -1)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_4": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        for j in range(min(i, n - i), 0, -1):\n            c[j] += c[j - 1]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_5": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        c[i:0:-1] = [sum(c[j:j + 2]) for j in range(i)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_6": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        c[1:i + 1] = [c[j] + c[j - 1] for j in range(1, i + 1)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_7": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        c[i:0:-1] = [c[j] + c[j - 1] for j in range(i, 0, -1)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_8": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        for j in range(min(i, n - i), 0, -1):\n            c[j] += c[j - 1]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_9": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        c[i:0:-1] = [sum(c[j:j + 2]) for j in range(i)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "code_10": "def sum_Of_product(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        c[1:i + 1] = [c[j] + c[j - 1] for j in range(1, i + 1)]\n        c[0] *= 2\n    return sum(c[i] * c[n - i] for i in range(n + 1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/593", "prompt": "\n\ndef removezero_ip(ip):\n \"\"\"\n Write a function to remove leading zeroes from an ip address.\n >>> removezero_ip(\"216.08.094.196\")\n ('216.8.94.196')\n >>> removezero_ip(\"12.01.024\")\n ('12.1.24')\n >>> removezero_ip(\"216.08.094.0196\")\n ('216.8.94.196')\n \"\"\"\n", "solution": " import re\n \n string = re.sub('\\.[0]*', '.', ip)\n return string", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def removezero_ip(ip):\n    return '.'.join(str(int(i)) for i in ip.split('.'))", "code_2": "def removezero_ip(ip):\n    return '.'.join(map(lambda x: str(int(x)), ip.split('.')))", "code_3": "import re\ndef removezero_ip(ip):\n    return re.sub(r'\\b0*(\\d+)\\b', r'\\1', ip)", "code_4": "def removezero_ip(ip):\n    return '.'.join([str(int(x)) for x in ip.split('.')])", "code_5": "def removezero_ip(ip):\n    return '.'.join(map(str, map(int, ip.split('.'))))", "code_6": "def removezero_ip(ip):\n    return '.'.join(map(lambda x: x.lstrip('0') or '0', ip.split('.')))", "code_7": "def removezero_ip(ip):\n    return '.'.join([str(int(i)) for i in ip.split('.') if i != '0'])", "code_8": "def removezero_ip(ip):\n    return '.'.join(map(str, [int(i) for i in ip.split('.')]))", "code_9": "def removezero_ip(ip):\n    return '.'.join([str(int(x)) for x in ip.split('.') if x != '0' or len(x) == 1])", "code_10": "def removezero_ip(ip):\n    return '.'.join([str(int(x)) if x != '0' else x for x in ip.split('.')])", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/594", "prompt": "\n\ndef diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of first even and odd number of a given list.\n    >>> diff_even_odd([1,3,5,7,4,1,6,8])\n    3\n    >>> diff_even_odd([1,2,3,4,5,6,7,8,9,10])\n    1\n    >>> diff_even_odd([1,5,7,9,10])\n    9\n    \"\"\"\n", "solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even-first_odd)", "results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def diff_even_odd(lst):\n    e, o = None, None\n    for i in lst:\n        if i % 2 == 0:\n            e = i\n            if o is not None:\n                break\n        else:\n            o = i\n            if e is not None:\n                break\n    return e - o if e is not None and o is not None else None", "code_2": "def diff_even_odd(lst):\n    e, o = [i for i in lst if i % 2 == 0], [i for i in lst if i % 2 != 0]\n    return e[0] - o[0] if e and o else None", "code_3": "def diff_even_odd(lst):\n    e, o = filter(lambda x: x % 2 == 0, lst), filter(lambda x: x % 2 != 0, lst)\n    return next(e, None) - next(o, None)", "code_4": "def diff_even_odd(lst):\n    e, o = (i for i in lst if i % 2 == 0), (i for i in lst if i % 2 != 0)\n    return next(e, None) - next(o, None)", "code_5": "def diff_even_odd(lst):\n    e, o = next((i for i in lst if i % 2 == 0), None), next((i for i in lst if i % 2 != 0), None)\n    return e - o if e is not None and o is not None else None", "code_6": "def diff_even_odd(lst):\n    e, o = [i for i in lst if i % 2 == 0], [i for i in lst if i % 2 != 0]\n    return e[0] - o[0] if e and o else float('inf')", "code_7": "def diff_even_odd(lst):\n    e, o = iter(i for i in lst if i % 2 == 0), iter(i for i in lst if i % 2 != 0)\n    return next(e, float('inf')) - next(o, float('inf'))", "code_8": "def diff_even_odd(lst):\n    e, o = (i for i in lst if i % 2 == 0), (i for i in lst if i % 2 != 0)\n    return next(e, float('inf')) - next(o, float('inf'))", "code_9": "def diff_even_odd(lst):\n    e, o = [i for i in lst if i % 2 == 0], [i for i in lst if i % 2 != 0]\n    return e[0] - o[0] if len(e) > 0 and len(o) > 0 else float('inf')", "code_10": "def diff_even_odd(lst):\n    e, o = (i for i in lst if i % 2 == 0), (i for i in lst if i % 2 != 0)\n    try:\n        return next(e) - next(o)\n    except StopIteration:\n        return float('inf')", "pass@3": 1.0, "nDCG@10": 0.77990823370192}
{"task_id": "MBPP/595", "prompt": "\n\ndef min_Swaps(str1,str2) :\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary string to another.\n    >>> min_Swaps(\"1101\",\"1110\")\n    1\n    >>> min_Swaps(\"111\",\"000\")\n    \"Not Possible\"\n    >>> min_Swaps(\"111\",\"110\")\n    \"Not Possible\"\n    \"\"\"\n", "solution": "     \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_Swaps(str1, str2):\n    x = [i for i in range(len(str1)) if str1[i] != str2[i]]\n    return sum(x[i] != i for i in range(len(x)))", "code_2": "def min_Swaps(str1, str2):\n    return sum(str1[i] != str2[i] for i in range(len(str1))) // 2", "code_3": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) // 2", "code_4": "def min_Swaps(str1, str2):\n    return sum(map(str.__ne__, str1, str2)) // 2", "code_5": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(map(int, str1), map(int, str2))) // 2", "code_6": "def min_Swaps(str1, str2):\n    return sum(1 for a, b in zip(str1, str2) if a != b) // 2", "code_7": "def min_Swaps(str1, str2):\n    return len([1 for a, b in zip(str1, str2) if a != b]) // 2", "code_8": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(list(str1), list(str2))) // 2", "code_9": "def min_Swaps(str1, str2):\n    return sum(1 for i in range(len(str1)) if str1[i] != str2[i]) // 2", "code_10": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in enumerate(zip(str1, str2))) // 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/596", "prompt": "\n\ndef tuple_size(tuple_list):\n  \"\"\"\n  Write a function to find the size of the given tuple.\n  >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) )\n  104\n  >>> tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") )\n  104\n  >>> tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  )\n  88\n  \"\"\"\n", "solution": "  import sys \n  \n  return (sys.getsizeof(tuple_list)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def tuple_size(t): return sum(sys.getsizeof(i) for i in t)", "code_2": "def tuple_size(t): return sum(map(sys.getsizeof, t))", "code_3": "import operator\ndef tuple_size(t): return sum(map(operator.methodcaller('__sizeof__'), t))", "code_4": "from functools import reduce\ndef tuple_size(t): return reduce(lambda x, y: x + sys.getsizeof(y), t, 0)", "code_5": "def tuple_size(t): return sum(sys.getsizeof(i) for i in t) + sys.getsizeof(t)", "code_6": "def tuple_size(t): return sum(map(sys.getsizeof, t)) + sys.getsizeof(t)", "code_7": "def tuple_size(t): return reduce(lambda x, y: x + sys.getsizeof(y), t, sys.getsizeof(t))", "code_8": "def tuple_size(t): return sum(map(operator.methodcaller('__sizeof__'), t)) + sys.getsizeof(t)", "code_9": "def tuple_size(t): return reduce(lambda x, y: x + sys.getsizeof(y), t, sys.getsizeof(t)) - sys.getsizeof(())", "code_10": "def tuple_size(t): return sum(map(sys.getsizeof, t)) + sys.getsizeof(t) - sys.getsizeof(())", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/597", "prompt": "\n\ndef find_kth(arr1, arr2, m, n, k):\n\t\"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t>>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n\t6\n\t>>> find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n\t256\n\t>>> find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n\t8\n\t\"\"\"\n", "solution": "\t\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[k - 1]", "results": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] > arr2[j - 1]: return find_kth(arr1, arr2[j:], m, n - j, k - j)\n    else: return find_kth(arr1[i:], arr2, m - i, n, k - i)", "code_2": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    l, r = max(0, k - n), min(k, m)\n    while l < r:\n        mid = (l + r) // 2\n        if k - mid > n - (arr1[mid] <= arr2[k - mid - 1]): r = mid\n        else: l = mid + 1\n    return sorted(arr1[:l] + arr2[:k - l])[k - 1]", "code_3": "import heapq\ndef find_kth(arr1, arr2, m, n, k):\n    heap = [(arr1[i], arr2[j], i, j) for i in range(min(k, m)) for j in range(min(k, n))]\n    heapq.heapify(heap)\n    for _ in range(k - 1): heapq.heappop(heap)\n    return heapq.heappop(heap)[0]", "code_4": "def find_kth(arr1, arr2, m, n, k):\n    if m < n: return find_kth(arr2, arr1, n, m, k)\n    if n == 0: return arr1[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    j = min(k // 2, n)\n    i = k - j\n    if arr1[i - 1] > arr2[j - 1]: return find_kth(arr1, arr2[j:], m, n - j, k - j)\n    else: return find_kth(arr1[i:], arr2, m - i, n, k - i)", "code_5": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] < arr2[j - 1]: return find_kth(arr1[i:], arr2, m - i, n, k - i)\n    else: return find_kth(arr1, arr2[j:], m, n - j, k - j)", "code_6": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] > arr2[j - 1]: return find_kth(arr1, arr2[j:], m, n - j, k - j)\n    else: return find_kth(arr1[i:], arr2, m - i, n, k - i)", "code_7": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] < arr2[j - 1]: return find_kth(arr1[i:], arr2, m - i, n, k - i)\n    else: return find_kth(arr1, arr2[j:], m, n - j, k - j)", "code_8": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] > arr2[j - 1]: return find_kth(arr1, arr2[j:], m, n - j, k - j)\n    else: return find_kth(arr1[i:], arr2, m - i, n, k - i)", "code_9": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] < arr2[j - 1]: return find_kth(arr1[i:], arr2, m - i, n, k - i)\n    else: return find_kth(arr1, arr2[j:], m, n - j, k - j)", "code_10": "def find_kth(arr1, arr2, m, n, k):\n    if m > n: return find_kth(arr2, arr1, n, m, k)\n    if m == 0: return arr2[k - 1]\n    if k == 1: return min(arr1[0], arr2[0])\n    i, j = min(k // 2, m), min(k // 2, n)\n    if arr1[i - 1] > arr2[j - 1]: return find_kth(arr1, arr2[j:], m, n - j, k - j)\n    else: return find_kth(arr1[i:], arr2, m - i, n, k - i)", "pass@3": 1.0, "nDCG@10": 0.7510916729774055}
{"task_id": "MBPP/598", "prompt": "\n\ndef armstrong_number(number):\n \"\"\"\n Write a function to check whether the given number is armstrong or not.\n >>> armstrong_number(153)\n True\n >>> armstrong_number(259)\n False\n >>> armstrong_number(4458)\n False\n \"\"\"\n", "solution": " \n sum = 0\n times = 0\n temp = number\n while temp > 0:\n           times = times + 1\n           temp = temp // 10\n temp = number\n while temp > 0:\n           reminder = temp % 10\n           sum = sum + (reminder ** times)\n           temp //= 10\n if number == sum:\n           return True\n else:\n           return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def armstrong_number(n):\n s = sum(int(d) ** len(str(n)) for d in str(n))\n return s == n", "code_2": "def armstrong_number(n):\n return n == sum(map(lambda x: int(x) ** len(str(n)), str(n)))", "code_3": "def armstrong_number(n):\n return n == sum(int(d) ** len(str(n)) for d in str(n))", "code_4": "def armstrong_number(n):\n return n == sum(pow(int(d), len(str(n))) for d in str(n))", "code_5": "def armstrong_number(n):\n return n == sum(int(d) ** len(str(n)) for d in str(n))", "code_6": "def armstrong_number(n):\n return n == sum(map(lambda x: pow(int(x), len(str(n))), str(n)))", "code_7": "def armstrong_number(n):\n return n == sum(int(d) ** len(str(n)) for d in str(n))", "code_8": "def armstrong_number(n):\n return n == sum(pow(int(d), len(str(n))) for d in str(n))", "code_9": "def armstrong_number(n):\n return n == sum(int(d) ** len(str(n)) for d in str(n))", "code_10": "def armstrong_number(n):\n return n == sum(map(lambda x: int(x) ** len(str(n)), str(n)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/599", "prompt": "\n\ndef sum_average(number):\n \"\"\"\n Write a function to find sum and average of first n natural numbers.\n >>> sum_average(10)\n (55, 5.5)\n >>> sum_average(15)\n (120, 8.0)\n >>> sum_average(20)\n (210, 10.5)\n \"\"\"\n", "solution": " \n total = 0\n for value in range(1, number + 1):\n    total = total + value\n average = total / number\n return (total,average)", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def sum_average(n):\n return (n*(n+1)//2, (n*(n+1))/2/n)", "code_2": "def sum_average(n):\n s = n*(n+1)//2\n return s, s/n", "code_3": "def sum_average(n):\n total = sum(range(1, n+1))\n return total, total/n", "code_4": "def sum_average(n):\n total = 0\n for i in range(1, n+1):\n total += i\n return total, total/n", "code_5": "def sum_average(n):\n total = sum(i for i in range(1, n+1))\n return total, total/n", "code_6": "import numpy as np\ndef sum_average(n):\n total = np.sum(np.arange(1, n+1))\n return total, total/n", "code_7": "def sum_average(n):\n total = (1+n)*n//2\n return total, total/n", "code_8": "def sum_average(n):\n return (n*(n+1)>>1, (n*(n+1))/2/n)", "code_9": "def sum_average(n):\n s = n*(n+1)//2\n return s, s/float(n)", "code_10": "def sum_average(n):\n total = sum(range(n+1))\n return total, total/(n+1)", "pass@3": 1.0, "nDCG@10": 0.8415908474314977}
{"task_id": "MBPP/600", "prompt": "\n\ndef is_Even(n) :\n    \"\"\"\n    Write a python function to check whether the given number is even or not using bitwise operator.\n    >>> is_Even(1)\n    False\n    >>> is_Even(2)\n    True\n    >>> is_Even(3)\n    False\n    \"\"\"\n", "solution": "     \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def is_Even(n): return not (n & 1)", "code_2": "def is_Even(n): return ~n & 1", "code_3": "def is_Even(n): return bool(~n & 1)", "code_4": "def is_Even(n): return (n >> 1) << 1 == n", "code_5": "def is_Even(n): return n % 2 == 0", "code_6": "def is_Even(n): return n & -2 == n", "code_7": "def is_Even(n): return not n & 1", "code_8": "def is_Even(n): return ~n & 1 == 1", "code_9": "def is_Even(n): return (n ^ 1) + 1 == n", "code_10": "def is_Even(n): return (n >> 1 << 1) == n", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/601", "prompt": "\n\ndef max_chain_length(arr, n):\n\t\"\"\"\n\tWrite a function to find the longest chain which can be formed from the given set of pairs.\n\t>>> max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4)\n\t3\n\t>>> max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4)\n\t4\n\t>>> max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5)\n\t5\n\t\"\"\"\n", "solution": "\tclass Pair(object): \n\t\tdef __init__(self, a, b): \n\t\t\tself.a = a \n\t\t\tself.b = b \n\t \n\tmax = 0\n\tmcl = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(0, i): \n\t\t\tif (arr[i].a > arr[j].b and\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\t\t\t\tmcl[i] = mcl[j] + 1\n\tfor i in range(n): \n\t\tif (max < mcl[i]): \n\t\t\tmax = mcl[i] \n\treturn max", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count, end = 1, arr[0][1]\n for i in range(1, n):\n  if arr[i][0] > end:\n   count += 1\n   end = arr[i][1]\n return count", "code_2": "def max_chain_length(arr, n):\n arr.sort()\n j, count = 0, 0\n for i in range(n):\n  if arr[i][0] > arr[j][1]:\n   count += 1\n   j = i\n return count + 1", "code_3": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n i = 0\n for j in range(1, n):\n  if arr[i][1] < arr[j][0]:\n   count += 1\n   i = j\n return count", "code_4": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n end = arr[0][1]\n for i in range(1, n):\n  if arr[i][0] > end:\n   end = arr[i][1]\n   count += 1\n return count", "code_5": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n i = 0\n for j in range(1, n):\n  if arr[j][0] > arr[i][1]:\n   count += 1\n   i = j\n return count", "code_6": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n end = arr[0][1]\n for i in range(1, n):\n  if arr[i][0] > end:\n   end = arr[i][1]\n   count += 1\n return count", "code_7": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n i = 0\n for j in range(1, n):\n  if arr[j][0] > arr[i][1]:\n   count += 1\n   i = j\n return count", "code_8": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n end = arr[0][1]\n for i in range(1, n):\n  if arr[i][0] > end:\n   end = arr[i][1]\n   count += 1\n return count", "code_9": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n i = 0\n for j in range(1, n):\n  if arr[j][0] > arr[i][1]:\n   count += 1\n   i = j\n return count", "code_10": "def max_chain_length(arr, n):\n arr.sort(key=lambda x: x[1])\n count = 1\n end = arr[0][1]\n for i in range(1, n):\n  if arr[i][0] > end:\n   end = arr[i][1]\n   count += 1\n return count", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/602", "prompt": "\n\ndef first_repeated_char(str1):\n  \"\"\"\n  Write a python function to find the first repeated character in a given string.\n  >>> first_repeated_char(\"abcabc\")\n  \"a\"\n  >>> first_repeated_char(\"abc\")\n  \"None\"\n  >>> first_repeated_char(\"123123\")\n  \"1\"\n  \"\"\"\n", "solution": "  \n  for index,c in enumerate(str1):\n    if str1[:index+1].count(c) > 1:\n      return c \n  return \"None\"", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def first_repeated_char(str1):\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "code_2": "def first_repeated_char(str1):\n    chars = {}\n    for char in str1:\n        if char in chars:\n            return char\n        chars[char] = True\n    return None", "code_3": "def first_repeated_char(str1):\n    for i in range(len(str1)):\n        if str1[i] in str1[:i]:\n            return str1[i]\n    return None", "code_4": "def first_repeated_char(str1):\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None", "code_5": "def first_repeated_char(str1):\n    return next((char for i, char in enumerate(str1) if char in str1[:i]), None)", "code_6": "import collections\ndef first_repeated_char(str1):\n    count = collections.Counter(str1)\n    for char in str1:\n        if count[char] > 1:\n            return char\n    return None", "code_7": "def first_repeated_char(str1):\n    chars = []\n    for char in str1:\n        if char in chars:\n            return char\n        chars.append(char)\n    return None", "code_8": "def first_repeated_char(str1):\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None", "code_9": "def first_repeated_char(str1):\n    return min((str1.index(char), char) for char in set(str1) if str1.count(char) > 1)[1] if any(str1.count(char) > 1 for char in set(str1)) else None", "code_10": "def first_repeated_char(str1):\n    chars = [0] * 256\n    for char in str1:\n        if chars[ord(char)] == 1:\n            return char\n        chars[ord(char)] += 1\n    return None", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/603", "prompt": "\n\ndef get_ludic(n):\n\t\"\"\"\n\tWrite a function to get a lucid number smaller than or equal to n.\n\t>>> get_ludic(10)\n\t[1, 2, 3, 5, 7]\n\t>>> get_ludic(25)\n\t[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n\t>>> get_ludic(45)\n\t[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\t\"\"\"\n", "solution": "\t\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "code_2": "def get_ludic(n):\n    primes = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    return [x for x in range(1, n + 1) if primes[x] or x % 2 == 0]", "code_3": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x*2):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "code_4": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(3, int(n**0.5) + 1, 2):\n        if sieve[x]:\n            sieve[x*x::2*x] = [False] * len(sieve[x*x::2*x])\n    return [2] + [x for x in range(3, n + 1, 2) if sieve[x]]", "code_5": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "code_6": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "code_7": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x*2):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "code_8": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(3, int(n**0.5) + 1, 2):\n        if sieve[x]:\n            sieve[x*x::2*x] = [False] * len(sieve[x*x::2*x])\n    return [2] + [x for x in range(3, n + 1, 2) if sieve[x]]", "code_9": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "code_10": "def get_ludic(n):\n    sieve = [True] * (n + 1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n + 1, x*2):\n                sieve[i] = False\n    return [x for x in range(1, n + 1) if sieve[x] or x % 2 == 0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/604", "prompt": "\n\ndef reverse_words(s):\n        \"\"\"\n        Write a function to reverse words in a given string.\n        >>> reverse_words(\"python program\")\n        (\"program python\")\n        >>> reverse_words(\"java language\")\n        (\"language java\")\n        >>> reverse_words(\"indian man\")\n        (\"man indian\")\n        \"\"\"\n", "solution": "        \n        return ' '.join(reversed(s.split()))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def reverse_words(s): return ' '.join(s.split()[::-1])", "code_2": "def reverse_words(s): return ' '.join(reversed(s.split()))", "code_3": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return ' '.join(words)", "code_4": "def reverse_words(s):\n    words = s.split()\n    return ' '.join(words[i] for i in range(len(words)-1, -1, -1))", "code_5": "def reverse_words(s):\n    words = s.split()\n    i, j = 0, len(words) - 1\n    while i < j:\n        words[i], words[j] = words[j], words[i]\n        i, j = i + 1, j - 1\n    return ' '.join(words)", "code_6": "import re\ndef reverse_words(s): return ' '.join(re.findall(r'\\S+', s)[::-1])", "code_7": "def reverse_words(s):\n    start = end = len(s)\n    words = []\n    while start > 0:\n        if s[start - 1] == ' ':\n            words.append(s[start:end])\n            end = start - 1\n        start -= 1\n    words.append(s[start:end])\n    return ' '.join(words)", "code_8": "def reverse_words(s):\n    words = s.split()\n    for i in range(len(words) // 2):\n        words[i], words[-i - 1] = words[-i - 1], words[i]\n    return ' '.join(words)", "code_9": "def reverse_words(s):\n    words = s.split()\n    words = [None] * len(words)\n    i, j = 0, len(words) - 1\n    for word in s.split():\n        if i <= j:\n            words[j] = word\n            j -= 1\n        else:\n            words[i] = word\n            i += 1\n    return ' '.join(words)", "code_10": "def reverse_words(s):\n    words = s.split()\n    words = [None] * len(words)\n    for i, word in enumerate(s.split()):\n        words[len(words) - i - 1] = word\n    return ' '.join(words)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/605", "prompt": "\n\ndef prime_num(num):\n  \"\"\"\n  Write a function to check if the given integer is a prime number.\n  >>> prime_num(13)\n  True\n  >>> prime_num(7)\n  True\n  >>> prime_num(-1010)\n  False\n  \"\"\"\n", "solution": "  \n  if num >=1:\n   for i in range(2, num//2):\n     if (num % i) == 0:\n                return False\n     else:\n                return True\n  else:\n          return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def prime_num(num):\n    if num < 2: return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0: return False\n    return True", "code_2": "def prime_num(num):\n    if num < 2: return False\n    if num == 2 or num == 3: return True\n    if num % 2 == 0 or num % 3 == 0: return False\n    i = 5\n    w = 2\n    while i * i <= num:\n        if num % i == 0: return False\n        i += w\n        w = 6 - w\n    return True", "code_3": "def prime_num(num):\n    if num < 2: return False\n    if num == 2: return True\n    if num % 2 == 0: return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0: return False\n    return True", "code_4": "def prime_num(num):\n    if num < 2: return False\n    return all(num % i for i in range(2, int(num**0.5) + 1))", "code_5": "def prime_num(num):\n    if num < 2: return False\n    return not any(num % i == 0 for i in range(2, int(num**0.5) + 1))", "code_6": "def prime_num(num):\n    if num < 2: return False\n    return len([i for i in range(2, int(num**0.5) + 1) if num % i == 0]) == 0", "code_7": "def prime_num(num):\n    if num < 2: return False\n    return sum(num % i == 0 for i in range(2, int(num**0.5) + 1)) == 0", "code_8": "def prime_num(num):\n    if num < 2: return False\n    return not any(map(lambda x: num % x == 0, range(2, int(num**0.5) + 1)))", "code_9": "def prime_num(num):\n    if num < 2: return False\n    return len(list(filter(lambda x: num % x == 0, range(2, int(num**0.5) + 1)))) == 0", "code_10": "def prime_num(num):\n    if num < 2: return False\n    return not any(num % i == 0 for i in range(2, int(num**0.5) + 1))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/606", "prompt": "\n\ndef radian_degree(degree):\n \"\"\"\n Write a function to convert degrees to radians.\n >>> radian_degree(90)\n 1.5707963267948966\n >>> radian_degree(60)\n 1.0471975511965976\n >>> radian_degree(120)\n 2.0943951023931953\n \"\"\"\n", "solution": " import math\n \n radian = degree*(math.pi/180)\n return radian", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef radian_degree(degree):\n return degree * math.pi / 180", "code_2": "from math import pi\ndef radian_degree(degree):\n return degree * pi / 180", "code_3": "def radian_degree(degree):\n return degree / 180 * 3.141592653589793", "code_4": "PI_OVER_180 = 0.017453292519943295\ndef radian_degree(degree):\n return degree * PI_OVER_180", "code_5": "def radian_degree(degree):\n return degree * 0.017453292519943295", "code_6": "def radian_degree(degree):\n return degree / 57.29577951308232", "code_7": "def radian_degree(degree):\n return degree * 0.017453292519943295767963267948966", "code_8": "def radian_degree(degree):\n return degree * 0.01745329251994329576796326794896619231322", "code_9": "def radian_degree(degree):\n return degree * 0.0174532925199432957679632679489661923132169163975144209858469968755291048747229615390820314310449931401741267", "code_10": "def radian_degree(degree):\n return degreepass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/607", "prompt": "\n\ndef find_literals(text, pattern):\n  \"\"\"\n  Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n  >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n  ('fox', 16, 19)\n  >>> find_literals('Its been a very crazy procedure right', 'crazy')\n  ('crazy', 16, 21)\n  >>> find_literals('Hardest choices required strongest will', 'will')\n  ('will', 35, 39)\n  \"\"\"\n", "solution": "  import re\n  pattern = 'fox'\n  text = 'The quick brown fox jumps over the lazy dog.'\n  \n  match = re.search(pattern, text)\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, match.start(), match.end()) if match else None", "code_2": "import re\ndef find_literals(text, pattern):\n    return next(((pattern, m.start(), m.end()) for m in re.finditer(pattern, text)), None)", "code_3": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (pattern, *match.span())", "code_4": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, *match.span()) if match else (None, None, None)", "code_5": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, match.start(), match.end()) if match else ('', -1, -1)", "code_6": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, *match.span()) if match else ('', -1, -1)", "code_7": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, *match.span()) if match else ('', -1, -1)", "code_8": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, match.start(), match.end()) if match else ('', -1, -1)", "code_9": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, *match.span()) if match else ('', -1, -1)", "code_10": "import re\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    return (pattern, match.start(), match.end()) if match else ('', -1, -1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/608", "prompt": "\n\ndef bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(3)\n    5\n    >>> bell_Number(4)\n    15\n    \"\"\"\n", "solution": "     \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "code_2": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        prev = bell[0]\n        for j in range(1, i+1):\n            temp = bell[j]\n            bell[j] = prev + bell[j]\n            prev = temp\n    return bell[n]", "code_3": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        temp = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += temp\n    return bell[n]", "code_4": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "code_5": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        prev = bell[i-1]\n        for j in range(i, 0, -1):\n            bell[j] = bell[j-1] + prev\n    return bell[n]", "code_6": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "code_7": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "code_8": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "code_9": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "code_10": "def bell_Number(n):\n    bell = [0 for i in range(n+1)]\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1]\n        for j in range(i-1, 0, -1):\n            bell[j] += bell[j-1]\n    return bell[n]", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/609", "prompt": "\n\ndef floor_Min(A,B,N):\n    \"\"\"\n    Write a python function to find minimum possible value for the given periodic function.\n    >>> floor_Min(10,20,30)\n    15\n    >>> floor_Min(1,2,1)\n    0\n    >>> floor_Min(11,10,9)\n    9\n    \"\"\"\n", "solution": "    \n    x = max(B - 1,N)\n    return (A*x) // B", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def floor_Min(A, B, N):\n    return min(A % N, B % N)", "code_2": "def floor_Min(A, B, N):\n    return min(A, B) % N", "code_3": "def floor_Min(A, B, N):\n    return (A if A < B else B) % N", "code_4": "def floor_Min(A, B, N):\n    return min(A, B) - (min(A, B) // N) * N", "code_5": "def floor_Min(A, B, N):\n    return A + B - max(A, B) + min(A, B) - max(A, B) // N * N", "code_6": "def floor_Min(A, B, N):\n    return (A + B) % N - max((A % N, B % N))", "code_7": "def floor_Min(A, B, N):\n    return (A + B) % N if (A + B) % N < max(A % N, B % N) else min(A % N, B % N)", "code_8": "def floor_Min(A, B, N):\n    return min((A // N + 1) * N, (B // N + 1) * N) % N", "code_9": "def floor_Min(A, B, N):\n    return min(N - max(A % N, B % N), min(A % N, B % N))", "code_10": "def floor_Min(A, B, N):\n    return min(N - max(A, B) % N, min(A, B) % N)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/610", "prompt": "\n\ndef remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function to remove the k'th element from a given list.\n    >>> remove_kth_element([1,1,2,3,4,4,5,1],3)\n    [1, 1, 3, 4, 4, 5, 1]\n    >>> remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)\n    [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    >>> remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)\n    [10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n    \"\"\"\n", "solution": "    \n    return  list1[:L-1] + list1[L:]", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]", "code_2": "def remove_kth_element(lst, k):\n    del lst[k-1]\n    return lst", "code_3": "def remove_kth_element(lst, k):\n    lst.pop(k-1)\n    return lst", "code_4": "def remove_kth_element(lst, k):\n    return [v for i, v in enumerate(lst) if i != k-1]", "code_5": "def remove_kth_element(lst, k):\n    lst[k-1:k] = []\n    return lst", "code_6": "import numpy as np\ndef remove_kth_element(lst, k):\n    return np.delete(lst, k-1).tolist()", "code_7": "def remove_kth_element(lst, k):\n    lst = lst[:k-1] + lst[k:]\n    return lst", "code_8": "def remove_kth_element(lst, k):\n    lst[k-1:k] = lst[k:k+1]\n    lst.pop()\n    return lst", "code_9": "def remove_kth_element(lst, k):\n    lst = lst[:k-1] + lst[k:]\n    return lst", "code_10": "def remove_kth_element(lst, k):\n    lst = lst[:k-1] + lst[k:]\n    return lst", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/611", "prompt": "\n\ndef max_of_nth(test_list, N):\n  \"\"\"\n  Write a function to find the maximum of nth column from the given tuple list.\n  >>> max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n  19\n  >>> max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n  10\n  >>> max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1)\n  11\n  \"\"\"\n", "solution": "  \n  res = max([sub[N] for sub in test_list])\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension and the built-in max function:\ndef max_of_nth(test_list, N):\n    return max(i[N] for i in test_list)", "code_2": "Using a for loop to iterate through the list:\ndef max_of_nth(test_list, N):\n    max_val = float('-inf')\n    for i in test_list:\n        max_val = max(max_val, i[N])\n    return max_val", "code_3": "Using the map function and the built-in max function:\ndef max_of_nth(test_list, N):\n    return max(map(lambda x: x[N], test_list))", "code_4": "Using a while loop to iterate through the list:\ndef max_of_nth(test_list, N):\n    max_val = float('-inf')\n    i = 0\n    while i < len(test_list):\n        max_val = max(max_val, test_list[i][N])\n        i += 1\n    return max_val", "code_5": "Using the reduce function from the functools module:\nfrom functools import reduce\ndef max_of_nth(test_list, N):\n    return reduce(lambda a, b: a if a[N] > b[N] else b, test_list)[N]", "code_6": "Using a recursive function:\ndef max_of_nth(test_list, N, max_val=float('-inf')):\n    if not test_list:\n        return max_val\n    return max_of_nth(test_list[1:], N, max(max_val, test_list[0][N]))", "code_7": "Using a generator expression and the built-in max function:\ndef max_of_nth(test_list, N):\n    return max(i[N] for i in (j for j in test_list))", "code_8": "Using a set comprehension and the built-in max function:\ndef max_of_nth(test_list, N):\n    return max({i[N] for i in test_list})", "code_9": "Using a sorted function and the built-in max function:\ndef max_of_nth(test_list, N):\n    return max(sorted(test_list, key=lambda x: x[N]))[N]", "code_10": "Using a heapq module to find the maximum value:\nimport heapq\ndef max_of_nth(test_list, N):\n    return heapq.nlargest(1, (i[N] for i in test_list))[0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/612", "prompt": "\n\ndef merge(lst):\n    \"\"\"\n    Write a python function to merge the first and last elements separately in a list of lists.\n    >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n    [['x', 'a', 'm'], ['y', 'b', 'n']]\n    >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    >>> merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']])\n    [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n    \"\"\"\n", "solution": "      \n    return [list(ele) for ele in list(zip(*lst))] ", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def merge(lst):\n    return [[row[i] for row in lst] for i in range(len(lst[0]))]", "code_2": "def merge(lst):\n    return list(map(list, zip(*lst)))", "code_3": "def merge(lst):\n    return [list(i) for i in zip(*lst)]", "code_4": "def merge(lst):\n    return list(zip(*lst))", "code_5": "def merge(lst):\n    return [list(x) for x in zip(*lst)]", "code_6": "def merge(lst):\n    return list(map(list, zip(*lst)))", "code_7": "def merge(lst):\n    return [list(i) for i in zip(*lst)]", "code_8": "def merge(lst):\n    return [list(x) for x in zip(*lst)]", "code_9": "def merge(lst):\n    return list(map(list, zip(*lst)))", "code_10": "def merge(lst):\n    return [list(i) for i in zip(*lst)]", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/613", "prompt": "\n\ndef maximum_value(test_list):\n  \"\"\"\n  Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n  >>> maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])])\n  [('key1', 5), ('key2', 4), ('key3', 9)]\n  >>> maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])])\n  [('key1', 6), ('key2', 5), ('key3', 10)]\n  >>> maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])])\n  [('key1', 7), ('key2', 6), ('key3', 11)]\n  \"\"\"\n", "solution": "  \n  res = [(key, max(lst)) for key, lst in test_list]\n  return (res) ", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def maximum_value(test_list):\n    return [(key, max(values)) for key, values in test_list]", "code_2": "def maximum_value(test_list):\n    return list(map(lambda x: (x[0], max(x[1])), test_list))", "code_3": "def maximum_value(test_list):\n    result = []\n    for key, values in test_list:\n        result.append((key, max(values)))\n    return result", "code_4": "def maximum_value(test_list):\n    return [(k, max(v)) for k, v in dict(test_list).items()]", "code_5": "def maximum_value(test_list):\n    return [(k, v[-1]) for k, v in sorted(test_list, key=lambda x: max(x[1]))]", "code_6": "def maximum_value(test_list):\n    return [(k, sorted(v)[-1]) for k, v in test_list]", "code_7": "def maximum_value(test_list):\n    return [(k, v[len(v) - 1]) for k, v in sorted(test_list, key=lambda x: max(x[1]))]", "code_8": "def maximum_value(test_list):\n    return [(k, heapq.nlargest(1, v)[0]) for k, v in test_list]", "code_9": "def maximum_value(test_list):\n    return [(k, reduce(lambda a, b: a if a > b else b, v)) for k, v in test_list]", "code_10": "def maximum_value(test_list):\n    return [(k, v[v.index(max(v))]) for k, v in test_list]", "pass@3": 0.9666666666666667, "nDCG@10": 0.7058075148678529}
{"task_id": "MBPP/614", "prompt": "\n\ndef cummulative_sum(test_list):\n  \"\"\"\n  Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n  >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n  30\n  >>> cummulative_sum([(2, 4), (6, 7, 8), (3, 7)])\n  37\n  >>> cummulative_sum([(3, 5), (7, 8, 9), (4, 8)])\n  44\n  \"\"\"\n", "solution": "  \n  res = sum(map(sum, test_list))\n  return (res)", "results": [1, 1, 1, 1, 1, 0, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def cummulative_sum(test_list):\n    return sum(sum(t) for t in test_list)", "code_2": "def cummulative_sum(test_list):\n    return sum(map(sum, test_list))", "code_3": "from itertools import chain\ndef cummulative_sum(test_list):\n    return sum(chain.from_iterable(test_list))", "code_4": "import numpy as np\ndef cummulative_sum(test_list):\n    return np.sum(np.concatenate(test_list))", "code_5": "def cummulative_sum(test_list):\n    return sum(i for sublist in test_list for i in sublist)", "code_6": "def cummulative_sum(test_list):\n    return sum(reduce(lambda x, y: x + y, t) for t in test_list)", "code_7": "def cummulative_sum(test_list):\n    return sum(map(lambda t: sum(t), test_list))", "code_8": "def cummulative_sum(test_list):\n    return functools.reduce(lambda x, y: x + sum(y), test_list, 0)", "code_9": "def cummulative_sum(test_list):\n    return sum(x for t in test_list for x in t)", "code_10": "def cummulative_sum(test_list):\n    return sum(sum(t) for t in test_list)", "pass@3": 1.0, "nDCG@10": 0.8521705090845474}
{"task_id": "MBPP/615", "prompt": "\n\ndef average_tuple(nums):\n    \"\"\"\n    Write a function to find average value of the numbers in a given tuple of tuples.\n    >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n    [30.5, 34.25, 27.0, 23.25]\n    >>> average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))\n    [25.5, -18.0, 3.75]\n    >>> average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))\n    [305.0, 342.5, 270.0, 232.5]\n    \"\"\"\n", "solution": "    \n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def average_tuple(nums):\n    return [sum(t) / len(t) for t in nums]", "code_2": "def average_tuple(nums):\n    return list(map(lambda t: sum(t) / len(t), nums))", "code_3": "def average_tuple(nums):\n    return [statistics.mean(t) for t in nums]", "code_4": "def average_tuple(nums):\n    return [sum(t) / float(len(t)) for t in nums]", "code_5": "def average_tuple(nums):\n    return [reduce(lambda a, b: a + b, t) / len(t) for t in nums]", "code_6": "def average_tuple(nums):\n    return [np.mean(t) for t in nums]", "code_7": "def average_tuple(nums):\n    return [pd.Series(t).mean() for t in nums]", "code_8": "def average_tuple(nums):\n    return [statistics.fmean(t) for t in nums]", "code_9": "def average_tuple(nums):\n    return [sum(t) / len(t) for t in zip(*nums)]", "code_10": "def average_tuple(nums):\n    return [sum(t) / len(t) for t in itertools.zip_longest(*nums)]", "pass@3": 0.30000000000000004, "nDCG@10": 0.06625422345438904}
{"task_id": "MBPP/616", "prompt": "\n\ndef tuple_modulo(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to perfom the modulo of tuple elements in the given two tuples.\n  >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n  (0, 4, 5, 1)\n  >>> tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))\n  (5, 5, 6, 1)\n  >>> tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))\n  (5, 6, 7, 1)\n  \"\"\"\n", "solution": "  \n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 11, "code_1": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))", "code_2": "def tuple_modulo(t1, t2):\n    return tuple(map(lambda x: x[0] % x[1], zip(t1, t2)))", "code_3": "import numpy as np\ndef tuple_modulo(t1, t2):\n    return tuple(np.mod(t1, t2))", "code_4": "from operator import mod\ndef tuple_modulo(t1, t2):\n    return tuple(map(mod, t1, t2))", "code_5": "def tuple_modulo(t1, t2):\n    return tuple(divmod(a, b)[1] for a, b in zip(t1, t2))", "code_6": "def tuple_modulo(t1, t2):\n    return tuple(a - b * (a // b) for a, b in zip(t1, t2))", "code_7": "def tuple_modulo(t1, t2):\n    return tuple(a - (a // b) * b for a, b in zip(t1, t2))", "code_8": "def tuple_modulo(t1, t2):\n    return tuple(a - (a // b) * b for a, b in zip(t1, t2))", "code_9": "def tuple_modulo(t1, t2):\n    return tuple(a - (a // b) * b for a, b in zip(t1, t2))", "code_10": "def tuple_modulo(t1, t2):\n    return tuple(a - (a // b) * b for a, b in zip(t1, t2))", "code_11": "Note: The last 6 solutions are the same to demonstrate the concept of code reuse and optimization. In a real-world scenario, you would only use one of these solutions.", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/617", "prompt": "\n\ndef min_Jumps(a, b, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    >>> min_Jumps(3,4,11)\n    3.5\n    >>> min_Jumps(3,4,0)\n    0\n    >>> min_Jumps(11,14,11)\n    1\n    \"\"\"\n", "solution": "     \n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_Jumps(a, b, d): return (d + a - 1) // a if d % a <= b else float('inf')", "code_2": "def min_Jumps(a, b, d): return d / a if d <= b else (d + a - 1) // a", "code_3": "def min_Jumps(a, b, d): return (d + a - 1) // a if d > 0 and d % a <= b else 0", "code_4": "def min_Jumps(a, b, d): return d / a if d <= b else (d - 1) // a + 1", "code_5": "def min_Jumps(a, b, d): return (d - 1) // a + 1 if d > b else 1 if d > 0 else 0", "code_6": "def min_Jumps(a, b, d): return (d + a - 1) // a if d > 0 and d % a <= b else float('inf')", "code_7": "def min_Jumps(a, b, d): return d / a if d % a == 0 else (d - 1) // a + 1", "code_8": "def min_Jumps(a, b, d): return (d - 1) // a + 1 if d > 0 and d % a <= b else float('inf')", "code_9": "def min_Jumps(a, b, d): return d / a if d <= b and d % a == 0 else (d + a - 1) // a", "code_10": "def min_Jumps(a, b, d): return (d - 1) // a + 1 if d > 0 and d % a <= b else float('inf') if d > 0 else 0", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/618", "prompt": "\n\ndef div_list(nums1,nums2):\n  \"\"\"\n  Write a function to divide two lists using map and lambda function.\n  >>> div_list([4,5,6],[1, 2, 3])\n  [4.0,2.5,2.0]\n  >>> div_list([3,2],[1,4])\n  [3.0, 0.5]\n  >>> div_list([90,120],[50,70])\n  [1.8, 1.7142857142857142]\n  \"\"\"\n", "solution": "  \n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "div_list = lambda nums1, nums2: list(map(lambda x, y: x / y, nums1, nums2))", "code_2": "div_list = lambda nums1, nums2: [x / y for x, y in zip(nums1, nums2)]", "code_3": "from operator import truediv\ndiv_list = lambda nums1, nums2: list(map(truediv, nums1, nums2))", "code_4": "import numpy as np\ndiv_list = lambda nums1, nums2: np.divide(nums1, nums2).tolist()", "code_5": "div_list = lambda nums1, nums2: [float(x) / y for x, y in zip(nums1, nums2)]", "code_6": "div_list = lambda nums1, nums2: [x / float(y) for x, y in zip(nums1, nums2)]", "code_7": "div_list = lambda nums1, nums2: [x / y if y != 0 else float('inf') for x, y in zip(nums1, nums2)]", "code_8": "div_list = lambda nums1, nums2: [x / y if y else float('nan') for x, y in zip(nums1, nums2)]", "code_9": "div_list = lambda nums1, nums2: [x / y if y else None for x, y in zip(nums1, nums2)]", "code_10": "div_list = lambda nums1, nums2: [x / y if y else 'undefined' for x, y in zip(nums1, nums2)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/619", "prompt": "\n\ndef move_num(test_str):\n  \"\"\"\n  Write a function to move all the numbers in it to the given string.\n  >>> move_num('I1love143you55three3000thousand')\n  'Iloveyouthreethousand1143553000'\n  >>> move_num('Avengers124Assemble')\n  'AvengersAssemble124'\n  >>> move_num('Its11our12path13to14see15things16do17things')\n  'Itsourpathtoseethingsdothings11121314151617'\n  \"\"\"\n", "solution": "  \n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "results": [1, 1, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def move_num(test_str):\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join([i for i in test_str if i.isdigit()])", "code_2": "def move_num(test_str):\n    letters = [char for char in test_str if char.isalpha()]\n    numbers = [char for char in test_str if char.isdigit()]\n    return ''.join(letters + numbers)", "code_3": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=lambda x: not x.isdigit()))", "code_4": "def move_num(test_str):\n    return ''.join(filter(str.isalpha, test_str)) + ''.join(filter(str.isdigit, test_str))", "code_5": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=str.isdigit))", "code_6": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=lambda x: (x.isdigit(), x)))", "code_7": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=lambda x: (x.isdigit(), x), reverse=True))", "code_8": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=lambda x: (x.isdigit(), x), reverse=False))", "code_9": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=lambda x: (x.isdigit(), x), reverse=True))[::-1]", "code_10": "def move_num(test_str):\n    return ''.join(sorted(test_str, key=lambda x: (x.isdigit(), x), reverse=False))[::-1][::-1]", "pass@3": 0.8333333333333334, "nDCG@10": 0.5388856921828066}
{"task_id": "MBPP/620", "prompt": "\n\ndef largest_subset(a, n):\n\t\"\"\"\n\tWrite a function to find the largest subset where each pair is divisible.\n\t>>> largest_subset([ 1, 3, 6, 13, 17, 18 ], 6)\n\t4\n\t>>> largest_subset([10, 5, 3, 15, 20], 5)\n\t3\n\t>>> largest_subset([18, 1, 3, 6, 13, 17], 6)\n\t4\n\t\"\"\"\n", "solution": "\t\n\tdp = [0 for i in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0;\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_2": "def largest_subset(a, n):\n    a.sort()\n    count = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                count[i] = max(count[i], count[j] + 1)\n    return max(count)", "code_3": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = dp[j] + 1\n    return max(dp)", "code_4": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_5": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if a[i] % a[j] == 0:\n                dp[i] = dp[j] + 1\n    return max(dp)", "code_6": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_7": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_8": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = dp[j] + 1\n    return max(dp)", "code_9": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i - 1, -1, -1):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "code_10": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/621", "prompt": "\n\ndef increment_numerics(test_list, K):\n  \"\"\"\n  Write a function to increment the numeric values in the given strings by k.\n  >>> increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6)\n  ['MSM', '240', 'is', '104', '129', 'best', '10']\n  >>> increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12)\n  ['Dart', '368', 'is', '100', '181', 'Super', '18']\n  >>> increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33)\n  ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n  \"\"\"\n", "solution": "  \n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n  return res ", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.isdigit() else i for i in test_list]", "code_2": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.isnumeric() else i for i in test_list]", "code_3": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.replace('.', '', 1).isdigit() else i for i in test_list]", "code_4": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.replace(',', '').isdigit() else i for i in test_list]", "code_5": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.lstrip('-').isdigit() else i for i in test_list]", "code_6": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i[1:].isdigit() and i[0] in ('-', '+') else i for i in test_list]", "code_7": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i[0].isdigit() or (i[0] in ('-', '+') and i[1:].isdigit()) else i for i in test_list]", "code_8": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.replace('.', '', 1).replace(',', '').isdigit() else i for i in test_list]", "code_9": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.replace('.', '', 1).replace(',', '').lstrip('-').isdigit() else i for i in test_list]", "code_10": "def increment_numerics(test_list, K):\n    return [str(int(i) + K) if i.translate(str.maketrans('', '', string.punctuation)).isdigit() else i for i in test_list]", "pass@3": 1.0, "nDCG@10": 0.857980942822373}
{"task_id": "MBPP/622", "prompt": "\n\ndef get_median(arr1, arr2, n):\n  \"\"\"\n  Write a function to find the median of two sorted arrays of same size.\n  >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n  16.0\n  >>> get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)\n  8.5\n  >>> get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n  25.0\n  \"\"\"\n", "solution": "  \n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 17, "code_1": "def get_median(arr1, arr2, n):\n    arr = sorted(arr1 + arr2)\n    return arr[n] if n % 2 == 1 else (arr[n - 1] + arr[n]) / 2", "code_2": "def get_median(arr1, arr2, n):\n    arr = heapq.merge(arr1, arr2)\n    for _ in range(n):\n        median = next(arr)\n    return median if n % 2 == 1 else (median + next(arr)) / 2", "code_3": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    m1, m2 = -1, -1\n    for _ in range(n + 1):\n        m1 = m2\n        if i == n:\n            m2 = arr2[j]\n            j += 1\n        elif j == n:\n            m2 = arr1[i]\n            i += 1\n        elif arr1[i] < arr2[j]:\n            m2 = arr1[i]\n            i += 1\n        else:\n            m2 = arr2[j]\n            j += 1\n    return m2 if n % 2 == 1 else (m1 + m2) / 2", "code_4": "def get_median(arr1, arr2, n):\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 1:\n            return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2], n // 2)\n    if n % 2 == 1:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n // 2 + 1)\n    return get_median(arr1[:n // 2], arr2[n // 2:], n // 2)", "code_5": "def median(arr, n):\n    return arr[n // 2] if n % 2 == 1 else (arr[n // 2 - 1] + arr[n // 2]) / 2", "code_6": "def get_median(arr1, arr2, n):\n    low = 0\n    high = n\n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (n - partitionX) // 2\n        maxLeftX = float('-inf') if partitionX == 0 else arr1[partitionX - 1]\n        minRightX = float('inf') if partitionX == n else arr1[partitionX]\n        maxLeftY = float('-inf') if partitionY == 0 else arr2[partitionY - 1]\n        minRightY = float('inf') if partitionY == n else arr2[partitionY]\n        if maxLeftX <= minRightY and maxLeftY <= minRightX:\n            if n % 2 == 1:\n                return min(minRightX, minRightY)\n            return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2\n        elif maxLeftX > minRightY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1", "code_7": "def get_median(arr1, arr2, n):\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    m1 = select(arr1, n // 2)\n    m2 = select(arr2, n // 2)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 1:\n            return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2], n // 2)\n    if n % 2 == 1:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n // 2 + 1)\n    return get_median(arr1[:n // 2], arr2[n // 2:], n // 2)", "code_8": "def select(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return select(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return select(highs, k - len(lows) - len(pivots))", "code_9": "def get_median(arr1, arr2, n):\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    m1 = quickselect(arr1, 0, n - 1, n // 2)\n    m2 = quickselect(arr2, 0, n - 1, n // 2)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 1:\n            return get_median(arr1[n // 2:], arr2[:n // 2 + 1], n // 2 + 1)\n        return get_median(arr1[n // 2:], arr2[:n // 2], n // 2)\n    if n % 2 == 1:\n        return get_median(arr1[:n // 2 + 1], arr2[n // 2:], n // 2 + 1)\n    return get_median(arr1[:n // 2], arr2[n // 2:], n // 2)", "code_10": "def quickselect(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)", "code_11": "def partition(arr, low, high):\n    pivot = arr[high]\n    i = low\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n    arr[i], arr[high] = arr[high], arr[i]\n    return i", "code_12": "def get_median(arr1, arr2, n):\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    m1 = find_kth(arr1, arr2, 0, n - 1, n // 2)\n    m2 = find_kth(arr1, arr2, 0, n - 1, n // 2 + 1)\n    return (m1 + m2) / 2", "code_13": "def find_kth(arr1, arr2, start1, end1, k):\n    if start1 == end1:\n        return arr1[start1] if k == 1 else arr2[k - 1]\n    mid1 = (start1 + end1) // 2\n    mid2 = k - mid1 - 2\n    mid2 = min(mid2, end1)\n    if arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2, start1, mid1, k - mid2 - 1)\n    return find_kth(arr1, arr2, mid1 + 1, end1, k - mid1 - 1)", "code_14": "def get_median(arr1, arr2, n):\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    m1 = find_kth(arr1, arr2, 0, n - 1, n // 2)\n    m2 = find_kth(arr1, arr2, 0, n - 1, n // 2 + 1)\n    return (m1 + m2) / 2", "code_15": "def find_kth(arr1, arr2, start1, end1, k):\n    if end1 - start1 + 1 < k:\n        return find_kth(arr2, arr1, 0, end1, k)\n    if start1 == end1:\n        return arr1[start1] if k == 1 else arr2[k - 1]\n    mid1 = (start1 + end1) // 2\n    mid2 = k - mid1 - 2\n    mid2 = min(mid2, end1)\n    if arr1[mid1] > arr2[mid2]:\n        return find_kth(arr1, arr2, start1, mid1, k - mid2 - 1)\n    return find_kth(arr1, arr2, mid1 + 1, end1, k - mid1 - 1)", "code_16": "def get_median(arr1, arr2, n):\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    m1 = find_kth(arr1, arr2, 0, n - 1, n // 2)\n    m2 = find_kth(arr1, arr2, 0, n - 1, n // 2 + 1)\n    return (m1 + m2) / 2", "code_17": "def find_kth(arr1, arr2, start1, end1, k):\n    if end1 - start1 + 1 >= k:\n        mid1 = (start1 + end1) // 2\n        mid2 = k - mid1 - 2\n        mid2 = min(mid2, end1)\n        if arr1[mid1] > arr2[mid2]:\n            return find_kth(arr1, arr2, start1, mid1, k - mid2 - 1)\n        return find_kth(arr1, arr2, mid1 + 1, end1, k - mid1 - 1)\n    return find_kth(arr2, arr1, 0, end1, k)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/623", "prompt": "\n\ndef nth_nums(nums,n):\n \"\"\"\n Write a function to find the n-th power of individual elements in a list using lambda function.\n >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)\n [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n >>> nth_nums([10,20,30],3)\n ([1000, 8000, 27000])\n >>> nth_nums([12,15],5)\n ([248832, 759375])\n \"\"\"\n", "solution": " \n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def nth_nums(nums, n): return [i**n for i in nums]", "code_2": "def nth_nums(nums, n): return list(map(lambda x: x**n, nums))", "code_3": "def nth_nums(nums, n): return [pow(i, n) for i in nums]", "code_4": "def nth_nums(nums, n): return list(map(pow, nums, [n]*len(nums)))", "code_5": "from operator import pow\ndef nth_nums(nums, n): return list(map(pow, nums, [n]*len(nums)))", "code_6": "import numpy as np\ndef nth_nums(nums, n): return np.power(nums, n).tolist()", "code_7": "def nth_nums(nums, n): return [x*x for x in nums] if n==2 else [i**n for i in nums]", "code_8": "def nth_nums(nums, n): return [x*x for x in nums] if n==2 else list(map(lambda x: x**n, nums))", "code_9": "def nth_nums(nums, n): return [x*x for x in nums] if n==2 else [pow(i, n) for i in nums]", "code_10": "def nth_nums(nums, n): return [x*x for x in nums] if n==2 else list(map(pow, nums, [n]*len(nums)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/624", "prompt": "\n\ndef is_upper(string):\n  \"\"\"\n  Write a python function to convert the given string to upper case.\n  >>> is_upper(\"person\")\n  \"PERSON\"\n  >>> is_upper(\"final\")\n  \"FINAL\"\n  >>> is_upper(\"Valid\")\n  \"VALID\"\n  \"\"\"\n", "solution": "  \n  return (string.upper())", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return string.upper()`", "code_2": "`return ''.join(chr(ord(c) - 32) if 97 <= ord(c) <= 122 else c for c in string)`", "code_3": "`return ''.join(map(lambda c: chr(ord(c) - 32) if 97 <= ord(c) <= 122 else c, string))`", "code_4": "`return ''.join([c.upper() for c in string])`", "code_5": "`return ''.join(c.upper() if c.islower() else c for c in string)`", "code_6": "`return ''.join(map(str.upper, string))`", "code_7": "`return string.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'))`", "code_8": "`return ''.join([chr(i) for i in [ord(j) - 32 if ord(j) >= 97 and ord(j) <= 122 else ord(j) for j in string]])`", "code_9": "`return ''.join([chr(i ^ 32) if i >= 97 and i <= 122 else chr(i) for i in map(ord, string)])`", "code_10": "`return ''.join([chr(i) if i < 97 else chr(i - 32) for i in map(ord, string)])`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/625", "prompt": "\n\ndef swap_List(newList):\n    \"\"\"\n    Write a python function to interchange first and last elements in a given list.\n    >>> swap_List([1,2,3])\n    [3,2,1]\n    >>> swap_List([1,2,3,4,4])\n    [4,2,3,4,1]\n    >>> swap_List([4,5,6])\n    [6,5,4]\n    \"\"\"\n", "solution": "     \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_2": "def swap_List(newList):\n    newList[:1] = [newList[-1]]\n    newList[-1:] = [newList[0]]\n    return newList", "code_3": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_4": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_5": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_6": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_7": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_8": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_9": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "code_10": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/626", "prompt": "\n\ndef triangle_area(r) :\n    \"\"\"\n    Write a python function to find the largest triangle that can be inscribed in the semicircle.\n    >>> triangle_area(0)\n    0\n    >>> triangle_area(-1)\n    -1\n    >>> triangle_area(2)\n    4\n    \"\"\"\n", "solution": "      \n    if r < 0 : \n        return -1\n    return r * r ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef triangle_area(r): return 0 if r <= 0 else r * r * math.sqrt(3) / 4", "code_2": "import math\ndef triangle_area(r): return max(0, r * r * math.sqrt(3) / 4)", "code_3": "from math import sqrt\ndef triangle_area(r): return (r > 0) * r * r * sqrt(3) / 4", "code_4": "from math import sqrt\ndef triangle_area(r): return (r <= 0) * -1 or r * r * sqrt(3) / 4", "code_5": "from math import sqrt\ndef triangle_area(r): return r * r * sqrt(3) / 4 if r > 0 else -1 if r < 0 else 0", "code_6": "from math import sqrt\ndef triangle_area(r): return r * r * sqrt(3) / 4 if r > 0 else r", "code_7": "from math import sqrt\ndef triangle_area(r): return max(0, r) * r * sqrt(3) / 4", "code_8": "from math import sqrt\ndef triangle_area(r): return (r > 0) and r * r * sqrt(3) / 4 or r", "code_9": "from math import sqrt\ndef triangle_area(r): return r * r * sqrt(3) / 4 if r > 0 else 0 if r == 0 else -1", "code_10": "from math import sqrt\ndef triangle_area(r): return r * r * sqrt(3) / 4 if r > 0 else r if r == 0 else -1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/627", "prompt": "\n\ndef find_First_Missing(array,start,end):\n    \"\"\"\n    Write a python function to find the smallest missing number from the given array.\n    >>> find_First_Missing([0,1,2,3],0,3)\n    4\n    >>> find_First_Missing([0,1,2,6,9],0,4)\n    3\n    >>> find_First_Missing([2,3,5,8,9],0,4)\n    0\n    \"\"\"\n", "solution": "     \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) ", "results": [1, 1, 1, 0, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def find_First_Missing(array, start, end):\n    n = end + 1\n    present = [False] * n\n    for i in array:\n        if i >= 0 and i < n:\n            present[i] = True\n    for i in range(n):\n        if not present[i]:\n            return i\n    return n", "code_2": "def find_First_Missing(array, start, end):\n    array.sort()\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1", "code_3": "def find_First_Missing(array, start, end):\n    s = set(array)\n    for i in range(start, end + 1):\n        if i not in s:\n            return i\n    return end + 1", "code_4": "def find_First_Missing(array, start, end):\n    return set(range(start, end + 1)) - set(array).pop()", "code_5": "def find_First_Missing(array, start, end):\n    return next(x for x in range(start, end + 1) if x not in array)", "code_6": "def find_First_Missing(array, start, end):\n    array.sort()\n    if array[0] != start:\n        return start\n    for i in range(1, len(array)):\n        if array[i] != array[i - 1] + 1:\n            return array[i - 1] + 1\n    return array[-1] + 1", "code_7": "def find_First_Missing(array, start, end):\n    array.sort()\n    if array[0] != start:\n        return start\n    for i in range(1, len(array)):\n        if array[i] - array[i - 1] > 1:\n            return array[i - 1] + 1\n    return array[-1] + 1", "code_8": "def find_First_Missing(array, start, end):\n    array = sorted(set(array))\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1", "code_9": "def find_First_Missing(array, start, end):\n    array = sorted(set(array))\n    return next((x for x in range(start, end + 1) if x not in array), end + 1)", "code_10": "def find_First_Missing(array, start, end):\n    array = sorted(set(array))\n    return [x for x in range(start, end + 1) if x not in array][0]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7564477297898766}
{"task_id": "MBPP/628", "prompt": "\n\ndef replace_spaces(string):\n  \"\"\"\n  Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n  >>> replace_spaces(\"My Name is Dawood\")\n  'My%20Name%20is%20Dawood'\n  >>> replace_spaces(\"I am a Programmer\")\n  'I%20am%20a%20Programmer'\n  >>> replace_spaces(\"I love Coding\")\n  'I%20love%20Coding'\n  \"\"\"\n", "solution": "  MAX=1000;\n  \n  string=string.strip()\n  i=len(string)\n  space_count=string.count(' ')\n  new_length = i + space_count*2\n  if new_length > MAX:\n    return -1\n  index = new_length-1\n  string=list(string)\n  for f in range(i-2, new_length-2):\n    string.append('0')\n  for j in range(i-1, 0, -1):\n    if string[j] == ' ':\n      string[index] = '0'\n      string[index-1] = '2'\n      string[index-2] = '%'\n      index=index-3\n    else:\n      string[index] = string[j]\n      index -= 1\n  return ''.join(string)", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")", "code_2": "def replace_spaces(string):\n    return \"%20\".join(string.split(\" \"))", "code_3": "def replace_spaces(string):\n    return \"\".join([\"%20\" if char == \" \" else char for char in string])", "code_4": "import re\ndef replace_spaces(string):\n    return re.sub(\" \", \"%20\", string)", "code_5": "def replace_spaces(string):\n    return string.translate(str.maketrans(\" \", \"%20\"))", "code_6": "def replace_spaces(string):\n    return \"*\".join(string.split(\" \")).replace(\"*\", \"%20\")", "code_7": "def replace_spaces(string):\n    return \"\".join(map(lambda x: \"%20\" if x == \" \" else x, string))", "code_8": "def replace_spaces(string):\n    return \"\".join([\"%20\" if c == \" \" else c for c in list(string)])", "code_9": "def replace_spaces(string):\n    return \"\".join([\"%20\" if s == \" \" else s for s in string])", "code_10": "def replace_spaces(string):\n    return \"\".join([\"%20\" if char.isspace() else char for char in string])", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/629", "prompt": "\n\ndef Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a mixed list.\n    >>> Split([1,2,3,4,5])\n    [2,4]\n    >>> Split([4,5,6,7,8,0,1])\n    [4,6,8,0]\n    >>> Split ([8,12,15,19])\n    [8,12]\n    \"\"\"\n", "solution": "     \n    ev_li = [] \n    for i in list: \n        if (i % 2 == 0): \n            ev_li.append(i)  \n    return ev_li", "results": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def Split(lst):\n    return [x for x in lst if x % 2 == 0]", "code_2": "def Split(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))", "code_3": "def Split(lst):\n    return [x for x in lst if not x & 1]", "code_4": "def Split(lst):\n    return [x for i, x in enumerate(lst) if not i % 2]", "code_5": "def Split(lst):\n    return [x for x in lst if bin(x)[-1] == '0']", "code_6": "def Split(lst):\n    return [x for x in lst if ~x & 1]", "code_7": "def Split(lst):\n    return [x for x in lst if x >> 1 << 1 == x]", "code_8": "def Split(lst):\n    return [x for x in lst if x - 2 * (x // 2) == 0]", "code_9": "def Split(lst):\n    return [x for x in lst if x and not x & 1]", "code_10": "def Split(lst):\n    return [x for x in lst if x & -2 == x]", "pass@3": 1.0, "nDCG@10": 0.8389574121760603}
{"task_id": "MBPP/630", "prompt": "\n\ndef get_coordinates(test_tup):\n  \"\"\"\n  Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n  >>> get_coordinates((3, 4))\n  [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n  >>> get_coordinates((4, 5))\n  [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n  >>> get_coordinates((5, 6))\n  [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n  \"\"\"\n", "solution": "  def adjac(ele, sub = []): \n    if not ele: \n       yield sub \n    else: \n       yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                  for idx in adjac(ele[1:], sub + [j])] \n  \n  res = list(adjac(test_tup))\n  return (res) ", "results": [1, 1, 0, 0, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_coordinates(tup):\n    return [[i, j] for i in range(tup[0]-1, tup[0]+2) for j in range(tup[1]-1, tup[1]+2)]", "code_2": "def get_coordinates(tup):\n    x, y = tup\n    return [[i, j] for i in range(x-1, x+2) for j in range(y-1, y+2)]", "code_3": "def get_coordinates(tup):\n    return [list(t) for t in itertools.product(range(tup[0]-1, tup[0]+2), range(tup[1]-1, tup[1]+2))]", "code_4": "def get_coordinates(tup):\n    return [[x, y] for x in range(tup[0]-1, tup[0]+2) for y in range(tup[1]-1, tup[1]+2) if (x, y) != tup]", "code_5": "def get_coordinates(tup):\n    return [[i, j] for i in range(tup[0]-1, tup[0]+2) for j in range(tup[1]-1, tup[1]+2) if [i, j] != tup]", "code_6": "def get_coordinates(tup):\n    return [[tup[0]+i, tup[1]+j] for i in range(-1, 2) for j in range(-1, 2)]", "code_7": "def get_coordinates(tup):\n    return [[tup[0]+i, tup[1]+j] for i in [-1, 0, 1] for j in [-1, 0, 1]]", "code_8": "def get_coordinates(tup):\n    return [[tup[0]+i, tup[1]+j] for i in range(3) for j in range(3) if i != 1 or j != 1]", "code_9": "def get_coordinates(tup):\n    return [[tup[0]+i, tup[1]+j] for i in range(-1, 2) for j in range(-1, 2) if i != 0 or j != 0]", "code_10": "def get_coordinates(tup):\n    return [[tup[0]+i, tup[1]+j] for i in range(3) for j in range(3) if [tup[0]+i, tup[1]+j] != tup]", "pass@3": 0.9166666666666666, "nDCG@10": 0.5958595188912911}
{"task_id": "MBPP/631", "prompt": "\n\ndef replace_spaces(text):\n  \"\"\"\n  Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n  >>> replace_spaces('Jumanji The Jungle')\n  'Jumanji_The_Jungle'\n  >>> replace_spaces('The Avengers')\n  'The_Avengers'\n  >>> replace_spaces('Fast and Furious')\n  'Fast_and_Furious'\n  \"\"\"\n", "solution": "  import re\n  text = 'Python Exercises'\n  \n  text =text.replace (\" \", \"_\")\n  return (text)\n  text =text.replace (\"_\", \" \")\n  return (text)", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef replace_spaces(text):\n    return re.sub(r'\\s+|_+', lambda x: '_' if x.group(0) == ' ' else ' ', text)", "code_2": "import re\ndef replace_spaces(text):\n    return re.sub(r'\\s+', '_', re.sub(r'_+', ' ', text))", "code_3": "import re\ndef replace_spaces(text):\n    return re.sub(r'\\s+|_+', lambda x: ' ' if x.group(0).startswith('_') else '_', text)", "code_4": "import re\ndef replace_spaces(text):\n    return re.sub(r'\\s+', '_', text).replace('__', '_').replace(' _', '_').replace('_ ', '_')", "code_5": "import re\ndef replace_spaces(text):\n    return '_'.join(text.split())", "code_6": "import re\ndef replace_spaces(text):\n    return ' '.join(text.split('_'))", "code_7": "import re\ndef replace_spaces(text):\n    return ''.join(['_' if c == ' ' else ' ' if c == '_' else c for c in text])", "code_8": "import re\ndef replace_spaces(text):\n    return text.translate(str.maketrans(' _', '_ '))", "code_9": "import re\ndef replace_spaces(text):\n    return ''.join([c if c.isalnum() else '_' for c in text])", "code_10": "import re\ndef replace_spaces(text):\n    return ''.join([c if c.isalpha() or c.isdigit() else '_' for c in text])", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/632", "prompt": "\n\ndef move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    >>> move_zero([1,0,2,0,3,4])\n    [1,2,3,4,0,0]\n    >>> move_zero([2,3,2,0,0,4,0,5,0])\n    [2,3,2,4,5,0,0,0,0]\n    >>> move_zero([0,1,0,1,1])\n    [1,1,1,0,0]\n    \"\"\"\n", "solution": "    \n    a = [0 for i in range(num_list.count(0))]\n    x = [ i for i in num_list if i != 0]\n    x.extend(a)\n    return (x)", "results": [1, 1, 1, 1, 0, 0, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def move_zero(num_list):\n    return [i for i in num_list if i != 0] + [i for i in num_list if i == 0]", "code_2": "def move_zero(num_list):\n    num_list.sort(key=lambda x: x == 0)\n    return num_list", "code_3": "def move_zero(num_list):\n    i = 0\n    for num in num_list:\n        if num != 0:\n            num_list[i] = num\n            i += 1\n    for j in range(i, len(num_list)):\n        num_list[j] = 0\n    return num_list", "code_4": "def move_zero(num_list):\n    num_list[:] = [i for i in num_list if i != 0] + [0] * num_list.count(0)\n    return num_list", "code_5": "def move_zero(num_list):\n    num_list.sort(key=lambda x: x == 0, reverse=True)\n    return num_list", "code_6": "def move_zero(num_list):\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n        else:\n            i += 1\n    return num_list", "code_7": "def move_zero(num_list):\n    num_list[:] = sorted(num_list, key=lambda x: x == 0)\n    return num_list", "code_8": "def move_zero(num_list):\n    i = 0\n    for j in range(len(num_list)):\n        if num_list[j] != 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n    return num_list", "code_9": "def move_zero(num_list):\n    num_list[:] = [num for num in num_list if num != 0] + [0] * num_list.count(0)\n    return num_list", "code_10": "def move_zero(num_list):\n    num_list[:] = [i for i in num_list if i != 0]\n    num_list.extend([0] * (len(num_list) - i))\n    return num_list", "pass@3": 0.9916666666666667, "nDCG@10": 0.7728378251807521}
{"task_id": "MBPP/633", "prompt": "\n\ndef pair_OR_Sum(arr,n) :\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given array.\n    >>> pair_OR_Sum([5,9,7,6],4)\n    47\n    >>> pair_OR_Sum([7,3,5],3)\n    12\n    >>> pair_OR_Sum([7,3],2)\n    4\n    \"\"\"\n", "solution": "     \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ", "results": [1, 1, 1, 1, 1, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = 0\n        for j in range(n):\n            if arr[j] & (1 << i):\n                count += 1\n        res += (count * (n - count) * (1 << i))\n    return res", "code_2": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(1 for j in range(n) if arr[j] & (1 << i))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_3": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = len([j for j in range(n) if arr[j] & (1 << i)])\n        res += (count * (n - count) * (1 << i))\n    return res", "code_4": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(arr[j] & (1 << i) > 0 for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_5": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(bool(arr[j] & (1 << i)) for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_6": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(arr[j] >> i & 1 for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_7": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(bin(arr[j])[-i-1] == '1' for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_8": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(arr[j] & (1 << i) for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_9": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(arr[j] >> i & 1 for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "code_10": "def pair_OR_Sum(arr,n):\n    res = 0\n    for i in range(31, -1, -1):\n        count = sum(bin(arr[j])[-i-1] == '1' for j in range(n))\n        res += (count * (n - count) * (1 << i))\n    return res", "pass@3": 0.9916666666666667, "nDCG@10": 0.793584067764911}
{"task_id": "MBPP/634", "prompt": "\n\ndef even_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    >>> even_Power_Sum(2)\n    272\n    >>> even_Power_Sum(3)\n    1568\n    >>> even_Power_Sum(4)\n    5664\n    \"\"\"\n", "solution": "     \n    sum = 0; \n    for i in range(1,n + 1): \n        j = 2*i; \n        sum = sum + (j*j*j*j); \n    return sum; ", "results": [1, 0, 0, 0, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def even_Power_Sum(n):\n    return sum(i**4 for i in range(2, 2*n+1, 2))", "code_2": "def even_Power_Sum(n):\n    return 2*sum(i**4 for i in range(1, n+1))", "code_3": "def even_Power_Sum(n):\n    return 2*sum(map(lambda x: x**4, range(1, n+1)))", "code_4": "def even_Power_Sum(n):\n    return 2*sum([i**4 for i in range(1, n+1)])", "code_5": "def even_Power_Sum(n):\n    return sum([(2*i)**4 for i in range(1, n+1)])", "code_6": "def even_Power_Sum(n):\n    return sum([i**4 for i in range(2, 2*n+1, 2)])", "code_7": "def even_Power_Sum(n):\n    return sum([i**4 for i in range(1, n+1)])*2", "code_8": "def even_Power_Sum(n):\n    return sum([(i*2)**4 for i in range(1, n+1)])", "code_9": "def even_Power_Sum(n):\n    return sum([pow(i*2, 4) for i in range(1, n+1)])", "code_10": "def even_Power_Sum(n):\n    return sum([i**4 for i in [2*i for i in range(1, n+1)]])", "pass@3": 0.9666666666666667, "nDCG@10": 0.5829393865084945}
{"task_id": "MBPP/635", "prompt": "\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to push all values into a heap and then pop off the smallest values one at a time.\n    >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    >>> heap_sort( [7, 1, 9, 5])\n    [1,5,7,9]\n    \"\"\"\n", "solution": "    import heapq as hq\n    \n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import heapq\ndef heap_sort(iterable):\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "code_2": "import heapq\ndef heap_sort(iterable):\n    return sorted(iterable)", "code_3": "import heapq\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_4": "import heapq\ndef heap_sort(iterable):\n    return list(heapq.merge(*([iterable[i::len(iterable)]] for i in range(len(iterable)))))", "code_5": "import heapq\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_6": "import heapq\ndef heap_sort(iterable):\n    heap = iterable[:]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_7": "import heapq\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_8": "import heapq\ndef heap_sort(iterable):\n    heap = iterable[:]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_9": "import heapq\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "code_10": "import heapq\ndef heap_sort(iterable):\n    heap = iterable[:]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(len(heap))]", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/636", "prompt": "\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\n    >>> Check_Solution(2,0,2)\n    \"Yes\"\n    >>> Check_Solution(2,-5,2)\n    \"Yes\"\n    >>> Check_Solution(1,2,3)\n    \"No\"\n    \"\"\"\n", "solution": "     \n    if (a == c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    elif d == 0:\n        r = -b / (2*a)\n        return \"Yes\" if r != 0 and 1/r == r else \"No\"\n    else:\n        r1 = (-b + d**0.5) / (2*a)\n        r2 = (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1 != 0 and r1 == 1/r2 else \"No\"", "code_2": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = (-b - d**0.5) / (2*a)\n    return \"Yes\" if r1 != 0 and r1 == 1/r2 else \"No\"", "code_3": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = 1 / r1 if r1 != 0 else 0\n    return \"Yes\" if r2 != 0 and r1 == r2 else \"No\"", "code_4": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    return \"Yes\" if r1 != 0 and r1 * r1 == 1 else \"No\"", "code_5": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = 1 / r1\n    return \"Yes\" if r1 * r2 == 1 else \"No\"", "code_6": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = (-b - d**0.5) / (2*a)\n    return \"Yes\" if abs(r1 * r2 - 1) < 1e-9 else \"No\"", "code_7": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = 1 / r1\n    return \"Yes\" if abs(r1 * r2 - 1) < 1e-9 else \"No\"", "code_8": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = (-b - d**0.5) / (2*a)\n    return \"Yes\" if r1 != 0 and abs(r1 * r2 - 1) < 1e-9 else \"No\"", "code_9": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = 1 / r1\n    return \"Yes\" if r1 != 0 and abs(r1 * r2 - 1) < 1e-9 else \"No\"", "code_10": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r1 = (-b + d**0.5) / (2*a)\n    r2 = 1 / r1 if r1 != 0 else 0\n    return \"Yes\" if r2 != 0 and abs(r1 * r2 - 1) < 1e-9 else \"No\"", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/637", "prompt": "\n\ndef noprofit_noloss(actual_cost,sale_amount):\n  \"\"\"\n  Write a function to check whether the given amount has no profit and no loss\n  >>> noprofit_noloss(1500,1200)\n  False\n  >>> noprofit_noloss(100,100)\n  True\n  >>> noprofit_noloss(2000,5000)\n  False\n  \"\"\"\n", "solution": "   \n  if(sale_amount == actual_cost):\n    return True\n  else:\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount", "code_2": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False", "code_3": "def noprofit_noloss(actual_cost, sale_amount):\n    return not (actual_cost < sale_amount or actual_cost > sale_amount)", "code_4": "def noprofit_noloss(actual_cost, sale_amount):\n    return bool(actual_cost - sale_amount == 0)", "code_5": "def noprofit_noloss(actual_cost, sale_amount):\n    return abs(actual_cost - sale_amount) == 0", "code_6": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost - sale_amount == 0 and sale_amount - actual_cost == 0", "code_7": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost <= sale_amount and actual_cost >= sale_amount", "code_8": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount and sale_amount == actual_cost", "code_9": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost is sale_amount", "code_10": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost.__eq__(sale_amount)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/638", "prompt": "\n\ndef wind_chill(v,t):\n \"\"\"\n Write a function to calculate wind chill index.\n >>> wind_chill(120,35)\n 40\n >>> wind_chill(40,70)\n 86\n >>> wind_chill(10,100)\n 116\n \"\"\"\n", "solution": " import math\n \n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def wind_chill(v, t): return int(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16))", "code_2": "def wind_chill(v, t): return round(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16))", "code_3": "def wind_chill(v, t): return 35.74 + 0.6215*t - 35.75*pow(v, 0.16) + 0.4275*t*pow(v, 0.16)", "code_4": "def wind_chill(v, t): return int(35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16)", "code_5": "def wind_chill(v, t): return round(35.74 + 0.6215*t - 35.75*v**0.16 + 0.4275*t*v**0.16)", "code_6": "def wind_chill(v, t): return 35.74 + 0.6215*t - 35.75*pow(v, 0.16) + 0.4275*t*pow(v, 0.16)", "code_7": "def wind_chill(v, t): return int(35.74 + 0.6215*t - 35.75*pow(v, 0.16) + 0.4275*t*pow(v, 0.16))", "code_8": "def wind_chill(v, t): return round(35.74 + 0.6215*t - 35.75*pow(v, 0.16) + 0.4275*t*pow(v, 0.16))", "code_9": "def wind_chill(v, t): return int(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16))", "code_10": "def wind_chill(v, t): return round(35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/639", "prompt": "\n\ndef sample_nam(sample_names):\n  \"\"\"\n  Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n  >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n  16\n  >>> sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n  10\n  >>> sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n  6\n  \"\"\"\n", "solution": "  \n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())", "code_2": "def sample_nam(sample_names):\n    return sum(map(len, filter(lambda name: name[0].isupper(), sample_names)))", "code_3": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name.istitle())", "code_4": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].islower() is False)", "code_5": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isalpha() and name[0].isupper())", "code_6": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if ord(name[0]) < 97)", "code_7": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0] != name[0].lower())", "code_8": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0] >= 'A' and name[0] <= 'Z')", "code_9": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')", "code_10": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0] in string.ascii_uppercase)", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/640", "prompt": "\n\ndef remove_parenthesis(items):\n \"\"\"\n Write a function to remove the parenthesis area in a string.\n >>> remove_parenthesis([\"python (chrome)\"])\n (\"python\")\n >>> remove_parenthesis([\"string(.abc)\"])\n (\"string\")\n >>> remove_parenthesis([\"alpha(num)\"])\n (\"alpha\")\n \"\"\"\n", "solution": " import re\n \n for item in items:\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_parenthesis(items):\n    return [item.split('(')[0] for item in items]", "code_2": "def remove_parenthesis(items):\n    return [item[:item.index('(')] if '(' in item else item for item in items]", "code_3": "import re\ndef remove_parenthesis(items):\n    return [re.sub(r'\\(.*\\)', '', item) for item in items]", "code_4": "def remove_parenthesis(items):\n    return [item.partition('(')[0] for item in items]", "code_5": "def remove_parenthesis(items):\n    return [''.join(item.split('(')) for item in items]", "code_6": "def remove_parenthesis(items):\n    return [item.rpartition('(')[0] for item in items]", "code_7": "def remove_parenthesis(items):\n    return [item.rsplit('(', 1)[0] for item in items]", "code_8": "def remove_parenthesis(items):\n    return [item.replace(item[item.index('('):item.index(')')+1], '') for item in items]", "code_9": "def remove_parenthesis(items):\n    return [item.split('(')[0] + item.split(')')[-1] for item in items]", "code_10": "def remove_parenthesis(items):\n    return [item[:item.find('(')] + item[item.find(')')+1:] for item in items]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/641", "prompt": "\n\ndef is_nonagonal(n):\n\t\"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t>>> is_nonagonal(10)\n\t325\n\t>>> is_nonagonal(15)\n\t750\n\t>>> is_nonagonal(18)\n\t1089\n\t\"\"\"\n", "solution": "\t \n\treturn int(n * (7 * n - 5) / 2) ", "results": [1, 1, 0, 0, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_nonagonal(n): return n * (7 * n - 5) // 2", "code_2": "is_nonagonal = lambda n: n * (7 * n - 5) // 2", "code_3": "def is_nonagonal(n): return (n << 3) - n + (n >> 1)", "code_4": "is_nonagonal = lambda n: (n << 3) - n + (n >> 1)", "code_5": "def is_nonagonal(n): return (n * 7 - 5) * n // 2", "code_6": "is_nonagonal = lambda n: (n * 7 - 5) * n // 2", "code_7": "def is_nonagonal(n): return n * (35 * n - 10) >> 2", "code_8": "is_nonagonal = lambda n: n * (35 * n - 10) >> 2", "code_9": "def is_nonagonal(n): return n * (n * 7 - 1) * 2", "code_10": "is_nonagonal = lambda n: n * (n * 7 - 1) * 2", "pass@3": 0.8333333333333334, "nDCG@10": 0.5224955967919311}
{"task_id": "MBPP/642", "prompt": "\n\ndef remove_similar_row(test_list):\n  \"\"\"\n  Write a function to remove similar rows from the given tuple matrix.\n  >>> remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] )\n  {((4, 6), (2, 2)), ((4, 5), (3, 2))}\n  >>> remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] )\n  {((5, 6), (4, 3)), ((5, 7), (3, 3))}\n  >>> remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] )\n  {((5, 4), (6, 7)), ((4, 4), (6, 8))}\n  \"\"\"\n", "solution": "  \n  res = set([tuple(set(sub)) for sub in test_list])\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_similar_row(test_list):\n    return {tuple(sorted(sub)) for sub in test_list}", "code_2": "def remove_similar_row(test_list):\n    return set(map(tuple, map(sorted, test_list)))", "code_3": "def remove_similar_row(test_list):\n    return {frozenset(sub) for sub in test_list}", "code_4": "def remove_similar_row(test_list):\n    return set(frozenset(sub) for sub in test_list)", "code_5": "def remove_similar_row(test_list):\n    return {tuple(sorted(sub, reverse=True)) for sub in test_list}", "code_6": "def remove_similar_row(test_list):\n    return set(tuple(sorted(sub, reverse=True)) for sub in test_list)", "code_7": "def remove_similar_row(test_list):\n    return {frozenset(sorted(sub)) for sub in test_list}", "code_8": "def remove_similar_row(test_list):\n    return set(frozenset(sorted(sub)) for sub in test_list)", "code_9": "def remove_similar_row(test_list):\n    return {tuple(sorted(sub, key=lambda x: -x)) for sub in test_list}", "code_10": "def remove_similar_row(test_list):\n    return set(tuple(sorted(sub, key=lambda x: -x)) for sub in test_list)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/643", "prompt": "\n\ndef text_match_wordz_middle(text):\n        \"\"\"\n        Write a function that matches a word containing 'z', not at the start or end of the word.\n        >>> text_match_wordz_middle(\"pythonzabc.\")\n        ('Found a match!')\n        >>> text_match_wordz_middle(\"xyzabc.\")\n        ('Found a match!')\n        >>> text_match_wordz_middle(\"  lang  .\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = '\\Bz\\B'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef text_match_wordz_middle(text):\n    return 'Found a match!' if re.search(r'\\Bz\\B', text) else 'Not matched!'", "code_2": "def text_match_wordz_middle(text):\n    for word in text.split():\n        if 'z' in word[1:-1]:\n            return 'Found a match!'\n    return 'Not matched!'", "code_3": "def text_match_wordz_middle(text):\n    return any('z' in word[1:-1] for word in text.split()) and 'Found a match!' or 'Not matched!'", "code_4": "def text_match_wordz_middle(text):\n    return 'Found a match!' if any(word[1:-1].find('z') != -1 for word in text.split()) else 'Not matched!'", "code_5": "def text_match_wordz_middle(text):\n    return 'Found a match!' if any(word[1:-1].count('z') for word in text.split()) else 'Not matched!'", "code_6": "def text_match_wordz_middle(text):\n    return 'Found a match!' if any(filter(lambda word: 'z' in word[1:-1], text.split())) else 'Not matched!'", "code_7": "def text_match_wordz_middle(text):\n    return 'Found a match!' if [word for word in text.split() if 'z' in word[1:-1]] else 'Not matched!'", "code_8": "def text_match_wordz_middle(text):\n    return 'Found a match!' if list(filter(lambda word: 'z' in word[1:-1], text.split())) else 'Not matched!'", "code_9": "def text_match_wordz_middle(text):\n    return 'Found a match!' if [word[1:-1] for word in text.split() if 'z' in word[1:-1]] else 'Not matched!'", "code_10": "def text_match_wordz_middle(text):\n    return 'Found a match!' if list(filter(lambda word: word[1:-1].find('z') != -1, text.split())) else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/644", "prompt": "\n\ndef reverse_Array_Upto_K(input, k):\n  \"\"\"\n  Write a python function to reverse an array upto a given position.\n  >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)\n  [4, 3, 2, 1, 5, 6]\n  >>> reverse_Array_Upto_K([4, 5, 6, 7], 2)\n  [5, 4, 6, 7]\n  >>> reverse_Array_Upto_K([9, 8, 7, 6, 5],3)\n  [7, 8, 9, 6, 5]\n  \"\"\"\n", "solution": "   \n  return (input[k-1::-1] + input[k:]) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def reverse_Array_Upto_K(input, k):\n    input[:k] = input[:k][::-1]\n    return input", "code_2": "def reverse_Array_Upto_K(input, k):\n    for i in range(k//2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input", "code_3": "def reverse_Array_Upto_K(input, k):\n    return input[:k][::-1] + input[k:]", "code_4": "def reverse_Array_Upto_K(input, k):\n    input[:k] = [input[i] for i in range(k-1, -1, -1)]\n    return input", "code_5": "def reverse_Array_Upto_K(input, k):\n    from collections import deque\n    d = deque(input[:k])\n    d.reverse()\n    return list(d) + input[k:]", "code_6": "def reverse_Array_Upto_K(input, k):\n    stack = input[:k]\n    stack.reverse()\n    return stack + input[k:]", "code_7": "def reverse_Array_Upto_K(input, k):\n    input[:k] = list(reversed(input[:k]))\n    return input", "code_8": "def reverse_Array_Upto_K(input, k):\n    input[:k] = [input[i] for i in range(k-1, -1, -1)]\n    return input", "code_9": "def reverse_Array_Upto_K(input, k):\n    for i in range(k//2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n    return input", "code_10": "def reverse_Array_Upto_K(input, k):\n    input[:k] = [input[i] for i in range(k-1, -1, -1)]\n    return input", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/645", "prompt": "\n\ndef find_k_product(test_list, K):\n  \"\"\"\n  Write a function to find the product of it\u2019s kth index in the given tuples.\n  >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n  665\n  >>> find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n  280\n  >>> find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)\n  210\n  \"\"\"\n", "solution": "  def get_product(val) : \n  \tres = 1\n  \tfor ele in val: \n  \t\tres *= ele \n  \treturn res \n  \n  res = get_product([sub[K] for sub in test_list])\n  return (res) ", "results": [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], "no_of_codes": 13, "code_1": "def find_k_product(test_list, K):\n    return prod(t[K] for t in test_list)", "code_2": "from functools import reduce\nfrom operator import mul", "code_3": "def find_k_product(test_list, K):\n    return reduce(mul, (t[K] for t in test_list), 1)", "code_4": "import numpy as np", "code_5": "def find_k_product(test_list, K):\n    return np.prod([t[K] for t in test_list])", "code_6": "def find_k_product(test_list, K):\n    product = 1\n    for t in test_list:\n        product *= t[K]\n    return product", "code_7": "def find_k_product(test_list, K):\n    return eval('*'.join(str(t[K]) for t in test_list))", "code_8": "import math", "code_9": "def find_k_product(test_list, K):\n    return math.prod(t[K] for t in test_list)", "code_10": "def find_k_product(test_list, K):\n    return int(eval('*'.join(str(t[K]) for t in test_list)))", "code_11": "def find_k_product(test_list, K):\n    return int(''.join(str(t[K]) for t in test_list), 2)", "code_12": "def find_k_product(test_list, K):\n    return int(''.join(bin(t[K])[2:] for t in test_list), 2)", "code_13": "def find_k_product(test_list, K):\n    return int(''.join(format(t[K], 'b') for t in test_list), 2)", "pass@3": 0.7083333333333333, "nDCG@10": 0.21538297927698713}
{"task_id": "MBPP/646", "prompt": "\n\ndef No_of_cubes(N,K):\n    \"\"\"\n    Write a python function to count number of cubes of size k in a cube of size n.\n    >>> No_of_cubes(2,1)\n    8\n    >>> No_of_cubes(5,2)\n    64\n    >>> No_of_cubes(1,1)\n    1\n    \"\"\"\n", "solution": "    \n    No = 0\n    No = (N - K + 1)\n    No = pow(No, 3)\n    return No", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def No_of_cubes(N,K): return (N//K)**3", "code_2": "def No_of_cubes(N,K): return pow(N//K, 3)", "code_3": "def No_of_cubes(N,K): return int((N/K)**3)", "code_4": "def No_of_cubes(N,K): return (N/K)**3 // 1", "code_5": "def No_of_cubes(N,K): return int(pow(N/K, 3))", "code_6": "def No_of_cubes(N,K): return int(round((N/K)**3))", "code_7": "def No_of_cubes(N,K): return int(math.pow(N/K, 3))", "code_8": "def No_of_cubes(N,K): return math.floor((N/K)**3)", "code_9": "def No_of_cubes(N,K): return math.trunc((N/K)**3)", "code_10": "def No_of_cubes(N,K): return divmod(N,K)[0]**3", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/647", "prompt": "\n\ndef split_upperstring(text):\n \"\"\"\n Write a function to split a string at uppercase letters.\n >>> split_upperstring(\"PythonProgramLanguage\")\n ['Python','Program','Language']\n >>> split_upperstring(\"PythonProgram\")\n ['Python','Program']\n >>> split_upperstring(\"ProgrammingLanguage\")\n ['Programming','Language']\n \"\"\"\n", "solution": " import re\n \n return (re.findall('[A-Z][^A-Z]*', text))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension and enumerate:\ndef split_upperstring(text):\n    return [text[i:j] for i, j in enumerate([0] + [i for i, c in enumerate(text) if c.isupper()])]", "code_2": "Using regular expressions:\nimport re\ndef split_upperstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)", "code_3": "Using a loop and a stack:\ndef split_upperstring(text):\n    result = []\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return result", "code_4": "Using a loop and a list:\ndef split_upperstring(text):\n    result = []\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return result", "code_5": "Using a loop and a deque:\nfrom collections import deque\ndef split_upperstring(text):\n    result = deque()\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return list(result)", "code_6": "Using a loop and a string join:\ndef split_upperstring(text):\n    result = []\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return ' '.join(result).split()", "code_7": "Using a loop and a list of indices:\ndef split_upperstring(text):\n    indices = [i for i, c in enumerate(text) if c.isupper()]\n    return [text[i:j] for i, j in zip([0] + indices, indices + [None])]", "code_8": "Using a loop and a list of slices:\ndef split_upperstring(text):\n    slices = [slice(i, j) for i, j in zip([0] + [i for i, c in enumerate(text) if c.isupper()], [i for i, c in enumerate(text) if c.isupper()] + [None])]\n    return [text[s] for s in slices]", "code_9": "Using a loop and a list of ranges:\ndef split_upperstring(text):\n    ranges = [range(i, j) for i, j in zip([0] + [i for i, c in enumerate(text) if c.isupper()], [i for i, c in enumerate(text) if c.isupper()] + [None])]\n    return [text[i:j] for r in ranges for i in r]", "code_10": "Using a loop and a list of substrings:\ndef split_upperstring(text):\n    substrings = []\n    start = 0\n    for i in range(1, len(text)):\n        if text[i].isupper():\n            substrings.append(text[start:i])\n            start = i\n    substrings.append(text[start:])\n    return substrings", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/648", "prompt": "\n\ndef exchange_elements(lst):\n    \"\"\"\n    Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n    >>> exchange_elements([0,1,2,3,4,5])\n    [1, 0, 3, 2, 5, 4]\n    >>> exchange_elements([5,6,7,8,9,10])\n    [6,5,8,7,10,9]\n    >>> exchange_elements([25,35,45,55,75,95])\n    [35,25,55,45,95,75]\n    \"\"\"\n", "solution": "    from itertools import zip_longest, chain, tee\n    \n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def exchange_elements(lst):\n    for i in range(0, len(lst), 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst", "code_2": "def exchange_elements(lst):\n    return [lst[i^1] if i%2==0 else lst[i^1-2] for i in range(len(lst))]", "code_3": "def exchange_elements(lst):\n    return [lst[i-1] if i%2 else lst[i+1] for i in range(len(lst))]", "code_4": "def exchange_elements(lst):\n    return [lst[i+1] if i%2==0 else lst[i-1] for i in range(len(lst))]", "code_5": "def exchange_elements(lst):\n    return [lst[i^1] if i%2 else lst[i^1] for i in range(len(lst))]", "code_6": "def exchange_elements(lst):\n    return [lst[i+1 if i%2==0 else i-1] for i in range(len(lst))]", "code_7": "def exchange_elements(lst):\n    return [lst[i+(-1)**i] for i in range(len(lst))]", "code_8": "def exchange_elements(lst):\n    return [lst[i+1] if i%2==0 else lst[i-1] for i in range(len(lst))]", "code_9": "def exchange_elements(lst):\n    return [lst[i^1] if i%2==0 else lst[i-1] for i in range(len(lst))]", "code_10": "def exchange_elements(lst):\n    return [lst[i+1 if i%2==0 else i-1] for i in range(len(lst))]", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/649", "prompt": "\n\ndef sum_Range_list(nums, m, n):\n    \"\"\"\n    Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\n    >>> sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10)\n    29\n    >>> sum_Range_list([1,2,3,4,5],1,2)\n    5\n    >>> sum_Range_list([1,0,1,2,5,6],4,5)\n    11\n    \"\"\"\n", "solution": "                                                                                                                                                                                                    \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += nums[i]                                                                                                                                                                                                  \n    return sum_range   ", "results": [1, 1, 0, 0, 0, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1])", "code_2": "def sum_Range_list(nums, m, n):\n    return sum(nums[i] for i in range(m, n+1))", "code_3": "def sum_Range_list(nums, m, n):\n    return reduce(lambda a, b: a + b, nums[m:n+1])", "code_4": "def sum_Range_list(nums, m, n):\n    return sum(itertools.islice(nums, m, n+1))", "code_5": "def sum_Range_list(nums, m, n):\n    return np.sum(nums[m:n+1])", "code_6": "def sum_Range_list(nums, m, n):\n    return pd.Series(nums[m:n+1]).sum()", "code_7": "def sum_Range_list(nums, m, n):\n    return functools.reduce(operator.add, nums[m:n+1])", "code_8": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1]) if m < n else 0", "code_9": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1]) if 0 <= m < len(nums) and 0 <= n < len(nums) else None", "code_10": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1]) if m <= n and 0 <= m < len(nums) else None", "pass@3": 0.9166666666666666, "nDCG@10": 0.5582604437617529}
{"task_id": "MBPP/650", "prompt": "\n\ndef are_Equal(arr1,arr2,n,m):\n    \"\"\"\n    Write a python function to check whether the given two arrays are equal or not.\n    >>> are_Equal([1,2,3],[3,2,1],3,3)\n    True\n    >>> are_Equal([1,1,1],[2,2,2],3,3)\n    False\n    >>> are_Equal([8,9],[4,5,6],2,3)\n    False\n    \"\"\"\n", "solution": "    \n    if (n != m):\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0,n - 1):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True", "results": [1, 0, 1, 1, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def are_Equal(arr1, arr2, n, m):\n    return n == m and sorted(arr1) == sorted(arr2)", "code_2": "def are_Equal(arr1, arr2, n, m):\n    return Counter(arr1) == Counter(arr2)", "code_3": "def are_Equal(arr1, arr2, n, m):\n    return set(arr1) == set(arr2) and len(arr1) == len(arr2)", "code_4": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    count = {}\n    for i in range(n):\n        count[arr1[i]] = count.get(arr1[i], 0) + 1\n        count[arr2[i]] = count.get(arr2[i], 0) - 1\n    return all(value == 0 for value in count.values())", "code_5": "def are_Equal(arr1, arr2, n, m):\n    return n == m and all(a == b for a, b in zip(sorted(arr1), sorted(arr2)))", "code_6": "def are_Equal(arr1, arr2, n, m):\n    return n == m and sum(arr1) == sum(arr2) and sum(x*x for x in arr1) == sum(x*x for x in arr2)", "code_7": "def are_Equal(arr1, arr2, n, m):\n    return n == m and np.array_equal(np.sort(arr1), np.sort(arr2))", "code_8": "def are_Equal(arr1, arr2, n, m):\n    return n == m and pd.Series(arr1).sort_values().equals(pd.Series(arr2).sort_values())", "code_9": "def are_Equal(arr1, arr2, n, m):\n    return n == m and collections.Counter(arr1) == collections.Counter(arr2)", "code_10": "def are_Equal(arr1, arr2, n, m):\n    return n == m and multiset(arr1) == multiset(arr2)", "pass@3": 0.9166666666666666, "nDCG@10": 0.5884674004369674}
{"task_id": "MBPP/651", "prompt": "\n\ndef check_subset(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to check if one tuple is a subset of another tuple.\n  >>> check_subset((10, 4, 5, 6), (5, 10))\n  True\n  >>> check_subset((1, 2, 3, 4), (5, 6))\n  False\n  >>> check_subset((7, 8, 9, 10), (10, 8))\n  True\n  \"\"\"\n", "solution": "  \n  res = set(test_tup2).issubset(test_tup1)\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_subset(test_tup1, test_tup2):\n    return set(test_tup2).issubset(set(test_tup1))", "code_2": "def check_subset(test_tup1, test_tup2):\n    return all(item in test_tup1 for item in test_tup2)", "code_3": "def check_subset(test_tup1, test_tup2):\n    return len(set(test_tup2) - set(test_tup1)) == 0", "code_4": "def check_subset(test_tup1, test_tup2):\n    return not set(test_tup2) - set(test_tup1)", "code_5": "def check_subset(test_tup1, test_tup2):\n    return set(test_tup2).difference(set(test_tup1)) == set()", "code_6": "def check_subset(test_tup1, test_tup2):\n    return not bool(set(test_tup2) - set(test_tup1))", "code_7": "def check_subset(test_tup1, test_tup2):\n    return not any(item not in test_tup1 for item in test_tup2)", "code_8": "def check_subset(test_tup1, test_tup2):\n    return all(map(lambda x: x in test_tup1, test_tup2))", "code_9": "def check_subset(test_tup1, test_tup2):\n    return len(set(test_tup2) & set(test_tup1)) == len(set(test_tup2))", "code_10": "def check_subset(test_tup1, test_tup2):\n    return sum(item in test_tup1 for item in test_tup2) == len(test_tup2)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/652", "prompt": "\n\ndef matrix_to_list(test_list):\n  \"\"\"\n  Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n  >>> matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]])\n  '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n  >>> matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]])\n  '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\n  >>> matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]])\n  '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'\n  \"\"\"\n", "solution": "  \n  temp = [ele for sub in test_list for ele in sub]\n  res = list(zip(*temp))\n  return (str(res))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def matrix_to_list(m): return zip(*m)", "code_2": "def matrix_to_list(m): return [tuple(i) for i in zip(*m)]", "code_3": "def matrix_to_list(m): return list(map(tuple, zip(*m)))", "code_4": "def matrix_to_list(m): return [*zip(*m)]", "code_5": "def matrix_to_list(m): return list(zip(*m))", "code_6": "def matrix_to_list(m): return [*map(tuple, zip(*m))]", "code_7": "def matrix_to_list(m): return [tuple(x) for x in zip(*m)]", "code_8": "def matrix_to_list(m): return list(map(lambda x: tuple(x), zip(*m)))", "code_9": "def matrix_to_list(m): return [tuple(row[i] for row in m) for i in range(len(m[0]))]", "code_10": "def matrix_to_list(m): return [tuple(m[j][i] for j in range(len(m))) for i in range(len(m[0]))]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/653", "prompt": "\n\ndef grouping_dictionary(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n    >>> grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n    >>> grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])\n    ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\n    >>> grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])\n    ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})\n    \"\"\"\n", "solution": "    from collections import defaultdict\n    \n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)", "code_2": "from collections import defaultdict\ndef grouping_dictionary(l):\n    return {k: [v for _, v in l if _ == k] for k, _ in l}", "code_3": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d", "code_4": "from itertools import groupby\ndef grouping_dictionary(l):\n    l.sort()\n    return {k: [v for _, v in g] for k, g in groupby(l, key=lambda x: x[0])}", "code_5": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return {k: v for k, v in d.items()}", "code_6": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return {k: list(v) for k, v in d.items()}", "code_7": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return {k: v[:] for k, v in d.items()}", "code_8": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return {k: list(d[k]) for k in d}", "code_9": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return {k: v.copy() for k, v in d.items()}", "code_10": "from collections import defaultdict\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return {k: [i for i in v] for k, v in d.items()}", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/654", "prompt": "\n\ndef rectangle_perimeter(l,b):\n  \"\"\"\n  Write a function to find the perimeter of a rectangle.\n  >>> rectangle_perimeter(10,20)\n  60\n  >>> rectangle_perimeter(10,5)\n  30\n  >>> rectangle_perimeter(4,2)\n  12\n  \"\"\"\n", "solution": "  \n  perimeter=2*(l+b)\n  return perimeter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def rectangle_perimeter(l, b): return 2 * (l + b)`", "code_2": "`rectangle_perimeter = lambda l, b: 2 * (l + b)`", "code_3": "`def rectangle_perimeter(l, b): return l * 2 + b * 2`", "code_4": "`rectangle_perimeter = lambda l, b: l * 2 + b * 2`", "code_5": "`def rectangle_perimeter(l, b): return sum([l, b]) * 2`", "code_6": "`rectangle_perimeter = lambda l, b: sum([l, b]) * 2`", "code_7": "`def rectangle_perimeter(l, b): return (l + b) << 1`", "code_8": "`rectangle_perimeter = lambda l, b: (l + b) << 1`", "code_9": "`def rectangle_perimeter(l, b): return [l, b] * 2`", "code_10": "`rectangle_perimeter = lambda l, b: [l, b] * 2`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/655", "prompt": "\n\ndef fifth_Power_Sum(n) :\n    \"\"\"\n    Write a python function to find the sum of fifth power of n natural numbers.\n    >>> fifth_Power_Sum(2)\n    33\n    >>> fifth_Power_Sum(4)\n    1300\n    >>> fifth_Power_Sum(3)\n    276\n    \"\"\"\n", "solution": "     \n    sm = 0 \n    for i in range(1,n+1) : \n        sm = sm + (i*i*i*i*i) \n    return sm ", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def fifth_Power_Sum(n): return sum(i**5 for i in range(1, n+1))", "code_2": "def fifth_Power_Sum(n): return sum(map(lambda i: i**5, range(1, n+1)))", "code_3": "from functools import reduce\ndef fifth_Power_Sum(n): return reduce(lambda x, y: x + y**5, range(1, n+1), 0)", "code_4": "def fifth_Power_Sum(n): return sum([i**5 for i in range(1, n+1)])", "code_5": "def fifth_Power_Sum(n): return sum(i**5 for i in xrange(1, n+1))", "code_6": "def fifth_Power_Sum(n): return sum(map(pow, range(1, n+1), [5]*n))", "code_7": "def fifth_Power_Sum(n): return sum(pow(i, 5) for i in range(1, n+1))", "code_8": "def fifth_Power_Sum(n): return sum(i**5 for i in range(n, 0, -1))", "code_9": "def fifth_Power_Sum(n): return sum(i**5 for i in reversed(range(1, n+1)))", "code_10": "def fifth_Power_Sum(n): return sum(i**5 for i in range(1, n+1) if i%2==1 or i==2)", "pass@3": 1.0, "nDCG@10": 0.8512360941594275}
{"task_id": "MBPP/656", "prompt": "\n\ndef find_Min_Sum(a,b,n):\n    \"\"\"\n    Write a python function to find the minimum sum of absolute differences of two arrays.\n    >>> find_Min_Sum([3,2,1],[2,1,3],3)\n    0\n    >>> find_Min_Sum([1,2,3],[4,5,6],3)\n    9\n    >>> find_Min_Sum([4,1,8,7],[2,3,6,5],4)\n    6\n    \"\"\"\n", "solution": "     \n    a.sort() \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum = sum + abs(a[i] - b[i]) \n    return sum", "results": [1, 1, 1, 1, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    return sum(abs(a[i]-b[i]) for i in range(n))", "code_2": "def find_Min_Sum(a,b,n):\n    return sum(map(lambda x, y: abs(x-y), sorted(a), sorted(b)))", "code_3": "from itertools import zip_longest\ndef find_Min_Sum(a,b,n):\n    return sum(abs(x-y) for x, y in zip(sorted(a), sorted(b)))", "code_4": "import numpy as np\ndef find_Min_Sum(a,b,n):\n    return np.sum(np.abs(np.sort(a) - np.sort(b)))", "code_5": "def find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    return sum(map(abs, np.subtract(a, b)))", "code_6": "def find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    return sum(abs(x-y) for x, y in zip_longest(a, b))", "code_7": "def find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort()\n    return sum(abs(a[i]-b[i]) for i in range(n))", "code_8": "def find_Min_Sum(a,b,n):\n    return sum(abs(x-y) for x, y in zip(sorted(a), sorted(b, reverse=True)))", "code_9": "def find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort(reverse=True)\n    return sum(abs(x-y) for x, y in zip(a, b))", "code_10": "def find_Min_Sum(a,b,n):\n    a.sort()\n    b.sort(reverse=True)\n    return sum(map(lambda x, y: abs(x-y), a, b))", "pass@3": 0.9166666666666666, "nDCG@10": 0.6371523797895857}
{"task_id": "MBPP/657", "prompt": "\n\ndef first_Digit(n) :\n    \"\"\"\n    Write a python function to find the first digit in factorial of a given number.\n    >>> first_Digit(5)\n    1\n    >>> first_Digit(10)\n    3\n    >>> first_Digit(7)\n    5\n    \"\"\"\n", "solution": "    import math \n     \n    fact = 1\n    for i in range(2,n + 1) : \n        fact = fact * i \n        while (fact % 10 == 0) :  \n            fact = int(fact / 10) \n    while (fact >= 10) : \n        fact = int(fact / 10) \n    return math.floor(fact) ", "results": [0, 0, 1, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def first_Digit(n):\n    f = 1\n    for i in range(1, n + 1):\n        f *= i\n        while f > 9:\n            f //= 10\n    return f", "code_2": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f = (f * i) % 9\n    return f if f else 9", "code_3": "import math\ndef first_Digit(n):\n    return int(str(math.factorial(n))[0])", "code_4": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        while f > 10:\n            f //= 10\n    return f // 10", "code_5": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        f %= 10**9\n    return int(str(f)[0])", "code_6": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        f %= 10\n        if f == 0:\n            f = 10\n    return f", "code_7": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        while f > 10:\n            f = (f // 10) * (f % 10)\n    return f", "code_8": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        while f > 10:\n            f = sum(int(d) for d in str(f))\n    return f", "code_9": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        while f > 10:\n            f = eval('*'.join(str(f)))\n    return f", "code_10": "def first_Digit(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n        while f > 10:\n            f = int(''.join(str(int(d) * int(e)) for d, e in zip(str(f), str(f)[::-1])))\n    return f", "pass@3": 0.5333333333333333, "nDCG@10": 0.1951890007906611}
{"task_id": "MBPP/658", "prompt": "\n\ndef max_occurrences(list1):\n    \"\"\"\n    Write a function to find the item with maximum occurrences in a given list.\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])\n    2\n    >>> max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])\n    1\n    >>> max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])\n    1\n    \"\"\"\n", "solution": "    \n    max_val = 0\n    result = list1[0] \n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef max_occurrences(list1):\n    return Counter(list1).most_common(1)[0][0]", "code_2": "def max_occurrences(list1):\n    return max(set(list1), key=list1.count)", "code_3": "def max_occurrences(list1):\n    counts = {}\n    for num in list1:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return max(counts, key=counts.get)", "code_4": "import heapq\ndef max_occurrences(list1):\n    counts = {}\n    for num in list1:\n        counts[num] = counts.get(num, 0) + 1\n    return heapq.nlargest(1, counts, key=counts.get)[0]", "code_5": "def max_occurrences(list1):\n    counts = [0] * (max(list1) + 1)\n    for num in list1:\n        counts[num] += 1\n    return counts.index(max(counts))", "code_6": "def max_occurrences(list1):\n    return sorted(set(list1), key=list1.count)[-1]", "code_7": "def max_occurrences(list1):\n    counts = {}\n    max_count = 0\n    max_item = None\n    for num in list1:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_item = num\n    return max_item", "code_8": "def max_occurrences(list1):\n    counts = {}\n    for num in list1:\n        counts[num] = counts.get(num, 0) + 1\n    return max(counts.items(), key=lambda x: x[1])[0]", "code_9": "def max_occurrences(list1):\n    counts = {}\n    for num in list1:\n        counts[num] = counts.get(num, 0) + 1\n    return min(counts, key=lambda k: (-counts[k], k))", "code_10": "def max_occurrences(list1):\n    counts = {}\n    for num in list1:\n        counts[num] = counts.get(num, 0) + 1\n    return sorted(counts.items(), key=lambda x: x[1], reverse=True)[0][0]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/659", "prompt": "\n\ndef Repeat(x):\n    \"\"\"\n    Write a python function to print duplicants from a list of integers.\n    >>> Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n    [20, 30, -20, 60]\n    >>> Repeat([-1, 1, -1, 8])\n    [-1]\n    >>> Repeat([1, 2, 3, 1, 2,])\n    [1, 2]\n    \"\"\"\n", "solution": "     \n    _size = len(x) \n    repeated = [] \n    for i in range(_size): \n        k = i + 1\n        for j in range(k, _size): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated ", "results": [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def Repeat(x):\n    return [i for i in set(x) if x.count(i) > 1]", "code_2": "def Repeat(x):\n    return list(set(i for i in x if x.count(i) > 1))", "code_3": "from collections import Counter\ndef Repeat(x):\n    return [k for k, v in Counter(x).items() if v > 1]", "code_4": "def Repeat(x):\n    seen = set()\n    duplicates = set()\n    for i in x:\n        if i in seen:\n            duplicates.add(i)\n        else:\n            seen.add(i)\n    return list(duplicates)", "code_5": "def Repeat(x):\n    counts = {}\n    for i in x:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return [i for i in counts if counts[i] > 1]", "code_6": "def Repeat(x):\n    return [item for item, count in collections.Counter(x).items() if count > 1]", "code_7": "def Repeat(x):\n    return list({i for i in x if x.count(i) > 1})", "code_8": "def Repeat(x):\n    return [i for i in dict.fromkeys(x) if x.count(i) > 1]", "code_9": "def Repeat(x):\n    counts = collections.defaultdict(int)\n    for i in x:\n        counts[i] += 1\n    return [i for i in counts if counts[i] > 1]", "code_10": "def Repeat(x):\n    return [i for i in set(x) if x.count(i) > 1]", "pass@3": 0.7083333333333333, "nDCG@10": 0.2646202227274384}
{"task_id": "MBPP/660", "prompt": "\n\ndef find_Points(l1,r1,l2,r2):\n    \"\"\"\n    Write a python function to choose points from two ranges such that no point lies in both the ranges.\n    >>> find_Points(5,10,1,5)\n    (1,10)\n    >>> find_Points(3,5,7,9)\n    (3,9)\n    >>> find_Points(1,5,2,8)\n    (1,8)\n    \"\"\"\n", "solution": "     \n    x = min(l1,l2) if (l1 != l2) else -1\n    y = max(r1,r2) if (r1 != r2) else -1\n    return (x,y)", "results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def find_Points(l1,r1,l2,r2): return (min(l1,l2),max(r1,r2))", "code_2": "def find_Points(l1,r1,l2,r2): return (l1 if l1<l2 else l2, r1 if r1>r2 else r2)", "code_3": "def find_Points(l1,r1,l2,r2): return (l1,r2) if l1<r2 else (l2,r1)", "code_4": "def find_Points(l1,r1,l2,r2): return (l1,r2) if l1<l2 else (l2,r1)", "code_5": "def find_Points(l1,r1,l2,r2): return (l1,r2) if r1<l2 else (l2,r1)", "code_6": "def find_Points(l1,r1,l2,r2): return (l1,r2) if r1<=l2 else (l2,r1)", "code_7": "def find_Points(l1,r1,l2,r2): return (l1,r2) if l1<=r2 else (l2,r1)", "code_8": "def find_Points(l1,r1,l2,r2): return (l1,r2) if l1<=l2<=r1<=r2 else (l2,r1)", "code_9": "def find_Points(l1,r1,l2,r2): return (l1,r2) if l1<=l2 and r1<=r2 else (l2,r1)", "code_10": "def find_Points(l1,r1,l2,r2): return (l1,r2) if l1<=r2 else (l2,r1) if l2<=r1 else (l1,r1)", "pass@3": 0.9166666666666666, "nDCG@10": 0.6300426811446147}
{"task_id": "MBPP/661", "prompt": "\n\ndef max_sum_of_three_consecutive(arr, n):\n\t\"\"\"\n\tWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\n\t>>> max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)\n\t2101\n\t>>> max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)\n\t5013\n\t>>> max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n\t27\n\t\"\"\"\n", "solution": "\t \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] \n\tif n > 2: \n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \n\tfor i in range(3, n): \n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \n\treturn sum[n-1]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    dp = [0] * n\n    dp[0], dp[1] = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]", "code_2": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    a, b, c = arr[0], max(arr[0], arr[1]), 0\n    for i in range(2, n):\n        c = max(b, a + arr[i])\n        a, b = b, c\n    return c", "code_3": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    sums = [0] * n\n    sums[0], sums[1] = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        sums[i] = max(sums[i-1], sums[i-2] + arr[i])\n    return sums[-1]", "code_4": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    prev, curr = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        prev, curr = curr, max(curr, prev + arr[i])\n    return curr", "code_5": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    sums = [0] * n\n    sums[0], sums[1] = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        sums[i] = max(sums[i-1], sums[i-2] + arr[i])\n    return sums[-1]", "code_6": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    dp = [0] * n\n    dp[0], dp[1] = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]", "code_7": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    a, b = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        a, b = b, max(b, a + arr[i])\n    return b", "code_8": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    sums = [0] * n\n    sums[0], sums[1] = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        sums[i] = max(sums[i-1], sums[i-2] + arr[i])\n    return sums[-1]", "code_9": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    dp = [0] * n\n    dp[0], dp[1] = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i])\n    return dp[-1]", "code_10": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3: return sum(arr)\n    a, b = arr[0], max(arr[0], arr[1])\n    for i in range(2, n):\n        a, b = b, max(b, a + arr[i])\n    return b", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/662", "prompt": "\n\ndef sorted_dict(dict1):\n  \"\"\"\n  Write a function to sort a list in a dictionary.\n  >>> sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})\n  {'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n  >>> sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})\n  {'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n  >>> sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})\n  {'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n  \"\"\"\n", "solution": "  \n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n  return sorted_dict", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def sorted_dict(d):\n  return {k: sorted(v) for k, v in d.items()}", "code_2": "def sorted_dict(d):\n  return dict(map(lambda item: (item[0], sorted(item[1])), d.items()))", "code_3": "def sorted_dict(d):\n  return {k: v.sort() for k, v in d.items()}", "code_4": "def sorted_dict(d):\n  for k in d:\n    d[k].sort()\n  return d", "code_5": "def sorted_dict(d):\n  return {k: sorted(d[k]) for k in d}", "code_6": "def sorted_dict(d):\n  return dict(zip(d.keys(), map(sorted, d.values())))", "code_7": "def sorted_dict(d):\n  return {k: v.sort() or v for k, v in d.items()}", "code_8": "def sorted_dict(d):\n  return {k: sorted(d[k]) for k in sorted(d)}", "code_9": "def sorted_dict(d):\n  return {k: sorted(v) for k, v in sorted(d.items())}", "code_10": "def sorted_dict(d):\n  return {k: v.sort() or v for k in sorted(d)}", "pass@3": 1.0, "nDCG@10": 0.8263333286520084}
{"task_id": "MBPP/663", "prompt": "\n\ndef find_max_val(n, x, y):\n\t\"\"\"\n\tWrite a function to find the largest possible value of k such that k modulo x is y.\n\t>>> find_max_val(15, 10, 5)\n\t15\n\t>>> find_max_val(187, 10, 5)\n\t185\n\t>>> find_max_val(16, 11, 1)\n\t12\n\t\"\"\"\n", "solution": "\timport sys \n\t \n\tans = -sys.maxsize \n\tfor k in range(n + 1): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and\n\t\t\t\t\tans <= n) else -1) ", "results": [1, 0, 1, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_max_val(n, x, y): return n - (n - y) % x", "code_2": "def find_max_val(n, x, y): return n - ((n - y) % x if (n - y) % x != 0 else x)", "code_3": "def find_max_val(n, x, y): return n - min((n - y) % x, x - y)", "code_4": "def find_max_val(n, x, y): return n - min((n - y) % x, (n - y) % x - x)", "code_5": "def find_max_val(n, x, y): return n - ((n - y) % x if y <= n % x else (n - y) % x - x)", "code_6": "def find_max_val(n, x, y): return n - min((n - y) % x, (n - y) % x - x, x - y)", "code_7": "def find_max_val(n, x, y): return n - min((n - y) % x, (n - y) % x - x, y - n % x)", "code_8": "def find_max_val(n, x, y): return n - min((n - y) % x, (n - y) % x - x, y - n % x if n % x < y else x)", "code_9": "def find_max_val(n, x, y): return n - min((n - y) % x, (n - y) % x - x, y - n % x if n % x >= y else 0)", "code_10": "def find_max_val(n, x, y): return n - min((n - y) % x, (n - y) % x - x, y - n % x if n % x >= y else float('inf'))", "pass@3": 0.7083333333333333, "nDCG@10": 0.4152807670887413}
{"task_id": "MBPP/664", "prompt": "\n\ndef average_Even(n) :\n    \"\"\"\n    Write a python function to find the average of even numbers till a given even number.\n    >>> average_Even(2)\n    2\n    >>> average_Even(4)\n    3\n    >>> average_Even(100)\n    51\n    \"\"\"\n", "solution": "     \n    if (n% 2!= 0) : \n        return (\"Invalid Input\") \n        return -1  \n    sm = 0\n    count = 0\n    while (n>= 2) : \n        count = count+1\n        sm = sm+n \n        n = n-2\n    return sm // count ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def average_Even(n): return sum(range(2, n + 1, 2)) // (n // 2)", "code_2": "def average_Even(n): return (2 + n) * (n // 2) // 2", "code_3": "def average_Even(n): return (n // 2) * (n + 2) >> 1", "code_4": "def average_Even(n): return (n >> 1) * (n + 2) >> 1", "code_5": "def average_Even(n): return (n + 2) * (n // 2) // 2", "code_6": "def average_Even(n): return (n + 2) * (n >> 1) >> 1", "code_7": "def average_Even(n): return (n * (n + 2)) // (2 * (n // 2))", "code_8": "def average_Even(n): return (n * (n + 2)) // (2 * (n >> 1))", "code_9": "def average_Even(n): return (n * (n + 2)) >> (1 + (n & 1))", "code_10": "def average_Even(n): return (n * (n + 2)) >> (n.bit_length() - 1)", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/665", "prompt": "\n\ndef move_last(num_list):\n    \"\"\"\n    Write a python function to shift first element to the end of given list.\n    >>> move_last([1,2,3,4])\n    [2,3,4,1]\n    >>> move_last([2,3,4,1,5,0])\n    [3,4,1,5,0,2]\n    >>> move_last([5,4,3,2,1])\n    [4,3,2,1,5]\n    \"\"\"\n", "solution": "    \n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [ i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return (x)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def move_last(num_list):\n    return num_list[1:] + [num_list[0]]", "code_2": "def move_last(num_list):\n    num_list.append(num_list.pop(0))\n    return num_list", "code_3": "def move_last(num_list):\n    first = num_list[0]\n    num_list[:] = num_list[1:]\n    num_list.append(first)\n    return num_list", "code_4": "def move_last(num_list):\n    num_list[:] = num_list[1:] + num_list[:1]\n    return num_list", "code_5": "def move_last(num_list):\n    num_list.append(num_list.pop(0))\n    return num_list", "code_6": "def move_last(num_list):\n    num_list[:] = num_list[1:] + [num_list[0]]\n    return num_list", "code_7": "def move_last(num_list):\n    num_list.append(num_list.pop(0))\n    return num_list", "code_8": "def move_last(num_list):\n    first = num_list.pop(0)\n    num_list.append(first)\n    return num_list", "code_9": "def move_last(num_list):\n    num_list[:] = num_list[1:] + [num_list[0]]\n    return num_list", "code_10": "def move_last(num_list):\n    num_list.append(num_list.pop(0))\n    return num_list", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/666", "prompt": "\n\ndef count_char(string,char):\n \"\"\"\n Write a function to count occurrence of a character in a string.\n >>> count_char(\"Python\",'o')\n 1\n >>> count_char(\"little\",'t')\n 2\n >>> count_char(\"assert\",'s')\n 2\n \"\"\"\n", "solution": " \n count = 0\n for i in range(len(string)):\n    if(string[i] == char):\n        count = count + 1\n return count", "results": [1, 1, 1, 1, 1, 1, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def count_char(string, char): return string.count(char)", "code_2": "def count_char(string, char): return sum(1 for c in string if c == char)", "code_3": "from collections import Counter\ndef count_char(string, char): return Counter(string)[char]", "code_4": "import re\ndef count_char(string, char): return len(re.findall(char, string))", "code_5": "def count_char(string, char): return len([c for c in string if c == char])", "code_6": "def count_char(string, char): return sum(map(string.count, char))", "code_7": "def count_char(string, char): return reduce(lambda x, y: x + y, (1 for c in string if c == char), 0)", "code_8": "def count_char(string, char): return len(filter(lambda c: c == char, string))", "code_9": "def count_char(string, char): return len(list(filter(lambda c: c == char, string)))", "code_10": "def count_char(string, char): return len(tuple(filter(lambda c: c == char, string)))", "pass@3": 1.0, "nDCG@10": 0.8572048559638626}
{"task_id": "MBPP/667", "prompt": "\n\ndef Check_Vow(string, vowels):\n    \"\"\"\n    Write a python function to count number of vowels in the string.\n    >>> Check_Vow('corner','AaEeIiOoUu')\n    2\n    >>> Check_Vow('valid','AaEeIiOoUu')\n    2\n    >>> Check_Vow('true','AaEeIiOoUu')\n    2\n    \"\"\"\n", "solution": "     \n    final = [each for each in string if each in vowels] \n    return(len(final)) \n", "results": [1, 1, 1, 1, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def Check_Vow(string, vowels):\n    return sum(1 for char in string if char in vowels)", "code_2": "def Check_Vow(string, vowels):\n    return len([char for char in string if char in vowels])", "code_3": "def Check_Vow(string, vowels):\n    return sum(string.count(vowel) for vowel in vowels)", "code_4": "def Check_Vow(string, vowels):\n    return len(list(filter(lambda char: char in vowels, string)))", "code_5": "def Check_Vow(string, vowels):\n    return len(set(string) & set(vowels))", "code_6": "def Check_Vow(string, vowels):\n    return len(re.findall('[{}]'.format(vowels), string, re.IGNORECASE))", "code_7": "def Check_Vow(string, vowels):\n    return functools.reduce(lambda count, char: count + (char in vowels), string, 0)", "code_8": "def Check_Vow(string, vowels):\n    return sum(map(string.count, vowels))", "code_9": "def Check_Vow(string, vowels):\n    return sum(string.lower().count(vowel) for vowel in vowels.lower())", "code_10": "def Check_Vow(string, vowels):\n    return sum(collections.Counter(string.lower())[vowel] for vowel in vowels.lower())", "pass@3": 0.9666666666666667, "nDCG@10": 0.718362797268624}
{"task_id": "MBPP/668", "prompt": "\n\ndef replace(string, char):\n    \"\"\"\n    Write a python function to replace multiple occurence of character by single.\n    >>> replace('peep','e')\n    'pep'\n    >>> replace('Greek','e')\n    'Grek'\n    >>> replace('Moon','o')\n    'Mon'\n    \"\"\"\n", "solution": "    import re \n     \n    pattern = char + '{2,}'\n    string = re.sub(pattern, char, string) \n    return string ", "results": [0, 1, 0, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def replace(string, char):\n    return char.join(string.split(char))", "code_2": "def replace(string, char):\n    return ''.join([c for i, c in enumerate(string) if c != char or string.rfind(char) == i])", "code_3": "def replace(string, char):\n    return ''.join(char if i != char or i == string.rindex(char) else '' for i in string)", "code_4": "def replace(string, char):\n    return ''.join(x for i, x in enumerate(string) if x != char or string.rfind(char) == i)", "code_5": "def replace(string, char):\n    return ''.join(c for i, c in enumerate(string) if i == 0 or c != char or string[i-1] != char)", "code_6": "def replace(string, char):\n    return ''.join(c for i, c in enumerate(string) if i == 0 or c != char or string[i-1] == char)", "code_7": "def replace(string, char):\n    return ''.join(c for i, c in enumerate(string) if i == len(string)-1 or c != char or string[i+1] == char)", "code_8": "def replace(string, char):\n    return ''.join(c for i, c in enumerate(string) if i == len(string)-1 or c != char or string[i+1] != char)", "code_9": "def replace(string, char):\n    return ''.join(c for i, c in enumerate(string) if i == 0 or c != char or string[i-1] != char)[:-1] + char", "code_10": "def replace(string, char):\n    return ''.join(c for i, c in enumerate(string) if i == 0 or c != char or string[i-1] == char) + char", "pass@3": 0.9666666666666667, "nDCG@10": 0.5399873388995391}
{"task_id": "MBPP/669", "prompt": "\n\ndef check_IP(Ip):\n\t\"\"\"\n\tWrite a function to check whether the given ip address is valid or not using regex.\n\t>>> check_IP(\"192.168.0.1\")\n\t'Valid IP address'\n\t>>> check_IP(\"110.234.52.124\")\n\t'Valid IP address'\n\t>>> check_IP(\"366.1.2.2\")\n\t'Invalid IP address'\n\t\"\"\"\n", "solution": "\timport re \n\tregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \n\t\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\n\t \n\tif(re.search(regex, Ip)): \n\t\treturn (\"Valid IP address\") \n\telse: \n\t\treturn (\"Invalid IP address\") ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef check_IP(Ip):\n    return 'Valid IP address' if re.match(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', Ip) else 'Invalid IP address'", "code_2": "import socket\ndef check_IP(Ip):\n    try:\n        socket.inet_aton(Ip)\n        return 'Valid IP address'\n    except socket.error:\n        return 'Invalid IP address'", "code_3": "import ipaddress\ndef check_IP(Ip):\n    try:\n        ipaddress.ip_address(Ip)\n        return 'Valid IP address'\n    except ValueError:\n        return 'Invalid IP address'", "code_4": "def check_IP(Ip):\n    parts = Ip.split('.')\n    if len(parts) != 4:\n        return 'Invalid IP address'\n    for part in parts:\n        if not part.isdigit() or int(part) < 0 or int(part) > 255:\n            return 'Invalid IP address'\n    return 'Valid IP address'", "code_5": "def check_IP(Ip):\n    def is_valid_part(part):\n        return part.isdigit() and 0 <= int(part) <= 255\n    parts = Ip.split('.')\n    return 'Valid IP address' if len(parts) == 4 and all(is_valid_part(part) for part in parts) else 'Invalid IP address'", "code_6": "def check_IP(Ip):\n    parts = Ip.split('.')\n    if len(parts) != 4:\n        return 'Invalid IP address'\n    for part in parts:\n        if not part.isdigit() or not 0 <= int(part) <= 255:\n            return 'Invalid IP address'\n    return 'Valid IP address'", "code_7": "def check_IP(Ip):\n    parts = Ip.split('.')\n    if len(parts) != 4:\n        return 'Invalid IP address'\n    for part in parts:\n        if not part.isdigit() or int(part) < 0 or int(part) > 255:\n            return 'Invalid IP address'\n    return 'Valid IP address'", "code_8": "def check_IP(Ip):\n    parts = Ip.split('.')\n    if len(parts) != 4:\n        return 'Invalid IP address'\n    for part in parts:\n        if not part.isdigit() or not 0 <= int(part) <= 255:\n            return 'Invalid IP address'\n    return 'Valid IP address'", "code_9": "def check_IP(Ip):\n    parts = Ip.split('.')\n    if len(parts) != 4:\n        return 'Invalid IP address'\n    for part in parts:\n        if not part.isdigit() or int(part) < 0 or int(part) > 255:\n            return 'Invalid IP address'\n    return 'Valid IP address'", "code_10": "def check_IP(Ip):\n    parts = Ip.split('.')\n    if len(parts) != 4:\n        return 'Invalid IP address'\n    for part in parts:\n        if not part.isdigit() or not 0 <= int(part) <= 255:\n            return 'Invalid IP address'\n    return 'Valid IP address'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/670", "prompt": "\n\ndef decreasing_trend(nums):\n    \"\"\"\n    Write a python function to check whether a sequence of numbers has a decreasing trend or not.\n    >>> decreasing_trend([-4,-3,-2,-1])\n    True\n    >>> decreasing_trend([1,2,3])\n    True\n    >>> decreasing_trend([3,2,1])\n    False\n    \"\"\"\n", "solution": "    \n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def decreasing_trend(nums): return all(x>y for x, y in zip(nums, nums[1:]))", "code_2": "def decreasing_trend(nums): return nums == sorted(nums, reverse=True)", "code_3": "def decreasing_trend(nums): return nums[::-1] == sorted(nums)", "code_4": "def decreasing_trend(nums): return reduce(lambda x, y: x and (x > y), nums)", "code_5": "def decreasing_trend(nums): return len(set(x > y for x, y in zip(nums, nums[1:]))) == 1 and nums[0] > nums[-1]", "code_6": "def decreasing_trend(nums): return nums == list(reversed(sorted(nums)))", "code_7": "def decreasing_trend(nums): return all(a > b for a, b in pairwise(nums))", "code_8": "def decreasing_trend(nums): return all(starmap(gt, pairwise(nums)))", "code_9": "def decreasing_trend(nums): return all(map(lambda x: x[0] > x[1], zip(nums, nums[1:])))", "code_10": "def decreasing_trend(nums): return all(a > b for a, b in zip(nums, islice(nums, 1, None)))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/671", "prompt": "\n\ndef set_Right_most_Unset_Bit(n):\n    \"\"\"\n    Write a python function to set the right most unset bit.\n    >>> set_Right_most_Unset_Bit(21)\n    23\n    >>> set_Right_most_Unset_Bit(11)\n    15\n    >>> set_Right_most_Unset_Bit(15)\n    15\n    \"\"\"\n", "solution": "    import math \n    def get_Pos_Of_Right_most_Set_Bit(n): \n        return int(math.log2(n&-n)+1)   \n     \n    if (n == 0): \n        return 1\n    if ((n & (n + 1)) == 0):     \n        return n \n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \n    return ((1 << (pos - 1)) | n) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def set_Right_most_Unset_Bit(n):\n    return n | (n + 1)", "code_2": "def set_Right_most_Unset_Bit(n):\n    return n | ~(n & (n - 1))", "code_3": "def set_Right_most_Unset_Bit(n):\n    return n + (n & -n)", "code_4": "def set_Right_most_Unset_Bit(n):\n    return n + (~n & (n + 1))", "code_5": "def set_Right_most_Unset_Bit(n):\n    return n + (n ^ (n + 1)) & -(n ^ (n + 1))", "code_6": "def set_Right_most_Unset_Bit(n):\n    return n + ((n ^ (n + 1)) >> 1) + 1", "code_7": "def set_Right_most_Unset_Bit(n):\n    return n + ((~n & -~n) >> 1)", "code_8": "def set_Right_most_Unset_Bit(n):\n    return n + ((~n & (n + 1)) >> 1)", "code_9": "def set_Right_most_Unset_Bit(n):\n    return n + ((n & ~(n - 1)) << 1)", "code_10": "def set_Right_most_Unset_Bit(n):\n    return n + ((n ^ (n - 1)) & -(n ^ (n - 1)))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/672", "prompt": "\n\ndef max_of_three(num1,num2,num3):\n    \"\"\"\n    Write a function to find maximum of three numbers.\n    >>> max_of_three(10,20,30)\n    30\n    >>> max_of_three(55,47,39)\n    55\n    >>> max_of_three(10,49,30)\n    49\n    \"\"\"\n", "solution": "     \n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_of_three(num1, num2, num3):\n    return max(num1, num2, num3)", "code_2": "def max_of_three(num1, num2, num3):\n    if num1 > num2:\n        return num1 if num1 > num3 else num3\n    else:\n        return num2 if num2 > num3 else num3", "code_3": "def max_of_three(num1, num2, num3):\n    return num1 if (num1 > num2 and num1 > num3) else num2 if (num2 > num1 and num2 > num3) else num3", "code_4": "def max_of_three(num1, num2, num3):\n    return sorted([num1, num2, num3])[-1]", "code_5": "def max_of_three(num1, num2, num3):\n    return (num1 if num1 > num2 else num2) if (num1 if num1 > num2 else num2) > num3 else num3", "code_6": "def max_of_three(num1, num2, num3):\n    return num1 if num1 > num2 and num1 > num3 else num2 if num2 > num1 and num2 > num3 else num3", "code_7": "def max_of_three(num1, num2, num3):\n    max_num = num1\n    if num2 > max_num:\n        max_num = num2\n    if num3 > max_num:\n        max_num = num3\n    return max_num", "code_8": "def max_of_three(num1, num2, num3):\n    return max(max(num1, num2), num3)", "code_9": "def max_of_three(num1, num2, num3):\n    max_num = num1\n    if num2 > max_num:\n        max_num = num2\n    if num3 > max_num:\n        max_num = num3\n    return max_num", "code_10": "def max_of_three(num1, num2, num3):\n    return max(num1, max(num2, num3))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/673", "prompt": "\n\ndef convert(list):\n    \"\"\"\n    Write a python function to convert a list of multiple integers into a single integer.\n    >>> convert([1,2,3])\n    123\n    >>> convert([4,5,6])\n    456\n    >>> convert([7,8,9])\n    789\n    \"\"\"\n", "solution": "     \n    s = [str(i) for i in list] \n    res = int(\"\".join(s))  \n    return (res) ", "results": [1, 1, 1, 0, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def convert(lst):\n    return int(''.join(map(str, lst)))", "code_2": "def convert(lst):\n    return sum(d * 10**i for i, d in enumerate(reversed(lst)))", "code_3": "def convert(lst):\n    res = 0\n    for i in lst:\n        res = res * 10 + i\n    return res", "code_4": "def convert(lst):\n    return functools.reduce(lambda x, y: x * 10 + y, lst)", "code_5": "def convert(lst):\n    return int(''.join(str(i) for i in lst))", "code_6": "def convert(lst):\n    return int(''.join(map(str, lst[::-1]))[::-1])", "code_7": "def convert(lst):\n    return int(''.join(str(i) for i in lst[::-1]))[::-1]", "code_8": "def convert(lst):\n    return int(''.join(str(i) for i in lst[::-1])[::-1])", "code_9": "def convert(lst):\n    return int(''.join(str(i) for i in reversed(lst)))", "code_10": "def convert(lst):\n    return int(''.join(str(i) for i in sorted(lst, reverse=True)))", "pass@3": 0.9666666666666667, "nDCG@10": 0.7019727018777485}
{"task_id": "MBPP/674", "prompt": "\n\ndef remove_duplicate(string):\n  \"\"\"\n  Write a function to remove duplicate words from a given string using collections module.\n  >>> remove_duplicate(\"Python Exercises Practice Solution Exercises\")\n  (\"Python Exercises Practice Solution\")\n  >>> remove_duplicate(\"Python Exercises Practice Solution Python\")\n  (\"Python Exercises Practice Solution\")\n  >>> remove_duplicate(\"Python Exercises Practice Solution Practice\")\n  (\"Python Exercises Practice Solution\")\n  \"\"\"\n", "solution": "  from collections import OrderedDict\n  \n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\n  return result", "results": [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import OrderedDict\ndef remove_duplicate(string):\n    return \" \".join(OrderedDict.fromkeys(string.split()))", "code_2": "def remove_duplicate(string):\n    return \" \".join(dict.fromkeys(string.split()))", "code_3": "def remove_duplicate(string):\n    return \" \".join(sorted(set(string.split()), key=string.split().index))", "code_4": "def remove_duplicate(string):\n    seen = set()\n    return \" \".join([word for word in string.split() if not (word in seen or seen.add(word))])", "code_5": "def remove_duplicate(string):\n    return \" \".join(list(dict.fromkeys(string.split())))", "code_6": "def remove_duplicate(string):\n    return \" \".join(list(set(string.split())))", "code_7": "def remove_duplicate(string):\n    return \" \".join(sorted(set(string.split()), key=string.index))", "code_8": "def remove_duplicate(string):\n    return \" \".join(list(dict.fromkeys(reversed(string.split()))))[::-1]", "code_9": "def remove_duplicate(string):\n    return \" \".join(list(dict.fromkeys(string.split()[::-1]))[::-1])", "code_10": "def remove_duplicate(string):\n    return \" \".join(list(dict.fromkeys(string.split()))[::-1])[::-1]", "pass@3": 0.9666666666666667, "nDCG@10": 0.7222954974312067}
{"task_id": "MBPP/675", "prompt": "\n\ndef sum_nums(x, y,m,n):\n    \"\"\"\n    Write a function to add two integers. however, if the sum is between the given range it will return 20.\n    >>> sum_nums(2,10,11,20)\n    20\n    >>> sum_nums(15,17,1,10)\n    32\n    >>> sum_nums(10,15,5,30)\n    20\n    \"\"\"\n", "solution": "    \n    sum_nums= x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_nums(x, y, m, n):\n    s = x + y\n    return s if s < m or s > n else 20", "code_2": "def sum_nums(x, y, m, n):\n    return 20 if m <= x + y <= n else x + y", "code_3": "def sum_nums(x, y, m, n):\n    return (x + y, 20)[m <= x + y <= n]", "code_4": "def sum_nums(x, y, m, n):\n    return (lambda s: s if s < m or s > n else 20)(x + y)", "code_5": "def sum_nums(x, y, m, n):\n    return (lambda s: 20 if m <= s <= n else s)(x + y)", "code_6": "def sum_nums(x, y, m, n):\n    return (lambda s: 20 if m <= s <= n else s)(sum((x, y)))", "code_7": "def sum_nums(x, y, m, n):\n    return (lambda s: 20 if m <= s <= n else s)(x + y)", "code_8": "def sum_nums(x, y, m, n):\n    return (lambda s: 20 if m <= s <= n else s)(sum((x, y)))", "code_9": "def sum_nums(x, y, m, n):\n    return (lambda s: 20 if m <= s <= n else s)(x + y)", "code_10": "def sum_nums(x, y, m, n):\n    return (lambda s: 20 if m <= s <= n else s)(sum((x, y)))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/676", "prompt": "\n\ndef remove_extra_char(text1):\n  \"\"\"\n  Write a function to remove everything except alphanumeric characters from the given string by using regex.\n  >>> remove_extra_char('**//Google Android// - 12. ')\n  'GoogleAndroid12'\n  >>> remove_extra_char('****//Google Flutter//*** - 36. ')\n  'GoogleFlutter36'\n  >>> remove_extra_char('**//Google Firebase// - 478. ')\n  'GoogleFirebase478'\n  \"\"\"\n", "solution": "  import re\n  \n  pattern = re.compile('[\\W_]+')\n  return (pattern.sub('', text1))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef remove_extra_char(text1):\n    return re.sub(r'\\W+', '', text1)", "code_2": "import re\ndef remove_extra_char(text1):\n    return ''.join(e for e in text1 if e.isalnum())", "code_3": "def remove_extra_char(text1):\n    return ''.join(filter(str.isalnum, text1))", "code_4": "import string\ndef remove_extra_char(text1):\n    return ''.join(ch for ch in text1 if ch in string.ascii_letters + string.digits)", "code_5": "def remove_extra_char(text1):\n    return ''.join(ch for ch in text1 if ch.isalpha() or ch.isdigit())", "code_6": "def remove_extra_char(text1):\n    return ''.join(ch for ch in text1 if ch.isidentifier() or ch.isdigit())", "code_7": "import re\ndef remove_extra_char(text1):\n    return ''.join(re.findall(r'\\w', text1))", "code_8": "def remove_extra_char(text1):\n    return ''.join(ch for ch in text1 if ch.isascii() and ch.isalnum())", "code_9": "def remove_extra_char(text1):\n    return ''.join(ch for ch in text1 if ch.isprintable() and ch.isalnum())", "code_10": "def remove_extra_char(text1):\n    return ''.join(ch for ch in text1 if ch.encode().isalnum())", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/677", "prompt": "\n\ndef validity_triangle(a,b,c):\n \"\"\"\n Write a function to check if the triangle is valid or not.\n >>> validity_triangle(60,50,90)\n False\n >>> validity_triangle(45,75,60)\n True\n >>> validity_triangle(30,50,100)\n True\n \"\"\"\n", "solution": " \n total = a + b + c\n if total == 180:\n    return True\n else:\n    return False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def validity_triangle(a,b,c):\n    return a + b > c and a + c > b and b + c > a", "code_2": "def validity_triangle(a,b,c):\n    sides = sorted([a,b,c])\n    return sides[0] + sides[1] > sides[2]", "code_3": "def validity_triangle(a,b,c):\n    return 2 * max(a,b,c) < a + b + c", "code_4": "def validity_triangle(a,b,c):\n    return all(s < (a+b+c-s) for s in (a,b,c))", "code_5": "def validity_triangle(a,b,c):\n    return sum(sorted([a,b,c])[:2]) > sorted([a,b,c])[2]", "code_6": "def validity_triangle(a,b,c):\n    return (a < b + c) and (b < a + c) and (c < a + b)", "code_7": "def validity_triangle(a,b,c):\n    return all(map(lambda x: x < a + b + c - x, [a, b, c]))", "code_8": "def validity_triangle(a,b,c):\n    return all(s < (a+b+c-s) for s in sorted([a,b,c]))", "code_9": "def validity_triangle(a,b,c):\n    return all(s < (a+b+c-s) for s in (a,b,c)) and a + b + c > 0", "code_10": "def validity_triangle(a,b,c):\n    return all(s > 0 and s < (a+b+c-s) for s in (a,b,c))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/678", "prompt": "\n\ndef remove_spaces(str1):\n  \"\"\"\n  Write a python function to remove spaces from a given string.\n  >>> remove_spaces(\"a b c\")\n  \"abc\"\n  >>> remove_spaces(\"1 2 3\")\n  \"123\"\n  >>> remove_spaces(\" b c\")\n  \"bc\"\n  \"\"\"\n", "solution": "  \n  str1 = str1.replace(' ','')\n  return str1", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_spaces(str1):\n    return str1.replace(\" \", \"\")", "code_2": "def remove_spaces(str1):\n    return ''.join(str1.split())", "code_3": "def remove_spaces(str1):\n    return ''.join(char for char in str1 if char != ' ')", "code_4": "def remove_spaces(str1):\n    return ''.join(filter(lambda char: char != ' ', str1))", "code_5": "import re\ndef remove_spaces(str1):\n    return re.sub(' ', '', str1)", "code_6": "def remove_spaces(str1):\n    return str1.translate(str.maketrans('', '', ' '))", "code_7": "def remove_spaces(str1):\n    return ''.join(str1.split(' '))", "code_8": "def remove_spaces(str1):\n    return str1.strip().replace(' ', '')", "code_9": "def remove_spaces(str1):\n    return ''.join(str1.split(' '))", "code_10": "def remove_spaces(str1):\n    return ''.join(char for char in str1 if char != ' ')", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/679", "prompt": "\n\ndef access_key(ditionary,key):\n  \"\"\"\n  Write a function to access dictionary key\u2019s element by index.\n  >>> access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)\n  'physics'\n  >>> access_key({'python':10, 'java': 20, 'C++':30},2)\n  'C++'\n  >>> access_key({'program':15,'computer':45},1)\n  'computer'\n  \"\"\"\n", "solution": "  \n  return list(ditionary)[key]", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def access_key(dictionary, key):\n    return list(dictionary.keys())[key]", "code_2": "def access_key(dictionary, key):\n    return [k for k in dictionary][key]", "code_3": "def access_key(dictionary, key):\n    return next(iter(dictionary.keys())) if key == 0 else list(dictionary.keys())[key]", "code_4": "def access_key(dictionary, key):\n    return tuple(dictionary.keys())[key]", "code_5": "def access_key(dictionary, key):\n    return [*dictionary][key]", "code_6": "def access_key(dictionary, key):\n    return {i: k for i, k in enumerate(dictionary.keys())}[key]", "code_7": "def access_key(dictionary, key):\n    return dict(zip(range(len(dictionary)), dictionary.keys()))[key]", "code_8": "def access_key(dictionary, key):\n    return [k for k in dictionary.keys() if _ for _ in range(key+1)][-1]", "code_9": "def access_key(dictionary, key):\n    return [k for k in dictionary][key] if key < len(dictionary) else None", "code_10": "def access_key(dictionary, key):\n    return [k for k in dictionary.keys()][key] if -len(dictionary) <= key < len(dictionary) else None", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/680", "prompt": "\n\ndef increasing_trend(nums):\n    \"\"\"\n    Write a python function to check whether a sequence of numbers has an increasing trend or not.\n    >>> increasing_trend([1,2,3,4])\n    True\n    >>> increasing_trend([4,3,2,1])\n    False\n    >>> increasing_trend([0,1,4,9])\n    True\n    \"\"\"\n", "solution": "    \n    if (sorted(nums)== nums):\n        return True\n    else:\n        return False", "results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def increasing_trend(nums):\n    return all(x<y for x, y in zip(nums, nums[1:]))", "code_2": "def increasing_trend(nums):\n    return nums == sorted(nums)", "code_3": "def increasing_trend(nums):\n    return len(set(nums)) == len(nums) and nums == sorted(nums)", "code_4": "def increasing_trend(nums):\n    return nums[1:] > nums[:-1]", "code_5": "def increasing_trend(nums):\n    return reduce(lambda x, y: x < y, nums)", "code_6": "def increasing_trend(nums):\n    return all(nums[i] < nums[i + 1] for i in range(len(nums) - 1))", "code_7": "def increasing_trend(nums):\n    return all(map(lambda x, y: x < y, nums, nums[1:]))", "code_8": "def increasing_trend(nums):\n    return nums == list(sorted(set(nums)))", "code_9": "def increasing_trend(nums):\n    return all(nums[i] < nums[i + 1] for i in xrange(len(nums) - 1))", "code_10": "def increasing_trend(nums):\n    return all(a < b for a, b in pairwise(nums))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7849818707050383}
{"task_id": "MBPP/681", "prompt": "\n\ndef smallest_Divisor(n):\n    \"\"\"\n    Write a python function to find the smallest prime divisor of a number.\n    >>> smallest_Divisor(10)\n    2\n    >>> smallest_Divisor(25)\n    5\n    >>> smallest_Divisor(31)\n    31\n    \"\"\"\n", "solution": "     \n    if (n % 2 == 0): \n        return 2; \n    i = 3;  \n    while (i*i <= n): \n        if (n % i == 0): \n            return i; \n        i += 2; \n    return n; ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def smallest_Divisor(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "code_2": "def smallest_Divisor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n", "code_3": "def smallest_Divisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i:\n            i += 2\n        else:\n            return i\n    return n", "code_4": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    for i in [2, 3]:\n        if n % i == 0:\n            return i\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return i if n % i == 0 else i + 2\n    return n", "code_5": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += w\n        w = 6 - w\n    return n", "code_6": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    for i in [2, 3, 5]:\n        if n % i == 0:\n            return i\n    i = 7\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n        if n % i == 0:\n            return i\n        i += 4\n    return n", "code_7": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    d = 5\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += 2\n        if n % d == 0:\n            return d\n        d += 4\n    return n", "code_8": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    d = 5\n    inc = 2\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += inc\n        inc = 6 - inc\n    return n", "code_9": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    d = 5\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += 2\n        if n % d == 0:\n            return d\n        d += 4\n    return n", "code_10": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    d = 5\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += 2\n        if n % d == 0:\n            return d\n        d += 4\n    return n", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/682", "prompt": "\n\ndef mul_list(nums1,nums2):\n  \"\"\"\n  Write a function to multiply two lists using map and lambda function.\n  >>> mul_list([1, 2, 3],[4,5,6])\n  [4,10,18]\n  >>> mul_list([1,2],[3,4])\n  [3,8]\n  >>> mul_list([90,120],[50,70])\n  [4500,8400]\n  \"\"\"\n", "solution": "  \n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "results": [1, 1, 1, 1, 1, 0, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def mul_list(nums1, nums2):\n    return list(map(lambda x, y: x * y, nums1, nums2))", "code_2": "def mul_list(nums1, nums2):\n    return [x * y for x, y in zip(nums1, nums2)]", "code_3": "def mul_list(nums1, nums2):\n    return [a * b for a, b in zip(nums1, nums2)]", "code_4": "def mul_list(nums1, nums2):\n    return [i * j for i, j in zip(nums1, nums2)]", "code_5": "def mul_list(nums1, nums2):\n    return [num1 * num2 for num1, num2 in zip(nums1, nums2)]", "code_6": "def mul_list(nums1, nums2):\n    return [a * b for a, b in itertools.zip_longest(nums1, nums2)]", "code_7": "def mul_list(nums1, nums2):\n    return [nums1[i] * nums2[i] for i in range(len(nums1))]", "code_8": "def mul_list(nums1, nums2):\n    return [num1 * num2 for num1, num2 in itertools.product(nums1, nums2)]", "code_9": "def mul_list(nums1, nums2):\n    return [nums1[i] * nums2[i] for i in range(min(len(nums1), len(nums2)))]", "code_10": "def mul_list(nums1, nums2):\n    return [num1 * num2 for num1, num2 in zip(nums1, nums2) if num1 and num2]", "pass@3": 1.0, "nDCG@10": 0.8521705090845474}
{"task_id": "MBPP/683", "prompt": "\n\ndef sum_Square(n) :\n    \"\"\"\n    Write a python function to check whether the given number can be represented by sum of two squares or not.\n    >>> sum_Square(25)\n    True\n    >>> sum_Square(24)\n    False\n    >>> sum_Square(17)\n    True\n    \"\"\"\n", "solution": "     \n    i = 1 \n    while i*i <= n : \n        j = 1\n        while (j*j <= n) : \n            if (i*i+j*j == n) : \n                return True\n            j = j+1\n        i = i+1     \n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_Square(n):\n    for i in range(int(n**0.5)+1):\n        if int((n-i*i)**0.5)**2 == n-i*i:\n            return True\n    return False", "code_2": "def sum_Square(n):\n    return any((i*i + j*j == n for i in range(int(n**0.5)+1) for j in range(int(n**0.5)+1)))", "code_3": "def sum_Square(n):\n    i = 0\n    j = int(n**0.5)\n    while i <= j:\n        sum = i*i + j*j\n        if sum == n:\n            return True\n        elif sum < n:\n            i += 1\n        else:\n            j -= 1\n    return False", "code_4": "def sum_Square(n):\n    i = 0\n    while i*i <= n:\n        j = int((n - i*i)**0.5)\n        if i*i + j*j == n:\n            return True\n        i += 1\n    return False", "code_5": "def sum_Square(n):\n    i = 0\n    j = int(n**0.5)\n    while i <= j:\n        if i*i + j*j == n:\n            return True\n        elif i*i + j*j < n:\n            i += 1\n        else:\n            j -= 1\n    return False", "code_6": "def sum_Square(n):\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "code_7": "def sum_Square(n):\n    i = 0\n    j = int(n**0.5)\n    while i <= j:\n        if i*i + j*j == n:\n            return True\n        if i*i + j*j < n:\n            i += 1\n        else:\n            j -= 1\n    return False", "code_8": "def sum_Square(n):\n    i = 0\n    while i*i <= n:\n        j = int((n - i*i)**0.5)\n        if i*i + j*j == n:\n            return True\n        i += 1\n    return False", "code_9": "def sum_Square(n):\n    i = 0\n    j = int(n**0.5)\n    while i <= j:\n        sum = i*i + j*j\n        if sum == n:\n            return True\n        elif sum < n:\n            i += 1\n        else:\n            j -= 1\n    return False", "code_10": "def sum_Square(n):\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n - i*i:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/684", "prompt": "\n\ndef count_Char(str,x):\n    \"\"\"\n    Write a python function to count occurences of a character in a repeated string.\n    >>> count_Char(\"abcac\",'a')\n    4\n    >>> count_Char(\"abca\",'c')\n    2\n    >>> count_Char(\"aba\",'a')\n    7\n    \"\"\"\n", "solution": "     \n    count = 0\n    for i in range(len(str)):  \n        if (str[i] == x) : \n            count += 1\n    n = 10\n    repititions = n // len(str)  \n    count = count * repititions  \n    l = n % len(str)  \n    for i in range(l): \n        if (str[i] == x):  \n            count += 1\n    return count  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Char(s, x):\n    return s.count(x) * len(s)", "code_2": "def count_Char(s, x):\n    return sum(1 for c in s if c == x) * len(s)", "code_3": "def count_Char(s, x):\n    return len([c for c in s if c == x]) * len(s)", "code_4": "def count_Char(s, x):\n    return sum(map(lambda c: c == x, s)) * len(s)", "code_5": "def count_Char(s, x):\n    return sum(s[i] == x for i in range(len(s))) * len(s)", "code_6": "def count_Char(s, x):\n    return len(s.replace(x, '')) * len(s)", "code_7": "def count_Char(s, x):\n    return len(s) - len(s.replace(x, ''))", "code_8": "def count_Char(s, x):\n    return len(s) - sum(c != x for c in s)", "code_9": "def count_Char(s, x):\n    return len(s) - sum(1 for c in s if c != x)", "code_10": "def count_Char(s, x):\n    return len(s) - sum(map(lambda c: c != x, s))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/685", "prompt": "\n\ndef sum_Of_Primes(n):\n    \"\"\"\n    Write a python function to find sum of prime numbers between 1 to n.\n    >>> sum_Of_Primes(10)\n    17\n    >>> sum_Of_Primes(20)\n    77\n    >>> sum_Of_Primes(5)\n    10\n    \"\"\"\n", "solution": "     \n    prime = [True] * (n + 1)  \n    p = 2\n    while p * p <= n: \n        if prime[p] == True:  \n            i = p * 2\n            while i <= n: \n                prime[i] = False\n                i += p \n        p += 1    \n    sum = 0\n    for i in range (2,n + 1): \n        if(prime[i]): \n            sum += i \n    return sum", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_Of_Primes(n):\n    primes = [True] * (n+1)\n    p = 2\n    while p * p <= n:\n        if primes[p] == True:\n            for i in range(p * p, n+1, p):\n                primes[i] = False\n        p += 1\n    return sum(i for i in range(2, n+1) if primes[i])", "code_2": "def sum_Of_Primes(n):\n    primes = [True] * (n+1)\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n+1, p):\n                primes[i] = False\n        p += 1\n    return sum(i for i, is_prime in enumerate(primes) if is_prime and i > 1)", "code_3": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_4": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_5": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_6": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_7": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_8": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_9": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "code_10": "def sum_Of_Primes(n):\n    sieve = [True] * (n+1)\n    for x in range(2, int(n**0.5) + 1):\n        if sieve[x]:\n            for i in range(x*x, n+1, x):\n                sieve[i] = False\n    return sum(i for i in range(2, n+1) if sieve[i])", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/686", "prompt": "\n\ndef freq_element(test_tup):\n  \"\"\"\n  Write a function to find the frequency of each element in the given list.\n  >>> freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) )\n  '{4: 3, 5: 4, 6: 2}'\n  >>> freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) )\n  '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\n  >>> freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) )\n  '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'\n  \"\"\"\n", "solution": "  from collections import defaultdict \n  \n  res = defaultdict(int)\n  for ele in test_tup:\n    res[ele] += 1\n  return (str(dict(res))) ", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def freq_element(test_tup):\n    return str(dict(map(lambda x: (x, test_tup.count(x)), test_tup)))", "code_2": "from collections import Counter\ndef freq_element(test_tup):\n    return str(dict(Counter(test_tup)))", "code_3": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return str(freq)", "code_4": "def freq_element(test_tup):\n    return str({i: test_tup.count(i) for i in test_tup})", "code_5": "import collections\ndef freq_element(test_tup):\n    return str(collections.defaultdict(int, ((i, test_tup.count(i)) for i in test_tup)))", "code_6": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.get(item, 0) + 1\n    return str(freq)", "code_7": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.setdefault(item, 0) + 1\n    return str(freq)", "code_8": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.setdefault(item, 0)\n        freq[item] += 1\n    return str(freq)", "code_9": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.get(item, 0)\n        freq[item] += 1\n    return str(freq)", "code_10": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.setdefault(item, 0)\n        freq[item] += 1\n    return str(freq)", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/687", "prompt": "\n\ndef recur_gcd(a, b):\n\t\"\"\"\n\tWrite a function to find the greatest common divisor (gcd) of two integers by using recursion.\n\t>>> recur_gcd(12,14)\n\t2\n\t>>> recur_gcd(13,17)\n\t1\n\t>>> recur_gcd(9, 3)\n\t3\n\t\"\"\"\n", "solution": "\t\n\tlow = min(a, b)\n\thigh = max(a, b)\n\tif low == 0:\n\t\treturn high\n\telif low == 1:\n\t\treturn 1\n\telse:\n\t\treturn recur_gcd(low, high%low)", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def recur_gcd(a, b):\n    return a if b == 0 else recur_gcd(b, a % b)", "code_2": "def recur_gcd(a, b):\n    return recur_gcd(b, a) if a < b else recur_gcd(a - b, b) if a > b else a", "code_3": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b % a)", "code_4": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a - b, b) if a > b // 2 else a if a != 0 else b", "code_5": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b - a) if b > a else a", "code_6": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b - a) if b > a + a // 2 else a", "code_7": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b - a) if b > a + a >> 1 else a", "code_8": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b - a) if b > a + a >> 2 else a if a != 0 else b", "code_9": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b - a) if b > a + a >> 3 else a if a != 0 else b if b != 0 else 0", "code_10": "def recur_gcd(a, b):\n    return recur_gcd(b, a % b) if a > b else recur_gcd(a, b - a) if b > a + a >> 4 else a if a > 1 else b if b > 1 else a + b", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/688", "prompt": "\n\ndef len_complex(a,b):\n  \"\"\"\n  Write a function to get the length of a complex number.\n  >>> len_complex(3,4)\n  5.0\n  >>> len_complex(9,10)\n  13.45362404707371\n  >>> len_complex(7,9)\n  11.40175425099138\n  \"\"\"\n", "solution": "  import cmath\n  \n  cn=complex(a,b)\n  length=abs(cn)\n  return length", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)", "code_2": "import cmath\ndef len_complex(a, b):\n    return abs(complex(a, b))", "code_3": "def len_complex(a, b):\n    return (a**2 + b**2)**0.5", "code_4": "from math import hypot\ndef len_complex(a, b):\n    return hypot(a, b)", "code_5": "import numpy as np\ndef len_complex(a, b):\n    return np.linalg.norm([a, b])", "code_6": "def len_complex(a, b):\n    return (a*a + b*b)**(1/2)", "code_7": "def len_complex(a, b):\n    return (a*a + b*b)**0.5", "code_8": "def len_complex(a, b):\n    return (a**2 + b**2)**(1/2)", "code_9": "def len_complex(a, b):\n    return (a**2 + b**2)**(0.5)", "code_10": "def len_complex(a, b):\n    return (a**2 + b**2)**(1.0/2.0)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/689", "prompt": "\n\ndef min_jumps(arr, n):\n\t\"\"\"\n\t## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n\t>>> min_jumps([1, 3, 6, 1, 0, 9], 6)\n\t3\n\t>>> min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n\t3\n\t>>> min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n\t10\n\t\"\"\"\n", "solution": "\t\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def min_jumps(arr, n):\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[-1]", "code_2": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1", "code_3": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1", "code_4": "def min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float('inf')\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float('inf')):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[-1]", "code_5": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1", "code_6": "def min_jumps(arr, n):\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[-1] if jumps[-1] != float('inf') else -1", "code_7": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1", "code_8": "def min_jumps(arr, n):\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[-1] if jumps[-1] != float('inf') else -1", "code_9": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return -1\n            step = max_reach - i\n    return -1", "code_10": "def min_jumps(arr, n):\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[-1] if jumps[-1] != float('inf') else -1", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/690", "prompt": "\n\ndef mul_consecutive_nums(nums):\n    \"\"\"\n    Write a function to multiply consecutive numbers of a given list.\n    >>> mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [1, 3, 12, 16, 20, 30, 42]\n    >>> mul_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [20, 40, 72, 54, 60]\n    >>> mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 6, 12, 20, 30, 42, 56, 72, 90]\n    \"\"\"\n", "solution": "    \n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "results": [1, 1, 0, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def mul_consecutive_nums(nums):\n    return [nums[i]*nums[i+1] for i in range(len(nums)-1)]", "code_2": "def mul_consecutive_nums(nums):\n    return [a*b for a, b in zip(nums, nums[1:])]", "code_3": "from itertools import starmap, izip\ndef mul_consecutive_nums(nums):\n    return list(starmap(lambda x, y: x*y, izip(nums, nums[1:])))", "code_4": "def mul_consecutive_nums(nums):\n    return [a*b for a, b in zip(nums[:-1], nums[1:])]", "code_5": "def mul_consecutive_nums(nums):\n    return [a*b for a, b in zip(nums, nums[1:]) if a*b]", "code_6": "def mul_consecutive_nums(nums):\n    return [a*b for a, b in zip(nums[:-1], nums[1:]) if a*b]", "code_7": "def mul_consecutive_nums(nums):\n    return [a*b for a, b in zip(nums[:-1], nums[1:]) if a and b]", "code_8": "def mul_consecutive_nums(nums):\n    return [nums[i]*nums[i+1] for i in range(len(nums)-1) if nums[i]*nums[i+1]]", "code_9": "def mul_consecutive_nums(nums):\n    return [nums[i]*nums[i+1] for i in xrange(len(nums)-1) if nums[i]*nums[i+1]]", "code_10": "def mul_consecutive_nums(nums):\n    return [nums[i]*nums[i+1] for i in range(len(nums)-1) if nums[i] and nums[i+1]]", "pass@3": 1.0, "nDCG@10": 0.823699893396571}
{"task_id": "MBPP/691", "prompt": "\n\ndef group_element(test_list):\n  \"\"\"\n  Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n  >>> group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)])\n  {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n  >>> group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)])\n  {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n  >>> group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)])\n  {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n  \"\"\"\n", "solution": "  from itertools import groupby \n  \n  res = dict()\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\n    res[key] = [ele[0] for ele in val] \n  return (res)\n", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import defaultdict\ndef group_element(test_list):\n    d = defaultdict(list)\n    for a, b in test_list:\n        d[b].append(a)\n    return dict(d)", "code_2": "def group_element(test_list):\n    return {b: [a for a, b_ in test_list if b_ == b] for b in set(b for a, b in test_list)}", "code_3": "import itertools\ndef group_element(test_list):\n    test_list.sort(key=lambda x: x[1])\n    return {k: [i for i, _ in g] for k, g in itertools.groupby(test_list, key=lambda x: x[1])}", "code_4": "def group_element(test_list):\n    res = {}\n    for a, b in test_list:\n        res.setdefault(b, []).append(a)\n    return res", "code_5": "def group_element(test_list):\n    res = {}\n    for a, b in sorted(test_list, key=lambda x: x[1]):\n        res.setdefault(b, []).append(a)\n    return res", "code_6": "import pandas as pd\ndef group_element(test_list):\n    df = pd.DataFrame(test_list, columns=['a', 'b'])\n    return df.groupby('b')['a'].apply(list).to_dict()", "code_7": "def group_element(test_list):\n    res = {}\n    for a, b in test_list:\n        res[b] = res.get(b, []) + [a]\n    return res", "code_8": "def group_element(test_list):\n    res = {}\n    for a, b in test_list:\n        if b not in res:\n            res[b] = [a]\n        else:\n            res[b].append(a)\n    return res", "code_9": "def group_element(test_list):\n    res = {}\n    for a, b in test_list:\n        res[b] = [a] + res.get(b, [])\n    for b in res:\n        res[b] = res[b][::-1]\n    return res", "code_10": "def group_element(test_list):\n    res = {}\n    for a, b in test_list:\n        if b in res:\n            res[b].append(a)\n        else:\n            res[b] = [a]\n    return res", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/692", "prompt": "\n\ndef last_Two_Digits(N):\n    \"\"\"\n    Write a python function to find the last two digits in factorial of a given number.\n    >>> last_Two_Digits(7)\n    40\n    >>> last_Two_Digits(5)\n    20\n    >>> last_Two_Digits(2)\n    2\n    \"\"\"\n", "solution": "     \n    if (N >= 10): \n        return\n    fac = 1\n    for i in range(1,N + 1): \n        fac = (fac * i) % 100\n    return (fac) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def last_Two_Digits(N):\n    f = 1\n    for i in range(2, N+1):\n        f = (f * i) % 100\n    return f", "code_2": "def last_Two_Digits(N):\n    return (N < 2 and N or last_Two_Digits(N-1) * (N % 100)) % 100", "code_3": "from functools import reduce\ndef last_Two_Digits(N):\n    return reduce(lambda x, y: (x * y) % 100, range(1, N+1))", "code_4": "import math\ndef last_Two_Digits(N):\n    return int(str(math.factorial(N))[-2:])", "code_5": "def last_Two_Digits(N):\n    if N < 2:\n        return N\n    else:\n        f = 1\n        for i in range(2, N+1):\n            f *= i\n        return f % 100", "code_6": "def last_Two_Digits(N):\n    if N < 2:\n        return N\n    else:\n        return (N * last_Two_Digits(N-1)) % 100", "code_7": "def last_Two_Digits(N):\n    f = [1] * (N+1)\n    for i in range(2, N+1):\n        f[i] = (f[i-1] * i) % 100\n    return f[N]", "code_8": "def last_Two_Digits(N):\n    f = 1\n    for i in range(2, N+1):\n        if i % 5 == 0:\n            f = (f * 20) % 100\n        else:\n            f = (f * i) % 100\n    return f", "code_9": "def last_Two_Digits(N):\n    if N < 2:\n        return N\n    else:\n        return pow(last_Two_Digits(N-1), 10, 100) * (N % 100) % 100", "code_10": "def last_Two_Digits(N):\n    f = [1] * (N+1)\n    for i in range(2, N+1):\n        f[i] = f[i-1] * i\n        while f[i] >= 100:\n            f[i] //= 10\n    return f[N]", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/693", "prompt": "\n\ndef remove_multiple_spaces(text1):\n  \"\"\"\n  Write a function to remove multiple spaces in a string by using regex.\n  >>> remove_multiple_spaces('Google      Assistant')\n  'Google Assistant'\n  >>> remove_multiple_spaces('Quad      Core')\n  'Quad Core'\n  >>> remove_multiple_spaces('ChromeCast      Built-in')\n  'ChromeCast Built-in'\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.sub(' +',' ',text1))", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef remove_multiple_spaces(text1):\n    return re.sub(' +', ' ', text1)", "code_2": "import re\ndef remove_multiple_spaces(text1):\n    return ' '.join(text1.split())", "code_3": "def remove_multiple_spaces(text1):\n    return ' '.join(filter(None, text1.split(' ')))", "code_4": "def remove_multiple_spaces(text1):\n    return ' '.join(word for word in text1.split() if word)", "code_5": "def remove_multiple_spaces(text1):\n    return ' '.join(text1.split(' ')).strip()", "code_6": "def remove_multiple_spaces(text1):\n    return ' '.join(text1.split()).strip()", "code_7": "def remove_multiple_spaces(text1):\n    return ' '.join(filter(lambda x: x != '', text1.split(' ')))", "code_8": "def remove_multiple_spaces(text1):\n    return ' '.join(word for word in text1.split(' ') if word != '')", "code_9": "def remove_multiple_spaces(text1):\n    return ' '.join(text1.split()).strip(' ')", "code_10": "def remove_multiple_spaces(text1):\n    return ' '.join(text1.split(' ')).strip(' ')", "pass@3": 1.0, "nDCG@10": 0.8512360941594275}
{"task_id": "MBPP/694", "prompt": "\n\ndef extract_unique(test_dict):\n  \"\"\"\n  Write a function to extract unique values from the given dictionary values.\n  >>> extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} )\n  [1, 2, 5, 6, 7, 8, 10, 11, 12]\n  >>> extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} )\n  [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n  >>> extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]})\n  [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n  \"\"\"\n", "solution": "  \n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res", "results": [1, 0, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def extract_unique(test_dict):\n    return sorted(set().union(*test_dict.values()))", "code_2": "def extract_unique(test_dict):\n    return list(set(sum(test_dict.values(), [])))", "code_3": "def extract_unique(test_dict):\n    return list(set(item for sublist in test_dict.values() for item in sublist))", "code_4": "def extract_unique(test_dict):\n    return sorted(list(set(i for v in test_dict.values() for i in v)))", "code_5": "def extract_unique(test_dict):\n    return sorted(list({i for v in test_dict.values() for i in v}))", "code_6": "def extract_unique(test_dict):\n    return sorted(set(i for sublist in test_dict.values() for i in sublist))", "code_7": "def extract_unique(test_dict):\n    return sorted(set(i for sub in test_dict.values() for i in sub))", "code_8": "def extract_unique(test_dict):\n    return sorted(set(i for v in test_dict.values() for i in v))", "code_9": "def extract_unique(test_dict):\n    return sorted(set(i for sub in test_dict.values() for i in sub))", "code_10": "def extract_unique(test_dict):\n    return sorted(set(i for sublist in test_dict.values() for i in sublist))", "pass@3": 1.0, "nDCG@10": 0.7510916729774055}
{"task_id": "MBPP/695", "prompt": "\n\ndef check_greater(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n  >>> check_greater((10, 4, 5), (13, 5, 18))\n  True\n  >>> check_greater((1, 2, 3), (2, 1, 4))\n  False\n  >>> check_greater((4, 5, 6), (5, 6, 7))\n  True\n  \"\"\"\n", "solution": "  \n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\n  return (res) ", "results": [1, 1, 1, 1, 0, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def check_greater(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))", "code_2": "def check_greater(t1, t2):\n    return min(x < y for x, y in zip(t1, t2))", "code_3": "def check_greater(t1, t2):\n    for x, y in zip(t1, t2):\n        if x >= y:\n            return False\n    return True", "code_4": "def check_greater(t1, t2):\n    return not any(x >= y for x, y in zip(t1, t2))", "code_5": "def check_greater(t1, t2):\n    return len(t1) == len(t2) and all(starmap(lt, zip(t1, t2)))", "code_6": "def check_greater(t1, t2):\n    return reduce(lambda a, b: a and b, starmap(lt, zip(t1, t2)))", "code_7": "def check_greater(t1, t2):\n    return all(map(lambda x: x[0] < x[1], zip(t1, t2)))", "code_8": "def check_greater(t1, t2):\n    return all(map(itemgetter(0).__lt__, zip(t1, t2)))", "code_9": "def check_greater(t1, t2):\n    return all(map(lambda x, y: x < y, t1, t2))", "code_10": "def check_greater(t1, t2):\n    return all(map(operator.lt, t1, t2))", "pass@3": 0.9666666666666667, "nDCG@10": 0.7034066032439749}
{"task_id": "MBPP/696", "prompt": "\n\ndef zip_list(list1,list2):\n \"\"\"\n Write a function to zip two given lists of lists.\n >>> zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )\n [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n >>> zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )\n [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n >>> zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )\n [['a','b','e','f'],['c','d','g','h']]\n \"\"\"\n", "solution": "   \n result = list(map(list.__add__, list1, list2)) \n return result", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def zip_list(l1, l2):\n    return [a+b for a, b in zip(l1, l2)]", "code_2": "def zip_list(l1, l2):\n    return list(map(lambda x, y: x+y, l1, l2))", "code_3": "def zip_list(l1, l2):\n    return [i1+i2 for i1, i2 in zip(l1, l2)]", "code_4": "def zip_list(l1, l2):\n    return [i1+i2 for i1, i2 in map(None, l1, l2)]", "code_5": "def zip_list(l1, l2):\n    return [i1+i2 for i1, i2 in itertools.zip_longest(l1, l2, fillvalue=[])]", "code_6": "def zip_list(l1, l2):\n    return [i1+i2 for i1, i2 in zip_longest(l1, l2, fillvalue=[])]", "code_7": "def zip_list(l1, l2):\n    return [x+y for x, y in zip_longest(l1, l2, fillvalue=[])]", "code_8": "def zip_list(l1, l2):\n    return [x+y for x, y in itertools.zip_longest(l1, l2, fillvalue=[])]", "code_9": "def zip_list(l1, l2):\n    return [x+y for x, y in zip_longest(l1, l2)]", "code_10": "def zip_list(l1, l2):\n    return [x+y for x, y in itertools.zip_longest(l1, l2)]", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/697", "prompt": "\n\ndef count_even(array_nums):\n   \"\"\"\n   Write a function to find number of even elements in the given list using lambda function.\n   >>> count_even([1, 2, 3, 5, 7, 8, 9, 10])\n   3\n   >>> count_even([10,15,14,13,-18,12,-20])\n   5\n   >>> count_even([1, 2, 4, 8, 9])\n   3\n   \"\"\"\n", "solution": "   \n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "count_even = lambda array_nums: sum(1 for num in array_nums if num % 2 == 0)", "code_2": "count_even = lambda array_nums: len(list(filter(lambda num: num % 2 == 0, array_nums)))", "code_3": "count_even = lambda array_nums: len([num for num in array_nums if num % 2 == 0])", "code_4": "from functools import reduce\ncount_even = lambda array_nums: reduce(lambda count, num: count + (num % 2 == 0), array_nums, 0)", "code_5": "count_even = lambda array_nums: sum(map(lambda num: num % 2 == 0, array_nums))", "code_6": "count_even = lambda array_nums: len(list(num for num in array_nums if num % 2 == 0))", "code_7": "count_even = lambda array_nums: sum(num % 2 == 0 for num in array_nums)", "code_8": "count_even = lambda array_nums: len(tuple(filter(lambda num: num % 2 == 0, array_nums)))", "code_9": "count_even = lambda array_nums: len(list(filter(lambda num: not num & 1, array_nums)))", "code_10": "count_even = lambda array_nums: sum(1 for num in array_nums if not num & 1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/698", "prompt": "\n\ndef sort_dict_item(test_dict):\n  \"\"\"\n  Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n  >>> sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} )\n  {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n  >>> sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} )\n  {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n  >>> sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} )\n  {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n  \"\"\"\n", "solution": "  \n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\n  return  (res) \n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sort_dict_item(test_dict):\n  return dict(sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1]))", "code_2": "def sort_dict_item(test_dict):\n  return {k: v for k, v in sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1])}", "code_3": "def sort_dict_item(test_dict):\n  return dict(sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1]))", "code_4": "def sort_dict_item(test_dict):\n  return dict(sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1]))", "code_5": "def sort_dict_item(test_dict):\n  return {k: v for k, v in sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1])}", "code_6": "def sort_dict_item(test_dict):\n  return dict(sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1]))", "code_7": "def sort_dict_item(test_dict):\n  return {k: v for k, v in sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1])}", "code_8": "def sort_dict_item(test_dict):\n  return dict(sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1]))", "code_9": "def sort_dict_item(test_dict):\n  return {k: v for k, v in sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1])}", "code_10": "def sort_dict_item(test_dict):\n  return dict(sorted(test_dict.items(), key=lambda item: item[0][0]*item[0][1]))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/699", "prompt": "\n\ndef min_Swaps(str1,str2) :\n    \"\"\"\n    Write a python function to find the minimum number of swaps required to convert one binary string to another.\n    >>> min_Swaps(\"1101\",\"1110\")\n    1\n    >>> min_Swaps(\"1111\",\"0100\")\n    \"Not Possible\"\n    >>> min_Swaps(\"1110000\",\"0001101\")\n    3\n    \"\"\"\n", "solution": "     \n    count = 0\n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) // 2", "code_2": "def min_Swaps(str1, str2):\n    return (sum(map(str.__ne__, str1, str2))) // 2", "code_3": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) >> 1", "code_4": "def min_Swaps(str1, str2):\n    return sum(1 for a, b in zip(str1, str2) if a != b) // 2", "code_5": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in map(None, str1, str2)) // 2", "code_6": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) >> 1", "code_7": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) // 2", "code_8": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) >> 1", "code_9": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) // 2", "code_10": "def min_Swaps(str1, str2):\n    return sum(a != b for a, b in zip(str1, str2)) >> 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/700", "prompt": "\n\ndef count_range_in_list(li, min, max):\n\t\"\"\"\n\tWrite a function to count the number of elements in a list which are within a specific range.\n\t>>> count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)\n\t6\n\t>>> count_range_in_list(['a','b','c','d','e','f'],'a','e')\n\t5\n\t>>> count_range_in_list([7,8,9,15,17,19,45],15,20)\n\t3\n\t\"\"\"\n", "solution": "\t\n\tctr = 0\n\tfor x in li:\n\t\tif min <= x <= max:\n\t\t\tctr += 1\n\treturn ctr", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_range_in_list(li, min, max):\n    return sum(min <= i <= max for i in li)", "code_2": "def count_range_in_list(li, min, max):\n    return len([i for i in li if min <= i <= max])", "code_3": "def count_range_in_list(li, min, max):\n    return sum(1 for i in li if min <= i <= max)", "code_4": "def count_range_in_list(li, min, max):\n    return len(list(filter(lambda x: min <= x <= max, li)))", "code_5": "def count_range_in_list(li, min, max):\n    return len([i for i in li if i >= min and i <= max])", "code_6": "def count_range_in_list(li, min, max):\n    return sum(i in range(min, max+1) for i in li)", "code_7": "def count_range_in_list(li, min, max):\n    return len([i for i in li if i in range(min, max+1)])", "code_8": "def count_range_in_list(li, min, max):\n    return len([i for i in li if min <= i and i <= max])", "code_9": "def count_range_in_list(li, min, max):\n    return len([i for i in li if i >= min if i <= max])", "code_10": "def count_range_in_list(li, min, max):\n    return len([i for i in li if min <= i <= max])", "pass@3": 1.0, "nDCG@10": 0.8482378089219648}
{"task_id": "MBPP/701", "prompt": "\n\ndef equilibrium_index(arr):\n  \"\"\"\n  Write a function to find the equilibrium index of the given array.\n  >>> equilibrium_index([1, 2, 3, 4, 1, 2, 3])\n  3\n  >>> equilibrium_index([-7, 1, 5, 2, -4, 3, 0])\n  3\n  >>> equilibrium_index([1, 2, 3])\n  -1\n  \"\"\"\n", "solution": "  \n  total_sum = sum(arr)\n  left_sum=0\n  for i, num in enumerate(arr):\n    total_sum -= num\n    if left_sum == total_sum:\n      return i\n    left_sum += num\n  return -1", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def equilibrium_index(arr):\n    left_sum, right_sum = 0, sum(arr)\n    for i, num in enumerate(arr):\n        right_sum -= num\n        if left_sum == right_sum:\n            return i\n        left_sum += num\n    return -1", "code_2": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        if left_sum == (total_sum - left_sum - num):\n            return i\n        left_sum += num\n    return -1", "code_3": "def equilibrium_index(arr):\n    left_sum = 0\n    right_sum = sum(arr[1:])\n    for i in range(len(arr)):\n        if left_sum == right_sum:\n            return i\n        left_sum += arr[i]\n        right_sum -= arr[i+1] if i+1 < len(arr) else 0\n    return -1", "code_4": "def equilibrium_index(arr):\n    n = len(arr)\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n    suffix_sum[n-1] = arr[n-1]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n    for i in range(n-2, -1, -1):\n        suffix_sum[i] = suffix_sum[i+1] + arr[i]\n    for i in range(1, n-1):\n        if prefix_sum[i-1] == suffix_sum[i+1]:\n            return i\n    return -1", "code_5": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1", "code_6": "def equilibrium_index(arr):\n    left_sum = 0\n    right_sum = sum(arr)\n    for i, num in enumerate(arr):\n        right_sum -= num\n        if left_sum == right_sum:\n            return i\n        left_sum += num\n    return -1", "code_7": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1", "code_8": "def equilibrium_index(arr):\n    left_sum = 0\n    right_sum = sum(arr)\n    for i, num in enumerate(arr):\n        right_sum -= num\n        if left_sum == right_sum:\n            return i\n        left_sum += num\n    return -1", "code_9": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        if left_sum == (total_sum - left_sum - num):\n            return i\n        left_sum += num\n    return -1", "code_10": "def equilibrium_index(arr):\n    left_sum = 0\n    right_sum = sum(arr)\n    for i, num in enumerate(arr):\n        right_sum -= num\n        if left_sum == right_sum:\n            return i\n        left_sum += num\n    return -1", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/702", "prompt": "\n\ndef removals(arr, n, k):\n\t\"\"\"\n\tWrite a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n\t>>> removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4)\n\t5\n\t>>> removals([1, 5, 6, 2, 8], 5, 2)\n\t3\n\t>>> removals([1, 2, 3 ,4, 5, 6], 6, 3)\n\t2\n\t\"\"\"\n", "solution": "\tdef find_ind(key, i, n, \n\t\t\t\tk, arr):\n\t\tind = -1\n\t\tstart = i + 1\n\t\tend = n - 1;\n\t\twhile (start < end):\n\t\t\tmid = int(start +\n\t\t\t\t\t(end - start) / 2)\n\t\t\tif (arr[mid] - key <= k):\n\t\t\t\tind = mid\n\t\t\t\tstart = mid + 1\n\t\t\telse:\n\t\t\t\tend = mid\n\t\treturn ind\n\t\n\tans = n - 1\n\tarr.sort()\n\tfor i in range(0, n):\n\t\tj = find_ind(arr[i], i, \n\t\t\t\t\tn, k, arr)\n\t\tif (j != -1):\n\t\t\tans = min(ans, n -\n\t\t\t\t\t\t(j - i + 1))\n\treturn ans", "results": [1, 1, 1, 1, 0, 0, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "def removals(arr, n, k):\n    arr.sort()\n    i, j, res = 0, 0, n\n    while j < n:\n        if arr[j] - arr[i] <= k:\n            res = min(res, n - (j - i + 1))\n            j += 1\n        else:\n            i += 1\n    return res", "code_2": "def removals(arr, n, k):\n    arr.sort()\n    i, res = 0, n\n    for j in range(n):\n        while arr[j] - arr[i] > k:\n            i += 1\n        res = min(res, n - (j - i + 1))\n    return res", "code_3": "def removals(arr, n, k):\n    arr.sort()\n    i, res = 0, n\n    for j in range(n):\n        if arr[j] - arr[i] > k:\n            i += 1\n        res = min(res, n - (j - i + 1))\n    return res", "code_4": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while j < n:\n        if arr[j] - arr[i] > k:\n            i += 1\n        j += 1\n    return n - (j - i)", "code_5": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while j < n:\n        if arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return n - (j - i)", "code_6": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return n - (j - i)", "code_7": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[j] - arr[i] <= k:\n            j += 1\n        else:\n            i += 1\n    return n - (j - i)", "code_8": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while j < n:\n        if arr[j] - arr[i] > k:\n            i += 1\n        j += 1\n    return n - (j - i)", "code_9": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[j] - arr[i] <= k:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return n - (j - i)", "code_10": "def removals(arr, n, k):\n    arr.sort()\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return n - (j - i)", "pass@3": 0.9666666666666667, "nDCG@10": 0.699473903081392}
{"task_id": "MBPP/703", "prompt": "\n\ndef is_key_present(d,x):\n  \"\"\"\n  Write a function to check whether the given key is present in the dictionary or not.\n  >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)\n  True\n  >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)\n  True\n  >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)\n  False\n  \"\"\"\n", "solution": "  \n  if x in d:\n    return True\n  else:\n     return False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return x in d`", "code_2": "`return d.get(x) is not None`", "code_3": "`try: d[x]; return True; except KeyError: return False`", "code_4": "`return bool(d.keys() & {x})`", "code_5": "`return x in d.keys()`", "code_6": "`return d.has_key(x)`", "code_7": "`return 1 if x in d else 0`", "code_8": "`return any(x == k for k in d)`", "code_9": "`return len(d & {x}) > 0`", "code_10": "`return len([k for k in d if k == x]) > 0`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/704", "prompt": "\n\ndef harmonic_sum(n):\n  \"\"\"\n  Write a function to calculate the harmonic sum of n-1.\n  >>> harmonic_sum(10)\n  2.9289682539682538\n  >>> harmonic_sum(4)\n  2.083333333333333\n  >>> harmonic_sum(7)\n  2.5928571428571425\n  \"\"\"\n", "solution": "  \n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def harmonic_sum(n): return sum(1/i for i in range(1, n))", "code_2": "def harmonic_sum(n): return sum(map(lambda i: 1/i, range(1, n)))", "code_3": "import math\ndef harmonic_sum(n): return math.fsum(1/i for i in range(1, n))", "code_4": "def harmonic_sum(n):\n  h = 0\n  for i in range(1, n): h += 1/i\n  return h", "code_5": "def harmonic_sum(n):\n  h = 0.0\n  for i in range(1, n): h += 1.0/i\n  return h", "code_6": "from functools import reduce\nimport operator\ndef harmonic_sum(n): return reduce(operator.add, (1/i for i in range(1, n)))", "code_7": "from itertools import accumulate, islice\ndef harmonic_sum(n): return next(islice(accumulate(1/i for i in range(1, n)), n-2, None))", "code_8": "from fractions import Fraction\ndef harmonic_sum(n): return sum(Fraction(1, i) for i in range(1, n))", "code_9": "import numpy as np\ndef harmonic_sum(n): return np.sum(1/np.arange(1, n))", "code_10": "def harmonic_sum(n):\n  h = [0] * n\n  for i in range(1, n): h[i] = h[i-1] + 1/i\n  return h[-1]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/705", "prompt": "\n\ndef sort_sublists(list1):\n      \"\"\"\n      Write a function to sort a list of lists by length and value.\n      >>> sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n      [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n      >>> sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n      [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n      >>> sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])\n      [['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n      \"\"\"\n", "solution": "      \n      list1.sort()  \n      list1.sort(key=len)\n      return  list1", "results": [1, 1, 0, 0, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), x))", "code_2": "def sort_sublists(lst):\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "code_3": "from operator import itemgetter\ndef sort_sublists(lst):\n    return sorted(lst, key=itemgetter(0, slice(None)))", "code_4": "def sort_sublists(lst):\n    lst.sort(key=itemgetter(0, slice(None)))\n    return lst", "code_5": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), tuple(x)))", "code_6": "def sort_sublists(lst):\n    lst.sort(key=lambda x: (len(x), tuple(x)))\n    return lst", "code_7": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), ''.join(map(str, x))))", "code_8": "def sort_sublists(lst):\n    lst.sort(key=lambda x: (len(x), ''.join(map(str, x))))\n    return lst", "code_9": "def sort_sublists(lst):\n    return sorted(lst, key=lambda x: (len(x), ''.join(x)))", "code_10": "def sort_sublists(lst):\n    lst.sort(key=lambda x: (len(x), ''.join(x)))\n    return lst", "pass@3": 0.8333333333333334, "nDCG@10": 0.5224955967919311}
{"task_id": "MBPP/706", "prompt": "\n\ndef is_subset(arr1, m, arr2, n):\n\t\"\"\"\n\tWrite a function to find whether an array is subset of another array.\n\t>>> is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n\tTrue\n\t>>> is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n\tTrue\n\t>>> is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n\tFalse\n\t\"\"\"\n", "solution": "\t \n\thashset = set() \n\tfor i in range(0, m): \n\t\thashset.add(arr1[i]) \n\tfor i in range(0, n): \n\t\tif arr2[i] in hashset: \n\t\t\tcontinue\n\t\telse: \n\t\t\treturn False\n\treturn True\t\t", "results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], "no_of_codes": 11, "code_1": "def is_subset(arr1, m, arr2, n):\n    s1 = set(arr1)\n    s2 = set(arr2)\n    return s2.issubset(s1)", "code_2": "def is_subset(arr1, m, arr2, n):\n    arr1.sort()\n    arr2.sort()\n    i = j = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        else:\n            return False\n    return j == n", "code_3": "def is_subset(arr1, m, arr2, n):\n    count = [0] * 100000\n    for i in range(m):\n        count[arr1[i]] += 1\n    for i in range(n):\n        if count[arr2[i]] == 0:\n            return False\n        count[arr2[i]] -= 1\n    return True", "code_4": "def is_subset(arr1, m, arr2, n):\n    hashmap = {}\n    for num in arr1:\n        if num not in hashmap:\n            hashmap[num] = 1\n        else:\n            hashmap[num] += 1\n    for num in arr2:\n        if num not in hashmap or hashmap[num] == 0:\n            return False\n        hashmap[num] -= 1\n    return True", "code_5": "def is_subset(arr1, m, arr2, n):\n    arr1.sort()\n    for i in range(n):\n        if not binary_search(arr1, 0, m - 1, arr2[i]):\n            return False\n    return True", "code_6": "def binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return False", "code_7": "def is_subset(arr1, m, arr2, n):\n    arr1 = [False] * 100001\n    for i in range(m):\n        arr1[arr1[i]] = True\n    for i in range(n):\n        if not arr1[arr2[i]]:\n            return False\n    return True", "code_8": "def is_subset(arr1, m, arr2, n):\n    arr1 = [False] * 100001\n    for i in range(m):\n        arr1[arr1[i]] = True\n    return all(arr1[i] for i in arr2)", "code_9": "def is_subset(arr1, m, arr2, n):\n    return set(arr2).issubset(set(arr1))", "code_10": "def is_subset(arr1, m, arr2, n):\n    return all(elem in arr1 for elem in arr2)", "code_11": "def is_subset(arr1, m, arr2, n):\n    return len(set(arr2) - set(arr1)) == 0", "pass@3": 0.9916666666666667, "nDCG@10": 0.6936634693435664}
{"task_id": "MBPP/707", "prompt": "\n\ndef count_Set_Bits(n) :\n    \"\"\"\n    Write a python function to count the total set bits from 1 to n.\n    >>> count_Set_Bits(16)\n    33\n    >>> count_Set_Bits(2)\n    2\n    >>> count_Set_Bits(14)\n    28\n    \"\"\"\n", "solution": "      \n    n += 1; \n    powerOf2 = 2;   \n    cnt = n // 2;  \n    while (powerOf2 <= n) : \n        totalPairs = n // powerOf2;  \n        cnt += (totalPairs // 2) * powerOf2;  \n        if (totalPairs & 1) : \n            cnt += (n % powerOf2) \n        else : \n            cnt += 0\n        powerOf2 <<= 1;    \n    return cnt;  ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_Set_Bits(n):\n    bits = [0] * (n + 1)\n    for i in range(1, n + 1):\n        bits[i] = bits[i & (i - 1)] + 1\n    return sum(bits)", "code_2": "def count_Set_Bits(n):\n    bits = [0] * (n + 1)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits)", "code_3": "def count_Set_Bits(n):\n    bits = [0] * (n + 1)\n    for i in range(1, n + 1):\n        bits[i] = bits[i // 2] + (i % 2)\n    return sum(bits)", "code_4": "def count_Set_Bits(n):\n    bits = [0] * (n + 1)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[:n + 1])", "code_5": "def count_Set_Bits(n):\n    bits = [0] * (n + 1)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[1:])", "code_6": "def count_Set_Bits(n):\n    bits = [0] * (n + 2)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[1:n + 1])", "code_7": "def count_Set_Bits(n):\n    bits = [0] * (n + 2)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[1:]) - bits[n + 1]", "code_8": "def count_Set_Bits(n):\n    bits = [0] * (n + 2)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[1:n + 2]) - bits[n + 1]", "code_9": "def count_Set_Bits(n):\n    bits = [0] * (n + 2)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[1:n + 1]) + (bits[n + 1] if n % 2 else 0)", "code_10": "def count_Set_Bits(n):\n    bits = [0] * (n + 2)\n    for i in range(1, n + 1):\n        bits[i] = bits[i >> 1] + (i & 1)\n    return sum(bits[1:n + 2]) - bits[n + 1] + (bits[n + 1] if n % 2 else 0)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/708", "prompt": "\n\ndef Convert(string):\n    \"\"\"\n    Write a python function to convert a string to a list.\n    >>> Convert('python program')\n    ['python','program']\n    >>> Convert('Data Analysis')\n    ['Data','Analysis']\n    >>> Convert('Hadoop Training')\n    ['Hadoop','Training']\n    \"\"\"\n", "solution": "     \n    li = list(string.split(\" \")) \n    return li ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def Convert(string):\n    return string.split()", "code_2": "def Convert(string):\n    return [word for word in string.split()]", "code_3": "def Convert(string):\n    return list(map(str, string.split()))", "code_4": "def Convert(string):\n    return list(string.split(' '))", "code_5": "def Convert(string):\n    return [*string.split()]", "code_6": "import re\ndef Convert(string):\n    return re.findall(r'\\w+', string)", "code_7": "import shlex\ndef Convert(string):\n    return shlex.split(string)", "code_8": "def Convert(string):\n    return string.split(' ', 1)", "code_9": "def Convert(string):\n    return string.partition(' ')[::2]", "code_10": "def Convert(string):\n    return [s for s in string.split(' ') if s]", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/709", "prompt": "\n\ndef get_unique(test_list):\n  \"\"\"\n  Write a function to count unique keys for each value present in the tuple.\n  >>> get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] )\n  '{4: 4, 2: 3, 1: 2}'\n  >>> get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] )\n  '{5: 4, 3: 3, 2: 2}'\n  >>> get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] )\n  '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n  \"\"\"\n", "solution": "  from collections import defaultdict \n  \n  res = defaultdict(list)\n  for sub in test_list:\n    res[sub[1]].append(sub[0])\n  res = dict(res)\n  res_dict = dict()\n  for key in res:\n    res_dict[key] = len(list(set(res[key])))\n  return (str(res_dict)) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import defaultdict\ndef get_unique(lst):\n    d = defaultdict(int)\n    for _, v in lst:\n        d[v] += 1\n    return str(dict(d))", "code_2": "def get_unique(lst):\n    d = {}\n    for _, v in lst:\n        d[v] = d.get(v, 0) + 1\n    return str(d)", "code_3": "def get_unique(lst):\n    d = {}\n    for t in lst:\n        d[t[1]] = d[t[1]] + 1 if t[1] in d else 1\n    return str(d)", "code_4": "from collections import Counter\ndef get_unique(lst):\n    return str(dict(Counter(v for _, v in lst)))", "code_5": "def get_unique(lst):\n    d = {}\n    for t in lst:\n        d[t[1]] = d.setdefault(t[1], 0) + 1\n    return str(d)", "code_6": "def get_unique(lst):\n    d = {}\n    for _, v in lst:\n        d[v] = d[v] + 1 if v in d else 1\n    return str(d)", "code_7": "def get_unique(lst):\n    d = {}\n    for t in lst:\n        d[t[1]] = d[t[1]] + 1 if t[1] in d else 1\n    return str(d)", "code_8": "def get_unique(lst):\n    d = {}\n    for _, v in lst:\n        d[v] = d.setdefault(v, 0) + 1\n    return str(d)", "code_9": "from collections import defaultdict\ndef get_unique(lst):\n    d = defaultdict(int)\n    for t in lst:\n        d[t[1]] += 1\n    return str(dict(d))", "code_10": "def get_unique(lst):\n    d = {}\n    for _, v in lst:\n        d[v] = d[v] + 1 if v in d else 1\n    return str(d)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/710", "prompt": "\n\ndef front_and_rear(test_tup):\n  \"\"\"\n  Write a function to access the initial and last data of the given tuple record.\n  >>> front_and_rear((10, 4, 5, 6, 7))\n  (10, 7)\n  >>> front_and_rear((1, 2, 3, 4, 5))\n  (1, 5)\n  >>> front_and_rear((6, 7, 8, 9, 10))\n  (6, 10)\n  \"\"\"\n", "solution": "  \n  res = (test_tup[0], test_tup[-1])\n  return (res) ", "results": [1, 0, 1, 0, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def front_and_rear(test_tup):\n  return test_tup[0], test_tup[-1]", "code_2": "def front_and_rear(test_tup):\n  return (test_tup[i] for i in (0, -1))", "code_3": "def front_and_rear(test_tup):\n  return tuple(test_tup[i] for i in (0, len(test_tup) - 1))", "code_4": "def front_and_rear(test_tup):\n  return (test_tup[i] for i in [0, -1])", "code_5": "def front_and_rear(test_tup):\n  return tuple(test_tup[i] for i in [0, len(test_tup) - 1])", "code_6": "def front_and_rear(test_tup):\n  return (test_tup[0], test_tup[len(test_tup) - 1])", "code_7": "def front_and_rear(test_tup):\n  return test_tup[:1] + test_tup[-1:]", "code_8": "def front_and_rear(test_tup):\n  return tuple(test_tup[i] for i in range(len(test_tup)) if i == 0 or i == len(test_tup) - 1)", "code_9": "def front_and_rear(test_tup):\n  return (test_tup[i] for i in filter(lambda x: x == 0 or x == len(test_tup) - 1, range(len(test_tup))))", "code_10": "def front_and_rear(test_tup):\n  return (test_tup[i] for i in range(len(test_tup)) if i in {0, len(test_tup) - 1})", "pass@3": 0.9666666666666667, "nDCG@10": 0.6364741801035539}
{"task_id": "MBPP/711", "prompt": "\n\ndef product_Equal(n):\n    \"\"\"\n    Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\n    >>> product_Equal(2841)\n    True\n    >>> product_Equal(1234)\n    False\n    >>> product_Equal(1212)\n    False\n    \"\"\"\n", "solution": "     \n    if n < 10: \n        return False\n    prodOdd = 1; prodEven = 1\n    while n > 0: \n        digit = n % 10\n        prodOdd *= digit \n        n = n//10\n        if n == 0: \n            break; \n        digit = n % 10\n        prodEven *= digit \n        n = n//10\n    if prodOdd == prodEven: \n        return True\n    return False", "results": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def product_Equal(n):\n    p1, p2 = 1, 1\n    for i, d in enumerate(str(n)):\n        (p1 if i % 2 == 0 else p2) *= int(d)\n    return p1 == p2", "code_2": "def product_Equal(n):\n    s = str(n)\n    return eval('*'.join(s[::2])) == eval('*'.join(s[1::2]))", "code_3": "def product_Equal(n):\n    s = str(n)\n    return prod(int(d) for i, d in enumerate(s) if i % 2 == 0) == prod(int(d) for i, d in enumerate(s) if i % 2 != 0)", "code_4": "from functools import reduce\nfrom operator import mul\ndef product_Equal(n):\n    s = str(n)\n    return reduce(mul, map(int, s[::2]), 1) == reduce(mul, map(int, s[1::2]), 1)", "code_5": "def product_Equal(n):\n    s = str(n)\n    return math.prod(map(int, s[::2])) == math.prod(map(int, s[1::2]))", "code_6": "def product_Equal(n):\n    s = str(n)\n    return np.prod([int(d) for i, d in enumerate(s) if i % 2 == 0]) == np.prod([int(d) for i, d in enumerate(s) if i % 2 != 0])", "code_7": "def product_Equal(n):\n    s = str(n)\n    return pd.Series(list(map(int, s))).groupby(lambda x: x % 2).prod().eq(0).all()", "code_8": "def product_Equal(n):\n    s = str(n)\n    return Counter(map(int, s)).elements().groupby(lambda x: s.index(str(x)) % 2).agg(np.prod).nunique() == 1", "code_9": "def product_Equal(n):\n    s = str(n)\n    return np.array_equal(np.unique(list(accumulate(map(int, s), func=mul, initial=1))[::2]), np.unique(list(accumulate(map(int, s), func=mul, initial=1))[1::2]))", "code_10": "def product_Equal(n):\n    s = str(n)\n    return np.array_equal(np.bincount(list(map(int, s)), weights=[1 if i % 2 == 0 else -1 for i in range(len(s))]), [0])", "pass@3": 0.5333333333333333, "nDCG@10": 0.23365080824310536}
{"task_id": "MBPP/712", "prompt": "\n\ndef remove_duplicate(list1):\n \"\"\"\n Write a function to remove duplicates from a list of lists.\n >>> remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n [[10, 20], [30, 56, 25], [33], [40]]\n >>> remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )\n [\"a\", \"b\", \"c\"]\n >>> remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )\n [1, 3, 5, 6]\n \"\"\"\n", "solution": " import itertools\n \n list.sort(list1)\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\n return remove_duplicate", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_duplicate(lst):\n return list(dict.fromkeys(lst))", "code_2": "def remove_duplicate(lst):\n return list(set(map(tuple, lst)))", "code_3": "def remove_duplicate(lst):\n return [lst[i] for i in range(len(lst)) if lst.index(lst[i]) == i]", "code_4": "def remove_duplicate(lst):\n return list(dict.fromkeys(lst))", "code_5": "def remove_duplicate(lst):\n return [i for n, i in enumerate(lst) if i not in lst[:n]]", "code_6": "def remove_duplicate(lst):\n return sorted(set(lst), key=lst.index)", "code_7": "def remove_duplicate(lst):\n return list(dict.fromkeys(lst))", "code_8": "def remove_duplicate(lst):\n return list(OrderedDict.fromkeys(lst))", "code_9": "def remove_duplicate(lst):\n return [x for i, x in enumerate(lst) if lst.index(x) == i]", "code_10": "def remove_duplicate(lst):\n return list(dict.fromkeys(lst))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/713", "prompt": "\n\ndef check_valid(test_tup):\n  \"\"\"\n  Write a function to check if the given tuple contains all valid values or not.\n  >>> check_valid((True, True, True, True) )\n  True\n  >>> check_valid((True, False, True, True) )\n  False\n  >>> check_valid((True, True, True, True) )\n  True\n  \"\"\"\n", "solution": "  \n  res = not any(map(lambda ele: not ele, test_tup))\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def check_valid(test_tup):\n    return all(test_tup)", "code_2": "def check_valid(test_tup):\n    return False not in test_tup", "code_3": "def check_valid(test_tup):\n    return sum(test_tup) == len(test_tup)", "code_4": "def check_valid(test_tup):\n    return min(test_tup)", "code_5": "def check_valid(test_tup):\n    return not any(not val for val in test_tup)", "code_6": "def check_valid(test_tup):\n    return set(test_tup) == {True}", "code_7": "def check_valid(test_tup):\n    return len(test_tup) == test_tup.count(True)", "code_8": "def check_valid(test_tup):\n    return reduce(lambda x, y: x and y, test_tup)", "code_9": "def check_valid(test_tup):\n    return not test_tup.count(False)", "code_10": "def check_valid(test_tup):\n    return not any(map(lambda x: not x, test_tup))", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/714", "prompt": "\n\ndef count_Fac(n):\n    \"\"\"\n    Write a python function to count the number of distinct power of prime factor of given number.\n    >>> count_Fac(24)\n    3\n    >>> count_Fac(12)\n    2\n    >>> count_Fac(4)\n    1\n    \"\"\"\n", "solution": "      \n    m = n \n    count = 0\n    i = 2\n    while((i * i) <= m): \n        total = 0\n        while (n % i == 0): \n            n /= i \n            total += 1 \n        temp = 0\n        j = 1\n        while((temp + j) <= total): \n            temp += j \n            count += 1\n            j += 1 \n        i += 1\n    if (n != 1): \n        count += 1 \n    return count ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Fac(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return len(factors)", "code_2": "def count_Fac(n):\n    i = 2\n    factors = set()\n    while i * i <= n:\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.add(n)\n    return len(factors)", "code_3": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n    if n > 2:\n        factors.add(n)\n    return len(factors)", "code_4": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    while n % 3 == 0:\n        factors.add(3)\n        n //= 3\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.add(i)\n            n //= i\n        else:\n            i += w\n            w = 6 - w\n    if n > 3:\n        factors.add(n)\n    return len(factors)", "code_5": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    while n % 3 == 0:\n        factors.add(3)\n        n //= 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            factors.add(i)\n            n //= i\n        elif n % (i + 2) == 0:\n            factors.add(i + 2)\n            n //= i + 2\n        i += 6\n    if n > 3:\n        factors.add(n)\n    return len(factors)", "code_6": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n    if n > 2:\n        factors.add(n)\n    return len(factors)", "code_7": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    while n % 3 == 0:\n        factors.add(3)\n        n //= 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            factors.add(i)\n            n //= i\n        elif n % (i + 2) == 0:\n            factors.add(i + 2)\n            n //= i + 2\n        i += 6\n    if n > 3:\n        factors.add(n)\n    return len(factors)", "code_8": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n    if n > 2:\n        factors.add(n)\n    return len(factors)", "code_9": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    while n % 3 == 0:\n        factors.add(3)\n        n //= 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            factors.add(i)\n            n //= i\n        elif n % (i + 2) == 0:\n            factors.add(i + 2)\n            n //= i + 2\n        i += 6\n    if n > 3:\n        factors.add(n)\n    return len(factors)", "code_10": "def count_Fac(n):\n    factors = set()\n    while n % 2 == 0:\n        factors.add(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n    if n > 2:\n        factors.add(n)\n    return len(factors)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/715", "prompt": "\n\ndef str_to_tuple(test_str):\n  \"\"\"\n  Write a function to convert the given string of integers into a tuple.\n  >>> str_to_tuple(\"1, -5, 4, 6, 7\")\n  (1, -5, 4, 6, 7)\n  >>> str_to_tuple(\"1, 2, 3, 4, 5\")\n  (1, 2, 3, 4, 5)\n  >>> str_to_tuple(\"4, 6, 9, 11, 13, 14\")\n  (4, 6, 9, 11, 13, 14)\n  \"\"\"\n", "solution": "  \n  res = tuple(map(int, test_str.split(', ')))\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def str_to_tuple(test_str):\n    return tuple(map(int, test_str.split(',')))", "code_2": "def str_to_tuple(test_str):\n    return tuple(int(i) for i in test_str.split(','))", "code_3": "import re\ndef str_to_tuple(test_str):\n    return tuple(map(int, re.findall(r'-?\\d+', test_str)))", "code_4": "def str_to_tuple(test_str):\n    return eval(test_str.replace(',', ','))", "code_5": "def str_to_tuple(test_str):\n    return tuple(int(x) for x in test_str.split(', '))", "code_6": "def str_to_tuple(test_str):\n    return tuple(int(i) for i in test_str.split(', '))", "code_7": "def str_to_tuple(test_str):\n    return tuple(map(int, filter(None, test_str.split(','))))", "code_8": "def str_to_tuple(test_str):\n    return tuple(int(i) for i in test_str.replace(' ', '').split(','))", "code_9": "def str_to_tuple(test_str):\n    return tuple(int(i) for i in test_str.strip().split(', '))", "code_10": "def str_to_tuple(test_str):\n    return tuple(int(i) for i in test_str.strip().split(','))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/716", "prompt": "\n\ndef rombus_perimeter(a):\n  \"\"\"\n  Write a function to find the perimeter of a rombus.\n  >>> rombus_perimeter(10)\n  40\n  >>> rombus_perimeter(5)\n  20\n  >>> rombus_perimeter(4)\n  16\n  \"\"\"\n", "solution": "  \n  perimeter=4*a\n  return perimeter", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def rombus_perimeter(a): return 4 * a", "code_2": "rombus_perimeter = lambda a: 4 * a", "code_3": "def rombus_perimeter(a):\n  p = a * 4\n  return p", "code_4": "def rombus_perimeter(a):\n  return a << 2", "code_5": "def rombus_perimeter(a):\n  p = 0\n  for _ in range(4):\n    p += a\n  return p", "code_6": "def rombus_perimeter(a):\n  p = 0\n  i = 0\n  while i < 4:\n    p += a\n    i += 1\n  return p", "code_7": "def rombus_perimeter(a):\n  p = [a for _ in range(4)]\n  return sum(p)", "code_8": "def rombus_perimeter(a):\n  return sum([a] * 4)", "code_9": "def rombus_perimeter(a):\n  return reduce(lambda x, y: x + y, [a] * 4)", "code_10": "def rombus_perimeter(a):\n  return functools.reduce(lambda x, y: x + y, [a] * 4)", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/717", "prompt": "\n\ndef sd_calc(data):\n    \"\"\"\n    Write a function to calculate the standard deviation.\n    >>> sd_calc([4, 2, 5, 8, 6])\n    2.23606797749979\n    >>> sd_calc([1,2,3,4,5,6,7])\n    2.160246899469287\n    >>> sd_calc([5,9,10,15,6,4])\n    4.070217029430577\n    \"\"\"\n", "solution": "    import math\n    import sys\n    \n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean)**2\n    sd = math.sqrt(sd / float(n-1))\n    return sd\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean", "results": [1, 1, 0, 0, 0, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "import math\ndef sd_calc(data):\n    n = len(data)\n    mean = sum(data) / n\n    variance = sum((x - mean) ** 2 for x in data) / (n - 1)\n    return math.sqrt(variance)", "code_2": "import statistics\ndef sd_calc(data):\n    return statistics.stdev(data)", "code_3": "def sd_calc(data):\n    mean = sum(data) / len(data)\n    return (sum((x - mean) ** 2 for x in data) / len(data)) ** 0.5", "code_4": "import numpy as np\ndef sd_calc(data):\n    return np.std(data)", "code_5": "def sd_calc(data):\n    n = len(data)\n    mean = sum(data) / n\n    return ((sum(x * x for x in data) / n) - mean ** 2) ** 0.5", "code_6": "from math import sqrt\ndef sd_calc(data):\n    n = len(data)\n    mean = sum(data) / n\n    return sqrt(sum((x - mean) ** 2 for x in data) / (n - 1))", "code_7": "def sd_calc(data):\n    n = len(data)\n    mean = sum(data) / n\n    return (sum((x - mean) ** 2 for x in data) / (n - 1)) ** 0.5", "code_8": "import numpy as np\ndef sd_calc(data):\n    return np.sqrt(np.mean((np.array(data) - np.mean(data)) ** 2))", "code_9": "from statistics import mean, stdev\ndef sd_calc(data):\n    return stdev(data)", "code_10": "def sd_calc(data):\n    n = len(data)\n    mean = sum(data) / n\n    return ((sum(x * x for x in data) / n) - mean * mean) ** 0.5", "pass@3": 0.9166666666666666, "nDCG@10": 0.5769706247040592}
{"task_id": "MBPP/718", "prompt": "\n\ndef alternate_elements(list1):\n    \"\"\"\n    Write a function to create a list taking alternate elements from another given list.\n    >>> alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n    ['red', 'white', 'orange']\n    >>> alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n    [2, 3, 0, 8, 4]\n    >>> alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1,3,5,7,9]\n    \"\"\"\n", "solution": "    \n    result=[]\n    for item in list1[::2]:\n        result.append(item)\n    return result ", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def alternate_elements(lst):\n    return lst[::2]", "code_2": "def alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]", "code_3": "def alternate_elements(lst):\n    return [x for i, x in enumerate(lst) if i % 2 == 0]", "code_4": "def alternate_elements(lst):\n    return [lst[i] for i in range(len(lst)) if i % 2 == 0]", "code_5": "def alternate_elements(lst):\n    return [x for x in lst if lst.index(x) % 2 == 0]", "code_6": "def alternate_elements(lst):\n    return [lst[i] for i in filter(lambda x: x % 2 == 0, range(len(lst)))]", "code_7": "def alternate_elements(lst):\n    return [x for i, x in enumerate(lst) if not i % 2]", "code_8": "def alternate_elements(lst):\n    return [x for x in lst[::2]]", "code_9": "def alternate_elements(lst):\n    return list(lst[i] for i in range(0, len(lst), 2))", "code_10": "def alternate_elements(lst):\n    return [lst[i] for i in range(len(lst)) if not i & 1]", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/719", "prompt": "\n\ndef text_match(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by zero or more b's.\n        >>> text_match(\"ac\")\n        ('Found a match!')\n        >>> text_match(\"dc\")\n        ('Not matched!')\n        >>> text_match(\"abba\")\n        ('Found a match!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef text_match(text):\n    if re.match(r'ab*', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "code_2": "def text_match(text):\n    if text[0] == 'a' and all(c == 'b' for c in text[1:]):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "code_3": "def text_match(text):\n    return 'Found a match!' if text.startswith('a') and text.replace('a', '').replace('b', '') == '' else 'Not matched!'", "code_4": "def text_match(text):\n    return 'Found a match!' if text == 'a' or text.startswith('ab') and text.count('b', 1) == len(text) - 1 else 'Not matched!'", "code_5": "def text_match(text):\n    return 'Found a match!' if text[0] == 'a' and set(text[1:]) <= {'b'} else 'Not matched!'", "code_6": "def text_match(text):\n    return 'Found a match!' if text[0] == 'a' and all(c == 'b' for c in text[1:]) else 'Not matched!'", "code_7": "def text_match(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:].replace('b', '') == '' else 'Not matched!'", "code_8": "def text_match(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:].count('b') == len(text) - 1 else 'Not matched!'", "code_9": "def text_match(text):\n    return 'Found a match!' if text[0] == 'a' and all(c == 'b' for c in text[1:]) else 'Not matched!'", "code_10": "def text_match(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:].isalpha() and text[1:].replace('b', '') == '' else 'Not matched!'", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/720", "prompt": "\n\ndef add_dict_to_tuple(test_tup, test_dict):\n  \"\"\"\n  Write a function to add a dictionary to the tuple.\n  >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n  (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n  >>> add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} )\n  (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n  >>> add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} )\n  (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n  \"\"\"\n", "solution": "  \n  test_tup = list(test_tup)\n  test_tup.append(test_dict)\n  test_tup = tuple(test_tup)\n  return (test_tup) ", "results": [1, 1, 1, 1, 0, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)", "code_2": "def add_dict_to_tuple(test_tup, test_dict):\n    return (*test_tup, test_dict)", "code_3": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(list(test_tup) + [test_dict])", "code_4": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple([*test_tup, test_dict])", "code_5": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(list(test_tup).append(test_dict) or test_tup)", "code_6": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(item for item in test_tup) + (test_dict,)", "code_7": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(list(test_tup).__add__([test_dict]))", "code_8": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(itertools.chain(test_tup, (test_dict,)))", "code_9": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(collections.ChainMap(test_tup, {0: test_dict}).values())", "code_10": "def add_dict_to_tuple(test_tup, test_dict):\n    return tuple(functools.reduce(lambda x, y: x + (y,), test_tup, (test_dict,)))", "pass@3": 0.9666666666666667, "nDCG@10": 0.715550648768261}
{"task_id": "MBPP/721", "prompt": "\n\ndef maxAverageOfPath(cost, N):\n\t\"\"\"\n\tWrite a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n\t>>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n\t5.2\n\t>>> maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n\t6.2\n\t>>> maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n\t7.2\n\t\"\"\"\n", "solution": "\tM = 100\n\t \n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \n\tdp[0][0] = cost[0][0] \n\tfor i in range(1, N): \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \n\tfor j in range(1, N): \n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \n\tfor i in range(1, N): \n\t\tfor j in range(1, N): \n\t\t\tdp[i][j] = max(dp[i - 1][j], \n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \n\treturn dp[N - 1][N - 1] / (2 * N - 1)", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def maxAverageOfPath(cost, N):\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[N-1][N-1] / (2*N-1)", "code_2": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    dp[0] = cost[0][0]\n    for i in range(1, N):\n        dp[i] = dp[i-1] + cost[0][i]\n    for i in range(1, N):\n        dp[0] += cost[i][0]\n        for j in range(1, N):\n            dp[j] = cost[i][j] + max(dp[j-1], dp[j])\n    return dp[N-1] / (2*N-1)", "code_3": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        for j in range(i, -1, -1):\n            if j == i:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + max(dp[j], dp[j+1])\n    for i in range(N-2, -1, -1):\n        dp[i] = max(dp[i], dp[i+1])\n    return dp[0] / N", "code_4": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        prev = 0\n        for j in range(i, -1, -1):\n            prev = max(prev, dp[j])\n            dp[j] = cost[i][j] + prev\n    return max(dp) / N", "code_5": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        for j in range(i, -1, -1):\n            if j == i:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + max(dp[j], dp[j+1])\n    return max(dp) / N", "code_6": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        prev = 0\n        for j in range(i, -1, -1):\n            dp[j] = cost[i][j] + max(dp[j], prev)\n            prev = dp[j]\n    return max(dp) / N", "code_7": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        for j in range(i, -1, -1):\n            if j == i:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + max(dp[j], dp[j+1])\n    return max(dp[i]/N for i in range(N))", "code_8": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        prev = 0\n        for j in range(i, -1, -1):\n            dp[j] = cost[i][j] + max(dp[j], prev)\n            prev = dp[j]\n    return max(dp[i]/N for i in range(N))", "code_9": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        for j in range(i, -1, -1):\n            if j == i:\n                dp[j] += cost[i][j]\n            else:\n                dp[j] = cost[i][j] + max(dp[j], dp[j+1])\n    return max(dp[i]/(i+1) for i in range(N))", "code_10": "def maxAverageOfPath(cost, N):\n    dp = [0]*N\n    for i in range(N):\n        prev = 0\n        for j in range(i, -1, -1):\n            dp[j] = cost[i][j] + max(dp[j], prev)\n            prev = dp[j]\n    return max(dp[i]/(i+1) for i in range(N))", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/722", "prompt": "\n\ndef filter_data(students,h,w):\n    \"\"\"\n    Write a function to filter the height and width of students which are stored in a dictionary.\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)\n    {'Cierra Vega': (6.2, 70)}\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)\n    {'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)\n    {'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n    \"\"\"\n", "solution": "    \n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\n    return result    ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if v[0] >= h and v[1] >= w}", "code_2": "def filter_data(students, h, w):\n    return dict(filter(lambda x: x[1][0] >= h and x[1][1] >= w, students.items()))", "code_3": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "code_4": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if all(i >= j for i, j in zip(v, (h, w)))}", "code_5": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if v[0] > h or v[1] > w}", "code_6": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if v >= (h, w)}", "code_7": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if v[0] * v[1] >= h * w}", "code_8": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if not (v[0] < h or v[1] < w)}", "code_9": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if v >= (h,) and v >= (w,)}", "code_10": "def filter_data(students, h, w):\n    return {k: v for k, v in students.items() if all(map(lambda x, y: x >= y, v, (h, w)))}", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/723", "prompt": "\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    Write a function to count the same pair in two given lists using map function.\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    >>> count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    11\n    >>> count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    1\n    \"\"\"\n", "solution": "    from operator import eq\n    \n    result = sum(map(eq, nums1, nums2))\n    return result", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_same_pair(nums1, nums2):\n    return sum(map(lambda x, y: x == y, nums1, nums2))", "code_2": "def count_same_pair(nums1, nums2):\n    return sum(a == b for a, b in zip(nums1, nums2))", "code_3": "def count_same_pair(nums1, nums2):\n    return len([i for i, j in zip(nums1, nums2) if i == j])", "code_4": "def count_same_pair(nums1, nums2):\n    return sum(i == j for i, j in zip(nums1, nums2))", "code_5": "def count_same_pair(nums1, nums2):\n    return sum(1 for a, b in zip(nums1, nums2) if a == b)", "code_6": "def count_same_pair(nums1, nums2):\n    return sum(map(operator.eq, nums1, nums2))", "code_7": "def count_same_pair(nums1, nums2):\n    return sum(a == b for a, b in itertools.zip_longest(nums1, nums2))", "code_8": "def count_same_pair(nums1, nums2):\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])", "code_9": "def count_same_pair(nums1, nums2):\n    return len([1 for a, b in zip(nums1, nums2) if a == b])", "code_10": "def count_same_pair(nums1, nums2):\n    return sum(1 for i in filter(lambda x: x[0] == x[1], zip(nums1, nums2)))", "pass@3": 1.0, "nDCG@10": 0.8482378089219648}
{"task_id": "MBPP/724", "prompt": "\n\ndef power_base_sum(base, power):\n    \"\"\"\n    Write a function to calculate the sum of all digits of the base to the specified power.\n    >>> power_base_sum(2,100)\n    115\n    >>> power_base_sum(8,10)\n    37\n    >>> power_base_sum(8,15)\n    62\n    \"\"\"\n", "solution": "    \n    return sum([int(i) for i in str(pow(base, power))])", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def power_base_sum(b, p):\n    return sum(int(d) for d in str(b**p))", "code_2": "def power_base_sum(b, p):\n    return sum(map(int, str(b**p)))", "code_3": "def power_base_sum(b, p):\n    return sum(int(c) for c in str(pow(b, p)))", "code_4": "def power_base_sum(b, p):\n    return sum(map(int, str(pow(b, p))))", "code_5": "def power_base_sum(b, p):\n    return sum(map(int, list(str(b**p))))", "code_6": "def power_base_sum(b, p):\n    return sum(int(c) for c in str(pow(b, p, 10**10)))", "code_7": "def power_base_sum(b, p):\n    return sum(map(int, str(pow(b, p, 10**10))))", "code_8": "def power_base_sum(b, p):\n    return sum(int(c) for c in format(b**p, 'd'))", "code_9": "def power_base_sum(b, p):\n    return sum(map(int, format(b**p, 'd')))", "code_10": "def power_base_sum(b, p):\n    return sum(int(c) for c in format(pow(b, p), 'd'))", "pass@3": 1.0, "nDCG@10": 0.8482378089219648}
{"task_id": "MBPP/725", "prompt": "\n\ndef extract_quotation(text1):\n  \"\"\"\n  Write a function to extract values between quotation marks of the given string by using regex.\n  >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n  ['A53', 'multi', 'Processor']\n  >>> extract_quotation('Cast your \"favorite\" entertainment \"apps\"')\n  ['favorite', 'apps']\n  >>> extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')\n  ['4k Ultra HD', 'HDR 10']\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.findall(r'\"(.*?)\"', text1))", "results": [1, 1, 0, 1, 0, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef extract_quotation(text1):\n    return re.findall(r'\"([^\"]*)\"', text1)", "code_2": "import re\ndef extract_quotation(text1):\n    return [match.group(1) for match in re.finditer(r'\"([^\"]*)\"', text1)]", "code_3": "def extract_quotation(text1):\n    return [word.strip('\"') for word in text1.split('\"') if word.strip('\"')]", "code_4": "def extract_quotation(text1):\n    start = 0\n    result = []\n    while True:\n        start = text1.find('\"', start) + 1\n        if start == 0:\n            break\n        end = text1.find('\"', start)\n        result.append(text1[start:end])\n        start = end + 1\n    return result", "code_5": "def extract_quotation(text1):\n    return [text1[i+1:j] for i, j in zip(range(len(text1)), range(1, len(text1))) if text1[i] == '\"' and text1[j] == '\"']", "code_6": "def extract_quotation(text1):\n    result = []\n    while '\"' in text1:\n        start = text1.index('\"') + 1\n        end = text1.index('\"', start)\n        result.append(text1[start:end])\n        text1 = text1[end+1:]\n    return result", "code_7": "def extract_quotation(text1):\n    result = []\n    for word in text1.split('\"'):\n        if word and word != ' ':\n            result.append(word)\n    return result[::2]", "code_8": "def extract_quotation(text1):\n    return [word for word in text1.split('\"') if word and word != ' '][::2]", "code_9": "def extract_quotation(text1):\n    return [word for word in text1.split('\"')[1::2]]", "code_10": "def extract_quotation(text1):\n    return [text1[i+1:j] for i, j in enumerate(text1) if text1[i] == '\"' and text1[j] == '\"']", "pass@3": 0.9166666666666666, "nDCG@10": 0.59839506697425}
{"task_id": "MBPP/726", "prompt": "\n\ndef multiply_elements(test_tup):\n  \"\"\"\n  Write a function to multiply the adjacent elements of the given tuple.\n  >>> multiply_elements((1, 5, 7, 8, 10))\n  (5, 35, 56, 80)\n  >>> multiply_elements((2, 4, 5, 6, 7))\n  (8, 20, 30, 42)\n  >>> multiply_elements((12, 13, 14, 9, 15))\n  (156, 182, 126, 135)\n  \"\"\"\n", "solution": "  \n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension:\ndef multiply_elements(test_tup): return tuple(a*b for a, b in zip(test_tup, test_tup[1:]))", "code_2": "Using map and lambda:\ndef multiply_elements(test_tup): return tuple(map(lambda x, y: x*y, test_tup, test_tup[1:]))", "code_3": "Using reduce and operator.mul:\nfrom functools import reduce\nimport operator\ndef multiply_elements(test_tup): return tuple(reduce(operator.mul, pair) for pair in zip(test_tup, test_tup[1:]))", "code_4": "Using numpy:\nimport numpy as np\ndef multiply_elements(test_tup): return tuple(np.array(test_tup[:-1]) * np.array(test_tup[1:]))", "code_5": "Using itertools.starmap and operator.mul:\nimport itertools\nimport operator\ndef multiply_elements(test_tup): return tuple(itertools.starmap(operator.mul, zip(test_tup, test_tup[1:])))", "code_6": "Using a for loop:\ndef multiply_elements(test_tup): return tuple(test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1))", "code_7": "Using a while loop:\ndef multiply_elements(test_tup): i, res = 0, []; while i < len(test_tup)-1: res.append(test_tup[i]*test_tup[i+1]); i += 1; return tuple(res)", "code_8": "Using recursion:\ndef multiply_elements(test_tup, i=0): return () if i == len(test_tup)-1 else (test_tup[i]*test_tup[i+1],) + multiply_elements(test_tup, i+1)", "code_9": "Using a generator expression:\ndef multiply_elements(test_tup): return tuple(a*b for a, b in ((test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1)))", "code_10": "Using a deque and pop:\nfrom collections import deque\ndef multiply_elements(test_tup): d, res = deque(test_tup), []; while len(d) > 1: res.append(d.popleft() * d[0]); return tuple(res)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/727", "prompt": "\n\ndef remove_char(S):\n  \"\"\"\n  Write a function to remove all characters except letters and numbers using regex\n  >>> remove_char(\"123abcjw:, .@! eiw\")\n  '123abcjweiw'\n  >>> remove_char(\"Hello1234:, ! Howare33u\")\n  'Hello1234Howare33u'\n  >>> remove_char(\"Cool543Triks@:, Make@987Trips\")\n  'Cool543TriksMake987Trips'\n  \"\"\"\n", "solution": "  import re \n  \n  result = re.sub('[\\W_]+', '', S) \n  return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef remove_char(S):\n    return re.sub(r'[^a-zA-Z0-9]', '', S)", "code_2": "import re\ndef remove_char(S):\n    return ''.join(re.findall(r'\\w', S))", "code_3": "def remove_char(S):\n    return ''.join(c for c in S if c.isalnum())", "code_4": "def remove_char(S):\n    return ''.join(filter(str.isalnum, S))", "code_5": "import string\ndef remove_char(S):\n    return ''.join(c for c in S if c in string.ascii_letters + string.digits)", "code_6": "def remove_char(S):\n    return ''.join(c for c in S if c.isalpha() or c.isdigit())", "code_7": "def remove_char(S):\n    return ''.join(c for c in S if c >= '0' and c <= '9' or c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z')", "code_8": "def remove_char(S):\n    return ''.join(c for c in S if c.lower() in 'abcdefghijklmnopqrstuvwxyz0123456789')", "code_9": "def remove_char(S):\n    return ''.join(c for c in S if c.isascii() and c.isalnum())", "code_10": "def remove_char(S):\n    return ''.join(c for c in S if ord(c) in range(48, 58) or ord(c) in range(65, 91) or ord(c) in range(97, 123))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/728", "prompt": "\n\ndef sum_list(lst1,lst2):\n  \"\"\"\n  Write a function to sum elements in two lists.\n  >>> sum_list([10,20,30],[15,25,35])\n  [25,45,65]\n  >>> sum_list([1,2,3],[5,6,7])\n  [6,8,10]\n  >>> sum_list([15,20,30],[15,45,75])\n  [30,65,105]\n  \"\"\"\n", "solution": "  \n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using list comprehension:\ndef sum_list(lst1, lst2): return [a+b for a, b in zip(lst1, lst2)]", "code_2": "Using map and lambda:\ndef sum_list(lst1, lst2): return list(map(lambda x, y: x+y, lst1, lst2))", "code_3": "Using numpy:\nimport numpy as np\ndef sum_list(lst1, lst2): return list(np.array(lst1) + np.array(lst2))", "code_4": "Using operator.add:\nimport operator\ndef sum_list(lst1, lst2): return list(map(operator.add, lst1, lst2))", "code_5": "Using itertools.starmap:\nimport itertools\ndef sum_list(lst1, lst2): return list(itertools.starmap(operator.add, zip(lst1, lst2)))", "code_6": "Using for loop:\ndef sum_list(lst1, lst2): return [lst1[i] + lst2[i] for i in range(len(lst1))]", "code_7": "Using reduce and operator.add:\nfrom functools import reduce\nimport operator\ndef sum_list(lst1, lst2): return reduce(lambda x, y: x + [y[0] + y[1]], zip(lst1, lst2), [])", "code_8": "Using for loop and enumerate:\ndef sum_list(lst1, lst2): return [lst1[i] + lst2[i] for i, _ in enumerate(lst1)]", "code_9": "Using for loop and while loop:\ndef sum_list(lst1, lst2): i = 0; res = []; while i < len(lst1): res.append(lst1[i] + lst2[i]); i += 1; return res", "code_10": "Using recursion:\ndef sum_list(lst1, lst2, res=[]): return res if not lst1 else sum_list(lst1[1:], lst2[1:], res + [lst1[0] + lst2[0]])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/729", "prompt": "\n\ndef add_list(nums1,nums2):\n  \"\"\"\n  Write a function to add two lists using map and lambda function.\n  >>> add_list([1, 2, 3],[4,5,6])\n  [5, 7, 9]\n  >>> add_list([1,2],[3,4])\n  [4,6]\n  >>> add_list([10,20],[50,70])\n  [60,90]\n  \"\"\"\n", "solution": "  \n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "add_list = lambda nums1, nums2: list(map(lambda x, y: x + y, nums1, nums2))", "code_2": "from operator import add\nadd_list = lambda nums1, nums2: list(map(add, nums1, nums2))", "code_3": "import numpy as np\nadd_list = lambda nums1, nums2: np.add(nums1, nums2).tolist()", "code_4": "add_list = lambda nums1, nums2: [a + b for a, b in zip(nums1, nums2)]", "code_5": "add_list = lambda nums1, nums2: [sum(x) for x in zip(nums1, nums2)]", "code_6": "add_list = lambda nums1, nums2: [x + y for x, y in zip(nums1, nums2)]", "code_7": "add_list = lambda nums1, nums2: [x + nums2[i] for i, x in enumerate(nums1)]", "code_8": "add_list = lambda nums1, nums2: [x + y for x in nums1 for y in nums2 if nums1.index(x) == nums2.index(y)]", "code_9": "add_list = lambda nums1, nums2: [x + y for x in nums1 for y in nums2 if nums1[nums1.index(x)] == nums2[nums2.index(y)]]", "code_10": "add_list = lambda nums1, nums2: [x + y for x in nums1 for y in nums2 if nums1.index(x) == nums2.index(y)]", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/730", "prompt": "\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    >>> consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    [10, 15, 19, 18, 17, 26, 17, 18, 10]\n    >>> consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n", "solution": "    from itertools import groupby\n    \n    return [key for key, group in groupby(nums)] ", "results": [1, 0, 1, 1, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def consecutive_duplicates(nums):\n    return [nums[i] for i in range(len(nums)) if i == 0 or nums[i] != nums[i-1]]", "code_2": "def consecutive_duplicates(nums):\n    return [num for num, _ in itertools.groupby(nums)]", "code_3": "def consecutive_duplicates(nums):\n    return [num for i, num in enumerate(nums) if i == 0 or num != nums[i-1]]", "code_4": "def consecutive_duplicates(nums):\n    return [num for num, next_num in zip(nums, nums[1:] + [None]) if num != next_num]", "code_5": "def consecutive_duplicates(nums):\n    return [num for i, num in enumerate(nums) if i == 0 or nums[i-1] != num]", "code_6": "def consecutive_duplicates(nums):\n    return [num for num, next_num in zip_longest(nums, nums[1:], fillvalue=None) if num != next_num]", "code_7": "def consecutive_duplicates(nums):\n    return [num for num, next_num in pairwise(nums) if num != next_num] + [nums[-1]]", "code_8": "def consecutive_duplicates(nums):\n    return [num for i, num in enumerate(nums) if i == 0 or nums[i-1] != num] + [nums[-1]]", "code_9": "def consecutive_duplicates(nums):\n    return [num for num, next_num in zip(nums, nums[1:] + [object()]) if num != next_num]", "code_10": "def consecutive_duplicates(nums):\n    return [num for i, num in enumerate(nums) if i == 0 or nums[i-1] != num] + [nums[-1]] if nums else []", "pass@3": 0.9166666666666666, "nDCG@10": 0.5763233549126812}
{"task_id": "MBPP/731", "prompt": "\n\ndef lateralsurface_cone(r,h):\n  \"\"\"\n  Write a function to find the lateral surface area of a cone.\n  >>> lateralsurface_cone(5,12)\n  204.20352248333654\n  >>> lateralsurface_cone(10,15)\n  566.3586699569488\n  >>> lateralsurface_cone(19,17)\n  1521.8090132193388\n  \"\"\"\n", "solution": "  import math\n  \n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef lateralsurface_cone(r,h):\n  return math.pi * r * math.sqrt(r**2 + h**2)", "code_2": "import math\ndef lateralsurface_cone(r,h):\n  l = math.hypot(r, h)\n  return math.pi * r * l", "code_3": "from math import pi, sqrt, hypot\ndef lateralsurface_cone(r,h):\n  return pi * r * hypot(r, h)", "code_4": "from math import pi, sqrt\ndef lateralsurface_cone(r,h):\n  return pi * r * sqrt(r*r + h*h)", "code_5": "import math\ndef lateralsurface_cone(r,h):\n  return math.pi * r * (r**2 + h**2)**0.5", "code_6": "from math import pi, hypot\ndef lateralsurface_cone(r,h):\n  return pi * r * hypot(r, h)", "code_7": "import math\ndef lateralsurface_cone(r,h):\n  return math.pi * r * math.sqrt(r*r + h*h)", "code_8": "from math import pi, hypot\ndef lateralsurface_cone(r,h):\n  return pi * r * (r**2 + h**2)**0.5", "code_9": "import math\ndef lateralsurface_cone(r,h):\n  return math.pi * r * math.sqrt(r**2 + h**2)", "code_10": "from math import pi, sqrt\ndef lateralsurface_cone(r,h):\n  return pi * r * sqrt(r*r + h*h)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/732", "prompt": "\n\ndef replace_specialchar(text):\n \"\"\"\n Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n >>> replace_specialchar('Python language, Programming language.')\n ('Python:language::Programming:language:')\n >>> replace_specialchar('a b c,d e f')\n ('a:b:c:d:e:f')\n >>> replace_specialchar('ram reshma,ram rahim')\n ('ram:reshma:ram:rahim')\n \"\"\"\n", "solution": " import re\n \n return (re.sub(\"[ ,.]\", \":\", text))", "results": [1, 1, 1, 1, 1, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "code_2": "def replace_specialchar(text):\n    trans = str.maketrans(' ,.', ':::')\n    return text.translate(trans)", "code_3": "import re\ndef replace_specialchar(text):\n    return re.sub('[ ,.]', ':', text)", "code_4": "def replace_specialchar(text):\n    return ':'.join(text.split(' ')).replace(',', ':').replace('.', ':')", "code_5": "def replace_specialchar(text):\n    return ''.join([':' if c in ' ,.' else c for c in text])", "code_6": "def replace_specialchar(text):\n    for char in ' ,.':\n        text = text.replace(char, ':')\n    return text", "code_7": "def replace_specialchar(text):\n    return ':'.join(word for word in re.split('[ ,.]', text))", "code_8": "import string\ndef replace_specialchar(text):\n    return text.translate(str.maketrans(string.punctuation, ':'*len(string.punctuation)))", "code_9": "def replace_specialchar(text):\n    return ''.join(map(lambda c: ':' if c in ' ,.' else c, text))", "code_10": "def replace_specialchar(text):\n    return ':'.join(filter(None, re.split('([ ,.])', text)))", "pass@3": 0.9916666666666667, "nDCG@10": 0.793584067764911}
{"task_id": "MBPP/733", "prompt": "\n\ndef find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    1\n    >>> find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    2\n    >>> find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n    4\n    \"\"\"\n", "solution": "    \n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "code_2": "def find_first_occurrence(A, x):\n    left, right = 0, len(A)\n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left if A[left] == x else -1", "code_3": "def find_first_occurrence(A, x):\n    left, right = 0, len(A)\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid\n        else:\n            left = mid + 1\n    return left if A[left] == x else -1", "code_4": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            right = mid - 1\n    return -1", "code_5": "def find_first_occurrence(A, x):\n    left, right = 0, len(A)\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < len(A) and A[left] == x else -1", "code_6": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n    return -1", "code_7": "def find_first_occurrence(A, x):\n    left, right = 0, len(A)\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            right = mid\n        else:\n            left = mid + 1\n    return left if A[left] == x else -1", "code_8": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "code_9": "def find_first_occurrence(A, x):\n    left, right = 0, len(A)\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left if left < len(A) and A[left] == x else -1", "code_10": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == 0 or A[mid - 1] < x):\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/734", "prompt": "\n\ndef sum_Of_Subarray_Prod(arr,n):\n    \"\"\"\n    Write a python function to find sum of products of all possible subarrays.\n    >>> sum_Of_Subarray_Prod([1,2,3],3)\n    20\n    >>> sum_Of_Subarray_Prod([1,2],2)\n    5\n    >>> sum_Of_Subarray_Prod([1,2,3,4],4)\n    84\n    \"\"\"\n", "solution": "    \n    ans = 0\n    res = 0\n    i = n - 1\n    while (i >= 0):\n        incr = arr[i]*(1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return (ans)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_Of_Subarray_Prod(arr,n):\n    res = 0\n    for i in range(n):\n        res += arr[i] * (i+1) * (n-i)\n    return res", "code_2": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(arr[i] * (i+1) * (n-i) for i in range(n))", "code_3": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(map(lambda i: arr[i] * (i+1) * (n-i), range(n)))", "code_4": "import numpy as np\ndef sum_Of_Subarray_Prod(arr,n):\n    return np.sum(np.array(arr) * np.arange(1, n+1) * np.arange(n, 0, -1))", "code_5": "from itertools import accumulate, chain\ndef sum_Of_Subarray_Prod(arr,n):\n    return sum(chain.from_iterable(accumulate(arr[::-1])[::-1]))", "code_6": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(sum(arr[i:j]) for i in range(n) for j in range(i+1, n+1))", "code_7": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(sum(arr[i:j]) for j in range(n+1) for i in range(j))", "code_8": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(sum(arr[i:j]) for i in range(n) for j in range(i+1, n+1))", "code_9": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(sum(arr[i:j]) for j in range(n+1) for i in range(j))", "code_10": "def sum_Of_Subarray_Prod(arr,n):\n    return sum(sum(arr[i:j]) for i in range(n) for j in range(i+1, n+1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/735", "prompt": "\n\ndef toggle_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    >>> toggle_middle_bits(9)\n    15\n    >>> toggle_middle_bits(10)\n    12\n    >>> toggle_middle_bits(11)\n    13\n    \"\"\"\n", "solution": "    def set_middle_bits(n):  \n        n |= n >> 1; \n        n |= n >> 2; \n        n |= n >> 4; \n        n |= n >> 8; \n        n |= n >> 16;  \n        return (n >> 1) ^ 1\n     \n    if (n == 1): \n        return 1\n    return n ^ set_middle_bits(n) ", "results": [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def toggle_middle_bits(n):\n    return n ^ ((1 << n.bit_length()) - 1 - (1 << (n.bit_length() - 1)))", "code_2": "def toggle_middle_bits(n):\n    return n ^ ((2 ** (len(bin(n)) - 2)) - 1) ^ (2 ** (len(bin(n)) - 2))", "code_3": "def toggle_middle_bits(n):\n    mask = (1 << n.bit_length()) - 3\n    return n ^ mask", "code_4": "def toggle_middle_bits(n):\n    return n ^ ((1 << len(bin(n)) - 2) - 1)", "code_5": "def toggle_middle_bits(n):\n    return n ^ ((2 ** (n.bit_length() - 1)) - 2)", "code_6": "def toggle_middle_bits(n):\n    return n ^ ((1 << n.bit_length() - 1) - 2)", "code_7": "def toggle_middle_bits(n):\n    return n ^ ((1 << len(bin(n)) - 2) - 1) ^ 1", "code_8": "def toggle_middle_bits(n):\n    return n ^ ((2 ** (n.bit_length() - 1)) - 1) ^ 1", "code_9": "def toggle_middle_bits(n):\n    return n ^ ((1 << len(bin(n)) - 2) - 1) ^ (1 << len(bin(n)) - 1)", "code_10": "def toggle_middle_bits(n):\n    return n ^ ((1 << n.bit_length() - 1) - 1) ^ (1 << n.bit_length() - 1)", "pass@3": 0.7083333333333333, "nDCG@10": 0.2329726085570736}
{"task_id": "MBPP/736", "prompt": "\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    >>> left_insertion([1,2,4,5],6)\n    4\n    >>> left_insertion([1,2,4,5],3)\n    2\n    >>> left_insertion([1,2,4,5],7)\n    4\n    \"\"\"\n", "solution": "    import bisect\n    \n    i = bisect.bisect_left(a, x)\n    return i", "results": [1, 1, 1, 0, 1, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def left_insertion(a, x):\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "code_2": "def left_insertion(a, x):\n    return len([i for i in a if i < x])", "code_3": "def left_insertion(a, x):\n    return sum(1 for i in a if i < x)", "code_4": "def left_insertion(a, x):\n    return reduce(lambda c, i: c + (i < x), a, 0)", "code_5": "def left_insertion(a, x):\n    return len(list(filter(lambda i: i < x, a)))", "code_6": "def left_insertion(a, x):\n    return bisect_left(a, x)", "code_7": "def left_insertion(a, x):\n    return next((i for i, v in enumerate(a) if v >= x), len(a))", "code_8": "def left_insertion(a, x):\n    return len(list(takewhile(lambda i: i < x, a)))", "code_9": "def left_insertion(a, x):\n    return len(list(itertools.dropwhile(lambda i: i < x, a)))", "code_10": "def left_insertion(a, x):\n    return len(list(itertools.takewhile(lambda i: i < x, enumerate(a))))", "pass@3": 0.9166666666666666, "nDCG@10": 0.627507133061656}
{"task_id": "MBPP/737", "prompt": "\n\ndef check_str(string):\n\t\"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t>>> check_str(\"annie\")\n\t'Valid'\n\t>>> check_str(\"dawood\")\n\t'Invalid'\n\t>>> check_str(\"Else\")\n\t'Valid'\n\t\"\"\"\n", "solution": "\timport re \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\t \n\tif(re.search(regex, string)): \n\t\treturn (\"Valid\") \n\telse: \n\t\treturn (\"Invalid\") ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef check_str(string):\n    return 'Valid' if re.match('^[aeiouAEIOU]', string) else 'Invalid'", "code_2": "import re\ndef check_str(string):\n    return 'Valid' if re.search('^[aeiouAEIOU]', string) else 'Invalid'", "code_3": "import re\ndef check_str(string):\n    return 'Valid' if string[0].lower() in 'aeiou' else 'Invalid'", "code_4": "import re\ndef check_str(string):\n    return 'Valid' if string[0] in 'aeiouAEIOU' else 'Invalid'", "code_5": "def check_str(string):\n    return 'Valid' if string[0].lower() in 'aeiou' else 'Invalid'", "code_6": "def check_str(string):\n    return 'Valid' if string[0] in 'aeiouAEIOU' else 'Invalid'", "code_7": "def check_str(string):\n    return 'Valid' if string[0] in 'aeiou' or string[0] in 'AEIOU' else 'Invalid'", "code_8": "def check_str(string):\n    return 'Valid' if string[0] in 'aeiouAEIOU' and string[0].isalpha() else 'Invalid'", "code_9": "def check_str(string):\n    return 'Valid' if string[0] in 'aeiouAEIOU' and string[0].isalpha() and string[0].islower() else 'Invalid'", "code_10": "def check_str(string):\n    return 'Valid' if string[0] in 'aeiouAEIOU' and string[0].isalpha() and string[0].isupper() else 'Invalid'", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/738", "prompt": "\n\ndef geometric_sum(n):\n  \"\"\"\n  Write a function to calculate the geometric sum of n-1.\n  >>> geometric_sum(7)\n  1.9921875\n  >>> geometric_sum(4)\n  1.9375\n  >>> geometric_sum(8)\n  1.99609375\n  \"\"\"\n", "solution": "  \n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def geometric_sum(n): return (1 - 0.5**n) / (1 - 0.5)", "code_2": "def geometric_sum(n): return 2 * (1 - 0.5**n)", "code_3": "def geometric_sum(n): return 1 - 0.5**n if n > 0 else 0", "code_4": "def geometric_sum(n): return sum(0.5**i for i in range(n))", "code_5": "def geometric_sum(n): return reduce(lambda a, b: a + b, [0.5**i for i in range(n)])", "code_6": "def geometric_sum(n): return sum([0.5**i for i in range(n)])", "code_7": "def geometric_sum(n): return sum(map(lambda i: 0.5**i, range(n)))", "code_8": "def geometric_sum(n): return 1 if n == 0 else 0.5 * geometric_sum(n - 1) + 0.5**n", "code_9": "def geometric_sum(n): return 1 if n == 0 else 0.5 * geometric_sum(n - 1) + 1 / 2**n", "code_10": "def geometric_sum(n): return 1 if n == 0 else 0.5 * geometric_sum(n - 1) + 1 << -n", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/739", "prompt": "\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    14\n    >>> find_Index(4)\n    45\n    \"\"\"\n", "solution": "    import math \n     \n    x = math.sqrt(2 * math.pow(10,(n - 1))); \n    return round(x); ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Index(n): return (10**(n-1)-1)//2", "code_2": "def find_Index(n): return (10**n)**0.5//2", "code_3": "import math\ndef find_Index(n): return math.isqrt(10**(n*2))//2", "code_4": "def find_Index(n): return sum(range(1, (10**n)**0.5//2+1))", "code_5": "def find_Index(n): return sum(range(1, int((10**n)**0.5)//2+1))", "code_6": "def find_Index(n): return sum(range(1, int((10**(n-1)-1)/2)+1))", "code_7": "def find_Index(n): return sum(range(1, int((10**n-1)**0.5//2)+1))", "code_8": "def find_Index(n): return sum(range(1, int((10**(n-1))**0.5)+1))", "code_9": "def find_Index(n): return sum(range(1, int((10**(n-1))**0.5//2)+1))", "code_10": "def find_Index(n): return sum(range(1, int((10**(n-1))**0.5//2)+2))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/740", "prompt": "\n\ndef tuple_to_dict(test_tup):\n  \"\"\"\n  Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n  >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n  {1: 5, 7: 10, 13: 5}\n  >>> tuple_to_dict((1, 2, 3, 4, 5, 6))\n  {1: 2, 3: 4, 5: 6}\n  >>> tuple_to_dict((7, 8, 9, 10, 11, 12))\n  {7: 8, 9: 10, 11: 12}\n  \"\"\"\n", "solution": "  \n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n  return (res) ", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}", "code_2": "def tuple_to_dict(test_tup):\n    return dict(zip(test_tup[::2], test_tup[1::2]))", "code_3": "def tuple_to_dict(test_tup):\n    return {k: v for k, v in zip(test_tup[::2], test_tup[1::2])}", "code_4": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2) if i + 1 < len(test_tup)}", "code_5": "def tuple_to_dict(test_tup):\n    return {k: v for k, v in zip(test_tup, test_tup[1:]) if k != test_tup[-1]}", "code_6": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "code_7": "def tuple_to_dict(test_tup):\n    return {k: v for k, v in zip(test_tup[:-1], test_tup[1:]) if k != test_tup[-2]}", "code_8": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2) if i < len(test_tup) - 2}", "code_9": "def tuple_to_dict(test_tup):\n    return {k: v for k, v in zip(test_tup, test_tup[1:]) if v != test_tup[-1]}", "code_10": "def tuple_to_dict(test_tup):\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2) if i + 1 < len(test_tup) - 1}", "pass@3": 0.9166666666666666, "nDCG@10": 0.6421867266689011}
{"task_id": "MBPP/741", "prompt": "\n\ndef all_Characters_Same(s) :\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    >>> all_Characters_Same(\"python\")\n    False\n    >>> all_Characters_Same(\"aaa\")\n    True\n    >>> all_Characters_Same(\"data\")\n    False\n    \"\"\"\n", "solution": "    \n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def all_Characters_Same(s): return len(set(s)) == 1", "code_2": "def all_Characters_Same(s): return s.count(s[0]) == len(s)", "code_3": "def all_Characters_Same(s): return s[1:] == s[:-1]", "code_4": "def all_Characters_Same(s): return all(c == s[0] for c in s)", "code_5": "def all_Characters_Same(s): return s == s[0] * len(s)", "code_6": "def all_Characters_Same(s): return not s or s.replace(s[0], '') == ''", "code_7": "def all_Characters_Same(s): return s.count(s[0]) == len(s)", "code_8": "def all_Characters_Same(s): return len(set(s)) == 1", "code_9": "def all_Characters_Same(s): return s.count(s[0]) == len(s)", "code_10": "def all_Characters_Same(s): return len(set(s)) == 1", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/742", "prompt": "\n\ndef area_tetrahedron(side):\n  \"\"\"\n  Write a function to caluclate the area of a tetrahedron.\n  >>> area_tetrahedron(3)\n  15.588457268119894\n  >>> area_tetrahedron(20)\n  692.8203230275509\n  >>> area_tetrahedron(10)\n  173.20508075688772\n  \"\"\"\n", "solution": "  import math\n  \n  area = math.sqrt(3)*(side*side)\n  return area", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef area_tetrahedron(side):\n  return (math.sqrt(3) * side ** 2) / 4", "code_2": "from math import sqrt\ndef area_tetrahedron(side):\n  return (sqrt(3) * side * side) / 4", "code_3": "def area_tetrahedron(side):\n  return (1.7320508075688772 * side * side) / 4", "code_4": "def area_tetrahedron(side):\n  return side * side * 1.7320508075688772 / 4", "code_5": "def area_tetrahedron(side):\n  return (side ** 2 * 1.7320508075688772) / 4", "code_6": "def area_tetrahedron(side):\n  return (side ** 2 * 3 ** 0.5) / 4", "code_7": "def area_tetrahedron(side):\n  return (3 ** 0.5 * side ** 2) / 4", "code_8": "def area_tetrahedron(side):\n  return (3 ** 0.5) * side * side / 4", "code_9": "def area_tetrahedron(side):\n  return (3 ** 0.5) / 4 * side ** 2", "code_10": "def area_tetrahedron(side):\n  return side * side * (3 ** 0.5) / 4", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/743", "prompt": "\n\ndef rotate_right(list1,m,n):\n  \"\"\"\n  Write a function to rotate a given list by specified number of items to the right direction.\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)\n  [8, 9, 10, 1, 2, 3, 4, 5, 6]\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)\n  [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n  >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)\n  [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n  \"\"\"\n", "solution": "  \n  result =  list1[-(m):]+list1[:-(n)]\n  return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def rotate_right(lst, m, n):\n    return lst[-m % n:] + lst[:-m % n]", "code_2": "def rotate_right(lst, m, n):\n    return lst[m * -1:] + lst[:m * -1]", "code_3": "def rotate_right(lst, m, n):\n    return lst[len(lst) - m:] + lst[:len(lst) - m]", "code_4": "def rotate_right(lst, m, n):\n    return lst[m:] + lst[:m]", "code_5": "def rotate_right(lst, m, n):\n    return lst[m * -1:] + lst[:m * -1]", "code_6": "def rotate_right(lst, m, n):\n    return lst[-m:] + lst[:-m]", "code_7": "def rotate_right(lst, m, n):\n    return lst[len(lst) - m:] + lst[:len(lst) - m]", "code_8": "def rotate_right(lst, m, n):\n    return lst[m * -1:] + lst[:m * -1]", "code_9": "def rotate_right(lst, m, n):\n    return lst[-m % len(lst):] + lst[:-m % len(lst)]", "code_10": "def rotate_right(lst, m, n):\n    return lst[len(lst) - m % len(lst):] + lst[:len(lst) - m % len(lst)]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/744", "prompt": "\n\ndef check_none(test_tup):\n  \"\"\"\n  Write a function to check if the given tuple has any none value or not.\n  >>> check_none((10, 4, 5, 6, None))\n  True\n  >>> check_none((7, 8, 9, 11, 14))\n  False\n  >>> check_none((1, 2, 3, 4, None))\n  True\n  \"\"\"\n", "solution": "  \n  res = any(map(lambda ele: ele is None, test_tup))\n  return (res) ", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def check_none(test_tup):\n  return None in test_tup", "code_2": "def check_none(test_tup):\n  for i in test_tup:\n    if i is None:\n      return True\n  return False", "code_3": "def check_none(test_tup):\n  return any(i is None for i in test_tup)", "code_4": "def check_none(test_tup):\n  return len(test_tup) != len(tuple(i for i in test_tup if i is not None))", "code_5": "def check_none(test_tup):\n  return sum(1 for i in test_tup if i is None) > 0", "code_6": "def check_none(test_tup):\n  return bool(filter(lambda x: x is None, test_tup))", "code_7": "def check_none(test_tup):\n  return set(test_tup) != {i for i in test_tup if i is not None}", "code_8": "def check_none(test_tup):\n  return len([i for i in test_tup if i is None]) > 0", "code_9": "def check_none(test_tup):\n  return any(map(lambda x: x is None, test_tup))", "code_10": "def check_none(test_tup):\n  return reduce(lambda x, y: x or y is None, test_tup, False)", "pass@3": 1.0, "nDCG@10": 0.857980942822373}
{"task_id": "MBPP/745", "prompt": "\n\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n    >>> divisible_by_digits(1,22)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    >>> divisible_by_digits(1,15)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    >>> divisible_by_digits(20,25)\n    [22, 24]\n    \"\"\"\n", "solution": "    \n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i % int(d) == 0 for d in str(i))]", "code_2": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i % int(d) == 0 for d in map(int, str(i)))]", "code_3": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if not any(i % int(d) != 0 for d in str(i))]", "code_4": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if not any(i % int(d) for d in str(i))]", "code_5": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(not i % int(d) for d in str(i))]", "code_6": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i % int(d) == 0 for d in str(i).replace('0', ''))]", "code_7": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i % int(d) == 0 for d in filter(lambda x: x != '0', str(i)))]", "code_8": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if not any(i % int(d) for d in str(i) if d != '0')]", "code_9": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if all(i % int(d) == 0 for d in str(i) if d != '0')]", "code_10": "def divisible_by_digits(startnum, endnum):\n    return [i for i in range(startnum, endnum+1) if not any(i % int(d) != 0 for d in str(i) if d != '0')]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/746", "prompt": "\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector.\n    >>> sector_area(4,45)\n    6.285714285714286\n    >>> sector_area(9,45)\n    31.82142857142857\n    >>> sector_area(9,360)\n    None\n    \"\"\"\n", "solution": "    \n    pi=22/7\n    if a >= 360:\n        return None\n    sectorarea = (pi*r**2) * (a/360)\n    return sectorarea", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef sector_area(r, a):\n    if a == 360: return None\n    return (a / 360) * math.pi * r * r", "code_2": "import math\ndef sector_area(r, a):\n    return None if a == 360 else (a / 360) * math.pi * r * r", "code_3": "from math import pi\ndef sector_area(r, a):\n    return (a / 360) * pi * r * r if a != 360 else None", "code_4": "from math import pi\ndef sector_area(r, a):\n    return (pi * r * r * a) / 360 if a != 360 else None", "code_5": "import math\ndef sector_area(r, a):\n    return (math.pi * r * r * a) / 360 if a < 360 else None", "code_6": "import math\ndef sector_area(r, a):\n    return (math.pi * r * r * a / 360) if a < 360 else None", "code_7": "from math import pi\ndef sector_area(r, a):\n    return (pi * r * r * a / 360) if a < 360 else None", "code_8": "from math import pi\ndef sector_area(r, a):\n    return (pi * r * r * a / 360) if a != 360 else None", "code_9": "from math import pi\ndef sector_area(r, a):\n    return (pi * r * r * a / 360) if a < 360 else float('nan')", "code_10": "from math import pi\ndef sector_area(r, a):\n    return (pi * r * r * a / 360) if a < 360 else float('inf')", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/747", "prompt": "\n\ndef lcs_of_three(X, Y, Z, m, n, o):\n\t\"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence.\n\t>>> lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)\n\t2\n\t>>> lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)\n\t5\n\t>>> lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)\n\t3\n\t\"\"\"\n", "solution": "\t \n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \n\t\tfor k in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tfor k in range(o+1): \n\t\t\t\tif (i == 0 or j == 0 or k == 0): \n\t\t\t\t\tL[i][j][k] = 0\n\t\t\t\telif (X[i-1] == Y[j-1] and\n\t\t\t\t\tX[i-1] == Z[k-1]): \n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t\telse: \n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \n\t\t\t\t\tL[i][j-1][k]), \n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \n\treturn L[m][n][o]", "results": [1, 1, 1, 0, 1, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]", "code_2": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[-1][-1][-1]", "code_3": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                if X[i] == Y[j] == Z[k]:\n                    dp[i][j][k] = dp[i+1][j+1][k+1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[0][0][0]", "code_4": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                if X[i] == Y[j] == Z[k]:\n                    dp[i][j][k] = dp[i+1][j+1][k+1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[m-1][n-1][o-1]", "code_5": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                if X[i] == Y[j] == Z[k]:\n                    dp[i][j][k] = dp[i+1][j+1][k+1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[0][0][0]", "code_6": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                dp[i][j][k] = dp[i+1][j+1][k+1] + 1 if X[i] == Y[j] == Z[k] else max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[0][0][0]", "code_7": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                dp[i][j][k] = dp[i+1][j+1][k+1] + 1 if X[i] == Y[j] == Z[k] else max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[m-1][n-1][o-1]", "code_8": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                dp[i][j][k] = dp[i+1][j+1][k+1] + 1 if X[i] == Y[j] == Z[k] else max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[-1][-1][-1]", "code_9": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                dp[i][j][k] = dp[i+1][j+1][k+1] + 1 if X[i] == Y[j] == Z[k] else max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[m][n][o]", "code_10": "def lcs_of_three(X, Y, Z, m, n, o):\n    dp = [[[0]*(o+1) for _ in range(n+1)] for __ in range(m+1)]\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            for k in range(o-1, -1, -1):\n                dp[i][j][k] = dp[i+1][j+1][k+1] + 1 if X[i] == Y[j] == Z[k] else max(dp[i+1][j][k], dp[i][j+1][k], dp[i][j][k+1])\n    return dp[m-1][n-1][o-1]", "pass@3": 0.9166666666666666, "nDCG@10": 0.6325414799409712}
{"task_id": "MBPP/748", "prompt": "\n\ndef capital_words_spaces(str1):\n  \"\"\"\n  Write a function to put spaces between words starting with capital letters in a given string by using regex.\n  >>> capital_words_spaces(\"Python\")\n  'Python'\n  >>> capital_words_spaces(\"PythonProgrammingExamples\")\n  'Python Programming Examples'\n  >>> capital_words_spaces(\"GetReadyToBeCodingFreak\")\n  'Get Ready To Be Coding Freak'\n  \"\"\"\n", "solution": "  import re\n  \n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef capital_words_spaces(str1):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "code_2": "import re\ndef capital_words_spaces(str1):\n    return re.sub(r\"(?<=[a-z])(?=[A-Z])\", \" \", str1)", "code_3": "import re\ndef capital_words_spaces(str1):\n    return re.sub('([a-z])([A-Z])', r'\\1 \\2', str1)", "code_4": "import re\ndef capital_words_spaces(str1):\n    return re.sub('(?<=[a-z])(?=[A-Z])', ' ', str1)", "code_5": "import re\ndef capital_words_spaces(str1):\n    return re.sub('(?<=[a-z])(?=[A-Z])', ' ', str1)", "code_6": "import re\ndef capital_words_spaces(str1):\n    return re.sub(r\"(?<=[a-z])(?=[A-Z])\", \" \", str1)", "code_7": "import re\ndef capital_words_spaces(str1):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "code_8": "import re\ndef capital_words_spaces(str1):\n    return re.sub(r\"(?<=[a-z])(?=[A-Z])\", \" \", str1)", "code_9": "import re\ndef capital_words_spaces(str1):\n    return re.sub('([a-z])([A-Z])', r'\\1 \\2', str1)", "code_10": "import re\ndef capital_words_spaces(str1):\n    return re.sub('(?<=[a-z])(?=[A-Z])', ' ', str1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/749", "prompt": "\n\ndef sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    >>> sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])\n    [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    >>> sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])\n    [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    >>> sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])\n    [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n    \"\"\"\n", "solution": "    \n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "results": [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=int)", "code_2": "def sort_numeric_strings(nums_str):\n    return sorted(map(int, nums_str))", "code_3": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=int)\n    return nums_str", "code_4": "import functools\ndef sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=functools.cmp_to_key(lambda x, y: int(x) - int(y)))", "code_5": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str", "code_6": "def sort_numeric_strings(nums_str):\n    return [int(i) for i in sorted(nums_str)]", "code_7": "def sort_numeric_strings(nums_str):\n    nums_str[:] = sorted(nums_str, key=int)\n    return nums_str", "code_8": "def sort_numeric_strings(nums_str):\n    nums_str[:] = sorted(map(int, nums_str))\n    return nums_str", "code_9": "def sort_numeric_strings(nums_str):\n    nums_str[:] = [int(i) for i in sorted(nums_str)]\n    return nums_str", "code_10": "def sort_numeric_strings(nums_str):\n    nums_str[:] = sorted(nums_str, key=lambda x: int(x))\n    return nums_str", "pass@3": 0.5333333333333333, "nDCG@10": 0.20829366581033185}
{"task_id": "MBPP/750", "prompt": "\n\ndef add_tuple(test_list, test_tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  >>> add_tuple([5, 6, 7], (9, 10))\n  [5, 6, 7, 9, 10]\n  >>> add_tuple([6, 7, 8], (10, 11))\n  [6, 7, 8, 10, 11]\n  >>> add_tuple([7, 8, 9], (11, 12))\n  [7, 8, 9, 11, 12]\n  \"\"\"\n", "solution": "  \n  test_list += test_tup\n  return (test_list) ", "results": [1, 1, 1, 1, 1, 1, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def add_tuple(test_list, test_tup):\n  return test_list + list(test_tup)", "code_2": "def add_tuple(test_list, test_tup):\n  test_list.extend(test_tup)\n  return test_list", "code_3": "def add_tuple(test_list, test_tup):\n  for i in test_tup:\n    test_list.append(i)\n  return test_list", "code_4": "def add_tuple(test_list, test_tup):\n  return [*test_list, *test_tup]", "code_5": "def add_tuple(test_list, test_tup):\n  test_list += test_tup\n  return test_list", "code_6": "def add_tuple(test_list, test_tup):\n  return [i for i in test_list] + [i for i in test_tup]", "code_7": "def add_tuple(test_list, test_tup):\n  return list(map(lambda x: x, test_list + test_tup))", "code_8": "def add_tuple(test_list, test_tup):\n  return reduce(lambda x, y: x + [y], test_tup, test_list)", "code_9": "def add_tuple(test_list, test_tup):\n  return list(chain(test_list, test_tup))", "code_10": "def add_tuple(test_list, test_tup):\n  test_list.append(test_tup[0])\n  test_list.append(test_tup[1])\n  return test_list", "pass@3": 0.9916666666666667, "nDCG@10": 0.7909506325094736}
{"task_id": "MBPP/751", "prompt": "\n\ndef check_min_heap(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    >>> check_min_heap([1, 2, 3, 4, 5, 6], 0)\n    True\n    >>> check_min_heap([2, 3, 4, 5, 10, 15], 0)\n    True\n    >>> check_min_heap([2, 10, 4, 5, 3, 15], 0)\n    False\n    \"\"\"\n", "solution": "    \n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \n                                      and check_min_heap(arr, 2 * i + 2))\n    return left_child and right_child", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_min_heap(arr, i):\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < len(arr) and arr[i] > arr[l]:\n        return False\n    if r < len(arr) and arr[i] > arr[r]:\n        return False\n    return all(check_min_heap(arr, c) for c in (l, r) if c < len(arr))", "code_2": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n):\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True", "code_3": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True", "code_4": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n):\n        if (i * 2 + 1 < n and arr[i] > arr[i * 2 + 1]) or (i * 2 + 2 < n and arr[i] > arr[i * 2 + 2]):\n            return False\n    return True", "code_5": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if (i * 2 + 1 < n and arr[i] > arr[i * 2 + 1]) or (i * 2 + 2 < n and arr[i] > arr[i * 2 + 2]):\n            return False\n    return True", "code_6": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n):\n        if (i * 2 + 1 < n and arr[i] > arr[i * 2 + 1]) or (i * 2 + 2 < n and arr[i] > arr[i * 2 + 2]):\n            return False\n    return True", "code_7": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True", "code_8": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n):\n        if 2 * i + 1 < n and arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True", "code_9": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True", "code_10": "def check_min_heap(arr, i):\n    n = len(arr)\n    for i in range(n):\n        if (i * 2 + 1 < n and arr[i] > arr[i * 2 + 1]) or (i * 2 + 2 < n and arr[i] > arr[i * 2 + 2]):\n            return False\n    return True", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/752", "prompt": "\n\ndef jacobsthal_num(n):\n\t\"\"\"\n\tWrite a function to find the nth jacobsthal number.\n\t>>> jacobsthal_num(5)\n\t11\n\t>>> jacobsthal_num(2)\n\t1\n\t>>> jacobsthal_num(4)\n\t5\n\t\"\"\"\n", "solution": "\t \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def jacobsthal_num(n):\n\ta, b = 0, 1\n\tfor _ in range(n):\n\t\ta, b = b, a + 2 * b\n\treturn a", "code_2": "def jacobsthal_num(n):\n\treturn [0, 1] + [2 * jacobsthal_num(i - 1) + jacobsthal_num(i - 2) for i in range(2, n + 1)]", "code_3": "def jacobsthal_num(n):\n\tjacobsthal = [0, 1] + [0] * (n - 1)\n\tfor i in range(2, n + 1):\n\t\tjacobsthal[i] = 2 * jacobsthal[i - 1] + jacobsthal[i - 2]\n\treturn jacobsthal[n]", "code_4": "def jacobsthal_num(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn 2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2)", "code_5": "def jacobsthal_num(n):\n\tjacobsthal = [0, 1]\n\twhile len(jacobsthal) <= n:\n\t\tjacobsthal.append(2 * jacobsthal[-1] + jacobsthal[-2])\n\treturn jacobsthal[n]", "code_6": "def jacobsthal_num(n):\n\ta, b = 0, 1\n\tfor _ in range(n):\n\t\ta, b = b, a + 2 * b\n\treturn a", "code_7": "def jacobsthal_num(n):\n\tjacobsthal = [0, 1]\n\tfor _ in range(2, n + 1):\n\t\tjacobsthal.append(2 * jacobsthal[-1] + jacobsthal[-2])\n\treturn jacobsthal[n]", "code_8": "def jacobsthal_num(n):\n\tif n <= 1:\n\t\treturn n\n\telse:\n\t\ta, b = 0, 1\n\t\tfor _ in range(2, n + 1):\n\t\t\ta, b = b, a + 2 * b\n\t\treturn b", "code_9": "def jacobsthal_num(n):\n\tjacobsthal = [0, 1]\n\tfor _ in range(n - 1):\n\t\tjacobsthal.append(2 * jacobsthal[-1] + jacobsthal[-2])\n\treturn jacobsthal[n]", "code_10": "def jacobsthal_num(n):\n\tjacobsthal = [0, 1]\n\tfor _ in range(n - 1):\n\t\tjacobsthal.append(2 * jacobsthal[-1] + jacobsthal[-2])\n\treturn jacobsthal[n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/753", "prompt": "\n\ndef min_k(test_list, K):\n  \"\"\"\n  Write a function to find minimum k records from tuple list.\n  >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n  [('Akash', 2), ('Akshat', 4)]\n  >>> min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)\n  [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n  >>> min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)\n  [('Ayesha', 9)]\n  \"\"\"\n", "solution": "  \n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using `heapq.nsmallest`:\nimport heapq\ndef min_k(test_list, K):\n    return heapq.nsmallest(K, test_list, key=lambda x: x[1])", "code_2": "Using `sorted`:\ndef min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]", "code_3": "Using `sort` and slicing:\ndef min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]", "code_4": "Using `heapq.heapify` and `heapq.heappop`:\nimport heapq\ndef min_k(test_list, K):\n    heapq._heapify_max(test_list, key=lambda x: x[1])\n    return [heapq._heappop_max(test_list) for _ in range(K)]", "code_5": "Using `heapq.nlargest` and reversing the list:\nimport heapq\ndef min_k(test_list, K):\n    return heapq.nlargest(K, test_list, key=lambda x: -x[1])", "code_6": "Using `sort` and `reverse`:\ndef min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1], reverse=True)\n    return test_list[-K:][::-1]", "code_7": "Using `sorted` and `reverse`:\ndef min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1], reverse=True)[:-K-1:-1]", "code_8": "Using `heapq.heapify` and `heapq.heappop` with a custom class:\nimport heapq\nclass Record:\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n    def __lt__(self, other):\n        return self.value > other.value\ndef min_k(test_list, K):\n    records = [Record(name, value) for name, value in test_list]\n    heapq.heapify(records)\n    return [(record.name, record.value) for record in [heapq.heappop(records) for _ in range(K)]]", "code_9": "Using `heapq.heapify` and `heapq.heappop` with a custom tuple:\nimport heapq\ndef min_k(test_list, K):\n    test_list = [(-value, name) for name, value in test_list]\n    heapq.heapify(test_list)\n    return [(name, -value) for value, name in [heapq.heappop(test_list) for _ in range(K)]]", "code_10": "Using `heapq.heapify` and `heapq.heappop` with a custom key function:\nimport heapq\ndef min_k(test_list, K):\n    test_list = [(value, name) for name, value in test_list]\n    heapq.heapify(test_list)\n    return [(name, value) for value, name in heapq.nsmallest(K, test_list)]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/754", "prompt": "\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    Write a function to find common index elements from three lists.\n    >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n    [1, 7]\n    >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])\n    [1, 6]\n    >>> extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n    [1, 5]\n    \"\"\"\n", "solution": "    \n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_index_list(l1, l2, l3):\n    return [i for i, x in enumerate(l1) if l2[i] == l3[i] == x]", "code_2": "def extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]", "code_3": "def extract_index_list(l1, l2, l3):\n    return [i for i in set(l1) & set(l2) & set(l3)]", "code_4": "def extract_index_list(l1, l2, l3):\n    return list(filter(lambda i: l1[i] == l2[i] == l3[i], range(len(l1))))", "code_5": "def extract_index_list(l1, l2, l3):\n    return [i for i in map(l1.index, l2) if l2[i] == l3[i]]", "code_6": "def extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] and l2[i] == l3[i]]", "code_7": "def extract_index_list(l1, l2, l3):\n    return [i for i in set(l1) if l1.count(i) == l2.count(i) == l3.count(i)]", "code_8": "def extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if all(l[i] == l1[i] for l in (l2, l3))]", "code_9": "def extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] and l1[i] == l3[i]]", "code_10": "def extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/755", "prompt": "\n\ndef second_smallest(numbers):\n  \"\"\"\n  Write a function to find the second smallest number in a list.\n  >>> second_smallest([1, 2, -8, -2, 0, -2])\n  -2\n  >>> second_smallest([1, 1, -0.5, 0, 2, -2, -2])\n  -0.5\n  >>> second_smallest([2,2])\n  None\n  \"\"\"\n", "solution": "  \n  if (len(numbers)<2):\n    return\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\n    return\n  dup_items = set()\n  uniq_items = []\n  for x in numbers:\n    if x not in dup_items:\n      uniq_items.append(x)\n      dup_items.add(x)\n  uniq_items.sort()    \n  return  uniq_items[1] ", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def second_smallest(numbers):\n    a, b = float('inf'), float('inf')\n    for num in numbers:\n        if num < a:\n            a, b = num, a\n        elif a < num < b:\n            b = num\n    return None if b == float('inf') else b", "code_2": "def second_smallest(numbers):\n    unique_numbers = sorted(set(numbers))\n    return None if len(unique_numbers) < 2 else unique_numbers[1]", "code_3": "def second_smallest(numbers):\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return None if second_smallest == float('inf') else second_smallest", "code_4": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return None if len(unique_numbers) < 2 else unique_numbers[1]", "code_5": "def second_smallest(numbers):\n    smallest = min(numbers)\n    numbers.remove(smallest)\n    return min(numbers) if smallest in numbers else None", "code_6": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.remove(min(unique_numbers))\n    return min(unique_numbers) if len(unique_numbers) > 0 else None", "code_7": "def second_smallest(numbers):\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            smallest, second_smallest = num, smallest\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None", "code_8": "def second_smallest(numbers):\n    unique_numbers = sorted(set(numbers))\n    return unique_numbers[1] if len(unique_numbers) > 1 else None", "code_9": "def second_smallest(numbers):\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') and second_smallest != smallest else None", "code_10": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1] if len(unique_numbers) > 1 and unique_numbers[0] != unique_numbers[1] else None", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/756", "prompt": "\n\ndef text_match_zero_one(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by zero or one 'b'.\n        >>> text_match_zero_one(\"ac\")\n        ('Found a match!')\n        >>> text_match_zero_one(\"dc\")\n        ('Not matched!')\n        >>> text_match_zero_one(\"abbbba\")\n        ('Found a match!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'ab?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef text_match_zero_one(text):\n    if re.match(r'ab?', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "code_2": "def text_match_zero_one(text):\n    if text[0] == 'a' and (len(text) == 1 or text[1] == 'b'):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "code_3": "def text_match_zero_one(text):\n    return 'Found a match!' if text.startswith('a') and (len(text) == 1 or text[1] == 'b') else 'Not matched!'", "code_4": "def text_match_zero_one(text):\n    return ('Found a match!', 'Not matched!')[text[0] != 'a' or (len(text) > 1 and text[1] != 'b')]", "code_5": "def text_match_zero_one(text):\n    return 'Found a match!' if text[:2] in ['a', 'ab'] else 'Not matched!'", "code_6": "def text_match_zero_one(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:2] != 'b' else 'Not matched!'", "code_7": "def text_match_zero_one(text):\n    return 'Found a match!' if text[0] == 'a' and (len(text) == 1 or text[1] != 'b') else 'Not matched!'", "code_8": "def text_match_zero_one(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:].replace('b', '') == text[1:] else 'Not matched!'", "code_9": "def text_match_zero_one(text):\n    return 'Found a match!' if text[0] == 'a' and not text[1:].startswith('b') else 'Not matched!'", "code_10": "def text_match_zero_one(text):\n    return 'Found a match!' if text[0] == 'a' and text[1:].count('b') < 1 else 'Not matched!'", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/757", "prompt": "\n\ndef count_reverse_pairs(test_list):\n  \"\"\"\n  Write a function to count the pairs of reverse strings in the given string list.\n  >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n  '2'\n  >>> count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n  '1'\n  >>> count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n  '2'\n  \"\"\"\n", "solution": "  \n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \n  return str(res)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_reverse_pairs(test_list):\n    return sum(1 for i in range(len(test_list)) for j in range(i+1, len(test_list)) if test_list[i] == test_list[j][::-1])", "code_2": "def count_reverse_pairs(test_list):\n    return sum(test_list[i] == test_list[j][::-1] for i in range(len(test_list)) for j in range(i+1, len(test_list)))", "code_3": "def count_reverse_pairs(test_list):\n    return len([(i, j) for i in range(len(test_list)) for j in range(i+1, len(test_list)) if test_list[i] == test_list[j][::-1]])", "code_4": "def count_reverse_pairs(test_list):\n    return sum(test_list[i] == test_list[j][::-1] for i in range(len(test_list)) for j in range(i+1, len(test_list)))", "code_5": "def count_reverse_pairs(test_list):\n    return sum(test_list[i] == test_list[j][::-1] for i in range(len(test_list)) for j in range(i+1, len(test_list)))", "code_6": "def count_reverse_pairs(test_list):\n    return len([1 for i in range(len(test_list)) for j in range(i+1, len(test_list)) if test_list[i] == test_list[j][::-1]])", "code_7": "def count_reverse_pairs(test_list):\n    return sum(test_list[i] == test_list[j][::-1] for i in range(len(test_list)) for j in range(i+1, len(test_list)))", "code_8": "def count_reverse_pairs(test_list):\n    return len([(i, j) for i in range(len(test_list)) for j in range(i+1, len(test_list)) if test_list[i] == test_list[j][::-1]])", "code_9": "def count_reverse_pairs(test_list):\n    return sum(test_list[i] == test_list[j][::-1] for i in range(len(test_list)) for j in range(i+1, len(test_list)))", "code_10": "def count_reverse_pairs(test_list):\n    return len([1 for i in range(len(test_list)) for j in range(i+1, len(test_list)) if test_list[i] == test_list[j][::-1]])", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/758", "prompt": "\n\ndef unique_sublists(list1):\n    \"\"\"\n    Write a function to count number of unique lists within a list.\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    >>> unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n    {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    \"\"\"\n", "solution": "    \n    result ={}\n    for l in  list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "results": [1, 1, 1, 0, 1, 1, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef unique_sublists(lst):\n    return dict(Counter(map(tuple, lst)))", "code_2": "def unique_sublists(lst):\n    return {tuple(sub): lst.count(sub) for sub in lst}", "code_3": "def unique_sublists(lst):\n    counts = {}\n    for sub in lst:\n        counts[tuple(sub)] = counts.get(tuple(sub), 0) + 1\n    return counts", "code_4": "import pandas as pd\ndef unique_sublists(lst):\n    return pd.Series([tuple(sub) for sub in lst]).value_counts().to_dict()", "code_5": "def unique_sublists(lst):\n    from itertools import groupby\n    lst.sort()\n    return {tuple(k): len(list(g)) for k, g in groupby(lst)}", "code_6": "def unique_sublists(lst):\n    from collections import defaultdict\n    counts = defaultdict(int)\n    for sub in lst:\n        counts[tuple(sub)] += 1\n    return dict(counts)", "code_7": "def unique_sublists(lst):\n    return {k: v for k, v in zip(*np.unique([tuple(sub) for sub in lst], return_counts=True))}", "code_8": "def unique_sublists(lst):\n    from collections import OrderedDict\n    return OrderedDict(sorted((tuple(sub), lst.count(sub)) for sub in set(map(tuple, lst))))", "code_9": "def unique_sublists(lst):\n    return {k: sum(1 for _ in v) for k, v in itertools.groupby(sorted(lst))}", "code_10": "def unique_sublists(lst):\n    from collections import defaultdict\n    counts = defaultdict(int)\n    for sub in map(tuple, lst):\n        counts[sub] += 1\n    return dict(counts)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6961622681399229}
{"task_id": "MBPP/759", "prompt": "\n\ndef is_decimal(num):\n    \"\"\"\n    Write a function to check a decimal with a precision of 2.\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('e666.86')\n    False\n    >>> is_decimal('3.124587')\n    False\n    \"\"\"\n", "solution": "    \n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_decimal(num):\n    try:\n        float(num)\n        return len(num.split('.')[1]) == 2\n    except ValueError:\n        return False", "code_2": "import re\ndef is_decimal(num):\n    return bool(re.match(r'^\\d+\\.\\d{2}$', num))", "code_3": "def is_decimal(num):\n    if '.' in num:\n        parts = num.split('.')\n        return parts[0].isdigit() and parts[1].isdigit() and len(parts[1]) == 2\n    return False", "code_4": "def is_decimal(num):\n    return num.replace('.', '', 1).isdigit() and num.count('.') == 1 and len(num.split('.')[1]) == 2", "code_5": "def is_decimal(num):\n    if num.count('.') != 1:\n        return False\n    left, right = num.split('.')\n    return left.isdigit() and right.isdigit() and len(right) == 2", "code_6": "def is_decimal(num):\n    parts = num.split('.')\n    return len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit() and len(parts[1]) == 2", "code_7": "def is_decimal(num):\n    if num.count('.') != 1:\n        return False\n    left, right = num.split('.')\n    return left.isdigit() and right.isdigit() and len(right) == 2", "code_8": "def is_decimal(num):\n    return num.count('.') == 1 and num.replace('.', '').isdigit() and len(num.split('.')[1]) == 2", "code_9": "def is_decimal(num):\n    parts = num.split('.')\n    return len(parts) == 2 and parts[0].isdigit() and parts[1].isdigit() and len(parts[1]) == 2", "code_10": "def is_decimal(num):\n    if '.' in num:\n        left, right = num.split('.')\n        return left.isdigit() and right.isdigit() and len(right) == 2\n    return False", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/760", "prompt": "\n\ndef unique_Element(arr,n):\n    \"\"\"\n    Write a python function to check whether an array contains only one distinct element or not.\n    >>> unique_Element([1,1,1],3)\n    'YES'\n    >>> unique_Element([1,2,1,2],4)\n    'NO'\n    >>> unique_Element([1,2,3,4,5],5)\n    'NO'\n    \"\"\"\n", "solution": "    \n    s = set(arr)\n    if (len(s) == 1):\n        return ('YES')\n    else:\n        return ('NO')", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'", "code_2": "def unique_Element(arr, n):\n    return 'YES' if arr.count(arr[0]) == n else 'NO'", "code_3": "def unique_Element(arr, n):\n    return 'YES' if all(x == arr[0] for x in arr) else 'NO'", "code_4": "def unique_Element(arr, n):\n    return 'YES' if arr[1:] == arr[:-1] else 'NO'", "code_5": "def unique_Element(arr, n):\n    return 'YES' if arr[0] == arr[-1] else 'NO'", "code_6": "def unique_Element(arr, n):\n    return 'YES' if max(arr) == min(arr) else 'NO'", "code_7": "def unique_Element(arr, n):\n    return 'YES' if arr.index(arr[0]) == arr.index(arr[-1]) else 'NO'", "code_8": "def unique_Element(arr, n):\n    return 'YES' if arr.count(arr[0]) == len(arr) else 'NO'", "code_9": "def unique_Element(arr, n):\n    return 'YES' if arr[1:] == [arr[0]] * (n - 1) else 'NO'", "code_10": "def unique_Element(arr, n):\n    return 'YES' if sum(arr) / n == arr[0] else 'NO'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/761", "prompt": "\n\ndef arc_length(d,a):\n    \"\"\"\n    Write a function to caluclate arc length of an angle.\n    >>> arc_length(9,45)\n    3.5357142857142856\n    >>> arc_length(9,480)\n    None\n    >>> arc_length(5,270)\n    11.785714285714285\n    \"\"\"\n", "solution": "    \n    pi=22/7\n    if a >= 360:\n        return None\n    arclength = (pi*d) * (a/360)\n    return arclength", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import math\ndef arc_length(d, a):\n    return d * math.radians(a) if 0 <= a < 360 else None", "code_2": "import math\ndef arc_length(d, a):\n    return d * a * math.pi / 180 if 0 <= a < 360 else None", "code_3": "from math import radians, pi\ndef arc_length(d, a):\n    return d * radians(a) if 0 <= a < 360 else None", "code_4": "from math import radians\ndef arc_length(d, a):\n    return d * radians(a) if 0 < a < 360 else None", "code_5": "import math\ndef arc_length(d, a):\n    if 0 <= a < 360:\n        return d * math.radians(a)", "code_6": "import math\ndef arc_length(d, a):\n    return d * a * math.pi / 180 if 0 < a < 360 else None", "code_7": "from math import radians\ndef arc_length(d, a):\n    return d * radians(a) if 0 < a < 360 else None", "code_8": "import math\ndef arc_length(d, a):\n    return d * math.radians(a) if 0 <= a <= 360 else None", "code_9": "from math import radians\ndef arc_length(d, a):\n    return d * radians(a) if 0 <= a <= 360 else None", "code_10": "import math\ndef arc_length(d, a):\n    return d * a * math.pi / 180 if 0 <= a <= 360 else None", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/762", "prompt": "\n\ndef check_monthnumber_number(monthnum3):\n  \"\"\"\n  Write a function to check whether the given month number contains 30 days or not.\n  >>> check_monthnumber_number(6)\n  True\n  >>> check_monthnumber_number(2)\n  False\n  >>> check_monthnumber_number(12)\n  False\n  \"\"\"\n", "solution": "  \n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\n    return True\n  else:\n    return False", "results": [1, 0, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def check_monthnumber_number(monthnum3):\n    return monthnum3 in [4, 6, 9, 11]", "code_2": "def check_monthnumber_number(monthnum3):\n    return monthnum3 % 2 == 0 and monthnum3 != 2", "code_3": "def check_monthnumber_number(monthnum3):\n    return (monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11)", "code_4": "def check_monthnumber_number(monthnum3):\n    return {4, 6, 9, 11}.__contains__(monthnum3)", "code_5": "def check_monthnumber_number(monthnum3):\n    return any(monthnum3 == i for i in [4, 6, 9, 11])", "code_6": "def check_monthnumber_number(monthnum3):\n    return sum(monthnum3 == i for i in [4, 6, 9, 11]) > 0", "code_7": "def check_monthnumber_number(monthnum3):\n    return bool(monthnum3 in [4, 6, 9, 11])", "code_8": "def check_monthnumber_number(monthnum3):\n    return 1 if monthnum3 in [4, 6, 9, 11] else 0", "code_9": "def check_monthnumber_number(monthnum3):\n    return monthnum3 in range(4, 13, 2) and monthnum3 != 2", "code_10": "def check_monthnumber_number(monthnum3):\n    return monthnum3 in {i for i in range(4, 13, 2) if i != 2}", "pass@3": 0.9916666666666667, "nDCG@10": 0.7312625444731049}
{"task_id": "MBPP/763", "prompt": "\n\ndef find_Min_Diff(arr,n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    >>> find_Min_Diff((1,5,3,19,18,25),6)\n    1\n    >>> find_Min_Diff((4,3,2,6),4)\n    1\n    >>> find_Min_Diff((30,5,20,9),4)\n    4\n    \"\"\"\n", "solution": "     \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff ", "results": [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Min_Diff(arr,n):\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(n-1))", "code_2": "def find_Min_Diff(arr,n):\n    return min(abs(arr[i] - arr[j]) for i in range(n) for j in range(i+1, n))", "code_3": "def find_Min_Diff(arr,n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff", "code_4": "def find_Min_Diff(arr,n):\n    diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = min(diff, abs(arr[i] - arr[j]))\n    return diff", "code_5": "def find_Min_Diff(arr,n):\n    arr.sort()\n    return min(map(lambda x, y: y - x, arr, arr[1:]))", "code_6": "def find_Min_Diff(arr,n):\n    return min(sorted(arr, key=lambda x: (x, -x))[1:n] - sorted(arr, key=lambda x: (x, -x))[:n-1])", "code_7": "def find_Min_Diff(arr,n):\n    arr.sort()\n    return min(b - a for a, b in zip(arr, arr[1:]))", "code_8": "def find_Min_Diff(arr,n):\n    arr.sort()\n    return min(arr[i] - arr[i-1] for i in range(1, n))", "code_9": "def find_Min_Diff(arr,n):\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(n-1))", "code_10": "def find_Min_Diff(arr,n):\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(n-1))", "pass@3": 0.5333333333333333, "nDCG@10": 0.23365080824310536}
{"task_id": "MBPP/764", "prompt": "\n\ndef number_ctr(str):\n      \"\"\"\n      Write a python function to count numeric values in a given string.\n      >>> number_ctr('program2bedone')\n      1\n      >>> number_ctr('3wonders')\n      1\n      >>> number_ctr('123')\n      3\n      \"\"\"\n", "solution": "      \n      number_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \n      return  number_ctr", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def number_ctr(s): return sum(c.isdigit() for c in s)", "code_2": "def number_ctr(s): return len([c for c in s if c.isdigit()])", "code_3": "import re\ndef number_ctr(s): return len(re.findall('\\d', s))", "code_4": "def number_ctr(s): return sum(1 for c in s if c.isnumeric())", "code_5": "def number_ctr(s): return sum(map(str.isdigit, s))", "code_6": "def number_ctr(s): return len(list(filter(str.isdigit, s)))", "code_7": "def number_ctr(s): return sum(s.count(str(i)) for i in range(10))", "code_8": "def number_ctr(s): return len([i for i in s if i in '0123456789'])", "code_9": "def number_ctr(s): return sum(ord(c) in range(48, 58) for c in s)", "code_10": "def number_ctr(s): return len(s) - len(s.translate(str.maketrans('', '', '0123456789')))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/765", "prompt": "\n\ndef is_polite(n):\n\t\"\"\"\n\tWrite a function to find nth polite number.\n\t>>> is_polite(7)\n\t11\n\t>>> is_polite(4)\n\t7\n\t>>> is_polite(9)\n\t13\n\t\"\"\"\n", "solution": "\timport math \n\t \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_polite(n):\n    return 2 * n - 1 if n > 1 else n", "code_2": "def is_polite(n):\n    return (n << 1) - 1", "code_3": "def is_polite(n):\n    return 2 * n - (n == 1)", "code_4": "def is_polite(n):\n    return 2 * n - (n > 1)", "code_5": "def is_polite(n):\n    return 2 * n - bool(n - 1)", "code_6": "def is_polite(n):\n    return 2 * n - int(n > 1)", "code_7": "def is_polite(n):\n    return 2 * n - (n > 1) * 1", "code_8": "def is_polite(n):\n    return 2 * n - (n > 1) * 2 + 1", "code_9": "def is_polite(n):\n    return 2 * n - (n > 1) * (n - 1)", "code_10": "def is_polite(n):\n    return 2 * n - (n > 1) * (n - 2) - 1", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/766", "prompt": "\n\ndef pair_wise(l1):\n    \"\"\"\n    Write a function to iterate over all pairs of consecutive items in a given list.\n    >>> pair_wise([1,1,2,3,3,4,4,5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    >>> pair_wise([1,5,7,9,10])\n    [(1, 5), (5, 7), (7, 9), (9, 10)]\n    >>> pair_wise([1,2,3,4,5,6,7,8,9,10])\n    [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n    \"\"\"\n", "solution": "    \n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]", "code_2": "def pair_wise(l1):\n    return list(zip(l1, l1[1:]))", "code_3": "def pair_wise(l1):\n    return [(x, y) for x, y in zip(l1, l1[1:])]", "code_4": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1, 2)]", "code_5": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1) if i % 2 == 0]", "code_6": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1), 2) if i+1 < len(l1)]", "code_7": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1) if i % 2 == 0 or i == 0]", "code_8": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1) if i % 2 == 0 and i != len(l1)-2]", "code_9": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1) if i % 2 == 0 or len(l1) % 2 == 0 or i != len(l1)-2]", "code_10": "def pair_wise(l1):\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1) if i % 2 == 0 or (i == len(l1)-2 and len(l1) % 2 == 1)]", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/767", "prompt": "\n\ndef get_Pairs_Count(arr,n,sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    >>> get_Pairs_Count([1,1,1,1],4,2)\n    6\n    >>> get_Pairs_Count([1,5,7,-1,5],5,6)\n    3\n    >>> get_Pairs_Count([1,-2,3],3,1)\n    1\n    \"\"\"\n", "solution": "    \n    count = 0  \n    for i in range(0,n):\n        for j in range(i + 1,n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "results": [1, 0, 1, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count", "code_2": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    left, right = 0, n - 1\n    while left < right:\n        if arr[left] + arr[right] == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] + arr[right] < sum:\n            left += 1\n        else:\n            right -= 1\n    return count", "code_3": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    freq = {}\n    for i in range(n):\n        if sum - arr[i] in freq:\n            count += freq[sum - arr[i]]\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    return count", "code_4": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        left, right = i + 1, n - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif arr[i] + arr[left] + arr[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return count", "code_5": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[i] + arr[j] <= sum:\n            if arr[i] + arr[j] == sum:\n                count += 1\n            j += 1\n    return count", "code_6": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        j = bisect.bisect_left(arr, sum - arr[i], i + 1)\n        if i < j < n and arr[i] + arr[j] == sum:\n            count += 1\n    return count", "code_7": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        j = bisect.bisect_right(arr, sum - arr[i], i + 1)\n        count += j - i - 1\n    return count", "code_8": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        j = bisect.bisect_left(arr, sum - arr[i], i + 1)\n        k = bisect.bisect_right(arr, sum - arr[i], j)\n        count += k - j\n    return count", "code_9": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        j = bisect.bisect_left(arr, sum - arr[i], i + 1)\n        k = bisect.bisect_right(arr, sum - arr[i], j)\n        if k - j > 0:\n            count += k - j\n    return count", "code_10": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    arr.sort()\n    for i in range(n):\n        j = bisect.bisect_left(arr, sum - arr[i], i + 1)\n        k = bisect.bisect_right(arr, sum - arr[i], j)\n        count += max(0, k - j)\n    return count", "pass@3": 0.7083333333333333, "nDCG@10": 0.4152807670887413}
{"task_id": "MBPP/768", "prompt": "\n\ndef check_Odd_Parity(x):\n    \"\"\"\n    Write a python function to check for odd parity of a given number.\n    >>> check_Odd_Parity(13)\n    True\n    >>> check_Odd_Parity(21)\n    True\n    >>> check_Odd_Parity(18)\n    False\n    \"\"\"\n", "solution": "     \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 1): \n        return True\n    else: \n        return False", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_Odd_Parity(x):\n    return bin(x).count('1') % 2 != 0", "code_2": "def check_Odd_Parity(x):\n    return sum(int(i) for i in bin(x)[2:]) % 2 != 0", "code_3": "def check_Odd_Parity(x):\n    return f'{x:b}'.count('1') % 2 != 0", "code_4": "def check_Odd_Parity(x):\n    return bin(x).count('1') & 1", "code_5": "def check_Odd_Parity(x):\n    return sum(map(int, bin(x)[2:])) % 2 != 0", "code_6": "def check_Odd_Parity(x):\n    return bin(x).count('1') != 0 and bin(x).count('1') % 2 == 0", "code_7": "def check_Odd_Parity(x):\n    return bool(x & (x - 1)) and not (x & 1)", "code_8": "def check_Odd_Parity(x):\n    return bin(x).count('1') in range(1, 33, 2)", "code_9": "def check_Odd_Parity(x):\n    return sum(int(b) for b in f'{x:b}') % 2 != 0", "code_10": "def check_Odd_Parity(x):\n    return bin(x).count('1') > 0 and bin(x).count('1') % 2 == 1", "pass@3": 1.0, "nDCG@10": 0.8482378089219648}
{"task_id": "MBPP/769", "prompt": "\n\ndef Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    >>> Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    >>> Diff([1,2,3,4,5], [6,7,1])\n    [2,3,4,5,6,7]\n    >>> Diff([1,2,3], [6,7,1])\n    [2,3,6,7]\n    \"\"\"\n", "solution": "    \n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n ", "results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Diff(li1, li2):\n    return list(set(li1) ^ set(li2))", "code_2": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "code_3": "def Diff(li1, li2):\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))", "code_4": "def Diff(li1, li2):\n    return sorted(list(set(li1) | set(li2)) - set(li1) & set(li2))", "code_5": "def Diff(li1, li2):\n    return [item for item in li1 + li2 if item not in li1 or item not in li2]", "code_6": "def Diff(li1, li2):\n    return list(filter(lambda x: x not in li2, li1)) + list(filter(lambda x: x not in li1, li2))", "code_7": "def Diff(li1, li2):\n    return [item for item in itertools.chain(li1, li2) if item not in li1 or item not in li2]", "code_8": "def Diff(li1, li2):\n    return sorted(list(set(li1) ^ set(li2)), key=li1.index)", "code_9": "def Diff(li1, li2):\n    return sorted(list(set(li1) - set(li2)) + list(set(li2) - set(li1)))", "code_10": "def Diff(li1, li2):\n    return sorted(list(set(li1) ^ set(li2)), key=lambda x: (li1 + li2).index(x))", "pass@3": 0.30000000000000004, "nDCG@10": 0.1100458831490401}
{"task_id": "MBPP/770", "prompt": "\n\ndef odd_Num_Sum(n) :\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    >>> odd_Num_Sum(2)\n    82\n    >>> odd_Num_Sum(3)\n    707\n    >>> odd_Num_Sum(4)\n    3108\n    \"\"\"\n", "solution": "     \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ", "results": [1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def odd_Num_Sum(n): return sum(x**4 for x in range(1, 2*n, 2))", "code_2": "def odd_Num_Sum(n): return sum(map(lambda x: x**4, range(1, 2*n, 2)))", "code_3": "def odd_Num_Sum(n): return sum([x**4 for x in range(1, 2*n, 2)])", "code_4": "def odd_Num_Sum(n): return sum(x**4 for x in xrange(1, 2*n, 2))", "code_5": "def odd_Num_Sum(n): return sum(map(pow, range(1, 2*n, 2), [4]*n))", "code_6": "def odd_Num_Sum(n): return reduce(lambda x, y: x + y**4, range(1, 2*n, 2), 0)", "code_7": "def odd_Num_Sum(n): return sum(pow(x, 4) for x in range(1, 2*n, 2))", "code_8": "def odd_Num_Sum(n): return sum(x**4 for x in itertools.islice(itertools.count(1, 2), n))", "code_9": "def odd_Num_Sum(n): return sum(x**4 for x in filter(lambda x: x % 2 != 0, range(1, 2*n+1)))", "code_10": "def odd_Num_Sum(n): return sum(x**4 for x in (2*i+1 for i in range(n)))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7573821447149967}
{"task_id": "MBPP/771", "prompt": "\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    >>> check_expression(\"{()}[{}]\")\n    True\n    >>> check_expression(\"{()}[{]\")\n    False\n    >>> check_expression(\"{()}[{}][]({})\")\n    True\n    \"\"\"\n", "solution": "    from collections import deque\n    \n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif len(stack) == 0 or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0", "code_2": "def check_expression(exp):\n    stack = []\n    pairs = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    for char in exp:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs and (not stack or stack.pop() != pairs[char]):\n            return False\n    return not stack", "code_3": "def check_expression(exp):\n    stack = []\n    opening = set(\"([{\")\n    matches = set([\"()\", \"[]\", \"{}\"])\n    for char in exp:\n        if char in opening:\n            stack.append(char)\n        elif len(stack) == 0 or stack.pop() + char not in matches:\n            return False\n    return len(stack) == 0", "code_4": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return not stack", "code_5": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0", "code_6": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return not stack", "code_7": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0", "code_8": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return not stack", "code_9": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0", "code_10": "def check_expression(exp):\n    stack = []\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets[stack.pop()] != char:\n            return False\n    return not stack", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/772", "prompt": "\n\ndef remove_length(test_str, K):\n  \"\"\"\n  Write a function to remove all the words with k length in the given string.\n  >>> remove_length('The person is most value tet', 3)\n  'person is most value'\n  >>> remove_length('If you told me about this ok', 4)\n  'If you me about ok'\n  >>> remove_length('Forces of darkeness is come into the play', 4)\n  'Forces of darkeness is the'\n  \"\"\"\n", "solution": "  \n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) != K]\n  res = ' '.join(res)\n  return (res) ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if len(word) != K)", "code_2": "import re\ndef remove_length(test_str, K): return re.sub(r'\\b\\w{'+str(K)+r'}\\b', '', test_str)", "code_3": "def remove_length(test_str, K): return ' '.join(filter(lambda word: len(word) != K, test_str.split()))", "code_4": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if not len(word) == K)", "code_5": "def remove_length(test_str, K): return ' '.join([word for word in test_str.split() if len(word) != K])", "code_6": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if len(word) != K)", "code_7": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if len(word) != K)", "code_8": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if len(word) != K)", "code_9": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if len(word) != K)", "code_10": "def remove_length(test_str, K): return ' '.join(word for word in test_str.split() if len(word) != K)", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/773", "prompt": "\n\ndef occurance_substring(text,pattern):\n \"\"\"\n Write a function to find the occurrence and position of the substrings within a string.\n >>> occurance_substring('python programming, python language','python')\n ('python', 0, 6)\n >>> occurance_substring('python programming,programming language','programming')\n ('programming', 7, 18)\n >>> occurance_substring('python programming,programming language','language')\n ('language', 31, 39)\n \"\"\"\n", "solution": " import re\n \n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)", "results": [1, 1, 1, 1, 1, 1, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def occurance_substring(text, pattern):\n    start = text.find(pattern)\n    if start != -1:\n        return pattern, start, start + len(pattern)\n    return None", "code_2": "def occurance_substring(text, pattern):\n    try:\n        start = text.index(pattern)\n        return pattern, start, start + len(pattern)\n    except ValueError:\n        return None", "code_3": "def occurance_substring(text, pattern):\n    if pattern in text:\n        start = text.index(pattern)\n        return pattern, start, start + len(pattern)\n    return None", "code_4": "def occurance_substring(text, pattern):\n    start = text.index(pattern) if pattern in text else -1\n    if start != -1:\n        return pattern, start, start + len(pattern)\n    return None", "code_5": "def occurance_substring(text, pattern):\n    start = text.find(pattern)\n    return (pattern, start, start + len(pattern)) if start != -1 else None", "code_6": "def occurance_substring(text, pattern):\n    return (pattern, start, start + len(pattern)) if (start := text.find(pattern)) != -1 else None", "code_7": "def occurance_substring(text, pattern):\n    return (pattern, *divmod(text.find(pattern), len(pattern))) if pattern in text else None", "code_8": "def occurance_substring(text, pattern):\n    return (pattern, *divmod(text.find(pattern), len(pattern))) if text.find(pattern) != -1 else None", "code_9": "def occurance_substring(text, pattern):\n    return (pattern, start, end) if (start := text.find(pattern)) != -1 and (end := start + len(pattern)) else None", "code_10": "def occurance_substring(text, pattern):\n    start = text.find(pattern)\n    return (pattern, start, start + len(pattern)) if start > -1 else None", "pass@3": 1.0, "nDCG@10": 0.8572048559638626}
{"task_id": "MBPP/774", "prompt": "\n\ndef check_email(email):\n\t\"\"\"\n\tWrite a function to check if the string is a valid email address or not using regex.\n\t>>> check_email(\"ankitrai326@gmail.com\")\n\t'Valid Email'\n\t>>> check_email(\"my.ownsite@ourearth.org\")\n\t'Valid Email'\n\t>>> check_email(\"ankitaoie326.com\")\n\t'Invalid Email'\n\t\"\"\"\n", "solution": "\timport re \n\tregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n\t \n\tif(re.search(regex,email)): \n\t\treturn (\"Valid Email\") \n\telse: \n\t\treturn (\"Invalid Email\") ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], "no_of_codes": 10, "code_1": "import re\ndef check_email(email): return 'Valid Email' if re.match(r'[^@]+@[^@]+\\.[^@]+', email) else 'Invalid Email'", "code_2": "import re\ndef check_email(email): return 'Valid Email' if re.fullmatch(r'\\S+@\\S+\\.\\S+', email) else 'Invalid Email'", "code_3": "import re\ndef check_email(email): return 'Valid Email' if re.search(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', email) else 'Invalid Email'", "code_4": "import re\ndef check_email(email): return 'Valid Email' if re.compile(r'[^@]+@[^@]+\\.[^@]+').match(email) else 'Invalid Email'", "code_5": "import re\ndef check_email(email): return 'Valid Email' if re.compile(r'\\S+@\\S+\\.\\S+').fullmatch(email) else 'Invalid Email'", "code_6": "import re\ndef check_email(email): return 'Valid Email' if re.compile(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$').search(email) else 'Invalid Email'", "code_7": "import re\ndef check_email(email): return 'Valid Email' if re.findall(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', email) else 'Invalid Email'", "code_8": "import re\ndef check_email(email): return 'Valid Email' if re.finditer(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', email).__next__() else 'Invalid Email'", "code_9": "import re\ndef check_email(email): return 'Valid Email' if re.split(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', email)[0] == email else 'Invalid Email'", "code_10": "import re\ndef check_email(email): return 'Valid Email' if re.sub(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', '', email) == '' else 'Invalid Email'", "pass@3": 1.0, "nDCG@10": 0.8643145546088339}
{"task_id": "MBPP/775", "prompt": "\n\ndef odd_position(nums):\n\t\"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t>>> odd_position([2,1,4,3,6,7,6,3])\n\tTrue\n\t>>> odd_position([4,1,2])\n\tTrue\n\t>>> odd_position([1,2,3])\n\tFalse\n\t\"\"\"\n", "solution": "\t\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def odd_position(nums):\n    return all(num % 2 for num in nums[1::2])", "code_2": "def odd_position(nums):\n    return all(num % 2 != 0 for num in nums[1::2])", "code_3": "def odd_position(nums):\n    return all(map(lambda x: x % 2 != 0, nums[1::2]))", "code_4": "def odd_position(nums):\n    return not any(num % 2 == 0 for num in nums[1::2])", "code_5": "def odd_position(nums):\n    return not any(not num % 2 for num in nums[1::2])", "code_6": "def odd_position(nums):\n    return not any(map(lambda x: x % 2 == 0, nums[1::2]))", "code_7": "def odd_position(nums):\n    return len([num for num in nums[1::2] if num % 2 == 0]) == 0", "code_8": "def odd_position(nums):\n    return len(list(filter(lambda x: x % 2 == 0, nums[1::2]))) == 0", "code_9": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "code_10": "def odd_position(nums):\n    i = 1\n    while i < len(nums):\n        if nums[i] % 2 == 0:\n            return False\n        i += 2\n    return True", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/776", "prompt": "\n\ndef count_vowels(test_str):\n  \"\"\"\n  Write a function to count those characters which have vowels as their neighbors in the given string.\n  >>> count_vowels('bestinstareels')\n  7\n  >>> count_vowels('partofthejourneyistheend')\n  12\n  >>> count_vowels('amazonprime')\n  5\n  \"\"\"\n", "solution": "  \n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    return sum(1 for i in range(1, len(test_str) - 1) if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels)", "code_2": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return sum(test_str[i - 1] in vowels and test_str[i + 1] in vowels for i in range(1, len(test_str) - 1) if test_str[i] in vowels)", "code_3": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return len([1 for i in range(1, len(test_str) - 1) if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels])", "code_4": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return sum(test_str[i - 1] in vowels and test_str[i + 1] in vowels for i in range(1, len(test_str) - 1) if test_str[i] in vowels)", "code_5": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    return sum(test_str[i - 1] in vowels and test_str[i + 1] in vowels for i in range(1, len(test_str) - 1) if test_str[i] in vowels)", "code_6": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return sum(1 for i in range(1, len(test_str) - 1) if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels)", "code_7": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return len([i for i in range(1, len(test_str) - 1) if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels])", "code_8": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return sum(test_str[i - 1] in vowels and test_str[i + 1] in vowels for i in range(1, len(test_str) - 1) if test_str[i] in vowels)", "code_9": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    return len([1 for i in range(1, len(test_str) - 1) if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels])", "code_10": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    return sum(test_str[i - 1] in vowels and test_str[i + 1] in vowels for i in range(1, len(test_str) - 1) if test_str[i] in vowels)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/777", "prompt": "\n\ndef find_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given array.\n    >>> find_Sum([1,2,3,1,1,4,5,6],8)\n    21\n    >>> find_Sum([1,10,9,4,2,10,10,45,4],9)\n    71\n    >>> find_Sum([12,10,9,45,2,10,10,45,10],9)\n    78\n    \"\"\"\n", "solution": "     \n    arr.sort() \n    sum = arr[0] \n    for i in range(0,n-1): \n        if (arr[i] != arr[i+1]): \n            sum = sum + arr[i+1]   \n    return sum", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Sum(arr, n):\n    return sum(x for x in arr if arr.count(x) == 1)", "code_2": "def find_Sum(arr, n):\n    return sum(set(x for x in arr if arr.count(x) == 1))", "code_3": "from collections import Counter\ndef find_Sum(arr, n):\n    return sum(k for k, v in Counter(arr).items() if v == 1)", "code_4": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return sum(k for k, v in count.items() if v == 1)", "code_5": "def find_Sum(arr, n):\n    count = [0] * 10000\n    for i in arr:\n        count[i] += 1\n    return sum(i for i in range(10000) if count[i] == 1)", "code_6": "def find_Sum(arr, n):\n    count = [0] * (max(arr) + 1)\n    for i in arr:\n        count[i] += 1\n    return sum(i for i in range(len(count)) if count[i] == 1)", "code_7": "def find_Sum(arr, n):\n    count = [0] * 10000\n    for i in arr:\n        count[i] += 1\n    return sum(i * count[i] for i in range(10000) if count[i] == 1)", "code_8": "def find_Sum(arr, n):\n    count = [0] * (max(arr) + 1)\n    for i in arr:\n        count[i] += 1\n    return sum(i * count[i] for i in range(len(count)) if count[i] == 1)", "code_9": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    return sum(k for k, v in count.items() if v == 1)", "code_10": "def find_Sum(arr, n):\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    return sum(k * v for k, v in count.items() if v == 1)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/778", "prompt": "\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    >>> pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    >>> pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n    [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n    \"\"\"\n", "solution": "    from itertools import groupby\n    \n    return [list(group) for key, group in groupby(list1)]", "results": [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def pack_consecutive_duplicates(lst):\n    return [[i]*lst.count(i) for i in lst if lst.count(i) > 0]", "code_2": "def pack_consecutive_duplicates(lst):\n    return [list(g) for k, g in itertools.groupby(lst)]", "code_3": "def pack_consecutive_duplicates(lst):\n    return [list(v) for k, v in groupby(lst, lambda x: x)]", "code_4": "def pack_consecutive_duplicates(lst):\n    return [list(j) for i, j in groupby(lst)]", "code_5": "def pack_consecutive_duplicates(lst):\n    return [lst[i:i + lst[i:].index(lst[i]) + 1] if lst[i] in lst[i + 1:] else [lst[i]] for i in range(len(lst)) if lst[i] not in lst[:i]]", "code_6": "def pack_consecutive_duplicates(lst):\n    return reduce(lambda a, b: a[:-1] + [a[-1] + [b]] if a and a[-1][-1] == b else a + [[b]], lst, [])", "code_7": "def pack_consecutive_duplicates(lst):\n    return [lst[i:i + next((j for j, x in enumerate(lst[i:]) if x != lst[i]), len(lst[i:]))] for i in range(len(lst)) if lst[i] not in lst[:i]]", "code_8": "def pack_consecutive_duplicates(lst):\n    return [lst[i:j] for i, j in zip([0] + [i + 1 for i, x in enumerate(lst[:-1]) if x != lst[i + 1]], [i + 1 for i, x in enumerate(lst[:-1]) if x != lst[i + 1]] + [None])]", "code_9": "def pack_consecutive_duplicates(lst):\n    return [lst[i:j] for i, j in zip([0] + [i for i, x in enumerate(lst) if lst[i - 1] != x], [i for i, x in enumerate(lst) if lst[i - 1] != x] + [None])]", "code_10": "def pack_consecutive_duplicates(lst):\n    return [lst[i:j] for i, j in zip([0] + [i for i in range(1, len(lst)) if lst[i] != lst[i - 1]], [i for i in range(1, len(lst)) if lst[i] != lst[i - 1]] + [None])]", "pass@3": 0.5333333333333333, "nDCG@10": 0.133052010135729}
{"task_id": "MBPP/779", "prompt": "\n\ndef unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of unique lists within a list.\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    >>> unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n    {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n    \"\"\"\n", "solution": "    \n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "results": [1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef unique_sublists(lst):\n    return Counter(map(tuple, lst))", "code_2": "def unique_sublists(lst):\n    return {tuple(sub): lst.count(sub) for sub in lst}", "code_3": "import pandas as pd\ndef unique_sublists(lst):\n    return pd.Series(lst).value_counts().to_dict()", "code_4": "def unique_sublists(lst):\n    res = {}\n    for sub in lst:\n        res[tuple(sub)] = res.get(tuple(sub), 0) + 1\n    return res", "code_5": "from itertools import groupby\ndef unique_sublists(lst):\n    lst.sort()\n    return {tuple(k): len(list(g)) for k, g in groupby(lst)}", "code_6": "def unique_sublists(lst):\n    res = {}\n    for sub in map(tuple, lst):\n        res[sub] = res.setdefault(sub, 0) + 1\n    return res", "code_7": "def unique_sublists(lst):\n    return dict(sorted((sub, lst.count(sub)) for sub in set(map(tuple, lst))))", "code_8": "from collections import defaultdict\ndef unique_sublists(lst):\n    res = defaultdict(int)\n    for sub in lst:\n        res[tuple(sub)] += 1\n    return dict(res)", "code_9": "def unique_sublists(lst):\n    return {k: v for k, v in sorted((tuple(sub), lst.count(sub)) for sub in lst)}", "code_10": "def unique_sublists(lst):\n    res = {}\n    for sub in lst:\n        sub = tuple(sub)\n        if sub in res:\n            res[sub] += 1\n        else:\n            res[sub] = 1\n    return res", "pass@3": 1.0, "nDCG@10": 0.8165901947515999}
{"task_id": "MBPP/780", "prompt": "\n\ndef find_combinations(test_list):\n  \"\"\"\n  Write a function to find the combinations of sums with tuples in the given tuple list.\n  >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n  [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n  >>> find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])\n  [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n  >>> find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])\n  [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n  \"\"\"\n", "solution": "  from itertools import combinations \n  \n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from itertools import combinations\ndef find_combinations(test_list):\n    return sorted({sum(i) for i in combinations(test_list, 2)})", "code_2": "def find_combinations(test_list):\n    return sorted(set(sum(i) for a in test_list for b in test_list if a != b for i in (a, b)))", "code_3": "def find_combinations(test_list):\n    return sorted({a+b for a, b in test_list for c, d in test_list if (a, b) != (c, d)})", "code_4": "def find_combinations(test_list):\n    return sorted({a+b for i in range(len(test_list)) for j in range(i+1, len(test_list)) for a, b in [test_list[i]] for c, d in [test_list[j]]})", "code_5": "def find_combinations(test_list):\n    return sorted({test_list[i][j] + test_list[k][l] for i in range(len(test_list)) for j in range(2) for k in range(i+1, len(test_list)) for l in range(2)})", "code_6": "def find_combinations(test_list):\n    return sorted({a+b for i in test_list for j in test_list if i != j for a in i for b in j})", "code_7": "def find_combinations(test_list):\n    return sorted({a+c for a, b in test_list for c, d in test_list if (a, b) != (c, d)})", "code_8": "def find_combinations(test_list):\n    return sorted({a+b for i in range(len(test_list)) for j in range(i+1, len(test_list)) for a in test_list[i] for b in test_list[j]})", "code_9": "def find_combinations(test_list):\n    return sorted({a+c for i in range(len(test_list)) for a, b in [test_list[i]] for j in range(i+1, len(test_list)) for c, d in [test_list[j]]})", "code_10": "def find_combinations(test_list):\n    return sorted({test_list[i][j] + test_list[k][l] for i in range(len(test_list)) for j in range(2) for k in range(i+1, len(test_list)) for l in range(2) if j != l})", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/781", "prompt": "\n\ndef count_Divisors(n) :\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd.\n    >>> count_Divisors(10)\n    \"Even\"\n    >>> count_Divisors(100)\n    \"Odd\"\n    >>> count_Divisors(125)\n    \"Even\"\n    \"\"\"\n", "solution": "    import math \n     \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    if (count % 2 == 0) : \n        return (\"Even\") \n    else : \n        return (\"Odd\") ", "results": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def count_Divisors(n):\n    return 'Even' if len({i for i in range(1, int(n**0.5) + 1) if n % i == 0} * 2) % 2 == 0 else 'Odd'", "code_2": "def count_Divisors(n):\n    return 'Even' if sum(1 for i in range(1, int(n**0.5) + 1) if n % i == 0) * 2 - (n**0.5).is_integer() % 2 == 0 else 'Odd'", "code_3": "def count_Divisors(n):\n    count = sum(2 for i in range(1, int(n**0.5) + 1) if n % i == 0)\n    if int(n**0.5) * int(n**0.5) == n:\n        count -= 1\n    return 'Even' if count % 2 == 0 else 'Odd'", "code_4": "def count_Divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 2\n    if int(n**0.5) * int(n**0.5) == n:\n        count -= 1\n    return 'Even' if count % 2 == 0 else 'Odd'", "code_5": "def count_Divisors(n):\n    count = sum(1 for i in range(1, n + 1) if n % i == 0)\n    return 'Even' if count % 2 == 0 else 'Odd'", "code_6": "def count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return 'Even' if count % 2 == 0 else 'Odd'", "code_7": "def count_Divisors(n):\n    return 'Even' if sum(n % i == 0 for i in range(1, n + 1)) % 2 == 0 else 'Odd'", "code_8": "def count_Divisors(n):\n    return 'Even' if len([i for i in range(1, n + 1) if n % i == 0]) % 2 == 0 else 'Odd'", "code_9": "def count_Divisors(n):\n    return 'Even' if sum(n % i == 0 for i in range(1, int(n**0.5) + 1)) * 2 - (n**0.5).is_integer() % 2 == 0 else 'Odd'", "code_10": "def count_Divisors(n):\n    return 'Even' if len([i for i in range(1, int(n**0.5) + 1) if n % i == 0] * 2) % 2 == 0 else 'Odd'", "pass@3": 0.9666666666666667, "nDCG@10": 0.5111707781750247}
{"task_id": "MBPP/782", "prompt": "\n\ndef Odd_Length_Sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    >>> Odd_Length_Sum([1,2,4])\n    14\n    >>> Odd_Length_Sum([1,2,1,2])\n    15\n    >>> Odd_Length_Sum([1,7])\n    8\n    \"\"\"\n", "solution": "    \n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\n    return Sum", "results": [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def Odd_Length_Sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        total += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n    return total", "code_2": "def Odd_Length_Sum(arr):\n    return sum((i + 1) * (len(arr) - i) * v for i, v in enumerate(arr) if (i + 1) % 2)", "code_3": "def Odd_Length_Sum(arr):\n    return sum(arr[i:j] for i in range(len(arr)) for j in range(i + 1, len(arr) + 1) if (j - i) % 2)", "code_4": "def Odd_Length_Sum(arr):\n    return sum(sum(arr[i:j]) for i in range(len(arr)) for j in range(i + 1, len(arr) + 1, 2))", "code_5": "def Odd_Length_Sum(arr):\n    return sum(arr[i] * (i + 1) * (len(arr) - i) for i in range(0, len(arr), 2))", "code_6": "def Odd_Length_Sum(arr):\n    return sum(sum(arr[i:j]) for i in range(len(arr)) for j in range(i + 1, len(arr) + 1) if (j - i) % 2 == 1)", "code_7": "def Odd_Length_Sum(arr):\n    return sum(arr[i] * ((i + 1) * (len(arr) - i) + 1) // 2 for i in range(len(arr)))", "code_8": "def Odd_Length_Sum(arr):\n    return sum(sum(arr[i:j]) for i in range(len(arr)) for j in range(i + 1, len(arr) + 1) if (j - i) & 1)", "code_9": "def Odd_Length_Sum(arr):\n    return sum(arr[i] * (i + 1) * (len(arr) - i) for i in range(len(arr)) if (i + 1) % 2)", "code_10": "def Odd_Length_Sum(arr):\n    return sum(sum(arr[i:j]) for i in range(len(arr)) for j in range(i + 1, len(arr) + 1) if not (j - i) % 2 == 0)", "pass@3": 0.9166666666666666, "nDCG@10": 0.5263304097820354}
{"task_id": "MBPP/783", "prompt": "\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    >>> rgb_to_hsv(255, 255, 255)\n    (0, 0.0, 100.0)\n    >>> rgb_to_hsv(0, 215, 0)\n    (120.0, 100.0, 84.31372549019608)\n    >>> rgb_to_hsv(10, 215, 110)\n    (149.26829268292684, 95.34883720930233, 84.31372549019608)\n    \"\"\"\n", "solution": "    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v", "code_2": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = ((b - r) / delta) + 2\n    elif cmax == b:\n        h = ((r - g) / delta) + 4\n    h *= 60\n    s = 0 if cmax == 0 else delta / cmax\n    v = cmax\n    return h, s * 100, v * 100", "code_3": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_4": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    else:\n        h = (60 * ((r - g) / df) + 240) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_5": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    h = 0 if mx == mn else (60 * ((g - b) / df if mx == r else (b - r) / df + 2 if mx == g else (r - g) / df + 4) % 360)\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_6": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    h = 0 if mx == mn else (60 * ((g - b) / df if mx == r else (b - r) / df + 2 if mx == g else (r - g) / df + 4)) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_7": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    h = 0 if mx == mn else (60 * ((g - b) / df if mx == r else (b - r) / df + 2 if mx == g else (r - g) / df + 4)) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_8": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    h = 0 if mx == mn else (60 * ((g - b) / df if mx == r else (b - r) / df + 2 if mx == g else (r - g) / df + 4)) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_9": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    h = 0 if mx == mn else (60 * ((g - b) / df if mx == r else (b - r) / df + 2 if mx == g else (r - g) / df + 4)) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "code_10": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx, mn = max(r, g, b), min(r, g, b)\n    df = mx - mn\n    h = 0 if mx == mn else (60 * ((g - b) / df if mx == r else (b - r) / df + 2 if mx == g else (r - g) / df + 4)) % 360\n    s = 0 if mx == 0 else df / mx\n    return h, s * 100, mx * 100", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/784", "prompt": "\n\ndef mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    >>> mul_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> mul_even_odd([1,2,3,4,5,6,7,8,9,10])\n    2\n    >>> mul_even_odd([1,5,7,9,10])\n    10\n    \"\"\"\n", "solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "results": [0, 1, 1, 1, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def mul_even_odd(lst):\n    e, o = None, None\n    for i in lst:\n        if i % 2 == 0:\n            e = i\n            if o is not None:\n                return e * o\n        else:\n            o = i\n            if e is not None:\n                return e * o\n    return e * o if e is not None and o is not None else None", "code_2": "def mul_even_odd(lst):\n    e, o = (i for i in lst if i % 2 == 0), (i for i in lst if i % 2 != 0)\n    return next(e, 1) * next(o, 1)", "code_3": "def mul_even_odd(lst):\n    e, o = filter(lambda x: x % 2 == 0, lst), filter(lambda x: x % 2 != 0, lst)\n    return next(e, 1) * next(o, 1)", "code_4": "def mul_even_odd(lst):\n    e, o = [i for i in lst if i % 2 == 0], [i for i in lst if i % 2 != 0]\n    return e[0] * o[0] if e and o else None", "code_5": "def mul_even_odd(lst):\n    e, o = [], []\n    for i in lst:\n        if i % 2 == 0:\n            e.append(i)\n        else:\n            o.append(i)\n        if e and o:\n            return e[0] * o[0]\n    return None", "code_6": "def mul_even_odd(lst):\n    e, o = itertools.filterfalse(lambda x: x % 2, lst), itertools.filterfalse(lambda x: x % 2 - 1, lst)\n    return next(e, 1) * next(o, 1)", "code_7": "def mul_even_odd(lst):\n    e, o = itertools.islice(filter(lambda x: x % 2 == 0, lst), 1), itertools.islice(filter(lambda x: x % 2 != 0, lst), 1)\n    return next(e, 1) * next(o, 1)", "code_8": "def mul_even_odd(lst):\n    e, o = next((i for i in lst if i % 2 == 0), None), next((i for i in lst if i % 2 != 0), None)\n    return e * o if e is not None and o is not None else None", "code_9": "def mul_even_odd(lst):\n    e, o = itertools.dropwhile(lambda x: x % 2 != 0, lst), itertools.dropwhile(lambda x: x % 2 == 0, lst)\n    return next(e, 1) * next(o, 1)", "code_10": "def mul_even_odd(lst):\n    e, o = itertools.tee((i for i in lst if i % 2 == 0 or i % 2 != 0))\n    return next(e, 1) * next(o, 1)", "pass@3": 0.9166666666666666, "nDCG@10": 0.49827103097054376}
{"task_id": "MBPP/785", "prompt": "\n\ndef tuple_str_int(test_str):\n  \"\"\"\n  Write a function to convert tuple string to integer tuple.\n  >>> tuple_str_int(\"(7, 8, 9)\")\n  (7, 8, 9)\n  >>> tuple_str_int(\"(1, 2, 3)\")\n  (1, 2, 3)\n  >>> tuple_str_int(\"(4, 5, 6)\")\n  (4, 5, 6)\n  \"\"\"\n", "solution": "  \n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def tuple_str_int(test_str):\n    return tuple(map(int, test_str[1:-1].split(', ')))", "code_2": "def tuple_str_int(test_str):\n    return eval(test_str)", "code_3": "import re\ndef tuple_str_int(test_str):\n    return tuple(int(i) for i in re.findall(r'\\d+', test_str))", "code_4": "import ast\ndef tuple_str_int(test_str):\n    return ast.literal_eval(test_str)", "code_5": "def tuple_str_int(test_str):\n    return tuple(int(x) for x in test_str.strip('()').split(', '))", "code_6": "def tuple_str_int(test_str):\n    return tuple(int(i) for i in test_str.replace('(', '').replace(')', '').split(', '))", "code_7": "def tuple_str_int(test_str):\n    return tuple(int(i) for i in test_str.strip('()').split(', '))", "code_8": "def tuple_str_int(test_str):\n    return tuple(map(int, filter(None, test_str.split(','))))", "code_9": "def tuple_str_int(test_str):\n    return tuple(int(i) for i in test_str.strip('()').split(', '))", "code_10": "def tuple_str_int(test_str):\n    return tuple(int(i) for i in test_str[1:-1].split(', '))", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/786", "prompt": "\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    >>> right_insertion([1,2,4,5],6)\n    4\n    >>> right_insertion([1,2,4,5],3)\n    2\n    >>> right_insertion([1,2,4,5],7)\n    4\n    \"\"\"\n", "solution": "    import bisect\n    \n    i = bisect.bisect_right(a, x)\n    return i", "results": [1, 1, 1, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def right_insertion(a, x):\n    low, high = 0, len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if x > a[mid]:\n            low = mid + 1\n        else:\n            high = mid\n    return low", "code_2": "def right_insertion(a, x):\n    return len([i for i in a if i <= x])", "code_3": "def right_insertion(a, x):\n    return sum(1 for i in a if i <= x)", "code_4": "def right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "code_5": "def right_insertion(a, x):\n    return len(list(filter(lambda i: i <= x, a)))", "code_6": "def right_insertion(a, x):\n    return reduce(lambda c, i: c + (i <= x), a, 0)", "code_7": "def right_insertion(a, x):\n    return len(list(takewhile(lambda i: i <= x, a)))", "code_8": "def right_insertion(a, x):\n    return next((i for i, v in enumerate(a) if v > x), len(a))", "code_9": "def right_insertion(a, x):\n    return len(list(itertools.takewhile(lambda i: i <= x, a)))", "code_10": "def right_insertion(a, x):\n    return len(list(itertools.dropwhile(lambda i: i < x, a)))", "pass@3": 0.9166666666666666, "nDCG@10": 0.6235744328990732}
{"task_id": "MBPP/787", "prompt": "\n\ndef text_match_three(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by three 'b'.\n        >>> text_match_three(\"ac\")\n        ('Not matched!')\n        >>> text_match_three(\"dc\")\n        ('Not matched!')\n        >>> text_match_three(\"abbbba\")\n        ('Found a match!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'ab{3}?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef text_match_three(text):\n    return 'Found a match!' if re.search('abbb', text) else 'Not matched!'", "code_2": "def text_match_three(text):\n    return 'Found a match!' if 'abbb' in text else 'Not matched!'", "code_3": "def text_match_three(text):\n    return 'Found a match!' if text.count('abbb') > 0 else 'Not matched!'", "code_4": "def text_match_three(text):\n    return 'Found a match!' if any(text[i:i+4] == 'abbb' for i in range(len(text))) else 'Not matched!'", "code_5": "def text_match_three(text):\n    i = text.find('abbb')\n    return 'Found a match!' if i != -1 else 'Not matched!'", "code_6": "def text_match_three(text):\n    try:\n        text.index('abbb')\n        return 'Found a match!'\n    except ValueError:\n        return 'Not matched!'", "code_7": "def text_match_three(text):\n    return 'Found a match!' if sum(1 for _ in re.finditer('abbb', text)) > 0 else 'Not matched!'", "code_8": "def text_match_three(text):\n    return 'Found a match!' if any(text.startswith('abbb', i) for i in range(len(text))) else 'Not matched!'", "code_9": "def text_match_three(text):\n    return 'Found a match!' if any(text[i:].startswith('abbb') for i in range(len(text))) else 'Not matched!'", "code_10": "def text_match_three(text):\n    return 'Found a match!' if next((True for i in range(len(text)) if text[i:i+4] == 'abbb'), False) else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/788", "prompt": "\n\ndef new_tuple(test_list, test_str):\n  \"\"\"\n  Write a function to create a new tuple from the given string and list.\n  >>> new_tuple([\"WEB\", \"is\"], \"best\")\n  ('WEB', 'is', 'best')\n  >>> new_tuple([\"We\", \"are\"], \"Developers\")\n  ('We', 'are', 'Developers')\n  >>> new_tuple([\"Part\", \"is\"], \"Wrong\")\n  ('Part', 'is', 'Wrong')\n  \"\"\"\n", "solution": "  \n  res = tuple(test_list + [test_str])\n  return (res) ", "results": [1, 1, 0, 0, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])", "code_2": "def new_tuple(test_list, test_str):\n    return (*test_list, test_str)", "code_3": "def new_tuple(test_list, test_str):\n    return test_list.__add__([test_str])", "code_4": "def new_tuple(test_list, test_str):\n    return tuple(itertools.chain(test_list, [test_str]))", "code_5": "def new_tuple(test_list, test_str):\n    return tuple(list(test_list) + [test_str])", "code_6": "def new_tuple(test_list, test_str):\n    return tuple(map(lambda x: x, test_list + [test_str]))", "code_7": "def new_tuple(test_list, test_str):\n    return reduce(lambda x, y: x + (y,), test_list, (test_str,))", "code_8": "def new_tuple(test_list, test_str):\n    return tuple(test_list).__add__((test_str,))", "code_9": "def new_tuple(test_list, test_str):\n    return tuple(test_list).__add__((test_str,))", "code_10": "def new_tuple(test_list, test_str):\n    return tuple(test_list).__add__((test_str,))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7218018303820491}
{"task_id": "MBPP/789", "prompt": "\n\ndef perimeter_polygon(s,l):\n  \"\"\"\n  Write a function to calculate the perimeter of a regular polygon.\n  >>> perimeter_polygon(4,20)\n  80\n  >>> perimeter_polygon(10,15)\n  150\n  >>> perimeter_polygon(9,7)\n  63\n  \"\"\"\n", "solution": "  from math import tan, pi\n  \n  perimeter = s*l\n  return perimeter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`def perimeter_polygon(s,l): return s*l`", "code_2": "`perimeter_polygon = lambda s,l: s*l`", "code_3": "`perimeter_polygon = s.__mul__`", "code_4": "`def perimeter_polygon(s,l): return sum([l]*s)`", "code_5": "`def perimeter_polygon(s,l): return reduce(lambda a,b: a+b, [l]*s)`", "code_6": "`def perimeter_polygon(s,l): return sum(itertools.repeat(l, s))`", "code_7": "`def perimeter_polygon(s,l): return l*s if s>0 else 0`", "code_8": "`def perimeter_polygon(s,l): return l*s if l>0 and s>0 else 0`", "code_9": "`def perimeter_polygon(s,l): return l*s if l*s>0 else 0`", "code_10": "`def perimeter_polygon(s,l): return l*s if l*s>=0 else None`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/790", "prompt": "\n\ndef even_position(nums):\n\t\"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t>>> even_position([3,2,1])\n\tFalse\n\t>>> even_position([1,2,3])\n\tFalse\n\t>>> even_position([2,1,4])\n\tTrue\n\t\"\"\"\n", "solution": "\t\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "results": [1, 1, 0, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def even_position(nums):\n    return all(num % 2 == 0 for i, num in enumerate(nums) if i % 2 == 0)", "code_2": "def even_position(nums):\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums), 2))", "code_3": "def even_position(nums):\n    return [nums[i] % 2 == 0 for i in range(0, len(nums), 2)] == [True] * (len(nums) // 2)", "code_4": "def even_position(nums):\n    return sum(nums[i] % 2 for i in range(0, len(nums), 2)) == 0", "code_5": "def even_position(nums):\n    return not any(nums[i] % 2 for i in range(0, len(nums), 2))", "code_6": "def even_position(nums):\n    return min(nums[i] % 2 for i in range(0, len(nums), 2)) == 0", "code_7": "def even_position(nums):\n    return max(nums[i] % 2 for i in range(0, len(nums), 2)) == 0", "code_8": "def even_position(nums):\n    return reduce(lambda x, y: x and y, [nums[i] % 2 == 0 for i in range(0, len(nums), 2)])", "code_9": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "code_10": "def even_position(nums):\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2 != 0:\n            return False\n        i += 2\n    return True", "pass@3": 1.0, "nDCG@10": 0.8205228949141828}
{"task_id": "MBPP/791", "prompt": "\n\ndef remove_nested(test_tup):\n  \"\"\"\n  Write a function to remove the nested record from the given tuple.\n  >>> remove_nested((1, 5, 7, (4, 6), 10))\n  (1, 5, 7, 10)\n  >>> remove_nested((2, 6, 8, (5, 7), 11))\n  (2, 6, 8, 11)\n  >>> remove_nested((3, 7, 9, (6, 8), 12))\n  (3, 7, 9, 12)\n  \"\"\"\n", "solution": "  \n  res = tuple()\n  for count, ele in enumerate(test_tup):\n    if not isinstance(ele, tuple):\n      res = res + (ele, )\n  return (res) ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_nested(test_tup):\n    return tuple(i for i in test_tup if not isinstance(i, tuple))", "code_2": "def remove_nested(test_tup):\n    return filter(lambda x: not isinstance(x, tuple), test_tup)", "code_3": "def remove_nested(test_tup):\n    return tuple(itertools.chain.from_iterable(i if isinstance(i, tuple) else (i,) for i in test_tup))", "code_4": "def remove_nested(test_tup):\n    return tuple(itertools.chain(*(i if isinstance(i, tuple) else (i,) for i in test_tup)))", "code_5": "def remove_nested(test_tup):\n    return tuple(reduce(lambda x, y: x + y, (i if isinstance(i, tuple) else (i,) for i in test_tup)))", "code_6": "def remove_nested(test_tup):\n    return tuple(sum((i if isinstance(i, tuple) else (i,) for i in test_tup), ()))", "code_7": "def remove_nested(test_tup):\n    return tuple(np.hstack([i if isinstance(i, tuple) else (i,) for i in test_tup]))", "code_8": "def remove_nested(test_tup):\n    return tuple(pd.Series(test_tup).explode().values)", "code_9": "def remove_nested(test_tup):\n    return tuple(concat(i if isinstance(i, tuple) else (i,) for i in test_tup))", "code_10": "def remove_nested(test_tup):\n    return tuple(itertools.chain(*map(lambda x: x if isinstance(x, tuple) else (x,), test_tup)))", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/792", "prompt": "\n\ndef count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    >>> count_list([[1,2],[2,3],[4,5]])\n    3\n    >>> count_list([[1,0],[2,0]])\n    2\n    \"\"\"\n", "solution": "     \n    return len(input_list)", "results": [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def count_list(input_list):\n    return len(input_list)", "code_2": "def count_list(input_list):\n    count = 0\n    for _ in input_list:\n        count += 1\n    return count", "code_3": "def count_list(input_list):\n    return sum(1 for _ in input_list)", "code_4": "def count_list(input_list):\n    return sum(map(lambda _: 1, input_list))", "code_5": "def count_list(input_list):\n    return reduce(lambda count, _: count + 1, input_list, 0)", "code_6": "def count_list(input_list):\n    count = 0\n    while input_list:\n        count += 1\n        input_list.pop()\n    return count", "code_7": "def count_list(input_list):\n    count = 0\n    for i in range(len(input_list)):\n        count += 1\n    return count", "code_8": "def count_list(input_list):\n    return len([1 for _ in input_list])", "code_9": "def count_list(input_list):\n    return input_list.count([]) + input_list.count([0])", "code_10": "def count_list(input_list):\n    return len(filter(lambda _: True, input_list))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7849818707050383}
{"task_id": "MBPP/793", "prompt": "\n\ndef last(arr,x,n):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    >>> last([1,2,3],1,3)\n    0\n    >>> last([1,1,1,2,3,4],1,6)\n    2\n    >>> last([2,3,2,3,6,8,9],3,8)\n    3\n    \"\"\"\n", "solution": "    \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "results": [0, 1, 0, 0, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def last(arr, x, n):\n    return next((i for i in range(n-1, -1, -1) if arr[i] == x), -1)", "code_2": "def last(arr, x, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            if mid == n - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n    return -1", "code_3": "def last(arr, x, n):\n    try:\n        return arr.index(x, n - arr[::-1].index(x) - 1)\n    except ValueError:\n        return -1", "code_4": "def last(arr, x, n):\n    for i in range(n - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "code_5": "def last(arr, x, n):\n    return [i for i in range(n) if arr[i] == x][-1] if x in arr else -1", "code_6": "def last(arr, x, n):\n    return max((i for i, val in enumerate(arr) if val == x), default=-1)", "code_7": "def last(arr, x, n):\n    return reduce(lambda a, b: b if arr[b] == x else a, range(n), -1)", "code_8": "def last(arr, x, n):\n    return next(filter(lambda i: arr[i] == x, range(n - 1, -1, -1)), -1)", "code_9": "def last(arr, x, n):\n    return bisect_right(arr, x) - 1 if x in arr else -1", "code_10": "def last(arr, x, n):\n    return np.where(np.array(arr) == x)[0][-1] if x in arr else -1", "pass@3": 0.5333333333333333, "nDCG@10": 0.2172607128522299}
{"task_id": "MBPP/794", "prompt": "\n\ndef text_starta_endb(text):\n        \"\"\"\n        Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n        >>> text_starta_endb(\"aabbbb\")\n        ('Found a match!')\n        >>> text_starta_endb(\"aabAbbbc\")\n        ('Not matched!')\n        >>> text_starta_endb(\"accddbbjjj\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'a.*?b$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "results": [1, 1, 1, 1, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef text_starta_endb(text):\n    return 'Found a match!' if re.match(r'a.*b$', text) else 'Not matched!'", "code_2": "def text_starta_endb(text):\n    return 'Found a match!' if text.startswith('a') and text.endswith('b') else 'Not matched!'", "code_3": "def text_starta_endb(text):\n    return 'Found a match!' if text[0] == 'a' and text[-1] == 'b' else 'Not matched!'", "code_4": "def text_starta_endb(text):\n    if text[0] == 'a' and text[-1] == 'b':\n        return 'Found a match!'\n    return 'Not matched!'", "code_5": "def text_starta_endb(text):\n    return ('Found a match!', 'Not matched!')[text[0] != 'a' or text[-1] != 'b']", "code_6": "def text_starta_endb(text):\n    return 'Found a match!' if all(x in text for x in ['a', 'b']) and text.index('a') < text.rindex('b') else 'Not matched!'", "code_7": "def text_starta_endb(text):\n    return 'Found a match!' if 'a' in text and 'b' in text and text.index('a') < text.rindex('b') else 'Not matched!'", "code_8": "def text_starta_endb(text):\n    return 'Found a match!' if text.count('a') > 0 and text.count('b') > 0 and text.index('a') < text.rindex('b') else 'Not matched!'", "code_9": "def text_starta_endb(text):\n    return 'Found a match!' if 'a' in text[:-1] and text[-1] == 'b' else 'Not matched!'", "code_10": "def text_starta_endb(text):\n    return 'Found a match!' if text.find('a') != -1 and text.rfind('b') != -1 and text.find('a') < text.rfind('b') else 'Not matched!'", "pass@3": 0.9666666666666667, "nDCG@10": 0.7151857987862358}
{"task_id": "MBPP/795", "prompt": "\n\ndef cheap_items(items,n):\n  \"\"\"\n  Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n  >>> cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n  [{'name': 'Item-1', 'price': 101.1}]\n  >>> cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)\n  [{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\n  >>> cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)\n  [{'name': 'Item-4', 'price': 22.75}]\n  \"\"\"\n", "solution": "  import heapq\n  \n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n  return cheap_items", "results": [1, 0, 0, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "import heapq\ndef cheap_items(items, n):\n    return heapq.nsmallest(n, items, key=lambda x: x['price'])", "code_2": "import heapq\ndef cheap_items(items, n):\n    return [heapq.heappop(heapq.nsmallest(n, items, key=lambda x: x['price'])) for _ in range(n)]", "code_3": "import heapq\ndef cheap_items(items, n):\n    heapq.heapify(items)\n    return [heapq.heappop(items) for _ in range(n)]", "code_4": "import heapq\ndef cheap_items(items, n):\n    return sorted(items, key=lambda x: x['price'])[:n]", "code_5": "import heapq\ndef cheap_items(items, n):\n    return [item for item in sorted(items, key=lambda x: x['price'])[:n]]", "code_6": "import heapq\ndef cheap_items(items, n):\n    return [item for item in heapq.nsmallest(n, items, key=lambda x: x['price'])]", "code_7": "import heapq\ndef cheap_items(items, n):\n    heapq.heapify(items)\n    return [heapq.heappop(items) for _ in range(min(n, len(items)))]", "code_8": "import heapq\ndef cheap_items(items, n):\n    return [item for item in sorted(items, key=lambda x: x['price']) if n > 0][:n]", "code_9": "import heapq\ndef cheap_items(items, n):\n    return [item for item in heapq.nsmallest(min(n, len(items)), items, key=lambda x: x['price'])]", "code_10": "import heapq\ndef cheap_items(items, n):\n    return [item for item in sorted(items, key=lambda x: x['price'])[:min(n, len(items))]]", "pass@3": 0.9916666666666667, "nDCG@10": 0.6777277508780453}
{"task_id": "MBPP/796", "prompt": "\n\ndef return_sum(dict):\n  \"\"\"\n  Write function to find the sum of all items in the given dictionary.\n  >>> return_sum({'a': 100, 'b':200, 'c':300})\n  600\n  >>> return_sum({'a': 25, 'b':18, 'c':45})\n  88\n  >>> return_sum({'a': 36, 'b':39, 'c':49})\n  124\n  \"\"\"\n", "solution": "  \n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "results": [1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def return_sum(d):\n  return sum(d.values())", "code_2": "def return_sum(d):\n  return sum(v for v in d.values())", "code_3": "def return_sum(d):\n  return reduce(lambda a, b: a + b, d.values())", "code_4": "def return_sum(d):\n  total = 0\n  for v in d.values():\n    total += v\n  return total", "code_5": "def return_sum(d):\n  total = 0\n  for k in d:\n    total += d[k]\n  return total", "code_6": "def return_sum(d):\n  return sum(map(lambda x: d[x], d))", "code_7": "def return_sum(d):\n  return functools.reduce(operator.add, d.values())", "code_8": "def return_sum(d):\n  return sum(d.values()) if d else 0", "code_9": "def return_sum(d):\n  return sum(d.values()) if d.values() else 0", "code_10": "def return_sum(d):\n  return sum(d.values()) if d.values() is not None else 0", "pass@3": 1.0, "nDCG@10": 0.8165901947515999}
{"task_id": "MBPP/797", "prompt": "\n\ndef sum_in_Range(l,r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    >>> sum_in_Range(2,5)\n    8\n    >>> sum_in_Range(5,7)\n    12\n    >>> sum_in_Range(7,13)\n    40\n    \"\"\"\n", "solution": "    def sum_Odd(n): \n        terms = (n + 1)//2\n        sum1 = terms * terms \n        return sum1  \n     \n    return sum_Odd(r) - sum_Odd(l - 1)", "results": [0, 1, 1, 1, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def sum_in_Range(l, r):\n    return sum(range(l + l % 2, r + 1, 2))", "code_2": "def sum_in_Range(l, r):\n    return sum(x for x in range(l, r + 1) if x % 2)", "code_3": "def sum_in_Range(l, r):\n    start = l if l % 2 else l + 1\n    return sum(range(start, r + 1, 2))", "code_4": "def sum_in_Range(l, r):\n    return sum(filter(lambda x: x % 2, range(l, r + 1)))", "code_5": "def sum_in_Range(l, r):\n    return sum(x for x in range(l + (l % 2 == 0), r + 1, 2))", "code_6": "def sum_in_Range(l, r):\n    return sum(range(l + (l & 1), r + 1, 2))", "code_7": "def sum_in_Range(l, r):\n    return sum(range(l + (l % 2 == 0), r + 1, 2))", "code_8": "def sum_in_Range(l, r):\n    return sum(x for x in range(l, r + 1) if x & 1)", "code_9": "def sum_in_Range(l, r):\n    return sum(range(l + l % 2, r + 1, 2))", "code_10": "def sum_in_Range(l, r):\n    return sum(x for x in range(l + (l % 2 == 0), r + 1, 2))", "pass@3": 0.9916666666666667, "nDCG@10": 0.6352557412688554}
{"task_id": "MBPP/798", "prompt": "\n\ndef _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([15, 12, 13, 10])\n    50\n    >>> _sum([0, 1, 2])\n    3\n    \"\"\"\n", "solution": "      \n    sum=0\n    for i in arr: \n        sum = sum + i      \n    return(sum)  ", "results": [1, 1, 0, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def _sum(arr):\n    return sum(arr)", "code_2": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total", "code_3": "def _sum(arr):\n    return reduce(lambda a, b: a + b, arr)", "code_4": "def _sum(arr):\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total", "code_5": "def _sum(arr):\n    return sum(arr, 0)", "code_6": "def _sum(arr):\n    return sum(arr, start=0)", "code_7": "def _sum(arr):\n    total = 0\n    i = 0\n    while i < len(arr):\n        total += arr[i]\n        i += 1\n    return total", "code_8": "def _sum(arr):\n    return functools.reduce(operator.add, arr)", "code_9": "def _sum(arr):\n    return numpy.sum(arr)", "code_10": "def _sum(arr):\n    return sum(arr, initial=0)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6906478832608419}
{"task_id": "MBPP/799", "prompt": "\n\ndef left_Rotate(n,d):\n    \"\"\"\n    Write a python function to left rotate the bits of a given number.\n    >>> left_Rotate(16,2)\n    64\n    >>> left_Rotate(10,2)\n    40\n    >>> left_Rotate(99,3)\n    792\n    \"\"\"\n", "solution": "    INT_BITS = 32\n       \n    return (n << d)|(n >> (INT_BITS - d))  ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 11, "code_1": "def left_Rotate(n, d): return (n << d) | (n >> (32 - d))", "code_2": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | (n >> (32 - d))", "code_3": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | (n >> (32 - d)) & 0xFFFFFFFF", "code_4": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | ((n & 0xFFFFFFFF) >> (32 - d))", "code_5": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | ((n & 0xFFFFFFFF) >> (32 - d)) & 0xFFFFFFFF", "code_6": "def left_Rotate(n, d): return (n << d) & 0xFFFFFFFF | (n >> (32 - d))", "code_7": "def left_Rotate(n, d): return (n << d) & 0xFFFFFFFF | (n >> (32 - d)) & 0xFFFFFFFF", "code_8": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | ((n & 0xFFFFFFFF) >> (32 - d)) & 0xFFFFFFFF", "code_9": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | ((n & 0xFFFFFFFF) >> (32 - d)) & 0xFFFFFFFF", "code_10": "def left_Rotate(n, d): return ((n & 0xFFFFFFFF) << d) | ((n & 0xFFFFFFFF) >> (32 - d)) & 0xFFFFFFFF", "code_11": "Note: The solutions are identical because the problem statement does not provide any specific requirements for optimization. All solutions use bitwise operations to perform the left rotation.", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/800", "prompt": "\n\ndef remove_all_spaces(text):\n \"\"\"\n Write a function to remove all whitespaces from a string.\n >>> remove_all_spaces('python  program')\n ('pythonprogram')\n >>> remove_all_spaces('python   programming    language')\n ('pythonprogramminglanguage')\n >>> remove_all_spaces('python                     program')\n ('pythonprogram')\n \"\"\"\n", "solution": " import re\n \n return (re.sub(r'\\s+', '',text))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using join and split:\ndef remove_all_spaces(text):\n    return ''.join(text.split())", "code_2": "Using replace:\ndef remove_all_spaces(text):\n    return text.replace(' ', '')", "code_3": "Using list comprehension:\ndef remove_all_spaces(text):\n    return ''.join([char for char in text if char != ' '])", "code_4": "Using filter:\ndef remove_all_spaces(text):\n    return ''.join(filter(lambda char: char != ' ', text))", "code_5": "Using re.sub:\nimport re\ndef remove_all_spaces(text):\n    return re.sub('\\s+', '', text)", "code_6": "Using translate and maketrans:\ndef remove_all_spaces(text):\n    return text.translate(str.maketrans('', '', ' '))", "code_7": "Using itertools.filterfalse:\nimport itertools\ndef remove_all_spaces(text):\n    return ''.join(itertools.filterfalse(lambda char: char == ' ', text))", "code_8": "Using functools.reduce:\nimport functools\ndef remove_all_spaces(text):\n    return functools.reduce(lambda a, b: a + b, filter(lambda char: char != ' ', text))", "code_9": "Using a while loop:\ndef remove_all_spaces(text):\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            text = text[:i] + text[i+1:]\n        else:\n            i += 1\n    return text", "code_10": "Using a for loop:\ndef remove_all_spaces(text):\n    result = ''\n    for char in text:\n        if char != ' ':\n            result += char\n    return result", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/801", "prompt": "\n\ndef test_three_equal(x,y,z):\n  \"\"\"\n  Write a python function to count the number of equal numbers from three given integers.\n  >>> test_three_equal(1,1,1)\n  3\n  >>> test_three_equal(-1,-2,-3)\n  0\n  >>> test_three_equal(1,2,2)\n  2\n  \"\"\"\n", "solution": "  \n  result= set([x,y,z])\n  if len(result)==3:\n    return 0\n  else:\n    return (4-len(result))", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def test_three_equal(x, y, z):\n    return 3 if x == y == z else 2 if x == y or y == z or x == z else 0", "code_2": "def test_three_equal(x, y, z):\n    return sum(x == y, y == z, x == z)", "code_3": "def test_three_equal(x, y, z):\n    return [0, 2, 3][(x == y) + (y == z) + (x == z)]", "code_4": "def test_three_equal(x, y, z):\n    return len({x, y, z}) - 2", "code_5": "def test_three_equal(x, y, z):\n    return (x == y) + (y == z) + (x == z)", "code_6": "def test_three_equal(x, y, z):\n    return sum(map(lambda a, b: a == b, (x, y, z), (y, z, x)))", "code_7": "def test_three_equal(x, y, z):\n    return sum(1 for _ in filter(lambda a: a == x, (x, y, z)))", "code_8": "def test_three_equal(x, y, z):\n    return sum(1 for _ in (x, y, z) if _ == x)", "code_9": "def test_three_equal(x, y, z):\n    return sum(1 for _ in (x, y, z) if _ == x)", "code_10": "def test_three_equal(x, y, z):\n    return (x == y) * 2 + (y == z) * 2 + (x == z) * 2", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/802", "prompt": "\n\ndef count_Rotation(arr,n):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    >>> count_Rotation([3,2,1],3)\n    1\n    >>> count_Rotation([4,5,1,2,3],5)\n    2\n    >>> count_Rotation([7,8,9,1,2,3],6)\n    3\n    \"\"\"\n", "solution": "       \n    for i in range (1,n): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0", "results": [0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Rotation(arr, n):\n    min_val = min(arr)\n    return arr.index(min_val)", "code_2": "def count_Rotation(arr, n):\n    return next((i for i, x in enumerate(arr) if i > 0 and x < arr[i - 1]), 0)", "code_3": "def count_Rotation(arr, n):\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0", "code_4": "def count_Rotation(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            if low < high and arr[low] > arr[low + 1]:\n                return low + 1\n            return low\n        mid = (low + high) // 2\n        next, prev = (mid + 1) % n, (mid - 1 + n) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev]:\n            return mid\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n        elif arr[mid] >= arr[low]:\n            low = mid + 1", "code_5": "def count_Rotation(arr, n):\n    return len([x for x in arr if x < arr[0]])", "code_6": "def count_Rotation(arr, n):\n    return sum(1 for i in range(1, n) if arr[i] < arr[i - 1])", "code_7": "def count_Rotation(arr, n):\n    return len(list(filter(lambda x: x[1] < x[0], zip(arr, arr[1:] + arr[:1]))))", "code_8": "def count_Rotation(arr, n):\n    return len([1 for i in range(n - 1) if arr[i] > arr[i + 1]])", "code_9": "def count_Rotation(arr, n):\n    return sum(map(lambda x: x[1] < x[0], zip(arr, arr[1:] + arr[:1])))", "code_10": "def count_Rotation(arr, n):\n    return sum(1 for a, b in zip(arr, arr[1:] + arr[:1]) if a > b)", "pass@3": 0.5333333333333333, "nDCG@10": 0.24890832702259466}
{"task_id": "MBPP/803", "prompt": "\n\ndef is_Perfect_Square(n) :\n    \"\"\"\n    Write a python function to check whether the given number is a perfect square or not.\n    >>> is_Perfect_Square(10)\n    False\n    >>> is_Perfect_Square(36)\n    True\n    >>> is_Perfect_Square(14)\n    False\n    \"\"\"\n", "solution": "    \n    i = 1\n    while (i * i<= n):\n        if ((n % i == 0) and (n / i == i)):\n            return True     \n        i = i + 1\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef is_Perfect_Square(n):\n    return math.isqrt(n) ** 2 == n", "code_2": "def is_Perfect_Square(n):\n    root = int(n ** 0.5)\n    return root * root == n", "code_3": "def is_Perfect_Square(n):\n    return n == int(n ** 0.5) ** 2", "code_4": "def is_Perfect_Square(n):\n    return n >= 0 and (n ** 0.5).is_integer()", "code_5": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n", "code_6": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return n == root * root", "code_7": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root ** 2 == n", "code_8": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root ** 2 == n and root ** 2 <= n", "code_9": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n and root <= int(n ** 0.5)", "code_10": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n and root <= n ** 0.5", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/804", "prompt": "\n\ndef is_Product_Even(arr,n):\n    \"\"\"\n    Write a python function to check whether the product of numbers is even or not.\n    >>> is_Product_Even([1,2,3],3)\n    True\n    >>> is_Product_Even([1,2,1,4],4)\n    True\n    >>> is_Product_Even([1,1],2)\n    False\n    \"\"\"\n", "solution": "     \n    for i in range(0,n): \n        if ((arr[i] & 1) == 0): \n            return True\n    return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_Product_Even(arr,n):\n    return sum(i%2 for i in arr) < n", "code_2": "def is_Product_Even(arr,n):\n    return any(i%2==0 for i in arr)", "code_3": "def is_Product_Even(arr,n):\n    return not all(i%2 for i in arr)", "code_4": "def is_Product_Even(arr,n):\n    return not all(map(lambda x: x%2, arr))", "code_5": "def is_Product_Even(arr,n):\n    return len([i for i in arr if i%2==0]) > 0", "code_6": "def is_Product_Even(arr,n):\n    return any(map(lambda x: x%2==0, arr))", "code_7": "def is_Product_Even(arr,n):\n    return not all(x%2 for x in arr)", "code_8": "def is_Product_Even(arr,n):\n    return len([i for i in arr if i%2==0]) > 0", "code_9": "def is_Product_Even(arr,n):\n    return any(x%2==0 for x in arr)", "code_10": "def is_Product_Even(arr,n):\n    return not all(i%2 for i in arr)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/805", "prompt": "\n\ndef max_sum_list(lists):\n \"\"\"\n Write a function to find the list in a list of lists whose sum of elements is the highest.\n >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n [10, 11, 12]\n >>> max_sum_list([[3,2,1], [6,5,4], [12,11,10]])\n [12,11,10]\n >>> max_sum_list([[2,3,1]])\n [2,3,1]\n \"\"\"\n", "solution": " \n return max(lists, key=sum)", "results": [1, 1, 1, 0, 0, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def max_sum_list(lists):\n return max(lists, key=sum)", "code_2": "def max_sum_list(lists):\n return sorted(lists, key=sum, reverse=True)[0]", "code_3": "def max_sum_list(lists):\n max_sum, max_list = float('-inf'), []\n for lst in lists:\n  if sum(lst) > max_sum:\n   max_sum, max_list = sum(lst), lst\n return max_list", "code_4": "def max_sum_list(lists):\n return reduce(lambda x, y: x if sum(x) > sum(y) else y, lists)", "code_5": "def max_sum_list(lists):\n return heapq.nlargest(1, lists, key=sum)[0]", "code_6": "def max_sum_list(lists):\n return functools.reduce(lambda x, y: x if sum(x) > sum(y) else y, lists)", "code_7": "def max_sum_list(lists):\n return next(iter(sorted(lists, key=sum, reverse=True)))", "code_8": "def max_sum_list(lists):\n return max(lists, key=lambda x: sum(x))", "code_9": "def max_sum_list(lists):\n return max(lists, key=lambda lst: reduce(lambda x, y: x + y, lst))", "code_10": "def max_sum_list(lists):\n return max(lists, key=lambda lst: sum(lst))", "pass@3": 0.9666666666666667, "nDCG@10": 0.6754160255557639}
{"task_id": "MBPP/806", "prompt": "\n\ndef max_run_uppercase(test_str):\n  \"\"\"\n  Write a function to find maximum run of uppercase characters in the given string.\n  >>> max_run_uppercase('GeMKSForGERksISBESt')\n  5\n  >>> max_run_uppercase('PrECIOusMOVemENTSYT')\n  6\n  >>> max_run_uppercase('GooGLEFluTTER')\n  4\n  \"\"\"\n", "solution": "  \n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return (res)", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_run_uppercase(test_str):\n    max_run, curr_run = 0, 0\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n            max_run = max(max_run, curr_run)\n        else:\n            curr_run = 0\n    return max_run", "code_2": "def max_run_uppercase(test_str):\n    return max(len(match.group()) for match in re.finditer(r'[A-Z]+', test_str))", "code_3": "def max_run_uppercase(test_str):\n    return max(map(len, re.findall(r'[A-Z]+', test_str)))", "code_4": "def max_run_uppercase(test_str):\n    return max(len(s) for s in test_str.split(string.ascii_lowercase))", "code_5": "def max_run_uppercase(test_str):\n    return max(len(s) for s in re.split('[a-z]+', test_str))", "code_6": "def max_run_uppercase(test_str):\n    return max(len(s) for s in filter(str.isupper, re.split('([A-Z]+|[a-z]+)', test_str)))", "code_7": "def max_run_uppercase(test_str):\n    return max(len(s) for s in re.findall('[A-Z][A-Z]*', test_str))", "code_8": "def max_run_uppercase(test_str):\n    return max(len(s) for s in re.split('(?=[A-Z])(?<=[a-z])', test_str))", "code_9": "def max_run_uppercase(test_str):\n    return max(len(s) for s in re.split('(?=[a-z])(?<=[A-Z])', test_str))", "code_10": "def max_run_uppercase(test_str):\n    return max(len(s) for s in re.split('(?<=[a-z])(?=[A-Z])', test_str))", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/807", "prompt": "\n\ndef first_odd(nums):\n  \"\"\"\n  Write a python function to find the first odd number in a given list of numbers.\n  >>> first_odd([1,3,5])\n  1\n  >>> first_odd([2,4,1,3])\n  1\n  >>> first_odd ([8,9,1])\n  9\n  \"\"\"\n", "solution": "  \n  first_odd = next((el for el in nums if el%2!=0),-1)\n  return first_odd", "results": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def first_odd(nums):\n  for num in nums:\n    if num % 2 != 0:\n      return num", "code_2": "def first_odd(nums):\n  return next((num for num in nums if num % 2 != 0), None)", "code_3": "def first_odd(nums):\n  return [num for num in nums if num % 2 != 0][0]", "code_4": "def first_odd(nums):\n  odd_nums = filter(lambda x: x % 2 != 0, nums)\n  return next(odd_nums, None)", "code_5": "def first_odd(nums):\n  return list(filter(lambda x: x % 2 != 0, nums))[0]", "code_6": "def first_odd(nums):\n  return reduce(lambda x, y: x if x % 2 != 0 else y, nums)", "code_7": "def first_odd(nums):\n  return functools.reduce(lambda x, y: x if x % 2 != 0 else y, nums)", "code_8": "def first_odd(nums):\n  return list(itertools.dropwhile(lambda x: x % 2 == 0, nums))[0]", "code_9": "def first_odd(nums):\n  return list(itertools.filterfalse(lambda x: x % 2 == 0, nums))[0]", "code_10": "def first_odd(nums):\n  return list(more_itertools.first_true(nums, pred=lambda x: x % 2 != 0))[0]", "pass@3": 0.9166666666666666, "nDCG@10": 0.6489315753318466}
{"task_id": "MBPP/808", "prompt": "\n\ndef check_K(test_tup, K):\n  \"\"\"\n  Write a function to check if the given tuples contain the k or not.\n  >>> check_K((10, 4, 5, 6, 8), 6)\n  True\n  >>> check_K((1, 2, 3, 4, 5, 6), 7)\n  False\n  >>> check_K((7, 8, 9, 44, 11, 12), 11)\n  True\n  \"\"\"\n", "solution": "  \n  res = False\n  for ele in test_tup:\n    if ele == K:\n      res = True\n      break\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def check_K(test_tup, K):\n    return K in test_tup", "code_2": "def check_K(test_tup, K):\n    return any(i == K for i in test_tup)", "code_3": "def check_K(test_tup, K):\n    return sum(i == K for i in test_tup) > 0", "code_4": "def check_K(test_tup, K):\n    return bool(set(test_tup) & {K})", "code_5": "def check_K(test_tup, K):\n    return len(set(test_tup) & {K}) > 0", "code_6": "def check_K(test_tup, K):\n    return {K}.issubset(test_tup)", "code_7": "def check_K(test_tup, K):\n    return test_tup.count(K) > 0", "code_8": "def check_K(test_tup, K):\n    return next((True for i in test_tup if i == K), False)", "code_9": "def check_K(test_tup, K):\n    return reduce(lambda x, y: x or y == K, test_tup, False)", "code_10": "def check_K(test_tup, K):\n    try:\n        test_tup.index(K)\n        return True\n    except ValueError:\n        return False", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/809", "prompt": "\n\ndef check_smaller(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n  >>> check_smaller((1, 2, 3), (2, 3, 4))\n  False\n  >>> check_smaller((4, 5, 6), (3, 4, 5))\n  True\n  >>> check_smaller((11, 12, 13), (10, 11, 12))\n  True\n  \"\"\"\n", "solution": "  \n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\n  return (res) ", "results": [0, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))", "code_2": "def check_smaller(t1, t2):\n    for i in range(len(t1)):\n        if t1[i] <= t2[i]:\n            return False\n    return True", "code_3": "def check_smaller(t1, t2):\n    return min(x - y for x, y in zip(t1, t2)) > 0", "code_4": "def check_smaller(t1, t2):\n    return not any(x >= y for x, y in zip(t1, t2))", "code_5": "def check_smaller(t1, t2):\n    return all(map(lambda x: x[0] < x[1], zip(t1, t2)))", "code_6": "def check_smaller(t1, t2):\n    return sum(x < y for x, y in zip(t1, t2)) == len(t1)", "code_7": "def check_smaller(t1, t2):\n    return len([(x, y) for x, y in zip(t1, t2) if x < y]) == len(t1)", "code_8": "def check_smaller(t1, t2):\n    return reduce(lambda x, y: x and y, (x < y for x, y in zip(t1, t2)))", "code_9": "def check_smaller(t1, t2):\n    return all(starmap(lt, zip(t1, t2)))", "code_10": "def check_smaller(t1, t2):\n    return all(compose(lt, lambda x: x[::-1])(pair) for pair in zip(t1, t2))", "pass@3": 0.5333333333333333, "nDCG@10": 0.24890832702259466}
{"task_id": "MBPP/810", "prompt": "\n\ndef count_variable(a,b,c,d):\n  \"\"\"\n  Write a function to iterate over elements repeating each as many times as its count.\n  >>> count_variable(4,2,0,-2)\n  ['p', 'p', 'p', 'p', 'q', 'q']\n  >>> count_variable(0,1,2,3)\n  ['q', 'r', 'r', 's', 's', 's']\n  >>> count_variable(11,15,12,23)\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n  \"\"\"\n", "solution": "  from collections import Counter\n  \n  c = Counter(p=a, q=b, r=c, s=d)\n  return list(c.elements())", "results": [1, 1, 1, 1, 0, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def count_variable(a, b, c, d):\n    return ['p']*a + ['q']*b + ['r']*c + ['s']*d", "code_2": "def count_variable(a, b, c, d):\n    return sum([[char]*count for char, count in zip('pqrs', (a, b, c, d))], [])", "code_3": "def count_variable(a, b, c, d):\n    return [char for char, count in zip('pqrs', (a, b, c, d)) for _ in range(count)]", "code_4": "def count_variable(a, b, c, d):\n    from itertools import chain, repeat\n    return list(chain.from_iterable(repeat(char, count) for char, count in zip('pqrs', (a, b, c, d))))", "code_5": "def count_variable(a, b, c, d):\n    from numpy import repeat\n    return list(repeat(['p', 'q', 'r', 's'], [a, b, c, d]))", "code_6": "def count_variable(a, b, c, d):\n    import operator\n    return list(operator.concat(*map(lambda x: [x[0]]*x[1], zip('pqrs', (a, b, c, d)))))", "code_7": "def count_variable(a, b, c, d):\n    from collections import Counter\n    return list(Counter(dict(zip('pqrs', (a, b, c, d)))).elements())", "code_8": "def count_variable(a, b, c, d):\n    from functools import reduce\n    from operator import add\n    return reduce(add, ([char]*count for char, count in zip('pqrs', (a, b, c, d))))", "code_9": "def count_variable(a, b, c, d):\n    from more_itertools import distribute\n    return list(distribute([a, b, c, d], 'pqrs'))", "code_10": "def count_variable(a, b, c, d):\n    from toolz import concat\n    return list(concat(map(lambda x: [x[0]]*x[1], zip('pqrs', (a, b, c, d)))))", "pass@3": 0.9666666666666667, "nDCG@10": 0.706583601726363}
{"task_id": "MBPP/811", "prompt": "\n\ndef check_identical(test_list1, test_list2):\n  \"\"\"\n  Write a function to check if two lists of tuples are identical or not.\n  >>> check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])\n  True\n  >>> check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])\n  False\n  >>> check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])\n  True\n  \"\"\"\n", "solution": "  \n  res = test_list1 == test_list2\n  return (res) ", "results": [1, 1, 0, 1, 1, 0, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def check_identical(l1, l2):\n    return set(l1) == set(l2)", "code_2": "def check_identical(l1, l2):\n    return sorted(l1) == sorted(l2)", "code_3": "def check_identical(l1, l2):\n    return Counter(l1) == Counter(l2)", "code_4": "def check_identical(l1, l2):\n    return len(l1) == len(l2) and all(i in l2 for i in l1)", "code_5": "def check_identical(l1, l2):\n    return len(set(l1) ^ set(l2)) == 0", "code_6": "def check_identical(l1, l2):\n    return collections.Counter(l1) == collections.Counter(l2)", "code_7": "def check_identical(l1, l2):\n    return len(l1) == len(l2) and set(l1) == set(l2)", "code_8": "def check_identical(l1, l2):\n    return not bool(set(l1) ^ set(l2))", "code_9": "def check_identical(l1, l2):\n    return len(l1) == len(l2) and sorted(l1) == sorted(l2)", "code_10": "def check_identical(l1, l2):\n    return collections.Counter(l1) == collections.Counter(l2) and len(l1) == len(l2)", "pass@3": 0.9916666666666667, "nDCG@10": 0.747935059673333}
{"task_id": "MBPP/812", "prompt": "\n\ndef road_rd(street):\n  \"\"\"\n  Write a function to abbreviate 'road' as 'rd.' in a given string.\n  >>> road_rd(\"ravipadu Road\")\n  ('ravipadu Rd.')\n  >>> road_rd(\"palnadu Road\")\n  ('palnadu Rd.')\n  >>> road_rd(\"eshwar enclave Road\")\n  ('eshwar enclave Rd.')\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.sub('Road$', 'Rd.', street))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def road_rd(street):\n    return street.replace('Road', 'Rd.')", "code_2": "def road_rd(street):\n    return 'Rd.'.join(street.rsplit('Road', 1))", "code_3": "def road_rd(street):\n    return street[:street.rfind('Road')] + 'Rd.'", "code_4": "import re\ndef road_rd(street):\n    return re.sub('Road$', 'Rd.', street)", "code_5": "def road_rd(street):\n    return street.rstrip('Road') + 'Rd.'", "code_6": "def road_rd(street):\n    return ' '.join([word if word != 'Road' else 'Rd.' for word in street.split()])", "code_7": "def road_rd(street):\n    *start, end = street.split(' ')\n    return ' '.join(start + ['Rd.' if end == 'Road' else end])", "code_8": "def road_rd(street):\n    return street[:-4] + 'Rd.' if street.endswith('Road') else street", "code_9": "def road_rd(street):\n    return 'Rd.'.join(street.split('Road'))", "code_10": "def road_rd(street):\n    return street.replace('Road', 'Rd.', 1)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/813", "prompt": "\n\ndef string_length(str1):\n    \"\"\"\n    Write a function to find length of the string.\n    >>> string_length('python')\n    6\n    >>> string_length('program')\n    7\n    >>> string_length('language')\n    8\n    \"\"\"\n", "solution": "    \n    count = 0\n    for char in str1:\n        count += 1\n    return count", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def string_length(str1): return len(str1)", "code_2": "string_length = lambda str1: len(str1)", "code_3": "def string_length(str1):\n    count = 0\n    for _ in str1:\n        count += 1\n    return count", "code_4": "def string_length(str1):\n    count = 0\n    while str1[count:]:\n        count += 1\n    return count", "code_5": "def string_length(str1):\n    try:\n        return 1 + string_length(str1[1:])\n    except IndexError:\n        return 0", "code_6": "def string_length(str1):\n    return sum(1 for _ in str1)", "code_7": "import functools\ndef string_length(str1):\n    return functools.reduce(lambda x, _: x + 1, str1, 0)", "code_8": "def string_length(str1):\n    return str1.count('') - 1", "code_9": "def string_length(str1):\n    return str1.index('\\0') if '\\0' in str1 else len(str1)", "code_10": "def string_length(str1):\n    return len(list(str1))", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/814", "prompt": "\n\ndef rombus_area(p,q):\n  \"\"\"\n  Write a function to find the area of a rombus.\n  >>> rombus_area(10,20)\n  100\n  >>> rombus_area(10,5)\n  25\n  >>> rombus_area(4,2)\n  4\n  \"\"\"\n", "solution": "  \n  area=(p*q)/2\n  return area", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def rombus_area(p, q): return p * q // 2", "code_2": "rombus_area = lambda p, q: p * q // 2", "code_3": "def rombus_area(p, q): return abs(p * q) // 2", "code_4": "rombus_area = lambda p, q: abs(p * q) // 2", "code_5": "def rombus_area(p, q): return (p * q) >> 1", "code_6": "rombus_area = lambda p, q: (p * q) >> 1", "code_7": "def rombus_area(p, q): return (abs(p) * abs(q)) >> 1", "code_8": "rombus_area = lambda p, q: (abs(p) * abs(q)) >> 1", "code_9": "def rombus_area(p, q): return int(0.5 * p * q)", "code_10": "rombus_area = lambda p, q: int(0.5 * p * q)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/815", "prompt": "\n\ndef sort_by_dnf(arr, n):\n  \"\"\"\n  Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n  >>> sort_by_dnf([1,2,0,1,0,1,2,1,1], 9)\n  [0, 0, 1, 1, 1, 1, 1, 2, 2]\n  >>> sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10)\n  [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n  >>> sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10)\n  [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n  \"\"\"\n", "solution": "  \n  low=0\n  mid=0\n  high=n-1\n  while mid <= high:\n    if arr[mid] == 0:\n      arr[low], arr[mid] = arr[mid], arr[low]\n      low = low + 1\n      mid = mid + 1\n    elif arr[mid] == 1:\n      mid = mid + 1\n    else:\n      arr[mid], arr[high] = arr[high], arr[mid]\n      high = high - 1\n  return arr", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sort_by_dnf(arr, n):\n    count = [0, 0, 0]\n    for i in range(n):\n        count[arr[i]] += 1\n    i = 0\n    for j in range(3):\n        for k in range(count[j]):\n            arr[i] = j\n            i += 1\n    return arr", "code_2": "def sort_by_dnf(arr, n):\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n    return arr", "code_3": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while j <= k:\n        if arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] == 1:\n            j += 1\n        else:\n            arr[j], arr[k] = arr[k], arr[j]\n            k -= 1\n    return arr", "code_4": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while i <= k:\n        if arr[i] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[i] == 1:\n            i += 1\n        else:\n            arr[i], arr[k] = arr[k], arr[i]\n            k -= 1\n    return arr", "code_5": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while j <= k:\n        if arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] == 1:\n            j += 1\n        else:\n            arr[j], arr[k] = arr[k], arr[j]\n            k -= 1\n    return arr", "code_6": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while i <= k:\n        if arr[i] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[i] == 1:\n            i += 1\n        else:\n            arr[i], arr[k] = arr[k], arr[i]\n            k -= 1\n    return arr", "code_7": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while j <= k:\n        if arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] == 1:\n            j += 1\n        else:\n            arr[j], arr[k] = arr[k], arr[j]\n            k -= 1\n    return arr", "code_8": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while i <= k:\n        if arr[i] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[i] == 1:\n            i += 1\n        else:\n            arr[i], arr[k] = arr[k], arr[i]\n            k -= 1\n    return arr", "code_9": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while j <= k:\n        if arr[j] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[j] == 1:\n            j += 1\n        else:\n            arr[j], arr[k] = arr[k], arr[j]\n            k -= 1\n    return arr", "code_10": "def sort_by_dnf(arr, n):\n    i, j, k = 0, 0, n - 1\n    while i <= k:\n        if arr[i] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n        elif arr[i] == 1:\n            i += 1\n        else:\n            arr[i], arr[k] = arr[k], arr[i]\n            k -= 1\n    return arr", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/816", "prompt": "\n\ndef clear_tuple(test_tup):\n  \"\"\"\n  Write a function to clear the values of the given tuples.\n  >>> clear_tuple((1, 5, 3, 6, 8))\n  ()\n  >>> clear_tuple((2, 1, 4 ,5 ,6))\n  ()\n  >>> clear_tuple((3, 2, 5, 6, 8))\n  ()\n  \"\"\"\n", "solution": "  \n  temp = list(test_tup)\n  temp.clear()\n  test_tup = tuple(temp)\n  return (test_tup) ", "results": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def clear_tuple(test_tup):\n    return ()", "code_2": "def clear_tuple(test_tup):\n    return test_tup[:0]", "code_3": "def clear_tuple(test_tup):\n    return tuple()", "code_4": "def clear_tuple(test_tup):\n    return test_tup[len(test_tup):]", "code_5": "def clear_tuple(test_tup):\n    return test_tup[0:0]", "code_6": "def clear_tuple(test_tup):\n    return test_tup[0:len(test_tup):len(test_tup)]", "code_7": "def clear_tuple(test_tup):\n    return test_tup[::len(test_tup)]", "code_8": "def clear_tuple(test_tup):\n    return test_tup[::-1][::-1]", "code_9": "def clear_tuple(test_tup):\n    return test_tup[::-len(test_tup)]", "code_10": "def clear_tuple(test_tup):\n    return test_tup[len(test_tup)::-len(test_tup)]", "pass@3": 0.9166666666666666, "nDCG@10": 0.6489315753318466}
{"task_id": "MBPP/817", "prompt": "\n\ndef div_of_nums(nums,m,n):\n \"\"\"\n Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)\n [19, 65, 57, 39, 152, 190]\n >>> div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)\n [2, 5, 8, 10]\n >>> div_of_nums([10,15,14,13,18,12,20],10,5)\n [10, 15, 20]\n \"\"\"\n", "solution": " \n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \n return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "code_2": "div_of_nums = lambda nums, m, n: list(filter(lambda num: num % m == 0 or num % n == 0, nums))", "code_3": "div_of_nums = lambda nums, m, n: [num for num in nums if not (num % m and num % n)]", "code_4": "div_of_nums = lambda nums, m, n: [num for num in nums if any(num % i == 0 for i in (m, n))]", "code_5": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "code_6": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "code_7": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "code_8": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "code_9": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "code_10": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 or num % n == 0]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/818", "prompt": "\n\ndef lower_ctr(str):\n      \"\"\"\n      Write a python function to count lower case letters in a given string.\n      >>> lower_ctr('abc')\n      3\n      >>> lower_ctr('string')\n      6\n      >>> lower_ctr('Python')\n      5\n      \"\"\"\n", "solution": "      \n      lower_ctr= 0\n      for i in range(len(str)):\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \n      return  lower_ctr", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def lower_ctr(s): return sum(1 for c in s if c.islower())", "code_2": "def lower_ctr(s): return len([c for c in s if c.islower()])", "code_3": "def lower_ctr(s): return sum(c.islower() for c in s)", "code_4": "def lower_ctr(s): return len(s) - sum(c.isupper() for c in s)", "code_5": "def lower_ctr(s): return sum(map(str.islower, s))", "code_6": "import re\ndef lower_ctr(s): return len(re.findall('[a-z]', s))", "code_7": "def lower_ctr(s): return len(''.join(filter(str.islower, s)))", "code_8": "def lower_ctr(s): return len(s.translate(str.maketrans('', '', s.upper())))", "code_9": "def lower_ctr(s): return len(s) - len(s.translate(str.maketrans('', '', s.lower())))", "code_10": "def lower_ctr(s): return sum(ord(c) >= 97 and ord(c) <= 122 for c in s)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/819", "prompt": "\n\ndef count_duplic(lists):\n    \"\"\"\n    Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n    >>> count_duplic([1,2,2,2,4,4,4,5,5,5,5])\n    ([1, 2, 4, 5], [1, 3, 3, 4])\n    >>> count_duplic([2,2,3,1,2,6,7,9])\n    ([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\n    >>> count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])\n    ([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    \"\"\"\n", "solution": "    \n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i+1])\n    return element,frequency\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_duplic(lists):\n    from itertools import groupby\n    return zip(*[(k, len(list(g))) for k, g in groupby(lists)])", "code_2": "def count_duplic(lists):\n    return map(list, zip(*[(k, sum(1 for _ in g)) for k, g in itertools.groupby(lists)]))", "code_3": "def count_duplic(lists):\n    return reduce(lambda a, b: (a[0] + [b[0]], a[1] + [b[1]]) if a and a[0][-1] != b[0] else (a[0][:-1] + [b[0]], a[1][:-1] + [a[1][-1] + 1]), [(i, 1) for i in lists], ([], []))", "code_4": "def count_duplic(lists):\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in lists:\n        d[i] += 1\n    return list(d.keys()), list(d.values())", "code_5": "def count_duplic(lists):\n    return zip(*[(k, lists.count(k)) for k in set(lists)])", "code_6": "def count_duplic(lists):\n    return zip(*[(k, len([i for i in g])) for k, g in itertools.groupby(lists)])", "code_7": "def count_duplic(lists):\n    return zip(*[(k, sum(1 for _ in v)) for k, v in itertools.groupby(sorted(lists))])", "code_8": "def count_duplic(lists):\n    from collections import Counter\n    c = Counter(lists)\n    return list(c.keys()), list(c.values())", "code_9": "def count_duplic(lists):\n    return map(list, zip(*[(k, sum(1 for _ in v)) for k, v in itertools.groupby(sorted(lists))]))", "code_10": "def count_duplic(lists):\n    return reduce(lambda a, b: (a[0] + [b], a[1] + [lists.count(b)]) if a and a[0][-1] != b else a, lists, ([], []))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/820", "prompt": "\n\ndef check_monthnum_number(monthnum1):\n  \"\"\"\n  Write a function to check whether the given month number contains 28 days or not.\n  >>> check_monthnum_number(2)\n  True\n  >>> check_monthnum_number(1)\n  False\n  >>> check_monthnum_number(3)\n  False\n  \"\"\"\n", "solution": "  \n  if monthnum1 == 2:\n    return True\n  else:\n    return False", "results": [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def check_monthnum_number(monthnum1):\n    return monthnum1 == 2", "code_2": "def check_monthnum_number(monthnum1):\n    return 28 if monthnum1 == 2 else 31", "code_3": "def check_monthnum_number(monthnum1):\n    return {2: True}.get(monthnum1, False)", "code_4": "def check_monthnum_number(monthnum1):\n    return [False, False, True, False, False, False, False, False, False, False, False, False][monthnum1 - 1]", "code_5": "def check_monthnum_number(monthnum1):\n    return any([monthnum1 == 2])", "code_6": "def check_monthnum_number(monthnum1):\n    return 1 << monthnum1 & 1 << 2 != 0", "code_7": "def check_monthnum_number(monthnum1):\n    return bool(monthnum1 & 2)", "code_8": "def check_monthnum_number(monthnum1):\n    return monthnum1 in [2]", "code_9": "def check_monthnum_number(monthnum1):\n    return monthnum1 == 2 and 'True' or 'False'", "code_10": "def check_monthnum_number(monthnum1):\n    return monthnum1 == 2 and True or False", "pass@3": 0.9666666666666667, "nDCG@10": 0.6267310462031456}
{"task_id": "MBPP/821", "prompt": "\n\ndef merge_dictionaries(dict1,dict2):\n    \"\"\"\n    Write a function to merge two dictionaries into a single expression.\n    >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })\n    {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    >>> merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n    \"\"\"\n", "solution": "    import collections as ct\n    \n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}", "code_2": "def merge_dictionaries(dict1, dict2):\n    return dict(dict1, **dict2)", "code_3": "def merge_dictionaries(dict1, dict2):\n    dict1.update(dict2)\n    return dict1", "code_4": "def merge_dictionaries(dict1, dict2):\n    return dict(list(dict1.items()) + list(dict2.items()))", "code_5": "def merge_dictionaries(dict1, dict2):\n    return {k: v for d in (dict1, dict2) for k, v in d.items()}", "code_6": "def merge_dictionaries(dict1, dict2):\n    dict1.update(dict2)\n    return dict1", "code_7": "def merge_dictionaries(dict1, dict2):\n    return {k: dict1.get(k, dict2.get(k)) for k in set(dict1) | set(dict2)}", "code_8": "def merge_dictionaries(dict1, dict2):\n    return {k: dict2[k] if k in dict2 else dict1[k] for k in set(dict1) | set(dict2)}", "code_9": "def merge_dictionaries(dict1, dict2):\n    return {k: dict2.get(k, dict1.get(k)) for k in set(dict1) | set(dict2)}", "code_10": "def merge_dictionaries(dict1, dict2):\n    return {k: dict2.get(k) if k in dict2 else dict1.get(k) for k in set(dict1) | set(dict2)}", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/822", "prompt": "\n\ndef pass_validity(p):\n \"\"\"\n Write a function to return true if the password is valid.\n >>> pass_validity(\"password\")\n False\n >>> pass_validity(\"Password@10\")\n True\n >>> pass_validity(\"password@10\")\n False\n \"\"\"\n", "solution": " import re\n \n x = True\n while x:  \n    if (len(p)<6 or len(p)>12):\n        break\n    elif not re.search(\"[a-z]\",p):\n        break\n    elif not re.search(\"[0-9]\",p):\n        break\n    elif not re.search(\"[A-Z]\",p):\n        break\n    elif not re.search(\"[$#@]\",p):\n        break\n    elif re.search(\"\\s\",p):\n        break\n    else:\n        return True\n        x=False\n        break\n\n if x:\n    return False", "results": [1, 1, 1, 1, 0, 1, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "import re\ndef pass_validity(p):\n return bool(re.match(r'^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$', p))", "code_2": "def pass_validity(p):\n return any(c.isupper() for c in p) and any(c.isdigit() for c in p) and any(c in '@$!%*?&' for c in p) and len(p) >= 8", "code_3": "def pass_validity(p):\n upper, digit, special = False, False, False\n for c in p:\n  if c.isupper(): upper = True\n  elif c.isdigit(): digit = True\n  elif c in '@$!%*?&': special = True\n return upper and digit and special and len(p) >= 8", "code_4": "def pass_validity(p):\n return sum(c.isupper() for c in p) > 0 and sum(c.isdigit() for c in p) > 0 and sum(c in '@$!%*?&' for c in p) > 0 and len(p) >= 8", "code_5": "def pass_validity(p):\n return all(any(c.isupper(), c.isdigit(), c in '@$!%*?&') for c in p) and len(p) >= 8", "code_6": "def pass_validity(p):\n return len([c for c in p if c.isupper()]) > 0 and len([c for c in p if c.isdigit()]) > 0 and len([c for c in p if c in '@$!%*?&']) > 0 and len(p) >= 8", "code_7": "def pass_validity(p):\n return set(c.isupper() for c in p) & set(c.isdigit() for c in p) & set(c in '@$!%*?&' for c in p) and len(p) >= 8", "code_8": "def pass_validity(p):\n return all(map(lambda x: any(map(x.isupper, x)) and any(map(x.isdigit, x)) and any(map(lambda c: c in '@$!%*?&', x)) and len(x) >= 8, [p]))", "code_9": "def pass_validity(p):\n return reduce(lambda a, b: a and b, [any(c.isupper() for c in p), any(c.isdigit() for c in p), any(c in '@$!%*?&' for c in p), len(p) >= 8])", "code_10": "def pass_validity(p):\n return all(map(lambda f: any(map(f, p)), [str.isupper, str.isdigit, lambda c: c in '@$!%*?&'])) and len(p) >= 8", "pass@3": 0.9666666666666667, "nDCG@10": 0.7058075148678529}
{"task_id": "MBPP/823", "prompt": "\n\ndef check_substring(string, sample) :\n  \"\"\"\n  Write a function to check if the given string starts with a substring using regex.\n  >>> check_substring(\"dreams for dreams makes life fun\", \"makes\")\n  'string doesnt start with the given substring'\n  >>> check_substring(\"Hi there how are you Hi alex\", \"Hi\")\n  'string starts with the given substring'\n  >>> check_substring(\"Its been a long day\", \"been\")\n  'string doesnt start with the given substring'\n  \"\"\"\n", "solution": "  import re \n   \n  if (sample in string): \n      y = \"\\A\" + sample \n      x = re.search(y, string) \n      if x : \n          return (\"string starts with the given substring\") \n      else : \n          return (\"string doesnt start with the given substring\") \n  else : \n      return (\"entered string isnt a substring\")", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef check_substring(string, sample):\n    return 'string starts with the given substring' if re.match(f'^{sample}', string) else 'string doesnt start with the given substring'", "code_2": "import re\ndef check_substring(string, sample):\n    return 'string starts with the given substring' if string.startswith(sample) else 'string doesnt start with the given substring'", "code_3": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string[:len(sample)] == sample else 'string doesnt start with the given substring'", "code_4": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string.index(sample) == 0 else 'string doesnt start with the given substring'", "code_5": "def check_substring(string, sample):\n    try:\n        return 'string starts with the given substring' if string.index(sample) == 0 else 'string doesnt start with the given substring'\n    except ValueError:\n        return 'string doesnt start with the given substring'", "code_6": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string.find(sample) == 0 else 'string doesnt start with the given substring'", "code_7": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string.split(sample, 1)[0] == '' else 'string doesnt start with the given substring'", "code_8": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string.partition(sample)[1] == sample else 'string doesnt start with the given substring'", "code_9": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string.lstrip(sample) != string else 'string doesnt start with the given substring'", "code_10": "def check_substring(string, sample):\n    return 'string starts with the given substring' if string.count(sample, 0, len(sample)) > 0 else 'string doesnt start with the given substring'", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/824", "prompt": "\n\ndef remove_even(l):\n    \"\"\"\n    Write a python function to remove even numbers from a given list.\n    >>> remove_even([1,3,5,2])\n    [1,3,5]\n    >>> remove_even([5,6,7])\n    [5,7]\n    >>> remove_even([1,2,3,4])\n    [1,3]\n    \"\"\"\n", "solution": "    \n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l", "results": [1, 1, 1, 1, 1, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def remove_even(l):\n    return [x for x in l if x % 2 != 0]", "code_2": "def remove_even(l):\n    return list(filter(lambda x: x % 2 != 0, l))", "code_3": "def remove_even(l):\n    return [i for i in l if i & 1]", "code_4": "def remove_even(l):\n    return [i for i in l if bin(i)[-1] == '1']", "code_5": "def remove_even(l):\n    return [i for i in l if i >> 1 << 1 != i]", "code_6": "def remove_even(l):\n    return [i for i in l if i ^ (i - 1) & 1]", "code_7": "def remove_even(l):\n    return [i for i in l if i % 2]", "code_8": "def remove_even(l):\n    return [i for i in l if i - 2 * (i // 2) != 0]", "code_9": "def remove_even(l):\n    return [i for i in l if i % 2**31 != i]", "code_10": "def remove_even(l):\n    return [i for i in l if i & -i == i]", "pass@3": 0.9916666666666667, "nDCG@10": 0.791726719367984}
{"task_id": "MBPP/825", "prompt": "\n\ndef access_elements(nums, list_index):\n    \"\"\"\n    Write a python function to access multiple elements of specified index from a given list.\n    >>> access_elements([2,3,8,4,7,9],[0,3,5])\n    [2, 4, 9]\n    >>> access_elements([1, 2, 3, 4, 5],[1,2])\n    [2,3]\n    >>> access_elements([1,0,2,3],[0,1])\n    [1,0]\n    \"\"\"\n", "solution": "    \n    result = [nums[i] for i in list_index]\n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index]", "code_2": "def access_elements(nums, list_index):\n    return list(map(nums.__getitem__, list_index))", "code_3": "def access_elements(nums, list_index):\n    return [nums[i] for i in sorted(list_index)]", "code_4": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index if i < len(nums)]", "code_5": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index if 0 <= i < len(nums)]", "code_6": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index if nums[i:i+1]]", "code_7": "def access_elements(nums, list_index):\n    return [nums[i] for i in filter(lambda x: 0 <= x < len(nums), list_index)]", "code_8": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index if i in range(len(nums))]", "code_9": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index if -len(nums) <= i < len(nums)]", "code_10": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index if 0 <= i and i < len(nums)]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/826", "prompt": "\n\ndef check_Type_Of_Triangle(a,b,c):\n    \"\"\"\n    Write a python function to find the type of triangle from the given sides.\n    >>> check_Type_Of_Triangle(1,2,3)\n    \"Obtuse-angled Triangle\"\n    >>> check_Type_Of_Triangle(2,2,2)\n    \"Acute-angled Triangle\"\n    >>> check_Type_Of_Triangle(1,0,1)\n    \"Right-angled Triangle\"\n    \"\"\"\n", "solution": "     \n    sqa = pow(a,2) \n    sqb = pow(b,2) \n    sqc = pow(c,2) \n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \n        return (\"Right-angled Triangle\") \n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \n        return (\"Obtuse-angled Triangle\") \n    else: \n        return (\"Acute-angled Triangle\") ", "results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def check_Type_Of_Triangle(a,b,c):\n    a, b, c = sorted([a, b, c])\n    if c**2 == a**2 + b**2: return \"Right-angled Triangle\"\n    elif c**2 > a**2 + b**2: return \"Obtuse-angled Triangle\"\n    else: return \"Acute-angled Triangle\"", "code_2": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return [\"Acute-angled Triangle\", \"Right-angled Triangle\", \"Obtuse-angled Triangle\"][s[2]**2 > s[0]**2 + s[1]**2]", "code_3": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return {s[2]**2 == s[0]**2 + s[1]**2: \"Right-angled Triangle\", s[2]**2 > s[0]**2 + s[1]**2: \"Obtuse-angled Triangle\"}.get(True, \"Acute-angled Triangle\")", "code_4": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return (\"Acute-angled Triangle\", \"Right-angled Triangle\", \"Obtuse-angled Triangle\")[s[2]**2 > s[0]**2 + s[1]**2]", "code_5": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return \"Right-angled Triangle\" if s[2]**2 == s[0]**2 + s[1]**2 else \"Obtuse-angled Triangle\" if s[2]**2 > s[0]**2 + s[1]**2 else \"Acute-angled Triangle\"", "code_6": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return (\"Acute-angled Triangle\", \"Right-angled Triangle\", \"Obtuse-angled Triangle\")[s[2]**2 > s[0]**2 + s[1]**2]", "code_7": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return {True: \"Right-angled Triangle\", False: \"Obtuse-angled Triangle\" if s[2]**2 > s[0]**2 + s[1]**2 else \"Acute-angled Triangle\"}[s[2]**2 == s[0]**2 + s[1]**2]", "code_8": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return (\"Acute-angled Triangle\", \"Right-angled Triangle\", \"Obtuse-angled Triangle\")[s[2]**2 > s[0]**2 + s[1]**2]", "code_9": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return \"Right-angled Triangle\" if s[2]**2 == s[0]**2 + s[1]**2 else (\"Obtuse-angled Triangle\" if s[2]**2 > s[0]**2 + s[1]**2 else \"Acute-angled Triangle\")", "code_10": "def check_Type_Of_Triangle(a,b,c):\n    s = sorted([a, b, c])\n    return (\"Acute-angled Triangle\", \"Right-angled Triangle\", \"Obtuse-angled Triangle\")[s[2]**2 > s[0]**2 + s[1]**2]", "pass@3": 0.9166666666666666, "nDCG@10": 0.5548989126424904}
{"task_id": "MBPP/827", "prompt": "\n\ndef sum_column(list1, C):\n    \"\"\"\n    Write a function to sum a specific column of a list in a given list of lists.\n    >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)\n    12\n    >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)\n    15\n    >>> sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)\n    9\n    \"\"\"\n", "solution": "    \n    result = sum(row[C] for row in list1)\n    return result", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_column(list1, C):\n    return sum(row[C] for row in list1)", "code_2": "def sum_column(list1, C):\n    return sum(map(lambda row: row[C], list1))", "code_3": "def sum_column(list1, C):\n    return sum(list(zip(*list1))[C])", "code_4": "def sum_column(list1, C):\n    return reduce(lambda x, y: x + y, [row[C] for row in list1])", "code_5": "def sum_column(list1, C):\n    return functools.reduce(operator.add, [row[C] for row in list1])", "code_6": "def sum_column(list1, C):\n    return np.sum(np.array(list1)[:,C])", "code_7": "def sum_column(list1, C):\n    return pd.DataFrame(list1).iloc[:,C].sum()", "code_8": "def sum_column(list1, C):\n    return sum(itertools.starmap(operator.itemgetter(C), list1))", "code_9": "def sum_column(list1, C):\n    return sum(row[C] for row in itertools.chain.from_iterable(list1))", "code_10": "def sum_column(list1, C):\n    return sum(row[C] for row in itertools.compress(list1, itertools.cycle([1])))", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/828", "prompt": "\n\ndef count_alpha_dig_spl(string):\n  \"\"\"\n  Write a function to count alphabets,digits and special charactes in a given string.\n  >>> count_alpha_dig_spl(\"abc!@#123\")\n  (3,3,3)\n  >>> count_alpha_dig_spl(\"dgsuy@#$%&1255\")\n  (5,4,5)\n  >>> count_alpha_dig_spl(\"fjdsif627348#%$^&\")\n  (6,6,5)\n  \"\"\"\n", "solution": "  \n  alphabets=digits = special = 0\n  for i in range(len(string)):\n    if(string[i].isalpha()):\n        alphabets = alphabets + 1\n    elif(string[i].isdigit()):\n        digits = digits + 1\n    else:\n        special = special + 1\n  return (alphabets,digits,special)   ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_alpha_dig_spl(s):\n    a, d, sp = 0, 0, 0\n    for c in s:\n        if c.isalpha(): a += 1\n        elif c.isdigit(): d += 1\n        else: sp += 1\n    return a, d, sp", "code_2": "def count_alpha_dig_spl(s):\n    a = sum(c.isalpha() for c in s)\n    d = sum(c.isdigit() for c in s)\n    sp = len(s) - a - d\n    return a, d, sp", "code_3": "import re\ndef count_alpha_dig_spl(s):\n    a = len(re.findall('[a-zA-Z]', s))\n    d = len(re.findall('\\d', s))\n    sp = len(s) - a - d\n    return a, d, sp", "code_4": "def count_alpha_dig_spl(s):\n    a = sum(1 for c in s if c.isalpha())\n    d = sum(1 for c in s if c.isdigit())\n    sp = len(s) - a - d\n    return a, d, sp", "code_5": "def count_alpha_dig_spl(s):\n    a = sum(map(str.isalpha, s))\n    d = sum(map(str.isdigit, s))\n    sp = len(s) - a - d\n    return a, d, sp", "code_6": "from collections import Counter\nimport string\ndef count_alpha_dig_spl(s):\n    c = Counter(s)\n    a = sum(c[ch] for ch in string.ascii_letters)\n    d = sum(c[ch] for ch in string.digits)\n    sp = len(s) - a - d\n    return a, d, sp", "code_7": "def count_alpha_dig_spl(s):\n    a = len([c for c in s if c.isalpha()])\n    d = len([c for c in s if c.isdigit()])\n    sp = len(s) - a - d\n    return a, d, sp", "code_8": "def count_alpha_dig_spl(s):\n    a = sum(c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' for c in s)\n    d = sum(c in '0123456789' for c in s)\n    sp = len(s) - a - d\n    return a, d, sp", "code_9": "def count_alpha_dig_spl(s):\n    a = sum(ord(c) in range(65, 91) or ord(c) in range(97, 123) for c in s)\n    d = sum(ord(c) in range(48, 58) for c in s)\n    sp = len(s) - a - d\n    return a, d, sp", "code_10": "def count_alpha_dig_spl(s):\n    a = sum(c.lower() in 'abcdefghijklmnopqrstuvwxyz' for c in s)\n    d = sum(c in '0123456789' for c in s)\n    sp = len(s) - a - d\n    return a, d, sp", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/829", "prompt": "\n\ndef second_frequent(input):\n\t\"\"\"\n\tWrite a function to find out the second most repeated (or frequent) string in the given sequence.\n\t>>> second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa'])\n\t'bbb'\n\t>>> second_frequent(['abc','bcd','abc','bcd','bcd','bcd'])\n\t'abc'\n\t>>> second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma'])\n\t'gsm'\n\t\"\"\"\n", "solution": "\tfrom collections import Counter \n\t\t\n\t \n\tdict = Counter(input) \n\tvalue = sorted(dict.values(), reverse=True)  \n\tsecond_large = value[1] \n\tfor (key, val) in dict.items(): \n\t\tif val == second_large: \n\t\t\treturn (key) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef second_frequent(input):\n    c = Counter(input)\n    return c.most_common(2)[1][0]", "code_2": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return sorted(freq, key=freq.get, reverse=True)[1]", "code_3": "import heapq\ndef second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    return heapq.nlargest(2, freq, key=freq.get)[1]", "code_4": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    max_freq = max(freq.values())\n    return [k for k, v in freq.items() if v != max_freq][0]", "code_5": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    return sorted(freq, key=freq.get, reverse=True)[1]", "code_6": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    max_freq = max(freq.values())\n    second_max_freq = 0\n    second_max_item = None\n    for k, v in freq.items():\n        if v > second_max_freq and v < max_freq:\n            second_max_freq = v\n            second_max_item = k\n    return second_max_item", "code_7": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    return sorted_freq[1][0]", "code_8": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    max_freq = max(freq.values())\n    freq = {k: v for k, v in freq.items() if v != max_freq}\n    return max(freq, key=freq.get)", "code_9": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    max_freq = max(freq.values())\n    freq = {k: v for k, v in freq.items() if v == max_freq}\n    del freq[max(freq, key=freq.get)]\n    return max(freq, key=freq.get)", "code_10": "def second_frequent(input):\n    freq = {}\n    for item in input:\n        freq[item] = freq.get(item, 0) + 1\n    max_freq = max(freq.values())\n    second_max_freq = 0\n    for k, v in freq.items():\n        if v > second_max_freq and v < max_freq:\n            second_max_freq = v\n    return [k for k, v in freq.items() if v == second_max_freq][0]", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/830", "prompt": "\n\ndef round_up(a, digits):\n    \"\"\"\n    Write a function to round up a number to specific digits.\n    >>> round_up(123.01247,0)\n    124\n    >>> round_up(123.01247,1)\n    123.1\n    >>> round_up(123.01247,2)\n    123.02\n    \"\"\"\n", "solution": "    import math\n    \n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)", "results": [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "import math\ndef round_up(a, digits):\n    return math.ceil(a * 10 ** digits) / 10 ** digits", "code_2": "def round_up(a, digits):\n    return round(a + 0.5 * 10 ** -digits, digits)", "code_3": "def round_up(a, digits):\n    return float('%.{}f'.format(digits) % (a + 10 ** -digits))", "code_4": "def round_up(a, digits):\n    return eval('%.{}f'.format(digits) % (a + 10 ** -digits))", "code_5": "def round_up(a, digits):\n    return float(format(a, '.{}f'.format(digits)))", "code_6": "def round_up(a, digits):\n    return float(f'{a:.{digits}f}')", "code_7": "def round_up(a, digits):\n    return round(a + 10 ** -(digits + 1), digits)", "code_8": "def round_up(a, digits):\n    return round(a + 1 / (10 ** (digits + 1)), digits)", "code_9": "def round_up(a, digits):\n    return round(a + 5 * 10 ** -(digits + 1), digits)", "code_10": "def round_up(a, digits):\n    return round(a + 1 / (10 ** digits), digits)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6936634693435664}
{"task_id": "MBPP/831", "prompt": "\n\ndef count_Pairs(arr,n):\n    \"\"\"\n    Write a python function to count equal element pairs from the given array.\n    >>> count_Pairs([1,1,1,1],4)\n    6\n    >>> count_Pairs([1,5,1],3)\n    1\n    >>> count_Pairs([3,2,1,7,8,9],6)\n    0\n    \"\"\"\n", "solution": "     \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] == arr[j]): \n                cnt += 1; \n    return cnt; ", "results": [0, 1, 0, 0, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count * 2", "code_2": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        count += arr[i + 1:].count(arr[i])\n    return count", "code_3": "from collections import Counter\ndef count_Pairs(arr, n):\n    count = 0\n    for val in Counter(arr).values():\n        count += val * (val - 1)\n    return count", "code_4": "def count_Pairs(arr, n):\n    return sum(val * (val - 1) for val in Counter(arr).values())", "code_5": "def count_Pairs(arr, n):\n    return sum(map(lambda x: x * (x - 1), Counter(arr).values()))", "code_6": "def count_Pairs(arr, n):\n    return sum(v * (v - 1) for v in map(arr.count, set(arr)))", "code_7": "from itertools import combinations\ndef count_Pairs(arr, n):\n    return sum(1 for a, b in combinations(arr, 2) if a == b)", "code_8": "def count_Pairs(arr, n):\n    return len([(a, b) for a, b in combinations(arr, 2) if a == b])", "code_9": "def count_Pairs(arr, n):\n    return len([1 for i in range(n) for j in range(i + 1, n) if arr[i] == arr[j]]) * 2", "code_10": "def count_Pairs(arr, n):\n    return sum(arr.count(i) * (arr.count(i) - 1) for i in set(arr))", "pass@3": 0.5333333333333333, "nDCG@10": 0.2122263659729146}
{"task_id": "MBPP/832", "prompt": "\n\ndef extract_max(input):\n\t\"\"\"\n\tWrite a function to extract the maximum numeric value from a string by using regex.\n\t>>> extract_max('100klh564abc365bg')\n\t564\n\t>>> extract_max('hello300how546mer231')\n\t546\n\t>>> extract_max('its233beenalong343journey234')\n\t343\n\t\"\"\"\n", "solution": "\timport re \n\t \n\tnumbers = re.findall('\\d+',input) \n\tnumbers = map(int,numbers) \n\treturn max(numbers)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef extract_max(input):\n    return max(map(int, re.findall('\\d+', input)))", "code_2": "import re\ndef extract_max(input):\n    return int(max(re.findall('\\d+', input)))", "code_3": "import re\ndef extract_max(input):\n    return max(int(i) for i in re.findall('\\d+', input))", "code_4": "import re\ndef extract_max(input):\n    return max(map(lambda x: int(x), re.findall('\\d+', input)))", "code_5": "import re\ndef extract_max(input):\n    return max(int(x) for x in re.findall('\\d+', input))", "code_6": "import re\ndef extract_max(input):\n    return max(map(int, re.findall('\\d+', input)))", "code_7": "import re\ndef extract_max(input):\n    return int(max(re.findall('\\d+', input), key=int))", "code_8": "import re\ndef extract_max(input):\n    return max(map(int, re.findall('\\d+', input)), default=None)", "code_9": "import re\ndef extract_max(input):\n    return max(int(x) for x in re.findall('\\d+', input)) if re.findall('\\d+', input) else None", "code_10": "import re\ndef extract_max(input):\n    numbers = [int(i) for i in re.findall('\\d+', input)]\n    return max(numbers) if numbers else None", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/833", "prompt": "\n\ndef get_key(dict):\n    \"\"\"\n    Write a function to get dictionary keys as a list.\n    >>> get_key({1:'python',2:'java'})\n    [1,2]\n    >>> get_key({10:'red',20:'blue',30:'black'})\n    [10,20,30]\n    >>> get_key({27:'language',39:'java',44:'little'})\n    [27,39,44]\n    \"\"\"\n", "solution": "     \n    list = [] \n    for key in dict.keys(): \n        list.append(key)           \n    return list", "results": [1, 1, 1, 1, 1, 0, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def get_key(d): return list(d.keys())", "code_2": "def get_key(d): return [k for k in d]", "code_3": "def get_key(d): return [*d]", "code_4": "def get_key(d): return list(d)", "code_5": "def get_key(d): return sorted(d)", "code_6": "def get_key(d): return list(d.iterkeys())", "code_7": "def get_key(d): return list(d.viewkeys())", "code_8": "def get_key(d): return list(d.keys()) if isinstance(d, dict) else []", "code_9": "def get_key(d): return list(d.keys()) if d else []", "code_10": "def get_key(d): return list(d.keys()) if d.__class__ is dict else []", "pass@3": 1.0, "nDCG@10": 0.8482378089219648}
{"task_id": "MBPP/834", "prompt": "\n\ndef generate_matrix(n):\n        \"\"\"\n        Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n        >>> generate_matrix(3)\n        [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n        >>> generate_matrix(2)\n        [[1,2],[4,3]]\n        >>> generate_matrix(7)\n        [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n        \"\"\"\n", "solution": "        \n        if n<=0:\n            return [] \n        matrix=[row[:] for row in [[0]*n]*n]        \n        row_st=0\n        row_ed=n-1        \n        col_st=0\n        col_ed=n-1\n        current=1        \n        while (True):\n            if current>n*n:\n                break\n            for c in range (col_st, col_ed+1):\n                matrix[row_st][c]=current\n                current+=1\n            row_st+=1\n            for r in range (row_st, row_ed+1):\n                matrix[r][col_ed]=current\n                current+=1\n            col_ed-=1\n            for c in range (col_ed, col_st-1, -1):\n                matrix[row_ed][c]=current\n                current+=1\n            row_ed-=1\n            for r in range (row_ed, row_st-1, -1):\n                matrix[r][col_st]=current\n                current+=1\n            col_st+=1\n        return matrix", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i\n        cr, cc = r + dr[di], c + dc[di]\n        if 0 <= cr < n and 0 <= cc < n and matrix[cr][cc] == 0:\n            r, c = cr, cc\n        else:\n            di = (di + 1) % 4\n            r, c = r + dr[di], c + dc[di]\n    return matrix", "code_2": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if r+dr[di] not in range(n) or c+dc[di] not in range(n) or matrix[r+dr[di]][c+dc[di]]:\n            di = (di + 1) % 4\n        r += dr[di]\n        c += dc[di]\n    return matrix", "code_3": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if 0 <= r+dr[di] < n and 0 <= c+dc[di] < n and not matrix[r+dr[di]][c+dc[di]]:\n            r += dr[di]\n            c += dc[di]\n        else:\n            di = (di + 1) % 4\n            r += dr[di]\n            c += dc[di]\n    return matrix", "code_4": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if 0 <= r+dr[di] < n and 0 <= c+dc[di] < n and matrix[r+dr[di]][c+dc[di]] == 0:\n            r += dr[di]\n            c += dc[di]\n        else:\n            di = (di + 1) % 4\n            r += dr[di]\n            c += dc[di]\n    return matrix", "code_5": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if 0 <= r+dr[di] < n and 0 <= c+dc[di] < n and not matrix[r+dr[di]][c+dc[di]]:\n            r, c = r+dr[di], c+dc[di]\n        else:\n            di = (di + 1) % 4\n            r, c = r+dr[di], c+dc[di]\n    return matrix", "code_6": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if 0 <= r+dr[di] < n and 0 <= c+dc[di] < n and matrix[r+dr[di]][c+dc[di]] == 0:\n            r, c = r+dr[di], c+dc[di]\n        else:\n            di = (di + 1) % 4\n            r, c = r+dr[di], c+dc[di]\n    return matrix", "code_7": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        nr, nc = r + dr[di], c + dc[di]\n        if 0 <= nr < n and 0 <= nc < n and matrix[nr][nc] == 0:\n            r, c = nr, nc\n        else:\n            di = (di + 1) % 4\n            r, c = r + dr[di], c + dc[di]\n    return matrix", "code_8": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if 0 <= r+dr[di] < n and 0 <= c+dc[di] < n and not matrix[r+dr[di]][c+dc[di]]:\n            r, c = r+dr[di], c+dc[di]\n        else:\n            di = (di + 1) % 4\n            r, c = r+dr[di], c+dc[di]\n    return matrix", "code_9": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        nr, nc = r + dr[di], c + dc[di]\n        if 0 <= nr < n and 0 <= nc < n and matrix[nr][nc] == 0:\n            r, c = nr, nc\n        else:\n            di = (di + 1) % 4\n            r, c = r + dr[di], c + dc[di]\n    return matrix", "code_10": "def generate_matrix(n):\n    matrix = [[0]*n for _ in range(n)]\n    dr = [0, 1, 0, -1]\n    dc = [1, 0, -1, 0]\n    r = c = di = 0\n    for i in range(1, n*n+1):\n        matrix[r][c] = i**2\n        if 0 <= r+dr[di] < n and 0 <= c+dc[di] < n and not matrix[r+dr[di]][c+dc[di]]:\n            r, c = r+dr[di], c+dc[di]\n        else:\n            di = (di + 1) % 4\n            r, c = r+dr[di], c+dc[di]\n    return matrix", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/835", "prompt": "\n\ndef slope(x1,y1,x2,y2):\n    \"\"\"\n    Write a python function to find the slope of a line.\n    >>> slope(4,2,2,5)\n    -1.5\n    >>> slope(2,4,4,6)\n    1\n    >>> slope(1,2,4,2)\n    0\n    \"\"\"\n", "solution": "     \n    return (float)(y2-y1)/(x2-x1)  ", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def slope(x1, y1, x2, y2): return (y2 - y1) / (x2 - x1)", "code_2": "def slope(x1, y1, x2, y2): return divmod(y2 - y1, x2 - x1)[0]", "code_3": "def slope(x1, y1, x2, y2): return float(y2 - y1) / (x2 - x1)", "code_4": "def slope(x1, y1, x2, y2): return (y2 - y1) / float(x2 - x1)", "code_5": "def slope(x1, y1, x2, y2): return (y2 - y1) / (x2 - x1) if x1 != x2 else float('inf')", "code_6": "def slope(x1, y1, x2, y2): return (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')", "code_7": "def slope(x1, y1, x2, y2): return (y2 - y1) / (x2 - x1) if y2 != y1 else 0", "code_8": "def slope(x1, y1, x2, y2): return (y2 - y1) / (x2 - x1) if x2 - x1 != 0 else float('inf')", "code_9": "def slope(x1, y1, x2, y2): return (y2 - y1) / (x2 - x1) if x2 - x1 else float('inf')", "code_10": "def slope(x1, y1, x2, y2):\n    try:\n        return (y2 - y1) / (x2 - x1)\n    except ZeroDivisionError:\n        return float('inf')", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/836", "prompt": "\n\ndef max_sub_array_sum(a,size):\n\t\"\"\"\n\tWrite a function to find length of the subarray having maximum sum.\n\t>>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8)\n\t5\n\t>>> max_sub_array_sum([1, -2, 1, 1, -2, 1],6)\n\t2\n\t>>> max_sub_array_sum([-1, -2, 3, 4, 5],5)\n\t3\n\t\"\"\"\n", "solution": "\tfrom sys import maxsize \n\t \n\tmax_so_far = -maxsize - 1\n\tmax_ending_here = 0\n\tstart = 0\n\tend = 0\n\ts = 0\n\tfor i in range(0,size): \n\t\tmax_ending_here += a[i] \n\t\tif max_so_far < max_ending_here: \n\t\t\tmax_so_far = max_ending_here \n\t\t\tstart = s \n\t\t\tend = i \n\t\tif max_ending_here < 0: \n\t\t\tmax_ending_here = 0\n\t\t\ts = i+1\n\treturn (end - start + 1)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far", "code_2": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_3": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_4": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_5": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_6": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_7": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(current_sum, 0) + a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_8": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(current_sum, 0) + num\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "code_9": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "code_10": "def max_sub_array_sum(a, size):\n    max_sum = current_sum = a[0]\n    for num in a[1:]:\n        current_sum = max(current_sum + num, num)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/837", "prompt": "\n\ndef cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n odd natural numbers.\n    >>> cube_Sum(2)\n    28\n    >>> cube_Sum(3)\n    153\n    >>> cube_Sum(4)\n    496\n    \"\"\"\n", "solution": "     \n    sum = 0   \n    for i in range(0,n) : \n        sum += (2*i+1)*(2*i+1)*(2*i+1) \n    return sum", "results": [1, 1, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def cube_Sum(n):\n    return sum(i**3 for i in range(1, 2*n, 2))", "code_2": "def cube_Sum(n):\n    return sum(map(lambda i: i**3, range(1, 2*n, 2)))", "code_3": "def cube_Sum(n):\n    return sum(x**3 for x in xrange(1, 2*n, 2))", "code_4": "def cube_Sum(n):\n    return sum(x**3 for x in range(1, 2*n) if x % 2 != 0)", "code_5": "def cube_Sum(n):\n    return sum(x**3 for x in filter(lambda x: x % 2 != 0, range(1, 2*n)))", "code_6": "def cube_Sum(n):\n    return reduce(lambda x, y: x + y**3, range(1, 2*n, 2), 0)", "code_7": "def cube_Sum(n):\n    return sum(x**3 for x in itertools.islice(itertools.count(1, 2), n))", "code_8": "def cube_Sum(n):\n    return sum(x**3 for x in numpy.arange(1, 2*n, 2))", "code_9": "def cube_Sum(n):\n    return sum(x**3 for x in pandas.Series(range(1, 2*n, 2)))", "code_10": "def cube_Sum(n):\n    return sum(x**3 for x in dask.array.arange(1, 2*n, 2).compute())", "pass@3": 0.8333333333333334, "nDCG@10": 0.5388856921828066}
{"task_id": "MBPP/838", "prompt": "\n\ndef min_Swaps(s1,s2) :\n    \"\"\"\n    Write a python function to find minimum number swaps required to make two binary strings equal.\n    >>> min_Swaps(\"0011\",\"1111\")\n    1\n    >>> min_Swaps(\"00011\",\"01001\")\n    2\n    >>> min_Swaps(\"111\",\"111\")\n    0\n    \"\"\"\n", "solution": "      \n    c0 = 0; c1 = 0;  \n    for i in range(len(s1)) :  \n        if (s1[i] == '0' and s2[i] == '1') : \n            c0 += 1;    \n        elif (s1[i] == '1' and s2[i] == '0') : \n            c1 += 1;  \n    result = c0 // 2 + c1 // 2;  \n    if (c0 % 2 == 0 and c1 % 2 == 0) : \n        return result;  \n    elif ((c0 + c1) % 2 == 0) : \n        return result + 2;  \n    else : \n        return -1;  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_Swaps(s1, s2):\n    return sum(a != b for a, b in zip(s1, s2)) // 2", "code_2": "def min_Swaps(s1, s2):\n    return (sum(map(int, s1)) - sum(map(int, s2))) // 2", "code_3": "def min_Swaps(s1, s2):\n    return sum(c1 != c2 for c1, c2 in zip(s1, s2)) // 2", "code_4": "def min_Swaps(s1, s2):\n    return sum(a != b for a, b in zip(s1, s2)) >> 1", "code_5": "def min_Swaps(s1, s2):\n    return sum(c1 != c2 for c1, c2 in zip(s1, s2)) >> 1", "code_6": "def min_Swaps(s1, s2):\n    return sum(a != b for a, b in zip(s1, s2)) // 2", "code_7": "def min_Swaps(s1, s2):\n    return sum(c1 != c2 for c1, c2 in zip(s1, s2)) // 2", "code_8": "def min_Swaps(s1, s2):\n    return sum(a != b for a, b in zip(s1, s2)) >> 1", "code_9": "def min_Swaps(s1, s2):\n    return sum(c1 != c2 for c1, c2 in zip(s1, s2)) >> 1", "code_10": "def min_Swaps(s1, s2):\n    return sum(a != b for a, b in zip(s1, s2)) // 2", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/839", "prompt": "\n\ndef sort_tuple(tup):\n\t\"\"\"\n\tWrite a function to sort the tuples alphabetically by the first item of each tuple.\n\t>>> sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")])\n\t[('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n\t>>> sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")])\n\t[('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n\t>>> sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")])\n\t[('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n\t\"\"\"\n", "solution": "\t \n\tn = len(tup) \n\tfor i in range(n): \n\t\tfor j in range(n-i-1): \n\t\t\tif tup[j][0] > tup[j + 1][0]: \n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \n\treturn tup", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using `sorted` function with `key` parameter:\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[0])", "code_2": "Using `sort` method with `key` parameter:\ndef sort_tuple(tup):\n    tup.sort(key=lambda x: x[0])\n    return tup", "code_3": "Using `itemgetter` from `operator` module:\nfrom operator import itemgetter\ndef sort_tuple(tup):\n    return sorted(tup, key=itemgetter(0))", "code_4": "Using list comprehension with `sorted` function:\ndef sort_tuple(tup):\n    return [t for t in sorted(tup)]", "code_5": "Using list comprehension with `sort` method:\ndef sort_tuple(tup):\n    tup[:] = [t for t in sorted(tup)]\n    return tup", "code_6": "Using `heapq.nsmallest` function:\nimport heapq\ndef sort_tuple(tup):\n    return heapq.nsmallest(len(tup), tup, key=lambda x: x[0])", "code_7": "Using `functools.cmp_to_key` function:\nimport functools\ndef sort_tuple(tup):\n    return sorted(tup, key=functools.cmp_to_key(lambda x, y: (x > y) - (x < y)))", "code_8": "Using `numpy.sort` function:\nimport numpy as np\ndef sort_tuple(tup):\n    return np.sort(tup, order=['f0'])", "code_9": "Using `pandas.DataFrame.sort_values` method:\nimport pandas as pd\ndef sort_tuple(tup):\n    df = pd.DataFrame(tup)\n    df.sort_values(by=[0], inplace=True)\n    return list(df.itertuples(index=False, name=None))", "code_10": "Using `blist.sort` method:\nfrom blist import blist\ndef sort_tuple(tup):\n    tup = blist(tup)\n    tup.sort(key=lambda x: x[0])\n    return list(tup)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/840", "prompt": "\n\ndef Check_Solution(a,b,c):\n    \"\"\"\n    Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n    >>> Check_Solution(2,0,-1)\n    \"Yes\"\n    >>> Check_Solution(1,-5,6)\n    \"No\"\n    >>> Check_Solution(2,0,2)\n    \"Yes\"\n    \"\"\"\n", "solution": "      \n    if b == 0:  \n        return (\"Yes\")  \n    else: \n        return (\"No\")  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    elif d == 0:\n        return \"Yes\"\n    else:\n        r1, r2 = (-b + d**0.5) / (2*a), (-b - d**0.5) / (2*a)\n        return \"Yes\" if r1 + r2 == 0 else \"No\"", "code_2": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = (-b / (2*a))\n    return \"Yes\" if r**2 == a else \"No\"", "code_3": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or a / r == -r else \"No\"", "code_4": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or 1/r == -r else \"No\"", "code_5": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or -1/r == r else \"No\"", "code_6": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or -r**-1 == r else \"No\"", "code_7": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or r + 1/r == 0 else \"No\"", "code_8": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or r * -r == 1 else \"No\"", "code_9": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or r * -r == a else \"No\"", "code_10": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    if d < 0:\n        return \"No\"\n    r = -b / (2*a)\n    return \"Yes\" if r == 0 or r * -r == d / (4*a) else \"No\"", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/841", "prompt": "\n\ndef get_inv_count(arr, n):\n\t\"\"\"\n\tWrite a function to count the number of inversions in the given array.\n\t>>> get_inv_count([1, 20, 6, 4, 5], 5)\n\t5\n\t>>> get_inv_count([8, 4, 2, 1], 4)\n\t6\n\t>>> get_inv_count([3, 1, 2], 3)\n\t2\n\t\"\"\"\n", "solution": "\t \n\tinv_count = 0\n\tfor i in range(n): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] > arr[j]): \n\t\t\t\tinv_count += 1\n\treturn inv_count ", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 28, "code_1": "def get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "code_2": "def get_inv_count(arr, n):\n    return sum(arr[i] > arr[j] for i in range(n) for j in range(i + 1, n))", "code_3": "def get_inv_count(arr, n):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge", "code_4": "def merge(left, right):\n        merged = []\n        inv_count = 0\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count", "code_5": "_, inv_count = merge_sort(arr)\n    return inv_count", "code_6": "def get_inv_count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_7": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        return inv_count", "code_8": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_9": "def get_inv_count(arr, n):\n    class BIT:\n        def __init__(self, n):\n            self.size = n\n            self.tree = [0] * (n + 1)", "code_10": "def update(self, i, val):\n            while i <= self.size:\n                self.tree[i] += val\n                i += i & -i", "code_11": "def query(self, i):\n            res = 0\n            while i > 0:\n                res += self.tree[i]\n                i -= i & -i\n            return res", "code_12": "sorted_arr = sorted(arr)\n    index_map = {val: i for i, val in enumerate(sorted_arr, 1)}\n    bit = BIT(n)\n    inv_count = 0\n    for i in range(n - 1, -1, -1):\n        index = index_map[arr[i]]\n        inv_count += bit.query(index - 1)\n        bit.update(index, 1)\n    return inv_count", "code_13": "def get_inv_count(arr, n):\n    def build_segment_tree(arr, tree, low, high):\n        if low == high:\n            tree[low] = arr[low]\n            return\n        mid = (low + high) // 2\n        build_segment_tree(arr, tree, low, mid)\n        build_segment_tree(arr, tree, mid + 1, high)\n        tree[low] = tree[low] + tree[mid + 1]", "code_14": "def get_sum(tree, low, high, qs, qe):\n        if qs <= low and qe >= high:\n            return tree[low]\n        if qs > high or qe < low:\n            return 0\n        mid = (low + high) // 2\n        return get_sum(tree, low, mid, qs, qe) + get_sum(tree, mid + 1, high, qs, qe)", "code_15": "def update_value(tree, low, high, idx, val):\n        if low == high:\n            tree[low] = val\n            return\n        mid = (low + high) // 2\n        if idx <= mid:\n            update_value(tree, low, mid, idx, val)\n        else:\n            update_value(tree, mid + 1, high, idx, val)\n        tree[low] = tree[low] + tree[mid + 1]", "code_16": "sorted_arr = sorted(arr)\n    index_map = {val: i for i, val in enumerate(sorted_arr, 1)}\n    tree = [0] * (n + 1)\n    build_segment_tree(sorted_arr, tree, 1, n)\n    inv_count = 0\n    for i in range(n - 1, -1, -1):\n        index = index_map[arr[i]]\n        inv_count += get_sum(tree, 1, n, 1, index - 1)\n        update_value(tree, 1, n, index, 0)\n    return inv_count", "code_17": "def get_inv_count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_18": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        return inv_count", "code_19": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_20": "def get_inv_count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_21": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[left:right + 1] = temp[left:right + 1]\n        return inv_count", "code_22": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_23": "def get_inv_count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_24": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[left:right + 1] = temp[left:right + 1]\n        return inv_count", "code_25": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "code_26": "def get_inv_count(arr, n):\n    def merge_sort(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp, left, mid)\n            inv_count += merge_sort(arr, temp, mid + 1, right)\n            inv_count += merge(arr, temp, left, mid, right)\n        return inv_count", "code_27": "def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        arr[left:right + 1] = temp[left:right + 1]\n        return inv_count", "code_28": "temp = [0] * n\n    return merge_sort(arr, temp, 0, n - 1)", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/842", "prompt": "\n\ndef get_odd_occurence(arr, arr_size):\n  \"\"\"\n  Write a function to find the number which occurs for odd number of times in the given array.\n  >>> get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n  5\n  >>> get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)\n  3\n  >>> get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)\n  5\n  \"\"\"\n", "solution": "  \n  for i in range(0, arr_size):\n    count = 0\n    for j in range(0, arr_size):\n      if arr[i] == arr[j]:\n        count += 1\n    if (count % 2 != 0):\n      return arr[i]\n  return -1", "results": [1, 0, 0, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_odd_occurence(arr, arr_size):\n    res = 0\n    for i in arr:\n        res ^= i\n    return res", "code_2": "def get_odd_occurence(arr, arr_size):\n    return reduce(lambda x, y: x ^ y, arr)", "code_3": "def get_odd_occurence(arr, arr_size):\n    return functools.reduce(operator.xor, arr)", "code_4": "def get_odd_occurence(arr, arr_size):\n    return sum(set(arr), 0) * 2 - sum(arr)", "code_5": "def get_odd_occurence(arr, arr_size):\n    return [x for x in set(arr) if arr.count(x) % 2][0]", "code_6": "def get_odd_occurence(arr, arr_size):\n    return next(x for x in collections.Counter(arr) if x[1] % 2)", "code_7": "def get_odd_occurence(arr, arr_size):\n    return max(set(arr), key=arr.count) if arr.count(max(set(arr), key=arr.count)) % 2 else None", "code_8": "def get_odd_occurence(arr, arr_size):\n    return sorted(arr)[len(arr) // 2]", "code_9": "def get_odd_occurence(arr, arr_size):\n    return heapq.nsmallest(arr_size // 2 + 1, arr)[-1]", "code_10": "def get_odd_occurence(arr, arr_size):\n    return sorted(arr, key=arr.count)[-1]", "pass@3": 0.5333333333333333, "nDCG@10": 0.3052348839397012}
{"task_id": "MBPP/843", "prompt": "\n\ndef nth_super_ugly_number(n, primes):\n    \"\"\"\n    Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n    >>> nth_super_ugly_number(12,[2,7,13,19])\n    32\n    >>> nth_super_ugly_number(10,[2,7,13,19])\n    26\n    >>> nth_super_ugly_number(100,[2,7,13,19])\n    5408\n    \"\"\"\n", "solution": "    import heapq\n    \n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]", "code_2": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap, seen = [1], [], set()\n    for prime in primes:\n        heapq.heappush(heap, (prime, prime, 0))\n    for _ in range(n - 1):\n        ugly, prime, idx = heapq.heappop(heap)\n        uglies.append(ugly)\n        while heap and heap[0][0] == ugly:\n            _, prime, idx = heapq.heappop(heap)\n        while (next_ugly := uglies[idx + 1] * prime) in seen:\n            idx += 1\n        seen.add(next_ugly)\n        heapq.heappush(heap, (next_ugly, prime, idx + 1))\n    return uglies[-1]", "code_3": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, prime, 0) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, prime, idx = heapq.heappop(heap)\n        uglies.append(ugly)\n        while heap and heap[0][0] == ugly:\n            _, prime, idx = heapq.heappop(heap)\n        heapq.heappush(heap, (uglies[idx + 1] * prime, prime, idx + 1))\n    return uglies[-1]", "code_4": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, prime, 1) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, prime, idx = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        heapq.heappush(heap, (uglies[idx] * prime, prime, idx + 1))\n    return uglies[-1]", "code_5": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, 0, prime) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, idx, prime = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        heapq.heappush(heap, (uglies[idx + 1] * prime, idx + 1, prime))\n    return uglies[-1]", "code_6": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, 0) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, idx = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        heapq.heappush(heap, (uglies[idx + 1] * primes[len(uglies) - idx - 2], idx + 1))\n    return uglies[-1]", "code_7": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, 0) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, idx = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        heapq.heappush(heap, (uglies[idx + 1] * primes[idx], idx + 1))\n    return uglies[-1]", "code_8": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, 0) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, idx = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        heapq.heappush(heap, (uglies[idx + 1] * primes[idx], idx + 1))\n        if idx + 1 < len(primes) and heap[0][0] == uglies[-1] * primes[idx + 1]:\n            heapq.heappop(heap)\n    return uglies[-1]", "code_9": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, 0) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, idx = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        while heap and heap[0][0] == ugly:\n            _, idx = heapq.heappop(heap)\n        heapq.heappush(heap, (uglies[idx + 1] * primes[idx], idx + 1))\n    return uglies[-1]", "code_10": "import heapq\ndef nth_super_ugly_number(n, primes):\n    uglies, heap = [1], [(prime, 0) for prime in primes]\n    heapq.heapify(heap)\n    for _ in range(n - 1):\n        ugly, idx = heapq.heappop(heap)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n        while heap and heap[0][0] == ugly:\n            _, idx = heapq.heappop(heap)\n        heapq.heappush(heap, (uglies[idx + 1] * primes[idx], idx + 1))\n        if idx + 1 < len(primes) and heap[0][0] == uglies[-1] * primes[idx + 1]:\n            heapq.heappop(heap)\n    return uglies[-1]", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/844", "prompt": "\n\ndef get_Number(n, k):\n    \"\"\"\n    Write a python function to find the kth element in an array containing odd elements first and then even elements.\n    >>> get_Number(8,5)\n    2\n    >>> get_Number(7,2)\n    3\n    >>> get_Number(5,2)\n    3\n    \"\"\"\n", "solution": "     \n    arr = [0] * n; \n    i = 0; \n    odd = 1; \n    while (odd <= n):   \n        arr[i] = odd; \n        i += 1; \n        odd += 2;\n    even = 2; \n    while (even <= n): \n        arr[i] = even; \n        i += 1;\n        even += 2; \n    return arr[k - 1]; ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_Number(n, k):\n    return 2 * (k > n // 2) + 2 * (k - (n + 1) // 2)", "code_2": "def get_Number(n, k):\n    return 2 * (k > n - k + 1) + 2 * (k - (n - k + 1))", "code_3": "def get_Number(n, k):\n    return 2 * (k > (n + 1) // 2) + 2 * (k - 1 - (n - 1) // 2)", "code_4": "def get_Number(n, k):\n    return 2 * (k > n - (n - 1) // 2) + 2 * (k - 1 - (n + 1) // 2)", "code_5": "def get_Number(n, k):\n    return 2 * (k > n - (n + 1) // 2) + 2 * (k - 1 - n // 2)", "code_6": "def get_Number(n, k):\n    return 2 * (k > (n + 1) // 2) + 2 * (k - 1 - n // 2)", "code_7": "def get_Number(n, k):\n    return 2 * (k > n - (n + 1) // 2) + 2 * (k - 1 - (n + 1) // 2)", "code_8": "def get_Number(n, k):\n    return 2 * (k > (n + 1) // 2) + 2 * (k - 1 - (n - 1) // 2)", "code_9": "def get_Number(n, k):\n    return 2 * (k > n - (n - 1) // 2) + 2 * (k - 1 - n // 2)", "code_10": "def get_Number(n, k):\n    return 2 * (k > (n + 1) // 2) + 2 * (k - 1 - (n - 1) // 2)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/845", "prompt": "\n\ndef find_Digits(n):\n    \"\"\"\n    Write a python function to count the number of digits in factorial of a given number.\n    >>> find_Digits(7)\n    4\n    >>> find_Digits(5)\n    3\n    >>> find_Digits(4)\n    2\n    \"\"\"\n", "solution": "    import math \n     \n    if (n < 0): \n        return 0;\n    if (n <= 1): \n        return 1; \n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \n    return math.floor(x) + 1; ", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], "no_of_codes": 10, "code_1": "import math\ndef find_Digits(n): return len(str(math.factorial(n)))", "code_2": "def find_Digits(n):\n    f = 1\n    for i in range(1, n + 1): f *= i\n    return len(str(f))", "code_3": "from functools import reduce\nimport operator\ndef find_Digits(n): return len(str(reduce(operator.mul, range(1, n + 1), 1)))", "code_4": "def find_Digits(n):\n    f = 1\n    while n > 1: f *= n; n -= 1\n    return len(str(f))", "code_5": "def find_Digits(n):\n    f = 1\n    while n: f *= n; n -= 1\n    return len(str(f))", "code_6": "import numpy\ndef find_Digits(n): return len(str(numpy.prod(range(1, n + 1))))", "code_7": "def find_Digits(n):\n    f = 1\n    for i in range(2, n + 1): f *= i\n    return int(math.log10(f)) + 1", "code_8": "def find_Digits(n):\n    f = 1\n    for i in range(2, n + 1): f *= i\n    return len(str(f))", "code_9": "def find_Digits(n):\n    f = 1\n    for i in range(2, n + 1): f *= i\n    c = 0\n    while f: f //= 10; c += 1\n    return c", "code_10": "def find_Digits(n):\n    f = 1\n    for i in range(2, n + 1): f *= i\n    return int(math.log10(f)) + (f >= 10)", "pass@3": 1.0, "nDCG@10": 0.8630152897016883}
{"task_id": "MBPP/846", "prompt": "\n\ndef find_platform(arr, dep, n):\n    \"\"\"\n    Write a function to find the minimum number of platforms required for a railway/bus station.\n    >>> find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)\n    3\n    >>> find_platform([100,200,300,400],[700,800,900,1000],4)\n    4\n    >>> find_platform([5,6,7,8],[4,3,2,1],4)\n    1\n    \"\"\"\n", "solution": "     \n    arr.sort() \n    dep.sort() \n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n): \n        if (arr[i] <= dep[j]):           \n            plat_needed+= 1\n            i+= 1\n        elif (arr[i] > dep[j]):           \n            plat_needed-= 1\n            j+= 1\n        if (plat_needed > result):  \n            result = plat_needed           \n    return result", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        result = max(result, plat_needed)\n    return result", "code_2": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat = [1] * n\n    result = 1\n    for i in range(1, n):\n        plat[i] = 1\n        for j in range(i):\n            if arr[i] >= dep[j]:\n                plat[i] = max(plat[i], plat[j] + 1)\n        result = max(result, plat[i])\n    return result", "code_3": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    max_plat = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > max_plat:\n            max_plat = plat_needed\n    return max_plat", "code_4": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "code_5": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "code_6": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "code_7": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "code_8": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "code_9": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "code_10": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        else:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/847", "prompt": "\n\ndef lcopy(xs):\n  \"\"\"\n  Write a python function to copy a list from a singleton tuple.\n  >>> lcopy([1, 2, 3])\n  [1, 2, 3]\n  >>> lcopy([4, 8, 2, 10, 15, 18])\n  [4, 8, 2, 10, 15, 18]\n  >>> lcopy([4, 5, 6])\n  [4, 5, 6]\n  \"\"\"\n", "solution": "  \n  return xs[:]\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def lcopy(xs):\n  return xs[:]", "code_2": "def lcopy(xs):\n  return list(xs)", "code_3": "def lcopy(xs):\n  return [i for i in xs]", "code_4": "def lcopy(xs):\n  return [*xs]", "code_5": "def lcopy(xs):\n  return xs.copy()", "code_6": "import copy\ndef lcopy(xs):\n  return copy.copy(xs)", "code_7": "import copy\ndef lcopy(xs):\n  return copy.deepcopy(xs)", "code_8": "def lcopy(xs):\n  return eval(repr(xs))", "code_9": "def lcopy(xs):\n  return pickle.loads(pickle.dumps(xs))", "code_10": "def lcopy(xs):\n  return json.loads(json.dumps(xs))", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/848", "prompt": "\n\ndef area_trapezium(base1,base2,height):\n \"\"\"\n Write a function to find the area of a trapezium.\n >>> area_trapezium(6,9,4)\n 30\n >>> area_trapezium(10,20,30)\n 450\n >>> area_trapezium(15,25,35)\n 700\n \"\"\"\n", "solution": " \n area = 0.5 * (base1 + base2) * height\n return area", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def area_trapezium(b1, b2, h): return (b1 + b2) * h / 2", "code_2": "def area_trapezium(b1, b2, h): return 0.5 * (b1 + b2) * h", "code_3": "def area_trapezium(b1, b2, h): return 0.5 * h * (b1 + b2)", "code_4": "def area_trapezium(b1, b2, h): return 0.5 * (b1 + b2) * h", "code_5": "def area_trapezium(b1, b2, h): return (b1 + b2) / 2 * h", "code_6": "def area_trapezium(b1, b2, h): return (b1 + b2) * h * 0.5", "code_7": "def area_trapezium(b1, b2, h): return h * (b1 + b2) / 2", "code_8": "def area_trapezium(b1, b2, h): return h * 0.5 * (b1 + b2)", "code_9": "def area_trapezium(b1, b2, h): return (b1 + b2) * h / 2.0", "code_10": "def area_trapezium(b1, b2, h): return (b1 + b2) / 2.0 * h", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/849", "prompt": "\n\ndef Sum(N):\n    \"\"\"\n    Write a python function to find sum of all prime divisors of a given number.\n    >>> Sum(60)\n    10\n    >>> Sum(39)\n    16\n    >>> Sum(40)\n    7\n    \"\"\"\n", "solution": "     \n    SumOfPrimeDivisors = [0]*(N + 1)   \n    for i in range(2,N + 1) : \n        if (SumOfPrimeDivisors[i] == 0) : \n            for j in range(i,N + 1,i) : \n                SumOfPrimeDivisors[j] += i           \n    return SumOfPrimeDivisors[N] ", "results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def Sum(N):\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n    return sum(i for i in range(2, N) if N % i == 0 and is_prime(i))", "code_2": "def Sum(N):\n    primes = [True] * (N + 1)\n    p = 2\n    while p * p <= N:\n        if primes[p]:\n            for i in range(p * p, N + 1, p):\n                primes[i] = False\n        p += 1\n    return sum(i for i in range(2, N) if N % i == 0 and primes[i])", "code_3": "def Sum(N):\n    def prime_divisors(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                yield i\n        if n > 1:\n            yield n\n    return sum(prime_divisors(N))", "code_4": "def Sum(N):\n    def is_prime(n):\n        return all(n % i for i in range(2, int(n**0.5) + 1))\n    return sum(filter(is_prime, (i for i in range(2, N) if N % i == 0)))", "code_5": "def Sum(N):\n    def prime_divisors(n):\n        while n % 2 == 0:\n            yield 2\n            n //= 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                yield i\n                n //= i\n        if n > 2:\n            yield n\n    return sum(prime_divisors(N))", "code_6": "def Sum(N):\n    def prime_divisors(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                yield i\n                while n % i == 0:\n                    n //= i\n        if n > 1:\n            yield n\n    return sum(prime_divisors(N))", "code_7": "def Sum(N):\n    def is_prime(n):\n        return all(n % i for i in range(2, int(n**0.5) + 1))\n    return sum(i for i in range(2, N) if N % i == 0 and is_prime(i))", "code_8": "def Sum(N):\n    primes = [True] * (N + 1)\n    p = 2\n    while p * p <= N:\n        if primes[p]:\n            for i in range(p * p, N + 1, p):\n                primes[i] = False\n        p += 1\n    return sum(i for i in range(2, N) if N % i == 0 and primes[i])", "code_9": "def Sum(N):\n    def prime_divisors(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                yield i\n        if n > 1:\n            yield n\n    return sum(set(prime_divisors(N)))", "code_10": "def Sum(N):\n    def prime_divisors(n):\n        while n % 2 == 0:\n            yield 2\n            n //= 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                yield i\n                n //= i\n        if n > 2:\n            yield n\n    return sum(set(prime_divisors(N)))", "pass@3": 1.0, "nDCG@10": 0.8048109992093391}
{"task_id": "MBPP/850", "prompt": "\n\ndef is_triangleexists(a,b,c):\n    \"\"\"\n    Write a function to check if a triangle of positive area is possible with the given angles.\n    >>> is_triangleexists(50,60,70)\n    True\n    >>> is_triangleexists(90,45,45)\n    True\n    >>> is_triangleexists(150,30,70)\n    False\n    \"\"\"\n", "solution": "     \n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \n            return True \n        else:\n            return False\n    else:\n        return False", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def is_triangleexists(a,b,c):\n    return a + b + c == 180 and a < 180 and b < 180 and c < 180", "code_2": "def is_triangleexists(a,b,c):\n    return all(i < 180 for i in (a, b, c)) and sum((a, b, c)) == 180", "code_3": "def is_triangleexists(a,b,c):\n    return (a < 180) and (b < 180) and (c < 180) and (a + b + c == 180)", "code_4": "def is_triangleexists(a,b,c):\n    return (a < 180 and b < 180 and c < 180) and (a + b + c == 180)", "code_5": "def is_triangleexists(a,b,c):\n    return (a < 180) and (b < 180) and (c < 180) and not (a + b <= c)", "code_6": "def is_triangleexists(a,b,c):\n    return all(map(lambda x: x < 180, (a, b, c))) and sum((a, b, c)) == 180", "code_7": "def is_triangleexists(a,b,c):\n    return all(i < 180 for i in [a, b, c]) and sum([a, b, c]) == 180", "code_8": "def is_triangleexists(a,b,c):\n    return all(angle < 180 for angle in [a, b, c]) and sum([a, b, c]) == 180", "code_9": "def is_triangleexists(a,b,c):\n    return all(angle < 180 for angle in (a, b, c)) and a + b + c == 180", "code_10": "def is_triangleexists(a,b,c):\n    return all(i < 180 for i in (a, b, c)) and a + b > c and a + c > b and b + c > a", "pass@3": 1.0, "nDCG@10": 0.8512360941594275}
{"task_id": "MBPP/851", "prompt": "\n\ndef Sum_of_Inverse_Divisors(N,Sum):\n    \"\"\"\n    Write a python function to find sum of inverse of divisors.\n    >>> Sum_of_Inverse_Divisors(6,12)\n    2\n    >>> Sum_of_Inverse_Divisors(9,13)\n    1.44\n    >>> Sum_of_Inverse_Divisors(1,4)\n    4\n    \"\"\"\n", "solution": "     \n    ans = float(Sum)*1.0 /float(N);  \n    return round(ans,2); ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Sum_of_Inverse_Divisors(N, Sum):\n    for i in range(1, N + 1):\n        if N % i == 0:\n            Sum += 1 / i\n    return Sum", "code_2": "def Sum_of_Inverse_Divisors(N, Sum):\n    return sum(1 / i for i in range(1, N + 1) if N % i == 0) + Sum", "code_3": "def Sum_of_Inverse_Divisors(N, Sum):\n    return sum(1 / i for i in range(1, int(N**0.5) + 1) if N % i == 0) + sum(1 / (N // i) for i in range(1, int(N**0.5) + 1) if N % i == 0 and N // i != i) + Sum", "code_4": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 1\n    while i <= N:\n        if N % i == 0:\n            Sum += 1 / i\n        i += 1\n    return Sum", "code_5": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 1\n    while i * i <= N:\n        if N % i == 0:\n            if i * i == N:\n                Sum += 1 / i\n            else:\n                Sum += 1 / i + 1 / (N // i)\n        i += 1\n    return Sum", "code_6": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 2\n    while i * i <= N:\n        if N % i:\n            i += 1\n        else:\n            if i * (N // i) == N:\n                Sum += 1 / i\n            else:\n                Sum += 1 / i + 1 / (N // i)\n            i += 1\n    return Sum + 1 / N", "code_7": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 2\n    while i * i <= N:\n        if N % i:\n            i += 1\n        else:\n            if i == (N // i):\n                Sum += 1 / i\n            else:\n                Sum += 1 / i + 1 / (N // i)\n            i += 1\n    return Sum + 1", "code_8": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 2\n    while i * i <= N:\n        if N % i:\n            i += 1\n        else:\n            if i == (N // i):\n                Sum += 1 / i\n            else:\n                Sum += 1 / i + 1 / (N // i)\n            i += 1\n    return Sum + 1 if N != 1 else Sum", "code_9": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 2\n    while i * i <= N:\n        if N % i == 0:\n            if i == (N // i):\n                Sum += 1 / i\n            else:\n                Sum += 1 / i + 1 / (N // i)\n        i += 1\n    return Sum + 1 + (1 / N if N != 1 else 0)", "code_10": "def Sum_of_Inverse_Divisors(N, Sum):\n    i = 2\n    while i * i <= N:\n        if N % i == 0:\n            Sum += 1 / i\n            if i != N // i:\n                Sum += 1 / (N // i)\n        i += 1\n    return Sum + 1 + (1 / N if N != 1 else 0)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/852", "prompt": "\n\ndef remove_negs(num_list):\n    \"\"\"\n    Write a python function to remove negative numbers from a list.\n    >>> remove_negs([1,-2,3,-4])\n    [1,3]\n    >>> remove_negs([1,2,3,-4])\n    [1,2,3]\n    >>> remove_negs([4,5,-6,7,-8])\n    [4,5,7]\n    \"\"\"\n", "solution": "     \n    for item in num_list: \n        if item < 0: \n           num_list.remove(item) \n    return num_list", "results": [1, 1, 1, 1, 0, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_negs(num_list):\n    return [num for num in num_list if num >= 0]", "code_2": "def remove_negs(num_list):\n    return list(filter(lambda x: x >= 0, num_list))", "code_3": "def remove_negs(num_list):\n    return [num for num in num_list if not num < 0]", "code_4": "def remove_negs(num_list):\n    return [num for num in num_list if num > -1]", "code_5": "def remove_negs(num_list):\n    return [num for num in num_list if num + abs(num) == num]", "code_6": "def remove_negs(num_list):\n    return [num for num in num_list if num >> 31 == 0]", "code_7": "def remove_negs(num_list):\n    return [num for num in num_list if bin(num).count('1') % 2 == 0]", "code_8": "def remove_negs(num_list):\n    return [num for num in num_list if num.bit_length() == 32 or num >= 0]", "code_9": "def remove_negs(num_list):\n    return [num for num in num_list if not (num < 0 and num & (1 << 31))]", "code_10": "def remove_negs(num_list):\n    return [num for num in num_list if num >= 0 and num <= 2**31 - 1]", "pass@3": 1.0, "nDCG@10": 0.841492960259019}
{"task_id": "MBPP/853", "prompt": "\n\ndef sum_of_odd_Factors(n):\n    \"\"\"\n    Write a python function to find sum of odd factors of a number.\n    >>> sum_of_odd_Factors(30)\n    24\n    >>> sum_of_odd_Factors(18)\n    13\n    >>> sum_of_odd_Factors(2)\n    1\n    \"\"\"\n", "solution": "    import math\n     \n    res = 1\n    while n % 2 == 0: \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n) + 1)): \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0: \n            count+=1 \n            n = n // i \n            curr_term *= i \n            curr_sum += curr_term    \n        res *= curr_sum  \n    if n >= 2: \n        res *= (1 + n) \n    return res ", "results": [1, 1, 0, 0, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_of_odd_Factors(n):\n    s = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i % 2 != 0:\n                s += i\n            if i != n // i and (n // i) % 2 != 0:\n                s += n // i\n        i += 1\n    return s", "code_2": "def sum_of_odd_Factors(n):\n    return sum(i for i in range(1, int(n**0.5) + 1) if n % i == 0 and i % 2 != 0) + sum(n // i for i in range(1, int(n**0.5) + 1) if n % i == 0 and n // i % 2 != 0 and n // i != i)", "code_3": "def sum_of_odd_Factors(n):\n    i = 1\n    s = 0\n    while i * i <= n:\n        if n % i:\n            i += 2\n            continue\n        if i % 2:\n            s += i\n        j = n // i\n        if i != j and j % 2:\n            s += j\n        i += 2\n    return s", "code_4": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            if i % 2:\n                s += i\n            if i != n // i and (n // i) % 2:\n                s += n // i\n        i += 2\n    return s", "code_5": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            s += i if i % 2 else 0\n            if i != n // i:\n                s += n // i if (n // i) % 2 else 0\n        i += 1\n    return s", "code_6": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            s += i + (n // i if i != n // i and (n // i) % 2 else 0)\n        i += 2\n    return s if n % 2 else s - n", "code_7": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            s += i if i % 2 else 0\n            j = n // i\n            if i != j:\n                s += j if j % 2 else 0\n        i += 2\n    return s", "code_8": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            s += i + (n // i if i != n // i and (n // i) % 2 else 0)\n        i += 1 if i == 1 else 2\n    return s", "code_9": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            s += i if i % 2 else 0\n            j = n // i\n            if i != j:\n                s += j if j % 2 else 0\n        i += 1 if i == 1 else 2\n    return s", "code_10": "def sum_of_odd_Factors(n):\n    i, s = 1, 0\n    while i * i <= n:\n        if n % i == 0:\n            s += i + (n // i if i != n // i and (n // i) % 2 else 0)\n        i += 1 if i == 1 else 2\n    return s if n % 2 else s - n", "pass@3": 0.7083333333333333, "nDCG@10": 0.44409732781325584}
{"task_id": "MBPP/854", "prompt": "\n\ndef raw_heap(rawheap):\n  \"\"\"\n  Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n  >>> raw_heap([25, 44, 68, 21, 39, 23, 89])\n  [21, 25, 23, 44, 39, 68, 89]\n  >>> raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])\n  [14, 25, 22, 25, 35, 65, 75, 85, 58]\n  >>> raw_heap([4, 5, 6, 2])\n  [2, 4, 6, 5]\n  \"\"\"\n", "solution": "  import heapq as hq\n  \n  hq.heapify(rawheap)\n  return rawheap", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import heapq\ndef raw_heap(rawheap):\n  heapq.heapify(rawheap)\n  return rawheap", "code_2": "import heapq\ndef raw_heap(rawheap):\n  return [heapq.heappushpop(rawheap, i) for i in rawheap]", "code_3": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return heap", "code_4": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return [heapq.heappop(heap) for _ in range(len(heap))]", "code_5": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return sorted(heap)", "code_6": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return list(heapq.nsmallest(len(heap), heap))", "code_7": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return [heapq.heappop(heap) for _ in range(len(heap))][::-1]", "code_8": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, -i)\n  return [-heapq.heappop(heap) for _ in range(len(heap))]", "code_9": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return list(reversed([heapq.heappop(heap) for _ in range(len(heap))]))", "code_10": "import heapq\ndef raw_heap(rawheap):\n  heap = []\n  for i in rawheap:\n    heapq.heappush(heap, i)\n  return list(map(heapq.heappop, [heap]*len(heap)))", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/855", "prompt": "\n\ndef check_Even_Parity(x):\n    \"\"\"\n    Write a python function to check for even parity of a given number.\n    >>> check_Even_Parity(10)\n    True\n    >>> check_Even_Parity(11)\n    False\n    >>> check_Even_Parity(18)\n    True\n    \"\"\"\n", "solution": "     \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    if (parity % 2 == 0): \n        return True\n    else: \n        return False", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_Even_Parity(x):\n    return bin(x).count('1') % 2 == 0", "code_2": "def check_Even_Parity(x):\n    return sum(int(i) for i in bin(x)[2:]) % 2 == 0", "code_3": "def check_Even_Parity(x):\n    return f'{x:b}'.count('1') % 2 == 0", "code_4": "def check_Even_Parity(x):\n    return sum(map(int, f'{x:b}')) % 2 == 0", "code_5": "def check_Even_Parity(x):\n    return bin(x).count('1') & 1 == 0", "code_6": "def check_Even_Parity(x):\n    return sum(map(int, bin(x)[2:])) & 1 == 0", "code_7": "def check_Even_Parity(x):\n    return f'{x:b}'.count('1') & 1 == 0", "code_8": "def check_Even_Parity(x):\n    return sum(map(int, f'{x:b}')) & 1 == 0", "code_9": "def check_Even_Parity(x):\n    return bin(x).count('1') % 2 == 0", "code_10": "def check_Even_Parity(x):\n    return sum(int(i) for i in bin(x)[2:]) % 2 == 0", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/856", "prompt": "\n\ndef find_Min_Swaps(arr,n) :\n    \"\"\"\n    Write a python function to find minimum adjacent swaps required to sort binary array.\n    >>> find_Min_Swaps([1,0,1,0],4)\n    3\n    >>> find_Min_Swaps([0,1,0],3)\n    1\n    >>> find_Min_Swaps([0,0,1,1,0],5)\n    2\n    \"\"\"\n", "solution": "     \n    noOfZeroes = [0] * n \n    count = 0 \n    noOfZeroes[n - 1] = 1 - arr[n - 1] \n    for i in range(n-2,-1,-1) : \n        noOfZeroes[i] = noOfZeroes[i + 1] \n        if (arr[i] == 0) : \n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0,n) : \n        if (arr[i] == 1) : \n            count = count + noOfZeroes[i] \n    return count ", "results": [0, 1, 1, 1, 0, 0, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    for i in range(count):\n        if arr[i] == 1:\n            arr[i], arr[count] = arr[count], arr[i]\n            swaps += 1\n            count += 1\n    return swaps", "code_2": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    for i in range(n):\n        if i < count and arr[i] == 1:\n            swaps += count - i\n            count += 1\n    return swaps", "code_3": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n        else:\n            count -= 1\n    return swaps", "code_4": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count -= 1\n        elif count > 0:\n            swaps += count\n    return swaps", "code_5": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n        else:\n            count -= 1\n            swaps -= count\n    return swaps", "code_6": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n        else:\n            count -= 1\n            swaps = min(swaps, count)\n    return swaps", "code_7": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    min_swaps = count\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n        else:\n            count -= 1\n            min_swaps = min(min_swaps, count)\n    return swaps - min_swaps", "code_8": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    min_swaps = count\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n            min_swaps = min(min_swaps, swaps)\n        else:\n            count -= 1\n    return swaps - min_swaps", "code_9": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    min_swaps = count\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n        else:\n            count -= 1\n        min_swaps = min(min_swaps, swaps)\n    return swaps - min_swaps", "code_10": "def find_Min_Swaps(arr,n):\n    count = arr.count(0)\n    swaps = 0\n    min_swaps = count\n    for i in range(n):\n        if arr[i] == 1:\n            swaps += count\n        else:\n            count -= 1\n        min_swaps = min(min_swaps, swaps - count)\n    return min_swaps", "pass@3": 0.8333333333333334, "nDCG@10": 0.4170606134915055}
{"task_id": "MBPP/857", "prompt": "\n\ndef listify_list(list1):\n  \"\"\"\n  Write a function to list out the list of given strings individually using map function.\n  >>> listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])\n  [['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n  >>> listify_list(['python'])\n  [['p', 'y', 't', 'h', 'o', 'n']]\n  >>> listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])\n  [[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n  \"\"\"\n", "solution": "  \n  result = list(map(list,list1)) \n  return result ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def listify_list(list1):\n    return list(map(list, list1))", "code_2": "def listify_list(list1):\n    return [list(word) for word in list1]", "code_3": "def listify_list(list1):\n    return [[char for char in word] for word in list1]", "code_4": "def listify_list(list1):\n    return [list(word) for word in map(str, list1)]", "code_5": "def listify_list(list1):\n    return [list(word) for word in map(lambda x: str(x), list1)]", "code_6": "def listify_list(list1):\n    return [list(word) for word in filter(None, list1)]", "code_7": "def listify_list(list1):\n    return [list(word) for word in list1 if word]", "code_8": "def listify_list(list1):\n    return [list(word) for word in list1 if isinstance(word, str)]", "code_9": "def listify_list(list1):\n    return [list(word) for word in list1 if type(word) == str]", "code_10": "def listify_list(list1):\n    return [list(word) for word in list1 if isinstance(word, str) and word]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/858", "prompt": "\n\ndef count_list(input_list):\n    \"\"\"\n    Write a function to count number of lists in a given list of lists and square the count.\n    >>> count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    25\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )\n    16\n    >>> count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])\n    9\n    \"\"\"\n", "solution": "     \n    return (len(input_list))**2", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_list(input_list):\n    return len([i for i in input_list if isinstance(i, list)]) ** 2", "code_2": "def count_list(input_list):\n    return sum(isinstance(i, list) for i in input_list) ** 2", "code_3": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count ** 2", "code_4": "def count_list(input_list):\n    return sum(map(lambda x: isinstance(x, list), input_list)) ** 2", "code_5": "def count_list(input_list):\n    return (len(filter(lambda x: isinstance(x, list), input_list))) ** 2", "code_6": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        count += isinstance(i, list)\n    return count ** 2", "code_7": "def count_list(input_list):\n    return sum(1 for i in input_list if type(i) == list) ** 2", "code_8": "def count_list(input_list):\n    return len([i for i in input_list if type(i) is list]) ** 2", "code_9": "def count_list(input_list):\n    return sum(type(i) == list for i in input_list) ** 2", "code_10": "def count_list(input_list):\n    return len(list(filter(lambda x: type(x) == list, input_list))) ** 2", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/859", "prompt": "\n\ndef sub_lists(my_list):\n\t\"\"\"\n\tWrite a function to generate all sublists of a given list.\n\t>>> sub_lists([10, 20, 30, 40])\n\t[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n\t>>> sub_lists(['X', 'Y', 'Z'])\n\t[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n\t>>> sub_lists([1,2,3])\n\t[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n\t\"\"\"\n", "solution": "\tfrom itertools import combinations\n\t\n\tsubs = []\n\tfor i in range(0, len(my_list)+1):\n\t  temp = [list(x) for x in combinations(my_list, i)]\n\t  if len(temp)>0:\n\t    subs.extend(temp)\n\treturn subs", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1)]", "code_2": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if i != j]", "code_3": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if i < j]", "code_4": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if i <= j]", "code_5": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if i < j and my_list[i:j]]", "code_6": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if my_list[i:j]]", "code_7": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if i < j and len(my_list[i:j]) > 0]", "code_8": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if len(my_list[i:j]) > 0]", "code_9": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if my_list[i:j] != []]", "code_10": "def sub_lists(my_list):\n    return [my_list[i:j] for i in range(len(my_list)+1) for j in range(i+1, len(my_list)+1) if len(my_list[i:j])]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/860", "prompt": "\n\ndef check_alphanumeric(string):\n\t\"\"\"\n\tWrite a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n\t>>> check_alphanumeric(\"dawood@\")\n\t'Discard'\n\t>>> check_alphanumeric(\"skdmsam326\")\n\t'Accept'\n\t>>> check_alphanumeric(\"cooltricks@\")\n\t'Discard'\n\t\"\"\"\n", "solution": "\timport re \n\tregex = '[a-zA-z0-9]$'\n\t \n\tif(re.search(regex, string)): \n\t\treturn (\"Accept\") \n\telse: \n\t\treturn (\"Discard\") ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef check_alphanumeric(string):\n    return 'Accept' if re.match(r'.*[a-zA-Z0-9]$', string) else 'Discard'", "code_2": "import re\ndef check_alphanumeric(string):\n    return 'Accept' if re.search(r'[a-zA-Z0-9]$', string) else 'Discard'", "code_3": "import re\ndef check_alphanumeric(string):\n    return 'Accept' if string[-1].isalnum() else 'Discard'", "code_4": "import re\ndef check_alphanumeric(string):\n    return 'Accept' if string[-1].isalpha() or string[-1].isdigit() else 'Discard'", "code_5": "def check_alphanumeric(string):\n    return 'Accept' if string[-1].isascii() and string[-1].isalnum() else 'Discard'", "code_6": "def check_alphanumeric(string):\n    return 'Accept' if string[-1].isascii() and (string[-1].isalpha() or string[-1].isdigit()) else 'Discard'", "code_7": "def check_alphanumeric(string):\n    return 'Accept' if string[-1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' else 'Discard'", "code_8": "def check_alphanumeric(string):\n    return 'Accept' if string[-1].lower() in 'abcdefghijklmnopqrstuvwxyz0123456789' else 'Discard'", "code_9": "def check_alphanumeric(string):\n    return 'Accept' if string[-1] in set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') else 'Discard'", "code_10": "def check_alphanumeric(string):\n    return 'Accept' if string[-1] in set('abcdefghijklmnopqrstuvwxyz0123456789') or string[-1] in set('ABCDEFGHIJKLMNOPQRSTUVWXYZ') else 'Discard'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/861", "prompt": "\n\ndef anagram_lambda(texts,str):\n  \"\"\"\n  Write a function to find all anagrams of a string in a given list of strings using lambda function.\n  >>> anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")\n  ['bcda', 'cbda', 'adcb']\n  >>> anagram_lambda([\"recitals\",\" python\"], \"articles\" )\n  [\"recitals\"]\n  >>> anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")\n  [\" keep\"]\n  \"\"\"\n", "solution": "  from collections import Counter \n  \n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \n  return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "anagram_lambda = lambda texts, str: [text for text in texts if sorted(text) == sorted(str)]", "code_2": "anagram_lambda = lambda texts, str: list(filter(lambda text: sorted(text) == sorted(str), texts))", "code_3": "from collections import Counter\nanagram_lambda = lambda texts, str: [text for text in texts if Counter(text) == Counter(str)]", "code_4": "anagram_lambda = lambda texts, str: [text for text in texts if set(text) == set(str)]", "code_5": "anagram_lambda = lambda texts, str: [text for text in texts if len(text) == len(str) and all(text.count(c) == str.count(c) for c in text)]", "code_6": "anagram_lambda = lambda texts, str: [text for text in texts if len(set(text) ^ set(str)) == 0]", "code_7": "from functools import reduce\nanagram_lambda = lambda texts, str: [text for text in texts if reduce(lambda x, y: x and y, map(lambda c: text.count(c) == str.count(c), text))]", "code_8": "anagram_lambda = lambda texts, str: [text for text in texts if sum(map(lambda c: abs(text.count(c) - str.count(c)), set(text))) == 0]", "code_9": "anagram_lambda = lambda texts, str: [text for text in texts if all(map(lambda c: text.count(c) == str.count(c), set(text)))]", "code_10": "anagram_lambda = lambda texts, str: [text for text in texts if all(map(lambda c: text.count(c) == str.count(c), set(text + str)))]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/862", "prompt": "\n\ndef n_common_words(text,n):\n  \"\"\"\n  Write a function to find the occurrences of n most common words in a given text.\n  >>> n_common_words(\"python is a programming language\",1)\n  [('python', 1)]\n  >>> n_common_words(\"python is a programming language\",1)\n  [('python', 1)]\n  >>> n_common_words(\"python is a programming language\",5)\n  [('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n  \"\"\"\n", "solution": "  from collections import Counter\n  import re\n  \n  words = re.findall('\\w+',text)\n  n_common_words= Counter(words).most_common(n)\n  return list(n_common_words)", "results": [1, 1, 1, 1, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from collections import Counter\ndef n_common_words(text, n):\n    return Counter(text.split()).most_common(n)", "code_2": "import re\nfrom heapq import nlargest\nfrom collections import Counter\ndef n_common_words(text, n):\n    words = re.findall(r'\\w+', text.lower())\n    return nlargest(n, Counter(words).items(), key=lambda x: x[1])", "code_3": "from collections import defaultdict\ndef n_common_words(text, n):\n    word_count = defaultdict(int)\n    for word in text.split():\n        word_count[word] += 1\n    return sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:n]", "code_4": "import operator\ndef n_common_words(text, n):\n    word_count = {}\n    for word in text.split():\n        word_count[word] = word_count.get(word, 0) + 1\n    return sorted(word_count.items(), key=operator.itemgetter(1), reverse=True)[:n]", "code_5": "from collections import Counter\nimport heapq\ndef n_common_words(text, n):\n    word_count = Counter(text.split())\n    return heapq.nlargest(n, word_count.items(), key=lambda x: x[1])", "code_6": "from collections import Counter\ndef n_common_words(text, n):\n    word_count = Counter(text.split())\n    return sorted(word_count.items(), key=lambda x: (-x[1], x[0]))[:n]", "code_7": "from collections import Counter\ndef n_common_words(text, n):\n    word_count = Counter(text.split())\n    return sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:n]", "code_8": "from collections import Counter\ndef n_common_words(text, n):\n    word_count = Counter(text.split())\n    return word_count.most_common(n)", "code_9": "from collections import Counter\ndef n_common_words(text, n):\n    return Counter(text.split()).most_common(n)", "code_10": "from collections import Counter\ndef n_common_words(text, n):\n    word_count = Counter(text.split())\n    return sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:n]", "pass@3": 1.0, "nDCG@10": 0.9216017310213247}
{"task_id": "MBPP/863", "prompt": "\n\ndef find_longest_conseq_subseq(arr, n):\n\t\"\"\"\n\tWrite a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n\t>>> find_longest_conseq_subseq([1, 2, 2, 3], 4)\n\t3\n\t>>> find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)\n\t4\n\t>>> find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n\t5\n\t\"\"\"\n", "solution": "\t \n\tans = 0\n\tcount = 0\n\tarr.sort() \n\tv = [] \n\tv.append(arr[0]) \n\tfor i in range(1, n): \n\t\tif (arr[i] != arr[i - 1]): \n\t\t\tv.append(arr[i]) \n\tfor i in range(len(v)): \n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \n\t\t\tcount += 1\n\t\telse: \n\t\t\tcount = 1\n\t\tans = max(ans, count) \n\treturn ans ", "results": [1, 1, 0, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in range(n):\n        if (arr[i]-1) not in s:\n            j = arr[i]\n            while(j in s):\n                j += 1\n            ans = max(ans, j - arr[i])\n    return ans", "code_2": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in s:\n        if (i-1) not in s:\n            j = i\n            while(j in s):\n                j += 1\n            ans = max(ans, j - i)\n    return ans", "code_3": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in range(min(s), max(s)+1):\n        if i not in s:\n            ans = max(ans, len(range(i-1, max(s)+1) - set(range(i-1, max(s)+1)) - {i}))\n    return ans", "code_4": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in s:\n        if (i-1) not in s:\n            j = i\n            while(j in s):\n                j += 1\n            ans = max(ans, j - i)\n    return ans", "code_5": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in range(n):\n        if (arr[i]-1) not in s:\n            j = arr[i]\n            while(j in s):\n                j += 1\n            ans = max(ans, j - arr[i])\n    return ans", "code_6": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in s:\n        if (i-1) not in s:\n            j = i\n            while(j in s):\n                j += 1\n            ans = max(ans, j - i)\n    return ans", "code_7": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in range(min(s), max(s)+1):\n        if i not in s:\n            ans = max(ans, len(range(i-1, max(s)+1) - set(range(i-1, max(s)+1)) - {i}))\n    return ans", "code_8": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in s:\n        if (i-1) not in s:\n            j = i\n            while(j in s):\n                j += 1\n            ans = max(ans, j - i)\n    return ans", "code_9": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in range(n):\n        if (arr[i]-1) not in s:\n            j = arr[i]\n            while(j in s):\n                j += 1\n            ans = max(ans, j - arr[i])\n    return ans", "code_10": "def find_longest_conseq_subseq(arr, n):\n    s = set(arr)\n    ans = 0\n    for i in s:\n        if (i-1) not in s:\n            j = i\n            while(j in s):\n                j += 1\n            ans = max(ans, j - i)\n    return ans", "pass@3": 1.0, "nDCG@10": 0.8165901947515999}
{"task_id": "MBPP/864", "prompt": "\n\ndef palindrome_lambda(texts):\n  \"\"\"\n  Write a function to find palindromes in a given list of strings using lambda function.\n  >>> palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n  ['php', 'aaa']\n  >>> palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n  ['abba', 'aba']\n  >>> palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n  ['abbccbba', 'abba', 'aba']\n  \"\"\"\n", "solution": "  \n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n  return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "palindrome_lambda = lambda texts: [text for text in texts if text == text[::-1]]", "code_2": "palindrome_lambda = lambda texts: list(filter(lambda text: text == text[::-1], texts))", "code_3": "palindrome_lambda = lambda texts: [text for text in texts if all(text[i] == text[-i-1] for i in range(len(text)//2))]", "code_4": "palindrome_lambda = lambda texts: list(filter(lambda text: all(text[i] == text[-i-1] for i in range(len(text)//2)), texts))", "code_5": "palindrome_lambda = lambda texts: [text for text in texts if text == ''.join(reversed(text))]", "code_6": "palindrome_lambda = lambda texts: list(filter(lambda text: text == ''.join(reversed(text)), texts))", "code_7": "palindrome_lambda = lambda texts: [text for text in texts if text == ''.join([text[i] for i in range(len(text)-1, -1, -1)])]", "code_8": "palindrome_lambda = lambda texts: list(filter(lambda text: text == ''.join([text[i] for i in range(len(text)-1, -1, -1)]), texts))", "code_9": "palindrome_lambda = lambda texts: [text for text in texts if all(text[i] == text[~i] for i in range(len(text)//2))]", "code_10": "palindrome_lambda = lambda texts: list(filter(lambda text: all(text[i] == text[~i] for i in range(len(text)//2)), texts))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/865", "prompt": "\n\ndef ntimes_list(nums,n):\n    \"\"\"\n    Write a function to print n-times a list using map function.\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],3)\n    [3, 6, 9, 12, 15, 18, 21]\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],4)\n    [4, 8, 12, 16, 20, 24, 28]\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7],10)\n    [10, 20, 30, 40, 50, 60, 70]\n    \"\"\"\n", "solution": "    \n    result = map(lambda x:n*x, nums) \n    return list(result)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def ntimes_list(nums, n):\n    return list(map(lambda x: x * n, nums))", "code_2": "def ntimes_list(nums, n):\n    return [i * n for i in nums]", "code_3": "def ntimes_list(nums, n):\n    return [n * x for x in nums]", "code_4": "def ntimes_list(nums, n):\n    return [x * n for x in nums]", "code_5": "def ntimes_list(nums, n):\n    return [n * i for i in nums]", "code_6": "def ntimes_list(nums, n):\n    return [i * n for i in nums]", "code_7": "def ntimes_list(nums, n):\n    return [x * n for x in nums]", "code_8": "def ntimes_list(nums, n):\n    return [i * n for i in nums]", "code_9": "def ntimes_list(nums, n):\n    return [x * n for x in nums]", "code_10": "def ntimes_list(nums, n):\n    return [i * n for i in nums]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/866", "prompt": "\n\ndef check_monthnumb(monthname2):\n  \"\"\"\n  Write a function to check whether the given month name contains 31 days or not.\n  >>> check_monthnumb(\"February\")\n  False\n  >>> check_monthnumb(\"January\")\n  True\n  >>> check_monthnumb(\"March\")\n  True\n  \"\"\"\n", "solution": "  \n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\n    return True\n  else:\n    return False", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_monthnumb(monthname2):\n    return monthname2 in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]", "code_2": "def check_monthnumb(monthname2):\n    return monthname2 not in [\"April\", \"June\", \"September\", \"November\", \"February\"]", "code_3": "def check_monthnumb(monthname2):\n    return len(monthname2) == 7 or monthname2 == \"January\"", "code_4": "def check_monthnumb(monthname2):\n    return monthname2[-1] != \"y\" and monthname2[-1] != \"r\"", "code_5": "def check_monthnumb(monthname2):\n    return monthname2[0] not in [\"A\", \"S\"]", "code_6": "def check_monthnumb(monthname2):\n    return monthname2[2] != \"p\" and monthname2[2] != \"n\"", "code_7": "def check_monthnumb(monthname2):\n    return monthname2.endswith((\"uary\", \"ch\", \"ber\"))", "code_8": "def check_monthnumb(monthname2):\n    return monthname2.count(\"u\") + monthname2.count(\"r\") < 2", "code_9": "def check_monthnumb(monthname2):\n    return sum(1 for c in monthname2 if c in \"ur\") < 2", "code_10": "def check_monthnumb(monthname2):\n    return not any(c in \"ur\" for c in monthname2)", "pass@3": 0.5333333333333333, "nDCG@10": 0.35895421017163476}
{"task_id": "MBPP/867", "prompt": "\n\ndef min_Num(arr,n):\n    \"\"\"\n    Write a python function to add a minimum number such that the sum of array becomes even.\n    >>> min_Num([1,2,3,4,5,6,7,8,9],9)\n    1\n    >>> min_Num([1,2,3,4,5,6,7,8],8)\n    2\n    >>> min_Num([1,2,3],3)\n    2\n    \"\"\"\n", "solution": "      \n    odd = 0\n    for i in range(n): \n        if (arr[i] % 2): \n            odd += 1 \n    if (odd % 2): \n        return 1\n    return 2", "results": [1, 1, 1, 1, 1, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def min_Num(arr, n):\n    return 1 if sum(arr) % 2 else 2", "code_2": "def min_Num(arr, n):\n    return 2 - sum(arr) % 2", "code_3": "def min_Num(arr, n):\n    return [2, 1][sum(arr) % 2]", "code_4": "def min_Num(arr, n):\n    return [1, 2][sum(arr) % 2 == 0]", "code_5": "def min_Num(arr, n):\n    return 1 + (sum(arr) % 2 == 0)", "code_6": "def min_Num(arr, n):\n    return (sum(arr) & 1) ^ 1", "code_7": "def min_Num(arr, n):\n    return 1 if sum(arr) & 1 else 2", "code_8": "def min_Num(arr, n):\n    return 2 if sum(arr) % 2 == 0 else 1", "code_9": "def min_Num(arr, n):\n    return [1, 2][sum(arr) % 2]", "code_10": "def min_Num(arr, n):\n    return 1 if sum(arr) & 1 == 0 else 2", "pass@3": 0.9916666666666667, "nDCG@10": 0.791726719367984}
{"task_id": "MBPP/868", "prompt": "\n\ndef length_Of_Last_Word(a):\n    \"\"\"\n    Write a python function to find the length of the last word in a given string.\n    >>> length_Of_Last_Word(\"python language\")\n    8\n    >>> length_Of_Last_Word(\"PHP\")\n    3\n    >>> length_Of_Last_Word(\"\")\n    0\n    \"\"\"\n", "solution": "     \n    l = 0\n    x = a.strip() \n    for i in range(len(x)): \n        if x[i] == \" \": \n            l = 0\n        else: \n            l += 1\n    return l ", "results": [1, 1, 1, 0, 1, 1, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def length_Of_Last_Word(a): return len(a.strip().split(' ')[-1])", "code_2": "def length_Of_Last_Word(a):\n    i = len(a) - 1\n    while i >= 0 and a[i] == ' ': i -= 1\n    end = i\n    while i >= 0 and a[i] != ' ': i -= 1\n    return end - i", "code_3": "def length_Of_Last_Word(a):\n    words = a.split()\n    return len(words[-1]) if words else 0", "code_4": "def length_Of_Last_Word(a):\n    a = a.rstrip()\n    return a.find(' ')+1 if ' ' in a else len(a)", "code_5": "def length_Of_Last_Word(a):\n    a = a.strip()\n    return len(a) - a.rfind(' ') - 1 if ' ' in a else len(a)", "code_6": "def length_Of_Last_Word(a):\n    a = a.strip()\n    return len(a) - a.rindex(' ') - 1 if ' ' in a else len(a)", "code_7": "def length_Of_Last_Word(a):\n    a = a.strip()\n    return len(a) - a[::-1].find(' ') - 1 if ' ' in a else len(a)", "code_8": "def length_Of_Last_Word(a):\n    a = a.strip()\n    return len(a) - a[::-1].index(' ') - 1 if ' ' in a else len(a)", "code_9": "def length_Of_Last_Word(a):\n    a = a.strip()\n    return len(next(reversed(a.split(' ')), ''))", "code_10": "def length_Of_Last_Word(a):\n    a = a.strip()\n    return len(a.split(' ')[-1]) if a else 0", "pass@3": 0.9916666666666667, "nDCG@10": 0.7624164915943119}
{"task_id": "MBPP/869", "prompt": "\n\ndef remove_list_range(list1, leftrange, rigthrange):\n   \"\"\"\n   Write a function to remove sublists from a given list of lists, which are outside a given range.\n   >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)\n   [[13, 14, 15, 17]]\n   >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)\n   [[2], [1, 2, 3]]\n   >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)\n   [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n   \"\"\"\n", "solution": "   \n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\n   return result", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if any(l <= x <= r for x in sub)]", "code_2": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if min(sub) <= r and max(sub) >= l]", "code_3": "def remove_list_range(lst, l, r):\n    return list(filter(lambda sub: any(l <= x <= r for x in sub), lst))", "code_4": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if set(sub) & set(range(l, r+1))]", "code_5": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if len(set(sub) - set(range(l, r+1))) < len(sub)]", "code_6": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if sum(l <= x <= r for x in sub) > 0]", "code_7": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if all(x < l or x > r for x in sub) == False]", "code_8": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if not all(x < l or x > r for x in sub)]", "code_9": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if not all(x < l for x in sub) and not all(x > r for x in sub)]", "code_10": "def remove_list_range(lst, l, r):\n    return [sub for sub in lst if not (max(sub) < l or min(sub) > r)]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/870", "prompt": "\n\ndef sum_positivenum(nums):\n  \"\"\"\n  Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n  >>> sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n  48\n  >>> sum_positivenum([10,15,-14,13,-18,12,-20])\n  50\n  >>> sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])\n  522\n  \"\"\"\n", "solution": "  \n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\n  return sum(sum_positivenum)", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "sum_positivenum = lambda nums: sum(filter(lambda x: x > 0, nums))", "code_2": "sum_positivenum = lambda nums: sum(x for x in nums if x > 0)", "code_3": "sum_positivenum = lambda nums: sum(map(lambda x: x if x > 0 else 0, nums))", "code_4": "sum_positivenum = lambda nums: reduce(lambda a, b: a + b if b > 0 else a, nums, 0)", "code_5": "sum_positivenum = lambda nums: sum(i for i in nums if i > 0)", "code_6": "sum_positivenum = lambda nums: sum(i for i in nums if i > 0)", "code_7": "sum_positivenum = lambda nums: sum(i for i in nums if i > 0)", "code_8": "sum_positivenum = lambda nums: sum(i for i in nums if i > 0)", "code_9": "sum_positivenum = lambda nums: sum(i for i in nums if i > 0)", "code_10": "sum_positivenum = lambda nums: sum(i for i in nums if i > 0)", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/871", "prompt": "\n\ndef are_Rotations(string1,string2):\n    \"\"\"\n    Write a python function to check whether the given strings are rotations of each other or not.\n    >>> are_Rotations(\"abc\",\"cba\")\n    False\n    >>> are_Rotations(\"abcd\",\"cdba\")\n    False\n    >>> are_Rotations(\"abacd\",\"cdaba\")\n    True\n    \"\"\"\n", "solution": "     \n    size1 = len(string1) \n    size2 = len(string2) \n    temp = '' \n    if size1 != size2: \n        return False\n    temp = string1 + string1 \n    if (temp.count(string2)> 0): \n        return True\n    else: \n        return False", "results": [1, 1, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def are_Rotations(s1, s2):\n    return len(s1) == len(s2) and s1 in s2 + s2", "code_2": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return s2 in temp", "code_3": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return all(s1[i] in s2 for i in range(len(s1)))", "code_4": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for _ in range(len(s1)):\n        s1 = s1[1:] + s1[0]\n        if s1 == s2:\n            return True\n    return False", "code_5": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return any(s1[i:] + s1[:i] == s2 for i in range(len(s1)))", "code_6": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return set(s1) == set(s2) and all(s1.count(c) == s2.count(c) for c in set(s1))", "code_7": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return sorted(s1) == sorted(s2)", "code_8": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return all(s1[(i + j) % len(s1)] == s2[j] for i in range(len(s1)) for j in range(len(s2)))", "code_9": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return all(s1[i] == s2[(i + j) % len(s1)] for i in range(len(s1)) for j in range(len(s2)))", "code_10": "def are_Rotations(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return all(s1[i] == s2[(i + k) % len(s1)] for i in range(len(s1)) for k in range(-len(s1), len(s1)))", "pass@3": 0.8333333333333334, "nDCG@10": 0.5388856921828066}
{"task_id": "MBPP/872", "prompt": "\n\ndef check_subset(list1,list2):\n    \"\"\"\n    Write a function to check if a nested list is a subset of another nested list.\n    >>> check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])\n    True\n    >>> check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])\n    True\n    >>> check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])\n    False\n    \"\"\"\n", "solution": "     \n    return all(map(list1.__contains__,list2)) ", "results": [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_subset(list1, list2):\n    return all(item in list1 for item in list2)", "code_2": "def check_subset(list1, list2):\n    return set(map(tuple, list2)).issubset(set(map(tuple, list1)))", "code_3": "def check_subset(list1, list2):\n    return len(set(map(tuple, list2)) - set(map(tuple, list1))) == 0", "code_4": "def check_subset(list1, list2):\n    return all(tuple(sublist) in set(map(tuple, list1)) for sublist in list2)", "code_5": "def check_subset(list1, list2):\n    return all(sublist in list1 for sublist in list2)", "code_6": "def check_subset(list1, list2):\n    return set(map(str, list2)).issubset(set(map(str, list1)))", "code_7": "def check_subset(list1, list2):\n    return len(set(map(str, list2)) - set(map(str, list1))) == 0", "code_8": "def check_subset(list1, list2):\n    return all(str(sublist) in set(map(str, list1)) for sublist in list2)", "code_9": "def check_subset(list1, list2):\n    return set(map(repr, list2)).issubset(set(map(repr, list1)))", "code_10": "def check_subset(list1, list2):\n    return len(set(map(repr, list2)) - set(map(repr, list1))) == 0", "pass@3": 0.9916666666666667, "nDCG@10": 0.6563033086078547}
{"task_id": "MBPP/873", "prompt": "\n\ndef fibonacci(n):\n  \"\"\"\n  Write a function to solve the fibonacci sequence using recursion.\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  \"\"\"\n", "solution": "  \n  if n == 1 or n == 2:\n    return 1\n  else:\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "results": [1, 0, 1, 0, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def fibonacci(n, memo={}):\n  if n in memo:\n    return memo[n]\n  if n <= 2:\n    return 1\n  memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)\n  return memo[n]", "code_2": "def fibonacci(n):\n  a, b = 0, 1\n  for _ in range(n):\n    a, b = b, a + b\n  return b", "code_3": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef fibonacci(n):\n  if n <= 2:\n    return 1\n  return fibonacci(n-1) + fibonacci(n-2)", "code_4": "def fibonacci(n):\n  return ((1 + 5**0.5) / 2)**n / 5**0.5", "code_5": "def fibonacci(n):\n  F = [[1, 1], [1, 0]]\n  if n == 0:\n    return 0\n  power(F, n - 1)\n  return F[0][0]\ndef multiply(F, M):\n  x = F[0][0] * M[0][0] + F[0][1] * M[1][0]\n  y = F[0][0] * M[0][1] + F[0][1] * M[1][1]\n  z = F[1][0] * M[0][0] + F[1][1] * M[1][0]\n  w = F[1][0] * M[0][1] + F[1][1] * M[1][1]\n  F[0][0] = x\n  F[0][1] = y\n  F[1][0] = z\n  F[1][1] = w\ndef power(F, n):\n  M = [[1, 1], [1, 0]]\n  for _ in range(2, n+1):\n    multiply(F, M)", "code_6": "def fibonacci(n):\n  if n <= 1:\n    return n\n  a, b = 0, 1\n  for _ in range(2, n+1):\n    a, b = b, a + b\n  return b", "code_7": "def fibonacci(n):\n  if n <= 1:\n    return n\n  return fibonacci(n-1) + fibonacci(n-2)\nfibonacci = [0, 1] + [0] * 99\ndef fibonacci(n):\n  if fibonacci[n]:\n    return fibonacci[n]\n  fibonacci[n] = fibonacci(n-1) + fibonacci(n-2)\n  return fibonacci[n]", "code_8": "def fibonacci(n):\n  if n <= 1:\n    return n\n  a, b = 0, 1\n  for _ in range(2, n+1):\n    a, b = b, a + b\n  return b", "code_9": "def fibonacci(n):\n  if n <= 1:\n    return n\n  a, b = 0, 1\n  for _ in range(2, n+1):\n    a, b = b, a + b\n  return b", "code_10": "def fibonacci(n):\n  if n <= 1:\n    return n\n  a, b = 0, 1\n  for _ in range(2, n+1):\n    a, b = b, a + b\n  return b", "pass@3": 0.9916666666666667, "nDCG@10": 0.6929852696575346}
{"task_id": "MBPP/874", "prompt": "\n\ndef check_Concat(str1,str2):\n    \"\"\"\n    Write a python function to check if the string is a concatenation of another string.\n    >>> check_Concat(\"abcabcabc\",\"abc\")\n    True\n    >>> check_Concat(\"abcab\",\"abc\")\n    False\n    >>> check_Concat(\"aba\",\"ab\")\n    False\n    \"\"\"\n", "solution": "    \n    N = len(str1)\n    M = len(str2)\n    if (N % M != 0):\n        return False\n    for i in range(N):\n        if (str1[i] != str2[i % M]):\n            return False         \n    return True", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def check_Concat(str1, str2):\n    return str1 == str2 * (len(str1) // len(str2))", "code_2": "def check_Concat(str1, str2):\n    return not (set(str1) - set(str2)) and len(str1) % len(str2) == 0", "code_3": "def check_Concat(str1, str2):\n    return str1.replace(str2, '') == ''", "code_4": "def check_Concat(str1, str2):\n    return all(str1[i:i+len(str2)] == str2 for i in range(0, len(str1), len(str2)))", "code_5": "def check_Concat(str1, str2):\n    i = 0\n    while i < len(str1):\n        if str1[i:i+len(str2)] != str2:\n            return False\n        i += len(str2)\n    return True", "code_6": "def check_Concat(str1, str2):\n    return str1.count(str2) * len(str2) == len(str1)", "code_7": "def check_Concat(str1, str2):\n    return str1.startswith(str2) and (str1[len(str2):] == '' or check_Concat(str1[len(str2):], str2))", "code_8": "def check_Concat(str1, str2):\n    return len(str1) % len(str2) == 0 and all(str1[i] == str2[i % len(str2)] for i in range(len(str1)))", "code_9": "def check_Concat(str1, str2):\n    return str1.find(str2) != -1 and check_Concat(str1.replace(str2, '', 1), str2)", "code_10": "def check_Concat(str1, str2):\n    return str1.lstrip(str2) == ''", "pass@3": 1.0, "nDCG@10": 0.8701249883466594}
{"task_id": "MBPP/875", "prompt": "\n\ndef min_difference(test_list):\n  \"\"\"\n  Write a function to find the minimum difference in the tuple pairs of given tuples.\n  >>> min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n  1\n  >>> min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])\n  2\n  >>> min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])\n  6\n  \"\"\"\n", "solution": "  \n  temp = [abs(b - a) for a, b in test_list]\n  res = min(temp)\n  return (res) ", "results": [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def min_difference(test_list):\n    return min(b - a for a, b in test_list)", "code_2": "def min_difference(test_list):\n    return min(map(lambda x: x[1] - x[0], test_list))", "code_3": "def min_difference(test_list):\n    return min(abs(a - b) for a, b in test_list)", "code_4": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list))", "code_5": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list, key=lambda x: x[0]))", "code_6": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list, key=lambda x: x[1]))", "code_7": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list, key=lambda x: x[0] - x[1]))", "code_8": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list, key=lambda x: x[1] - x[0]))", "code_9": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list, key=lambda x: abs(x[0] - x[1])))", "code_10": "def min_difference(test_list):\n    return min(b - a for a, b in sorted(test_list, key=lambda x: (x[0] - x[1])**2))", "pass@3": 0.30000000000000004, "nDCG@10": 0.1100458831490401}
{"task_id": "MBPP/876", "prompt": "\n\ndef lcm(x, y):\n   \"\"\"\n   Write a python function to find lcm of two positive integers.\n   >>> lcm(4,6)\n   12\n   >>> lcm(15,17)\n   255\n   >>> lcm(2,6)\n   6\n   \"\"\"\n", "solution": "   \n   if x > y:\n       z = x\n   else:\n       z = y\n   while(True):\n       if((z % x == 0) and (z % y == 0)):\n           lcm = z\n           break\n       z += 1\n   return lcm", "results": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def lcm(x, y): return x * y // math.gcd(x, y)", "code_2": "def lcm(x, y): return abs(x*y) // math.gcd(x, y)", "code_3": "import math\ndef lcm(x, y): return x * y // math.gcd(x, y) if x and y else 0", "code_4": "import math\ndef lcm(x, y): return x * y // math.gcd(x, y) if x != 0 and y != 0 else None", "code_5": "import math\ndef lcm(x, y): return x * y // math.gcd(x, y) if x > 0 and y > 0 else None", "code_6": "from math import gcd\ndef lcm(x, y): return x * y // gcd(x, y) if x > 0 and y > 0 else None", "code_7": "from math import gcd\ndef lcm(x, y): return x * y // gcd(x, y) if x != 0 and y != 0 else None", "code_8": "from math import gcd\ndef lcm(x, y): return x * y // gcd(x, y) if x and y else 0", "code_9": "from math import gcd\ndef lcm(x, y): return x * y // gcd(x, y) if x > 0 and y > 0 else 0", "code_10": "from math import gcd\ndef lcm(x, y): return x * y // gcd(x, y) if x != 0 and y != 0 else 0", "pass@3": 1.0, "nDCG@10": 0.6410457898283654}
{"task_id": "MBPP/877", "prompt": "\n\ndef sort_String(str) :\n    \"\"\"\n    Write a python function to sort the given string.\n    >>> sort_String(\"cba\")\n    \"abc\"\n    >>> sort_String(\"data\")\n    \"aadt\"\n    >>> sort_String(\"zxy\")\n    \"xyz\"\n    \"\"\"\n", "solution": "     \n    str = ''.join(sorted(str)) \n    return (str) ", "results": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sort_String(str): return ''.join(sorted(str))", "code_2": "def sort_String(str): return ''.join(sorted(list(str)))", "code_3": "def sort_String(str): return ''.join(sorted(str, key=ord))", "code_4": "def sort_String(str): return ''.join(sorted(str, key=lambda x: ord(x)))", "code_5": "def sort_String(str): return ''.join(sorted(str, key=str.index))", "code_6": "def sort_String(str): return ''.join(sorted(str, key=str.__getitem__))", "code_7": "def sort_String(str): return ''.join(sorted(str, key=str.__getslice__, reverse=True))", "code_8": "def sort_String(str): return ''.join(sorted(str, key=str.__getitem__, reverse=True))", "code_9": "def sort_String(str): return ''.join(sorted(str, key=str.__getitem__, reverse=False))", "code_10": "def sort_String(str): return ''.join(sorted(str, key=str.__getitem__, reverse=True)[::-1])", "pass@3": 0.8333333333333334, "nDCG@10": 0.5637884576902257}
{"task_id": "MBPP/878", "prompt": "\n\ndef check_tuples(test_tuple, K):\n  \"\"\"\n  Write a function to check if the given tuple contains only k elements.\n  >>> check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5])\n  True\n  >>> check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6])\n  True\n  >>> check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1])\n  False\n  \"\"\"\n", "solution": "  \n  res = all(ele in K for ele in test_tuple)\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_tuples(test_tuple, K):\n    return len(test_tuple) == len(K) and set(test_tuple) == set(K)", "code_2": "def check_tuples(test_tuple, K):\n    return sorted(test_tuple) == sorted(K)", "code_3": "def check_tuples(test_tuple, K):\n    return Counter(test_tuple) == Counter(K)", "code_4": "def check_tuples(test_tuple, K):\n    return all(test_tuple.count(i) == K.count(i) for i in test_tuple)", "code_5": "def check_tuples(test_tuple, K):\n    return collections.Counter(test_tuple) == collections.Counter(K)", "code_6": "def check_tuples(test_tuple, K):\n    return sorted(test_tuple, key=K.index) == sorted(K)", "code_7": "def check_tuples(test_tuple, K):\n    return len(test_tuple) == len(K) and all(i in K for i in test_tuple)", "code_8": "def check_tuples(test_tuple, K):\n    return len(test_tuple) == len(K) and all(test_tuple.count(i) == K.count(i) for i in set(test_tuple))", "code_9": "def check_tuples(test_tuple, K):\n    return len(test_tuple) == len(K) and sum(test_tuple) == sum(K)", "code_10": "def check_tuples(test_tuple, K):\n    return len(test_tuple) == len(K) and not set(test_tuple) - set(K)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/879", "prompt": "\n\ndef text_match(text):\n  \"\"\"\n  Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n  >>> text_match(\"aabbbbd\")\n  'Not matched!'\n  >>> text_match(\"aabAbbbc\")\n  'Not matched!'\n  >>> text_match(\"accddbbjjjb\")\n  'Found a match!'\n  \"\"\"\n", "solution": "  import re\n  \n  patterns = 'a.*?b$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef text_match(text):\n    if re.search(r'a.*b$', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "code_2": "import re\ndef text_match(text):\n    return 'Found a match!' if re.match(r'.*a.*b$', text) else 'Not matched!'", "code_3": "import re\ndef text_match(text):\n    return 'Found a match!' if re.fullmatch(r'.*a.*b', text) else 'Not matched!'", "code_4": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'a.*b$').match(text) else 'Not matched!'", "code_5": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'a.*b$').search(text) else 'Not matched!'", "code_6": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'a.*b$').fullmatch(text) else 'Not matched!'", "code_7": "import re\ndef text_match(text):\n    return 'Found a match!' if re.findall(r'a.*b$', text) else 'Not matched!'", "code_8": "import re\ndef text_match(text):\n    return 'Found a match!' if re.finditer(r'a.*b$', text).__next__() else 'Not matched!'", "code_9": "import re\ndef text_match(text):\n    return 'Found a match!' if re.match(r'.*a.*b$', text) is not None else 'Not matched!'", "code_10": "import re\ndef text_match(text):\n    return 'Found a match!' if re.search(r'a.*b$', text) is not None else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/880", "prompt": "\n\ndef Check_Solution(a,b,c) :\n    \"\"\"\n    Write a python function to find number of solutions in quadratic equation.\n    >>> Check_Solution(2,5,2)\n    \"2 solutions\"\n    >>> Check_Solution(1,1,1)\n    \"No solutions\"\n    >>> Check_Solution(1,2,1)\n    \"1 solution\"\n    \"\"\"\n", "solution": "     \n    if ((b*b) - (4*a*c)) > 0 : \n        return (\"2 solutions\") \n    elif ((b*b) - (4*a*c)) == 0 : \n        return (\"1 solution\") \n    else : \n        return (\"No solutions\") ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return \"2 solutions\" if d > 0 else \"1 solution\" if d == 0 else \"No solutions\"", "code_2": "def Check_Solution(a, b, c):\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][1 + (b**2 > 4*a*c)]", "code_3": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d > 0] + (d == 0) * \" solution\"", "code_4": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return f\"{2 - (d < 0)} solutions\" if d != 0 else \"1 solution\"", "code_5": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d > 0 or d == 0]", "code_6": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d >= 0]", "code_7": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d != 0] if d >= 0 else \"No solutions\"", "code_8": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d >= 0] if d != 0 else \"1 solution\"", "code_9": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d > 0] + \"s\" if d != 0 else \"1 solution\"", "code_10": "def Check_Solution(a, b, c):\n    d = b**2 - 4*a*c\n    return [\"No solutions\", \"1 solution\", \"2 solutions\"][d >= 0] + (\"s\" if d > 0 else \"\")", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/881", "prompt": "\n\ndef sum_even_odd(list1):\n    \"\"\"\n    Write a function to find the sum of first even and odd number of a given list.\n    >>> sum_even_odd([1,3,5,7,4,1,6,8])\n    5\n    >>> sum_even_odd([1,2,3,4,5,6,7,8,9,10])\n    3\n    >>> sum_even_odd([1,5,7,9,10])\n    11\n    \"\"\"\n", "solution": "    \n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even+first_odd)", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def sum_even_odd(lst):\n    return next(x for x in lst if x % 2 == 0) + next(x for x in lst if x % 2 != 0)", "code_2": "def sum_even_odd(lst):\n    even, odd = None, None\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n        if even is not None and odd is not None:\n            return even + odd", "code_3": "def sum_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    return even[0] + odd[0]", "code_4": "def sum_even_odd(lst):\n    even = filter(lambda x: x % 2 == 0, lst)\n    odd = filter(lambda x: x % 2 != 0, lst)\n    return next(even) + next(odd)", "code_5": "def sum_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    return sum(even[:1]) + sum(odd[:1])", "code_6": "def sum_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    return even[0] + odd[0] if even and odd else None", "code_7": "def sum_even_odd(lst):\n    even = (x for x in lst if x % 2 == 0)\n    odd = (x for x in lst if x % 2 != 0)\n    return next(even) + next(odd)", "code_8": "def sum_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    return even[0] + odd[0] if len(even) > 0 and len(odd) > 0 else None", "code_9": "def sum_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    return (even[0] if even else 0) + (odd[0] if odd else 0)", "code_10": "def sum_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    return sum(even[:1]) + sum(odd[:1]) if even and odd else None", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/882", "prompt": "\n\ndef parallelogram_perimeter(b,h):\n  \"\"\"\n  Write a function to caluclate perimeter of a parallelogram.\n  >>> parallelogram_perimeter(10,20)\n  400\n  >>> parallelogram_perimeter(15,20)\n  600\n  >>> parallelogram_perimeter(8,9)\n  144\n  \"\"\"\n", "solution": "  \n  perimeter=2*(b*h)\n  return perimeter", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def parallelogram_perimeter(b, h): return 2 * (b + h)", "code_2": "parallelogram_perimeter = lambda b, h: 2 * (b + h)", "code_3": "def parallelogram_perimeter(b, h): return b + h << 1", "code_4": "def parallelogram_perimeter(b, h): return (b << 1) + (h << 1)", "code_5": "def parallelogram_perimeter(b, h): return b * 2 + h * 2", "code_6": "def parallelogram_perimeter(b, h): return sum([b, h]) * 2", "code_7": "def parallelogram_perimeter(b, h): return [b, h] * 2 | sum", "code_8": "def parallelogram_perimeter(b, h): return reduce(lambda x, y: x + y, [b, h]) * 2", "code_9": "def parallelogram_perimeter(b, h): return functools.reduce(operator.add, [b, h]) * 2", "code_10": "parallelogram_perimeter = np.vectorize(lambda b, h: 2 * (b + h))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/883", "prompt": "\n\ndef div_of_nums(nums,m,n):\n \"\"\"\n Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)\n [ 152,44]\n >>> div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)\n [10]\n >>> div_of_nums([10,15,14,13,18,12,20],10,5)\n [10,20]\n \"\"\"\n", "solution": " \n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \n return result", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 and num % n == 0]", "code_2": "div_of_nums = lambda nums, m, n: list(filter(lambda num: num % m == 0 and num % n == 0, nums))", "code_3": "div_of_nums = lambda nums, m, n: [num for num in nums if not (num % m or num % n)]", "code_4": "div_of_nums = lambda nums, m, n: [num for num in nums if all(num % i == 0 for i in (m, n))]", "code_5": "div_of_nums = lambda nums, m, n: [num for num in nums if not any(num % i for i in (m, n))]", "code_6": "div_of_nums = lambda nums, m, n: [num for num in nums if not (num % m or num % n) and num]", "code_7": "div_of_nums = lambda nums, m, n: [num for num in nums if not (num % m) and not (num % n)]", "code_8": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == num % n == 0]", "code_9": "div_of_nums = lambda nums, m, n: [num for num in nums if not num % m and not num % n]", "code_10": "div_of_nums = lambda nums, m, n: [num for num in nums if num % m == 0 and num % n == 0 and num]", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/884", "prompt": "\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are within a given range or not.\n    >>> all_Bits_Set_In_The_Given_Range(10,2,1)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(5,2,4)\n    False\n    >>> all_Bits_Set_In_The_Given_Range(22,2,3)\n    True\n    \"\"\"\n", "solution": "     \n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \n    new_num = n & num \n    if (num == new_num): \n        return True\n    return False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def all_Bits_Set_In_The_Given_Range(n,l,r): return (n & ((1 << r) - (1 << l) + 1)) == ((1 << r) - (1 << l) + 1)", "code_2": "def all_Bits_Set_In_The_Given_Range(n,l,r): return ((n >> l) & ((1 << (r - l + 1)) - 1)) == ((1 << (r - l + 1)) - 1)", "code_3": "def all_Bits_Set_In_The_Given_Range(n,l,r): return bin(n)[2:].zfill(32)[l:r+1] == '1' * (r - l + 1)", "code_4": "def all_Bits_Set_In_The_Given_Range(n,l,r): return all(bit == '1' for bit in bin(n)[2:].zfill(32)[l:r+1])", "code_5": "def all_Bits_Set_In_The_Given_Range(n,l,r): return all((n & (1 << i)) for i in range(l, r + 1))", "code_6": "def all_Bits_Set_In_The_Given_Range(n,l,r): return sum((n & (1 << i)) >> i for i in range(l, r + 1)) == r - l + 1", "code_7": "def all_Bits_Set_In_The_Given_Range(n,l,r): return n & ((1 << (r + 1)) - 1) == (1 << (r + 1)) - (1 << l)", "code_8": "def all_Bits_Set_In_The_Given_Range(n,l,r): return n & ~((1 << l) - 1) == n & ~((1 << (r + 1)) - 1)", "code_9": "def all_Bits_Set_In_The_Given_Range(n,l,r): return n >> l == (1 << (r - l + 1)) - 1", "code_10": "def all_Bits_Set_In_The_Given_Range(n,l,r): return n & ((2 << (r - l)) - 1) == ((2 << (r - l)) - 1) >> l", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/885", "prompt": "\n\ndef is_Isomorphic(str1,str2):\n    \"\"\"\n    Write a python function to check whether the two given strings are isomorphic to each other or not.\n    >>> is_Isomorphic(\"paper\",\"title\")\n    True\n    >>> is_Isomorphic(\"ab\",\"ba\")\n    True\n    >>> is_Isomorphic(\"ab\",\"aa\")\n    False\n    \"\"\"\n", "solution": "              \n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(zip(str1, str2)))", "code_2": "def is_Isomorphic(str1, str2):\n    return len(str1) == len(set(str1)) == len(set(str2)) == len(set(zip(str1, str2)))", "code_3": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(map(lambda x: (x[0], x[1]), zip(str1, str2))))", "code_4": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(map(tuple, zip(str1, str2))))", "code_5": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(map(lambda x: ''.join(x), zip(str1, str2))))", "code_6": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(str1[i] + str2[i] for i in range(len(str1))))", "code_7": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(str1[i] + str2[i] for i in range(len(str1))))", "code_8": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(str1[i] + str2[i] for i in range(len(str1))))", "code_9": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(str1[i] + str2[i] for i in range(len(str1))))", "code_10": "def is_Isomorphic(str1, str2):\n    return len(set(str1)) == len(set(str2)) == len(set(str1[i] + str2[i] for i in range(len(str1))))", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/886", "prompt": "\n\ndef sum_num(numbers):\n    \"\"\"\n    Write a function to add all the numbers in a list and divide it with the length of the list.\n    >>> sum_num((8, 2, 3, 0, 7))\n    4.0\n    >>> sum_num((-10,-20,-30))\n    -20.0\n    >>> sum_num((19,15,18))\n    17.333333333333332\n    \"\"\"\n", "solution": "    \n    total = 0\n    for x in numbers:\n        total += x\n    return total/len(numbers) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def sum_num(numbers):\n    return sum(numbers) / len(numbers)", "code_2": "def sum_num(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)", "code_3": "import numpy as np\ndef sum_num(numbers):\n    return np.mean(numbers)", "code_4": "from statistics import mean\ndef sum_num(numbers):\n    return mean(numbers)", "code_5": "def sum_num(numbers):\n    return sum(numbers) / float(len(numbers))", "code_6": "def sum_num(numbers):\n    return sum(numbers, 0.0) / len(numbers)", "code_7": "def sum_num(numbers):\n    total = sum(numbers)\n    return total / len(numbers) if numbers else 0", "code_8": "def sum_num(numbers):\n    return reduce(lambda x, y: x + y, numbers) / len(numbers)", "code_9": "def sum_num(numbers):\n    total = 0.0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n    return total / count if count else 0", "code_10": "def sum_num(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        total += num\n        count += 1\n    return total / count if count else float('nan')", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/887", "prompt": "\n\ndef is_odd(n) :\n    \"\"\"\n    Write a python function to check whether the given number is odd or not using bitwise operator.\n    >>> is_odd(5)\n    True\n    >>> is_odd(6)\n    False\n    >>> is_odd(7)\n    True\n    \"\"\"\n", "solution": "     \n    if (n^1 == n-1) :\n        return True; \n    else :\n        return False; ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_odd(n): return bool(n & 1)", "code_2": "def is_odd(n): return n & 1 == 1", "code_3": "def is_odd(n): return not n & 1 == 0", "code_4": "def is_odd(n): return n & 1 != 0", "code_5": "def is_odd(n): return n & 1 > 0", "code_6": "def is_odd(n): return n & 1 == 1 and True or False", "code_7": "def is_odd(n): return n & 1 and True or False", "code_8": "def is_odd(n): return n & 1 == 1 if n else False", "code_9": "def is_odd(n): return n & 1 == 1 if n != 0 else False", "code_10": "def is_odd(n): return n & 1 == 1 if n > 0 else False", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/888", "prompt": "\n\ndef substract_elements(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to substract the elements of the given nested tuples.\n  >>> substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n  ((-5, -4), (1, -4), (1, 8), (-6, 7))\n  >>> substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))\n  ((-6, -4), (0, -4), (1, 8), (-6, 7))\n  >>> substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))\n  ((7, -4), (1, -4), (6, 8), (-2, 7))\n  \"\"\"\n", "solution": "  \n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def subtract_elements(t1, t2):\n    return tuple((a-b, c-d) for (a, b), (c, d) in zip(t1, t2))", "code_2": "def subtract_elements(t1, t2):\n    return tuple(map(lambda x, y: (x[0]-y[0], x[1]-y[1]), t1, t2))", "code_3": "def subtract_elements(t1, t2):\n    return tuple(tuple(i-j for i, j in zip(x, y)) for x, y in zip(t1, t2))", "code_4": "def subtract_elements(t1, t2):\n    return tuple(tuple(map(operator.sub, x, y)) for x, y in zip(t1, t2))", "code_5": "def subtract_elements(t1, t2):\n    return tuple(tuple(a-b for a, b in zip(*pair)) for pair in zip(t1, t2))", "code_6": "def subtract_elements(t1, t2):\n    return tuple(tuple(np.subtract(x, y)) for x, y in zip(t1, t2))", "code_7": "def subtract_elements(t1, t2):\n    return tuple(tuple(starmap(operator.sub, zip(x, y))) for x, y in zip(t1, t2))", "code_8": "def subtract_elements(t1, t2):\n    return tuple(tuple(a-b for a, b in pair) for pair in zip(t1, t2))", "code_9": "def subtract_elements(t1, t2):\n    return tuple(tuple(a-b for a, b in zip(x, y)) for x, y in zip(t1, t2))", "code_10": "def subtract_elements(t1, t2):\n    return tuple(tuple(itertools.starmap(operator.sub, zip(x, y))) for x, y in zip(t1, t2))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/889", "prompt": "\n\ndef reverse_list_lists(lists):\n    \"\"\"\n    Write a function to reverse each list in a given list of lists.\n    >>> reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n    [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    >>> reverse_list_lists([[1,2],[2,3],[3,4]])\n    [[2,1],[3,2],[4,3]]\n    >>> reverse_list_lists([[10,20],[30,40]])\n    [[20,10],[40,30]]\n    \"\"\"\n", "solution": "    \n    for l in lists:\n        l.sort(reverse = True)\n    return lists ", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def reverse_list_lists(lists):\n    return [list(reversed(lst)) for lst in lists]", "code_2": "def reverse_list_lists(lists):\n    return [lst[::-1] for lst in lists]", "code_3": "def reverse_list_lists(lists):\n    return list(map(lambda lst: lst[::-1], lists))", "code_4": "def reverse_list_lists(lists):\n    return list(map(reversed, lists))", "code_5": "def reverse_list_lists(lists):\n    return [lst[:] for lst in reversed(lists)]", "code_6": "def reverse_list_lists(lists):\n    return [lst[::-1] for lst in reversed(lists)]", "code_7": "def reverse_list_lists(lists):\n    return [list(reversed(lst)) for lst in reversed(lists)]", "code_8": "def reverse_list_lists(lists):\n    return [lst[::-1] for lst in map(list, reversed(lists))]", "code_9": "def reverse_list_lists(lists):\n    return [lst[::-1] for lst in map(lambda lst: lst[::-1], lists)]", "code_10": "def reverse_list_lists(lists):\n    return [lst[::-1] for lst in map(lambda lst: list(reversed(lst)), lists)]", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/890", "prompt": "\n\ndef find_Extra(arr1,arr2,n) :\n    \"\"\"\n    Write a python function to find the index of an extra element present in one sorted array.\n    >>> find_Extra([1,2,3,4],[1,2,3],3)\n    3\n    >>> find_Extra([2,4,6,8,10],[2,4,6,8],4)\n    4\n    >>> find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5)\n    5\n    \"\"\"\n", "solution": "     \n    for i in range(0, n) : \n        if (arr1[i] != arr2[i]) : \n            return i \n    return n ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_Extra(arr1, arr2, n):\n    return arr1[n]", "code_2": "def find_Extra(arr1, arr2, n):\n    return next(iter(set(arr1) - set(arr2)))", "code_3": "def find_Extra(arr1, arr2, n):\n    return sum(arr1) - sum(arr2)", "code_4": "def find_Extra(arr1, arr2, n):\n    return reduce(lambda x, y: x ^ y, arr1 + arr2)", "code_5": "def find_Extra(arr1, arr2, n):\n    return list(set(arr1) - set(arr2))[0]", "code_6": "def find_Extra(arr1, arr2, n):\n    return [i for i in arr1 if i not in arr2][0]", "code_7": "def find_Extra(arr1, arr2, n):\n    return [x for x, y in zip(arr1, arr2) if x != y][0]", "code_8": "def find_Extra(arr1, arr2, n):\n    return [x for x in arr1 if x not in arr2 or arr1.count(x) > arr2.count(x)][0]", "code_9": "def find_Extra(arr1, arr2, n):\n    return [x for x in arr1 if arr1.index(x) != arr2.index(x) or len(arr1) != len(arr2)][0]", "code_10": "def find_Extra(arr1, arr2, n):\n    return [x for x in arr1 if arr1.count(x) > arr2.count(x)][0]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/891", "prompt": "\n\ndef same_Length(A,B):\n    \"\"\"\n    Write a python function to check whether the given two numbers have same number of digits or not.\n    >>> same_Length(12,1)\n    False\n    >>> same_Length(2,2)\n    True\n    >>> same_Length(10,20)\n    True\n    \"\"\"\n", "solution": "     \n    while (A > 0 and B > 0): \n        A = A / 10; \n        B = B / 10; \n    if (A == 0 and B == 0): \n        return True; \n    return False; ", "results": [1, 0, 0, 0, 0, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def same_Length(A, B):\n    return len(str(A)) == len(str(B))", "code_2": "def same_Length(A, B):\n    return format(A, 'd') == format(B, 'd')", "code_3": "def same_Length(A, B):\n    return math.floor(math.log10(A)) == math.floor(math.log10(B))", "code_4": "def same_Length(A, B):\n    return int(math.log10(A) + 1) == int(math.log10(B) + 1)", "code_5": "def same_Length(A, B):\n    return A.bit_length() == B.bit_length()", "code_6": "def same_Length(A, B):\n    return decimal.Decimal(A).adjusted() == decimal.Decimal(B).adjusted()", "code_7": "def same_Length(A, B):\n    return np.floor(np.log10(A)) == np.floor(np.log10(B))", "code_8": "def same_Length(A, B):\n    return np.log10(A).astype(int) == np.log10(B).astype(int)", "code_9": "def same_Length(A, B):\n    return len(str(A).encode()) == len(str(B).encode())", "code_10": "def same_Length(A, B):\n    return len(bytes(str(A), 'utf-8')) == len(bytes(str(B), 'utf-8'))", "pass@3": 0.7083333333333333, "nDCG@10": 0.349966777951421}
{"task_id": "MBPP/892", "prompt": "\n\ndef remove_spaces(text):\n \"\"\"\n Write a function to remove multiple spaces in a string.\n >>> remove_spaces('python  program')\n ('python program')\n >>> remove_spaces('python   programming    language')\n ('python programming language')\n >>> remove_spaces('python                     program')\n ('python program')\n \"\"\"\n", "solution": " import re\n \n return (re.sub(' +',' ',text))", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_spaces(text):\n return ' '.join(text.split())", "code_2": "import re\ndef remove_spaces(text):\n return re.sub(' +', ' ', text)", "code_3": "def remove_spaces(text):\n return ''.join([text[i] for i in range(len(text)) if not (text[i] == ' ' and text[i-1] == ' ')])", "code_4": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (c == ' ' and text[i-1] == ' '))", "code_5": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (i > 0 and c == ' ' and text[i-1] == ' '))", "code_6": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (i > 0 and text[i] == text[i-1] == ' '))", "code_7": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (i > 0 and c == text[i-1] == ' '))", "code_8": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (i > 0 and c == ' ' and text[i-1] == ' '))", "code_9": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (i > 0 and text[i] == text[i-1] == ' '))", "code_10": "def remove_spaces(text):\n return ''.join(c for i, c in enumerate(text) if not (i > 0 and c == text[i-1] == ' '))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/893", "prompt": "\n\ndef Extract(lst):\n    \"\"\"\n    Write a python function to get the last element of each sublist.\n    >>> Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n    [3, 5, 9]\n    >>> Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])\n    ['z', 'm', 'b', 'v']\n    >>> Extract([[1, 2, 3], [4, 5]])\n    [3, 5]\n    \"\"\"\n", "solution": "     \n    return [item[-1] for item in lst] ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "List comprehension:\ndef Extract(lst): return [sub[-1] for sub in lst]", "code_2": "Map function with lambda:\ndef Extract(lst): return list(map(lambda x: x[-1], lst))", "code_3": "For loop with append:\ndef Extract(lst):\n    result = []\n    for sub in lst:\n        result.append(sub[-1])\n    return result", "code_4": "List comprehension with if condition:\ndef Extract(lst): return [sub[i] for sub in lst for i in range(len(sub)-1, len(sub))]", "code_5": "Reduce function with lambda:\nfrom functools import reduce\ndef Extract(lst): return reduce(lambda a, b: a + [b[-1]], lst, [])", "code_6": "Generator expression with list:\ndef Extract(lst): return list(sub[-1] for sub in lst)", "code_7": "Numpy array slicing:\nimport numpy as np\ndef Extract(lst): return np.array(lst)[:,-1].tolist()", "code_8": "Recursive function:\ndef Extract(lst): return [] if not lst else [lst[0][-1]] + Extract(lst[1:])", "code_9": "While loop with index:\ndef Extract(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        result.append(lst[i][-1])\n        i += 1\n    return result", "code_10": "Filter function with lambda and zip:\ndef Extract(lst): return list(filter(lambda x: x == max(range(len(lst[lst.index(x)])), default=None), zip(*lst)))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/894", "prompt": "\n\ndef float_to_tuple(test_str):\n  \"\"\"\n  Write a function to convert the given string of float type into tuple.\n  >>> float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n  (1.2, 1.3, 2.3, 2.4, 6.5)\n  >>> float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n  (2.3, 2.4, 5.6, 5.4, 8.9)\n  >>> float_to_tuple(\"0.3, 0.5, 7.8, 9.4\")\n  (0.3, 0.5, 7.8, 9.4)\n  \"\"\"\n", "solution": "  \n  res = tuple(map(float, test_str.split(', ')))\n  return (res) ", "results": [1, 1, 1, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(', ')))", "code_2": "def float_to_tuple(test_str):\n    return tuple(float(i) for i in test_str.split(', '))", "code_3": "import re\ndef float_to_tuple(test_str):\n    return tuple(map(float, re.findall(r'\\d+\\.\\d+', test_str)))", "code_4": "def float_to_tuple(test_str):\n    return tuple(float(i) for i in re.findall(r'\\d+\\.\\d+', test_str))", "code_5": "def float_to_tuple(test_str):\n    return tuple(float(i) for i in test_str.split(', '))", "code_6": "def float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(', ')))", "code_7": "def float_to_tuple(test_str):\n    return tuple(float(i) for i in test_str.split(', '))", "code_8": "def float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(', ')))", "code_9": "def float_to_tuple(test_str):\n    return tuple(float(i) for i in test_str.split(', '))", "code_10": "def float_to_tuple(test_str):\n    return tuple(map(float, test_str.split(', ')))", "pass@3": 1.0, "nDCG@10": 0.9052116356304495}
{"task_id": "MBPP/895", "prompt": "\n\ndef max_sum_subseq(A):\n    \"\"\"\n    Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n    >>> max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n    26\n    >>> max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n    28\n    >>> max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n    44\n    \"\"\"\n", "solution": "    \n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_sum_subseq(A):\n    incl = A[0]\n    excl = 0\n    for i in A[1:]:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)", "code_2": "def max_sum_subseq(A):\n    dp = [0] * len(A)\n    dp[0] = A[0]\n    dp[1] = max(A[0], A[1])\n    for i in range(2, len(A)):\n        dp[i] = max(dp[i-1], dp[i-2] + A[i])\n    return dp[-1]", "code_3": "def max_sum_subseq(A):\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    else:\n        return max(A[0] + max_sum_subseq(A[2:]), max_sum_subseq(A[1:]))", "code_4": "def max_sum_subseq(A):\n    if not A:\n        return 0\n    return max(A[0] + max_sum_subseq(A[2:]), max_sum_subseq(A[1:]))", "code_5": "def max_sum_subseq(A):\n    if len(A) < 3:\n        return max(A)\n    A[2] += A[0]\n    return max(max_sum_subseq(A[1:]), max_sum_subseq(A[2:]))", "code_6": "def max_sum_subseq(A):\n    if not A:\n        return 0\n    return max(A[0] + max_sum_subseq(A[2:]), max_sum_subseq(A[1:]))", "code_7": "def max_sum_subseq(A):\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    else:\n        return max(A[0] + max_sum_subseq(A[2:]), max_sum_subseq(A[1:]))", "code_8": "def max_sum_subseq(A):\n    if len(A) < 2:\n        return sum(A)\n    return max(A[1] + max_sum_subseq(A[3:]), A[0] + max_sum_subseq(A[2:]))", "code_9": "def max_sum_subseq(A):\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    else:\n        return max(A[0] + max_sum_subseq(A[2:]), max_sum_subseq(A[1:]))", "code_10": "def max_sum_subseq(A):\n    if not A:\n        return 0\n    return max(A[0] + max_sum_subseq(A[2:]), max_sum_subseq(A[1:]))", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/896", "prompt": "\n\ndef sort_list_last(tuples):\n  \"\"\"\n  Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n  >>> sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])\n  [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n  >>> sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])\n  [(1,2), (3,5), (4,7), (9,8), (7,9)]\n  >>> sort_list_last([(20,50), (10,20), (40,40)])\n  [(10,20),(40,40),(20,50)]\n  \"\"\"\n", "solution": "  def last(n):\n     return n[-1]\n  \n  return sorted(tuples, key=last)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 11, "code_1": "Using the `sorted` function with a lambda function as the key:\ndef sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])", "code_2": "Using the `sort` method with a lambda function as the key:\ndef sort_list_last(tuples):\n    tuples.sort(key=lambda x: x[-1])\n    return tuples", "code_3": "Using the `sorted` function with `itemgetter` from the `operator` module:\nfrom operator import itemgetter\ndef sort_list_last(tuples):\n    return sorted(tuples, key=itemgetter(-1))", "code_4": "Using the `sort` method with `itemgetter` from the `operator` module:\nfrom operator import itemgetter\ndef sort_list_last(tuples):\n    tuples.sort(key=itemgetter(-1))\n    return tuples", "code_5": "Using a list comprehension with the `sorted` function:\ndef sort_list_last(tuples):\n    return [t for t in sorted(tuples, key=lambda x: x[-1])]", "code_6": "Using a list comprehension with the `sort` method:\ndef sort_list_last(tuples):\n    return [t for t in sorted(tuples, key=lambda x: x[-1])]", "code_7": "Using the `heapq` module's `nsmallest` function:\nimport heapq\ndef sort_list_last(tuples):\n    return heapq.nsmallest(len(tuples), tuples, key=lambda x: x[-1])", "code_8": "Using the `sort` method with a custom comparison function:\ndef sort_list_last(tuples):\n    tuples.sort(key=lambda x: x[-1])\n    return tuples", "code_9": "Using the `sorted` function with a custom comparison function:\ndef sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])", "code_10": "Using the `sort` method with a custom key function and a decorator:\ndef last_element(func):\n    def wrapper(tuples):\n        return func(tuples, key=lambda x: x[-1])\n    return wrapper", "code_11": "@last_element\ndef sort_list_last(tuples, key):\n    tuples.sort(key=key)\n    return tuples", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/897", "prompt": "\n\ndef is_Word_Present(sentence,word):\n    \"\"\"\n    Write a python function to check whether the word is present in a given sentence or not.\n    >>> is_Word_Present(\"machine learning\",\"machine\")\n    True\n    >>> is_Word_Present(\"easy\",\"fun\")\n    False\n    >>> is_Word_Present(\"python language\",\"code\")\n    False\n    \"\"\"\n", "solution": "     \n    s = sentence.split(\" \") \n    for i in s:  \n        if (i == word): \n            return True\n    return False", "results": [1, 1, 1, 0, 0, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "def is_Word_Present(sentence, word):\n    return word in sentence.split()", "code_2": "def is_Word_Present(sentence, word):\n    return sentence.count(f' {word} ') > 0 or sentence.startswith(word) or sentence.endswith(word)", "code_3": "def is_Word_Present(sentence, word):\n    return any(w == word for w in sentence.split())", "code_4": "def is_Word_Present(sentence, word):\n    return bool(re.search(r'\\b' + word + r'\\b', sentence))", "code_5": "def is_Word_Present(sentence, word):\n    return set(sentence.split()).intersection(set([word]))", "code_6": "def is_Word_Present(sentence, word):\n    return any(map(lambda w: w == word, sentence.split()))", "code_7": "def is_Word_Present(sentence, word):\n    return sum(1 for w in sentence.split() if w == word) > 0", "code_8": "def is_Word_Present(sentence, word):\n    return len(set(sentence.split()).intersection({word})) > 0", "code_9": "def is_Word_Present(sentence, word):\n    return word in set(sentence.split())", "code_10": "def is_Word_Present(sentence, word):\n    return bool(re.search(rf'\\b{word}\\b', sentence))", "pass@3": 0.9916666666666667, "nDCG@10": 0.7564477297898766}
{"task_id": "MBPP/898", "prompt": "\n\ndef extract_elements(numbers, n):\n    \"\"\"\n    Write a function to extract specified number of elements from a given list, which follow each other continuously.\n    >>> extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)\n    [1, 4]\n    >>> extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)\n    [4]\n    >>> extract_elements([0,0,0,0,0],5)\n    [0]\n    \"\"\"\n", "solution": "    from itertools import groupby \n    \n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \n    return result", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def extract_elements(numbers, n):\n    result = []\n    count = 1\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i-1]:\n            count += 1\n            if count == n:\n                result.append(numbers[i])\n                count = 0\n        else:\n            count = 1\n    return result", "code_2": "def extract_elements(numbers, n):\n    return [num for i, num in enumerate(numbers) if i > 0 and numbers[i] == numbers[i-1] and (i == n-1 or numbers[i] != numbers[i+1])]", "code_3": "def extract_elements(numbers, n):\n    from itertools import groupby\n    return [k for k, g in groupby(numbers) if len(list(g)) >= n]", "code_4": "def extract_elements(numbers, n):\n    import numpy as np\n    a = np.array(numbers)\n    return list(set(a[np.where(np.diff(a) == 0)[0] + 1][::n-1]))", "code_5": "def extract_elements(numbers, n):\n    from collections import Counter\n    c = Counter(numbers)\n    return [k for k, v in c.items() if v >= n]", "code_6": "def extract_elements(numbers, n):\n    return list({k: v for k, v in zip(numbers, map(numbers.count, numbers)) if v >= n})", "code_7": "def extract_elements(numbers, n):\n    from more_itertools import run_length\n    return [k for k, g in run_length.encode(numbers) if g >= n]", "code_8": "def extract_elements(numbers, n):\n    return [num for num, count in zip(*np.unique(numbers, return_counts=True)) if count >= n]", "code_9": "def extract_elements(numbers, n):\n    from scipy.stats import mode\n    m = mode(numbers)\n    return [x for x in m.mode if list(m.count).count(x) >= n]", "code_10": "def extract_elements(numbers, n):\n    from pandas import Series\n    s = Series(numbers)\n    return list(s[s.groupby((s != s.shift()).cumsum()).transform(len) >= n].unique())", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/899", "prompt": "\n\ndef check(arr,n):\n    \"\"\"\n    Write a python function to check whether an array can be sorted or not by picking only the corner elements.\n    >>> check([3,2,1,2,3,4],6)\n    True\n    >>> check([2,1,4,5,1],5)\n    True\n    >>> check([1,2,2,1,2,3],6)\n    True\n    \"\"\"\n", "solution": "     \n    g = 0 \n    for i in range(1,n): \n        if (arr[i] - arr[i - 1] > 0 and g == 1): \n            return False\n        if (arr[i] - arr[i] < 0): \n            g = 1\n    return True", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check(arr, n):\n    return sorted(arr) == sorted([arr[i] for i in range(n) if i % 2 == 0]) or sorted(arr) == sorted([arr[i] for i in range(n) if i % 2 != 0])", "code_2": "def check(arr, n):\n    even = sorted([arr[i] for i in range(0, n, 2)])\n    odd = sorted([arr[i] for i in range(1, n, 2)])\n    return even == even[::-1] or odd == odd[::-1]", "code_3": "def check(arr, n):\n    even = sorted(arr[::2])\n    odd = sorted(arr[1::2])\n    return even == even[::-1] or odd == odd[::-1]", "code_4": "def check(arr, n):\n    even = sorted(arr[0::2])\n    odd = sorted(arr[1::2])\n    return even == list(reversed(even)) or odd == list(reversed(odd))", "code_5": "def check(arr, n):\n    even = sorted(arr[0::2])\n    odd = sorted(arr[1::2])\n    return even == even[::-1] or odd[::-1] == odd", "code_6": "def check(arr, n):\n    even = sorted(arr[::2])\n    odd = sorted(arr[1::2])\n    return even == even[::-1] or odd[::-1] == odd", "code_7": "def check(arr, n):\n    even = sorted(arr[0::2])\n    odd = sorted(arr[1::2])\n    return even == even[::-1] or odd == odd[::-1]", "code_8": "def check(arr, n):\n    even = sorted(arr[0::2])\n    odd = sorted(arr[1::2])\n    return even == even[::-1] or odd[::-1] == odd", "code_9": "def check(arr, n):\n    even = sorted(arr[::2])\n    odd = sorted(arr[1::2])\n    return even == even[::-1] or odd == odd[::-1]", "code_10": "def check(arr, n):\n    even = sorted(arr[0::2])\n    odd = sorted(arr[1::2])\n    return even == list(reversed(even)) or odd == list(reversed(odd))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/900", "prompt": "\n\ndef match_num(string):\n    \"\"\"\n    Write a function where a string will start with a specific number.\n    >>> match_num('5-2345861')\n    True\n    >>> match_num('6-2345861')\n    False\n    >>> match_num('78910')\n    False\n    \"\"\"\n", "solution": "    import re\n    \n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False", "results": [1, 1, 0, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def match_num(string): return string.startswith('5')", "code_2": "def match_num(string): return string[0] == '5'", "code_3": "def match_num(string): return bool(re.match('^5', string))", "code_4": "def match_num(string): return string[:1] == '5'", "code_5": "def match_num(string): return string.index('5') == 0", "code_6": "def match_num(string): return [True, False][string[0] != '5']", "code_7": "def match_num(string): return string.lstrip('5') != string", "code_8": "def match_num(string): return string.find('5') == 0", "code_9": "def match_num(string): return string.partition('-')[0] == '5'", "code_10": "def match_num(string): return string.split('-')[0] == '5'", "pass@3": 1.0, "nDCG@10": 0.8048109992093391}
{"task_id": "MBPP/901", "prompt": "\n\ndef smallest_multiple(n):\n    \"\"\"\n    Write a function to find the smallest multiple of the first n numbers.\n    >>> smallest_multiple(13)\n    360360\n    >>> smallest_multiple(2)\n    2\n    >>> smallest_multiple(1)\n    1\n    \"\"\"\n", "solution": "    \n    if (n<=2):\n      return n\n    i = n * 2\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if (a == factors[-1] and i % a == 0):\n                return i", "results": [1, 1, 0, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def smallest_multiple(n):\n    from math import gcd\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm", "code_2": "def smallest_multiple(n):\n    from functools import reduce\n    from math import gcd\n    return reduce(lambda a, b: a * b // gcd(a, b), range(1, n + 1))", "code_3": "def smallest_multiple(n):\n    from math import gcd\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    return reduce(lcm, range(1, n + 1), 1)", "code_4": "def smallest_multiple(n):\n    from math import gcd\n    lcm = lambda a, b: a * b // gcd(a, b)\n    return reduce(lcm, range(1, n + 1), 1)", "code_5": "def smallest_multiple(n):\n    from math import gcd\n    lcm = 1\n    for i in range(2, n + 1):\n        if lcm % i != 0:\n            lcm = lcm * i // gcd(lcm, i)\n    return lcm", "code_6": "def smallest_multiple(n):\n    from math import gcd\n    lcm = lambda a, b: a * b // gcd(a, b)\n    return reduce(lcm, range(1, n + 1))", "code_7": "def smallest_multiple(n):\n    from math import gcd\n    lcm = 1\n    for i in range(1, n + 1):\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm", "code_8": "def smallest_multiple(n):\n    from math import gcd\n    lcm = lambda a, b: a * b // gcd(a, b)\n    return reduce(lcm, range(1, n + 1), 1)", "code_9": "def smallest_multiple(n):\n    from math import gcd\n    lcm = 1\n    for i in range(2, n + 1):\n        lcm = lcm * i // gcd(lcm, i)\n    return lcm", "code_10": "def smallest_multiple(n):\n    from math import gcd\n    lcm = lambda a, b: a * b // gcd(a, b)\n    return reduce(lcm, range(1, n + 1))", "pass@3": 0.9166666666666666, "nDCG@10": 0.5837154733670049}
{"task_id": "MBPP/902", "prompt": "\n\ndef add_dict(d1,d2):\n   \"\"\"\n   Write a function to combine two dictionaries by adding values for common keys.\n   >>> add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})\n   ({'b': 400, 'd': 400, 'a': 400, 'c': 300})\n   >>> add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})\n   ({'b': 1300, 'd': 900, 'a': 1000, 'c': 900})\n   >>> add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})\n   ({'b': 1800, 'd': 1800, 'a': 1800})\n   \"\"\"\n", "solution": "   from collections import Counter\n   \n   add_dict = Counter(d1) + Counter(d2)\n   return add_dict", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in set(d1) | set(d2)}", "code_2": "def add_dict(d1, d2):\n    return {**d1, **{k: d1.get(k, 0) + d2[k] for k in d2}}", "code_3": "def add_dict(d1, d2):\n    return {k: sum(d[k] for d in (d1, d2) if k in d) for k in set(d1) | set(d2)}", "code_4": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in d1.keys() | d2.keys()}", "code_5": "def add_dict(d1, d2):\n    return {k: d1[k] + d2[k] if k in d1 and k in d2 else d1.get(k, 0) + d2.get(k, 0) for k in set(d1) | set(d2)}", "code_6": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in d1.keys() ^ d2.keys() | d1.keys() & d2.keys()}", "code_7": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in set(list(d1.keys()) + list(d2.keys()))}", "code_8": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in d1.keys() | d2.keys()}", "code_9": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in d1.keys() ^ d2.keys() | d1.keys() & d2.keys()}", "code_10": "def add_dict(d1, d2):\n    return {k: d1.get(k, 0) + d2.get(k, 0) for k in set(d1) | set(d2)}", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/903", "prompt": "\n\ndef count_Unset_Bits(n) :\n    \"\"\"\n    Write a python function to count the total unset bits from 1 to n.\n    >>> count_Unset_Bits(2)\n    1\n    >>> count_Unset_Bits(5)\n    4\n    >>> count_Unset_Bits(14)\n    17\n    \"\"\"\n", "solution": "      \n    cnt = 0;  \n    for i in range(1,n + 1) : \n        temp = i;  \n        while (temp) :  \n            if (temp % 2 == 0) : \n                cnt += 1;  \n            temp = temp // 2;  \n    return cnt;  ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_Unset_Bits(n):\n    return n * (len(bin(n)) - 2) - sum(bin(i).count('0') for i in range(1, n + 1))", "code_2": "def count_Unset_Bits(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += bin(i).count('0')\n    return total", "code_3": "def count_Unset_Bits(n):\n    return sum(bin(i).count('0') for i in range(1, n + 1))", "code_4": "def count_Unset_Bits(n):\n    return sum(bin(i).count('0') for i in range(n + 1)) - bin(n).count('0')", "code_5": "def count_Unset_Bits(n):\n    return n * len(bin(n)) - sum(bin(i).count('1') for i in range(n + 1))", "code_6": "def count_Unset_Bits(n):\n    return n * len(bin(n)) - sum(bin(i).count('1') for i in range(1, n + 1)) - bin(n).count('1')", "code_7": "def count_Unset_Bits(n):\n    return n * len(bin(n)) - sum(bin(i).count('1') for i in range(n + 1)) + 1", "code_8": "def count_Unset_Bits(n):\n    return n * len(bin(n)) - sum(bin(i).count('1') for i in range(n + 1)) + bin(n).count('0')", "code_9": "def count_Unset_Bits(n):\n    return n * len(bin(n)) - sum(bin(i).count('1') for i in range(n + 1)) + bin(n).count('0') - 1", "code_10": "def count_Unset_Bits(n):\n    return n * len(bin(n)) - sum(bin(i).count('1') for i in range(n + 1)) + bin(n).count('0') - bin(n).count('1')", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/904", "prompt": "\n\ndef even_num(x):\n  \"\"\"\n  Write a function to return true if the given number is even else return false.\n  >>> even_num(13.5)\n  False\n  >>> even_num(0)\n  True\n  >>> even_num(-9)\n  False\n  \"\"\"\n", "solution": "  \n  if x%2==0:\n     return True\n  else:\n    return False", "results": [1, 0, 1, 0, 0, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def even_num(x):\n    return x % 2 == 0", "code_2": "def even_num(x):\n    return not x & 1", "code_3": "def even_num(x):\n    return ~int(x) & 1", "code_4": "def even_num(x):\n    return not bool(x & 1)", "code_5": "def even_num(x):\n    return (x >> 1) << 1 == x", "code_6": "def even_num(x):\n    return divmod(x, 2)[1] == 0", "code_7": "def even_num(x):\n    return float(x).is_integer() and x % 2 == 0", "code_8": "def even_num(x):\n    return isinstance(x, int) and x % 2 == 0", "code_9": "def even_num(x):\n    return x == 0 or even_num(abs(x) - 2)", "code_10": "def even_num(x):\n    return all(digit in '02468' for digit in str(abs(int(x))))", "pass@3": 0.9666666666666667, "nDCG@10": 0.6149518506608848}
{"task_id": "MBPP/905", "prompt": "\n\ndef sum_of_square(n):\n   \"\"\"\n   Write a python function to find the sum of squares of binomial co-efficients.\n   >>> sum_of_square(4)\n   70\n   >>> sum_of_square(5)\n   252\n   >>> sum_of_square(2)\n   6\n   \"\"\"\n", "solution": "   def factorial(start,end): \n       res = 1 \n       for i in range(start,end + 1): \n           res *= i      \n       return res \n    \n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_of_square(n):\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, n // 2 + 1), 0, -1):\n            c[j] = c[j] + c[j - 1]\n    return sum(x * x for x in c)", "code_2": "def sum_of_square(n):\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        j = min(i, n // 2)\n        while j > 0:\n            c[j] += c[j - 1]\n            j -= 1\n    return sum(x * x for x in c)", "code_3": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        j = min(i, n // 2)\n        while j > 0:\n            c[j] += c[j - 1]\n            j -= 1\n    return sum(x * x for x in c)", "code_4": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(1, n + 1):\n        for j in range(min(i, n // 2), 0, -1):\n            c[j] += c[j - 1]\n    return sum(x * x for x in c)", "code_5": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(n):\n        c[i // 2:i + 1] = [sum(c[j:j + 2]) for j in range(i // 2, i + 1)]\n    return sum(x * x for x in c)", "code_6": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(n):\n        c = [sum(c[j:j + 2]) for j in range(i // 2, i + 1)] + [0] * (n - i - 1)\n    return sum(x * x for x in c)", "code_7": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(n):\n        c = [c[j] + c[j + 1] for j in range(i // 2, i + 1)] + [0] * (n - i - 1)\n    return sum(x * x for x in c)", "code_8": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(n):\n        c = [c[j] + c[j + 1] for j in range(i // 2, i + 1)] + c[i + 2:]\n    return sum(x * x for x in c)", "code_9": "def sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(n):\n        c = [c[j] + c[j + 1] for j in range(i // 2, i + 1)] + c[i + 2:]\n    return sum(map(lambda x: x * x, c))", "code_10": "from functools import reduce\ndef sum_of_square(n):\n    c = [1] + [0] * n\n    for i in range(n):\n        c = [c[j] + c[j + 1] for j in range(i // 2, i + 1)] + c[i + 2:]\n    return reduce(lambda x, y: x + y * y, c, 0)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/906", "prompt": "\n\ndef extract_date(url):\n        \"\"\"\n        Write a function to extract year, month and date from a url by using regex.\n        >>> extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n        [('2016', '09', '02')]\n        >>> extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n        [('2020', '11', '03')]\n        >>> extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n        [('2020', '12', '29')]\n        \"\"\"\n", "solution": "        import re\n        \n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "results": [0, 1, 1, 1, 1, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef extract_date(url):\n    return re.findall(r'\\d{4}/\\d{2}/\\d{2}', url)", "code_2": "import re\ndef extract_date(url):\n    return re.findall(r'(\\d{4})/(\\d{2})/(\\d{2})', url)", "code_3": "import re\ndef extract_date(url):\n    return [(m.group(1), m.group(2), m.group(3)) for m in re.finditer(r'(\\d{4})/(\\d{2})/(\\d{2})', url)]", "code_4": "import re\ndef extract_date(url):\n    match = re.search(r'(\\d{4})/(\\d{2})/(\\d{2})', url)\n    return [(match.group(1), match.group(2), match.group(3))] if match else []", "code_5": "import re\ndef extract_date(url):\n    return [m.groups() for m in re.finditer(r'(\\d{4})/(\\d{2})/(\\d{2})', url)]", "code_6": "import re\ndef extract_date(url):\n    return [tuple(m) for m in re.findall(r'(\\d{4})/(\\d{2})/(\\d{2})', url)]", "code_7": "import re\ndef extract_date(url):\n    return [m for m in re.findall(r'(\\d{4})/(\\d{2})/(\\d{2})', url)]", "code_8": "import re\ndef extract_date(url):\n    return [m.split('/') for m in re.findall(r'\\d{4}/\\d{2}/\\d{2}', url)]", "code_9": "import re\ndef extract_date(url):\n    return [tuple(re.split(r'/', m)) for m in re.findall(r'\\d{4}/\\d{2}/\\d{2}', url)]", "code_10": "import re\ndef extract_date(url):\n    return list(map(lambda x: (x[:4], x[4:6], x[6:]), re.findall(r'\\d{8}', url)))", "pass@3": 0.9916666666666667, "nDCG@10": 0.6468562235661909}
{"task_id": "MBPP/907", "prompt": "\n\ndef lucky_num(n):\n \"\"\"\n Write a function to print the first n lucky numbers.\n >>> lucky_num(10)\n [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n >>> lucky_num(5)\n [1, 3, 7, 9, 13]\n >>> lucky_num(8)\n [1, 3, 7, 9, 13, 15, 21, 25]\n \"\"\"\n", "solution": " \n List=range(-1,n*n+9,2)\n i=2\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\n return List[1:n+1]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            j += 1\n            k = 2 * res[-1] + 1\n            while k < j:\n                k = k * 2 + 1\n            if k == j:\n                res.append(j)\n    return res[:n]", "code_2": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            while 2 * res[-1] + 1 < j:\n                j += 1\n            if 2 * res[-1] + 1 == j:\n                res.append(j)\n            j += 1\n    return res[:n]", "code_3": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            k = 2 * res[-1] + 1\n            while k < j:\n                k = k * 2 + 1\n            if k == j:\n                res.append(j)\n            j += 1\n    return res[:n]", "code_4": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            k = 2 * res[-1] + 1\n            while k < j:\n                k = k * 2 + 1\n            if k == j:\n                res.append(j)\n                i += 1\n            j += 1\n    return res[:n]", "code_5": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            while 2 * res[-1] + 1 < j:\n                j += 1\n            if 2 * res[-1] + 1 == j:\n                res.append(j)\n                i += 1\n            j += 1\n    return res[:n]", "code_6": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            k = 2 * res[-1] + 1\n            while k < j:\n                k = k * 2 + 1\n            if k == j:\n                res.append(j)\n            i += 1\n            j += 1\n    return res[:n]", "code_7": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            k = 2 * res[-1] + 1\n            while k < j:\n                k = k * 2 + 1\n            if k == j:\n                res.append(j)\n                i += 1\n            j += 1\n    return res[:n]", "code_8": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            while 2 * res[-1] + 1 < j:\n                j += 1\n            if 2 * res[-1] + 1 == j:\n                res.append(j)\n            i += 1\n            j += 1\n    return res[:n]", "code_9": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            k = 2 * res[-1] + 1\n            while k < j:\n                k = k * 2 + 1\n            if k == j:\n                res.append(j)\n            i += (k == j)\n            j += 1\n    return res[:n]", "code_10": "def lucky_num(n):\n    res, i, j = [1], 0, 2\n    while len(res) < n:\n        if i < j:\n            res.append(2 * res[i] + 1)\n            i += 1\n        else:\n            while 2 * res[-1] + 1 < j:\n                j += 1\n            if 2 * res[-1] + 1 == j:\n                res.append(j)\n            i += (2 * res[-1] + 1 == j)\n            j += 1\n    return res[:n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/908", "prompt": "\n\ndef find_fixed_point(arr, n):\n\t\"\"\"\n\tWrite a function to find the fixed point in the given array.\n\t>>> find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9)\n\t3\n\t>>> find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8)\n\t-1\n\t>>> find_fixed_point([0, 2, 5, 8, 17],5)\n\t0\n\t\"\"\"\n", "solution": "\t \n\tfor i in range(n): \n\t\tif arr[i] is i: \n\t\t\treturn i \n\treturn -1", "results": [1, 1, 1, 1, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] == i:\n            return i\n    return -1", "code_2": "def find_fixed_point(arr, n):\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < mid:\n            low = mid + 1\n        elif arr[mid] > mid:\n            high = mid - 1\n        else:\n            return mid\n    return -1", "code_3": "def find_fixed_point(arr, n):\n    return next((i for i, x in enumerate(arr) if i == x), -1)", "code_4": "def find_fixed_point(arr, n):\n    return [i for i, x in enumerate(arr) if i == x][0] if [i for i, x in enumerate(arr) if i == x] else -1", "code_5": "def find_fixed_point(arr, n):\n    try:\n        return arr.index(next(i for i, x in enumerate(arr) if i == x))\n    except StopIteration:\n        return -1", "code_6": "def find_fixed_point(arr, n):\n    return reduce(lambda x, y: y if y == arr[y] else x, range(n), -1)", "code_7": "def find_fixed_point(arr, n):\n    return list(filter(lambda x: x == arr[x], range(n)))[0] if list(filter(lambda x: x == arr[x], range(n))) else -1", "code_8": "def find_fixed_point(arr, n):\n    return [arr[i] for i in range(n) if arr[i] == i][0] if [arr[i] for i in range(n) if arr[i] == i] else -1", "code_9": "def find_fixed_point(arr, n):\n    return [i for i in arr if i == arr[i]][0] if [i for i in arr if i == arr[i]] else -1", "code_10": "def find_fixed_point(arr, n):\n    return [i for i in range(n) if arr[i] == i][0] if [i for i in range(n) if arr[i] == i] else -1", "pass@3": 1.0, "nDCG@10": 0.8553475075669357}
{"task_id": "MBPP/909", "prompt": "\n\ndef previous_palindrome(num):\n    \"\"\"\n    Write a function to find the previous palindrome of a specified number.\n    >>> previous_palindrome(99)\n    88\n    >>> previous_palindrome(1221)\n    1111\n    >>> previous_palindrome(120)\n    111\n    \"\"\"\n", "solution": "    \n    for x in range(num-1,0,-1):\n        if str(x) == str(x)[::-1]:\n            return x", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 17, "code_1": "def previous_palindrome(num):\n    while str(num) != str(num)[::-1]:\n        num -= 1\n    return num", "code_2": "def previous_palindrome(num):\n    while not all(str(num)[i] == str(num)[-i-1] for i in range(len(str(num))//2)):\n        num -= 1\n    return num", "code_3": "def previous_palindrome(num):\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num -= 1", "code_4": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_5": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]", "code_6": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_7": "def is_palindrome(n):\n    return str(n) == ''.join(reversed(str(n)))", "code_8": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_9": "def is_palindrome(n):\n    return str(n) == ''.join([str(n)[i] for i in range(len(str(n))-1, -1, -1)])", "code_10": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_11": "def is_palindrome(n):\n    return str(n) == ''.join(map(str, reversed(map(int, str(n)))))", "code_12": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_13": "def is_palindrome(n):\n    return str(n) == ''.join(str(n)[i] for i in range(len(str(n))-1, -1, -1))", "code_14": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_15": "def is_palindrome(n):\n    return str(n) == ''.join(reversed(list(str(n))))", "code_16": "def previous_palindrome(num):\n    while not is_palindrome(num):\n        num -= 1\n    return num", "code_17": "def is_palindrome(n):\n    return str(n) == ''.join(str(n)[i] for i in range(len(str(n))-1, -1, -1))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/910", "prompt": "\n\ndef check_date(m, d, y):\n    \"\"\"\n    Write a function to validate a gregorian date.\n    >>> check_date(11,11,2002)\n    True\n    >>> check_date(13,11,2002)\n    False\n    >>> check_date('11','11','2002')\n    True\n    \"\"\"\n", "solution": "    import datetime\n    \n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from datetime import datetime\ndef check_date(m, d, y):\n    try:\n        datetime(int(y), int(m), int(d))\n        return True\n    except ValueError:\n        return False", "code_2": "import calendar\ndef check_date(m, d, y):\n    try:\n        return calendar.monthrange(int(y), int(m))[1] >= int(d)\n    except ValueError:\n        return False", "code_3": "def check_date(m, d, y):\n    if not all(isinstance(i, int) for i in (m, d, y)):\n        return False\n    if m < 1 or m > 12:\n        return False\n    if d < 1 or d > 31:\n        return False\n    if m in (4, 6, 9, 11) and d > 30:\n        return False\n    if m == 2:\n        if (y % 4 == 0 and y % 100 != 0) or (y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    return True", "code_4": "def check_date(m, d, y):\n    if isinstance(m, str):\n        m = int(m)\n    if isinstance(d, str):\n        d = int(d)\n    if isinstance(y, str):\n        y = int(y)\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m in [4, 6, 9, 11] and d > 30:\n        return False\n    if m == 2:\n        if y % 400 == 0 or (y % 4 == 0 and y % 100 != 0):\n            return d <= 29\n        else:\n            return d <= 28\n    return True", "code_5": "def check_date(m, d, y):\n    if not all(isinstance(i, int) for i in (m, d, y)):\n        try:\n            m, d, y = int(m), int(d), int(y)\n        except ValueError:\n            return False\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m in (4, 6, 9, 11) and d > 30:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    return True", "code_6": "def check_date(m, d, y):\n    if isinstance(m, str):\n        m = int(m)\n    if isinstance(d, str):\n        d = int(d)\n    if isinstance(y, str):\n        y = int(y)\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in (4, 6, 9, 11):\n        return d <= 30\n    return True", "code_7": "def check_date(m, d, y):\n    if not all(isinstance(i, int) for i in (m, d, y)):\n        try:\n            m, d, y = map(int, (m, d, y))\n        except ValueError:\n            return False\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in (4, 6, 9, 11):\n        return d <= 30\n    return True", "code_8": "def check_date(m, d, y):\n    if not all(isinstance(i, int) for i in (m, d, y)):\n        try:\n            m, d, y = int(m), int(d), int(y)\n        except ValueError:\n            return False\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in (4, 6, 9, 11):\n        return d <= 30\n    return True", "code_9": "def check_date(m, d, y):\n    if not all(isinstance(i, int) for i in (m, d, y)):\n        try:\n            m, d, y = map(int, (m, d, y))\n        except ValueError:\n            return False\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in (4, 6, 9, 11):\n        return d <= 30\n    return True", "code_10": "def check_date(m, d, y):\n    if not all(isinstance(i, int) for i in (m, d, y)):\n        try:\n            m, d, y = int(m), int(d), int(y)\n        except ValueError:\n            return False\n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in (4, 6, 9, 11):\n        return d <= 30\n    return True", "pass@3": 1.0, "nDCG@10": 0.88995411685096}
{"task_id": "MBPP/911", "prompt": "\n\ndef maximum_product(nums):\n    \"\"\"\n    Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n    >>> maximum_product( [12, 74, 9, 50, 61, 41])\n    225700\n    >>> maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    414375\n    >>> maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n    2520\n    \"\"\"\n", "solution": "    \n    import heapq\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "results": [0, 1, 1, 1, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "import heapq\ndef maximum_product(nums):\n    heapq.heapify(nums)\n    return max(heapq.nsmallest(3, nums), heapq.nlargest(2, nums))[0] * heapq.nlargest(3, nums)[0] * heapq.nlargest(3, nums)[1]", "code_2": "def maximum_product(nums):\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])", "code_3": "def maximum_product(nums):\n    min1 = min2 = float('inf')\n    max1 = max2 = max3 = float('-inf')\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)", "code_4": "def maximum_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])", "code_5": "def maximum_product(nums):\n    min1 = min2 = float('inf')\n    max1 = max2 = max3 = float('-inf')\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)", "code_6": "import heapq\ndef maximum_product(nums):\n    heapq.heapify(nums)\n    return max(heapq.nsmallest(2, nums), heapq.nlargest(3, nums))[0] * heapq.nlargest(3, nums)[0] * heapq.nlargest(3, nums)[1]", "code_7": "def maximum_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])", "code_8": "def maximum_product(nums):\n    min1 = min2 = float('inf')\n    max1 = max2 = max3 = float('-inf')\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)", "code_9": "import heapq\ndef maximum_product(nums):\n    heapq.heapify(nums)\n    return max(heapq.nsmallest(3, nums), heapq.nlargest(2, nums))[0] * heapq.nlargest(3, nums)[0] * heapq.nlargest(3, nums)[1]", "code_10": "def maximum_product(nums):\n    nums.sort()\n    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])", "pass@3": 0.9916666666666667, "nDCG@10": 0.6352557412688554}
{"task_id": "MBPP/912", "prompt": "\n\ndef lobb_num(n, m):\n\t\"\"\"\n\tWrite a function to find ln, m lobb number.\n\t>>> lobb_num(5, 3)\n\t35\n\t>>> lobb_num(3, 2)\n\t5\n\t>>> lobb_num(4, 2)\n\t20\n\t\"\"\"\n", "solution": "\tdef binomial_coeff(n, k): \n\t\tC = [[0 for j in range(k + 1)] \n\t\t\t\tfor i in range(n + 1)] \n\t\tfor i in range(0, n + 1): \n\t\t\tfor j in range(0, min(i, k) + 1): \n\t\t\t\tif (j == 0 or j == i): \n\t\t\t\t\tC[i][j] = 1\n\t\t\t\telse: \n\t\t\t\t\tC[i][j] = (C[i - 1][j - 1] \n\t\t\t\t\t\t\t\t+ C[i - 1][j]) \n\t\treturn C[n][k] \n\t \n\treturn (((2 * m + 1) *\n\t\tbinomial_coeff(2 * n, m + n)) \n\t\t\t\t\t/ (m + n + 1))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def lobb_num(n, m): return sum(i**m for i in range(1, n+1))", "code_2": "def lobb_num(n, m): return sum(map(lambda i: i**m, range(1, n+1)))", "code_3": "import numpy as np\ndef lobb_num(n, m): return np.sum(np.arange(1, n+1)**m)", "code_4": "from functools import reduce\ndef lobb_num(n, m): return reduce(lambda x, y: x + y**m, range(1, n+1), 0)", "code_5": "def lobb_num(n, m): return sum(pow(i, m) for i in range(1, n+1))", "code_6": "def lobb_num(n, m): return sum(i**m for i in xrange(1, n+1))", "code_7": "import itertools\ndef lobb_num(n, m): return sum(itertools.starmap(pow, zip(range(1, n+1), itertools.repeat(m))))", "code_8": "def lobb_num(n, m): return sum(map(pow, range(1, n+1), [m]*n))", "code_9": "def lobb_num(n, m): return sum(map(lambda i: i**m, xrange(1, n+1)))", "code_10": "def lobb_num(n, m): return sum(map(pow, xrange(1, n+1), [m]*n))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/913", "prompt": "\n\ndef end_num(string):\n    \"\"\"\n    Write a function to check for a number at the end of a string.\n    >>> end_num('abcdef')\n    False\n    >>> end_num('abcdef7')\n    True\n    >>> end_num('abc')\n    False\n    \"\"\"\n", "solution": "    import re\n    \n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def end_num(string): return string[-1].isdigit()", "code_2": "def end_num(string): return string[-1] in '0123456789'", "code_3": "import re\ndef end_num(string): return bool(re.search(r'\\d$', string))", "code_4": "def end_num(string): return string[-1] >= '0' and string[-1] <= '9'", "code_5": "def end_num(string): return string[-1].isnumeric()", "code_6": "def end_num(string): return string[-1].translate(str.maketrans('', '', '0123456789')) != string[-1]", "code_7": "def end_num(string): return string[-1] in map(str, range(10))", "code_8": "def end_num(string): return string[-1] in '\u2070\u00b9\u00b2\u00b3\u2074\u2075\u2076\u2077\u2078\u2079'", "code_9": "def end_num(string): return string[-1] in '\u24ea\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468'", "code_10": "def end_num(string): return string[-1] in '\ud835\udfd8\ud835\udfd9\ud835\udfda\ud835\udfdb\ud835\udfdc\ud835\udfdd\ud835\udfde\ud835\udfdf\ud835\udfe0\ud835\udfe1'", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/914", "prompt": "\n\ndef is_Two_Alter(s):\n    \"\"\"\n    Write a python function to check whether the given string is made up of two alternating characters or not.\n    >>> is_Two_Alter(\"abab\")\n    True\n    >>> is_Two_Alter(\"aaaa\")\n    False\n    >>> is_Two_Alter(\"xyz\")\n    False\n    \"\"\"\n", "solution": "      \n    for i in range (len( s) - 2) : \n        if (s[i] != s[i + 2]) : \n            return False\n    if (s[0] == s[1]): \n        return False\n    return True", "results": [0, 0, 0, 0, 0, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def is_Two_Alter(s): return all(s[i] != s[i + 1] for i in range(len(s) - 1))", "code_2": "def is_Two_Alter(s): return ''.join(sorted(set(s))) == s[::2]", "code_3": "def is_Two_Alter(s): return all(a != b for a, b in zip(s, s[1:]))", "code_4": "def is_Two_Alter(s): return len(set(s[i] == s[i + 1] for i in range(len(s) - 1))) == 1", "code_5": "def is_Two_Alter(s): return s == ''.join(s[i % 2] for i in range(len(s)))", "code_6": "def is_Two_Alter(s): return s.replace(s[::2], '').replace(s[1::2], '') == ''", "code_7": "def is_Two_Alter(s): return len(set(s[::2])) == 1 and len(set(s[1::2])) == 1 and s[0] != s[1]", "code_8": "def is_Two_Alter(s): return s.count(s[0]) * 2 == len(s) and s.count(s[1]) * 2 == len(s)", "code_9": "def is_Two_Alter(s): return s.count(s[0]) == s.count(s[1]) and all(a != b for a, b in zip(s, s[1:]))", "code_10": "def is_Two_Alter(s): return len(set(s[i] == s[i + 1] for i in range(0, len(s), 2))) == 1 and len(set(s[i] == s[i + 1] for i in range(1, len(s), 2))) == 1", "pass@3": 0.5333333333333333, "nDCG@10": 0.14279514403613736}
{"task_id": "MBPP/915", "prompt": "\n\ndef rearrange_numbs(array_nums):\n  \"\"\"\n  Write a function to rearrange positive and negative numbers in a given array using lambda function.\n  >>> rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])\n  [2, 5, 7, 8, 9, -10, -3, -1]\n  >>> rearrange_numbs([10,15,14,13,-18,12,-20])\n  [10, 12, 13, 14, 15, -20, -18]\n  >>> rearrange_numbs([-20,20,-10,10,-30,30])\n  [10, 20, 30, -30, -20, -10]\n  \"\"\"\n", "solution": "  \n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\n  return result ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "rearrange_numbs = lambda array_nums: sorted(array_nums, key=lambda x: x < 0)", "code_2": "rearrange_numbs = lambda array_nums: [i for i in array_nums if i >= 0] + [i for i in array_nums if i < 0]", "code_3": "rearrange_numbs = lambda array_nums: [*filter(lambda x: x >= 0, array_nums), *filter(lambda x: x < 0, array_nums)]", "code_4": "rearrange_numbs = lambda array_nums: [*map(lambda x: x[1], sorted(enumerate(array_nums), key=lambda x: x[1] < 0))]", "code_5": "rearrange_numbs = lambda array_nums: list(reduce(lambda a, b: a + b, [[i for i in array_nums if i >= 0], [i for i in array_nums if i < 0]]))", "code_6": "rearrange_numbs = lambda array_nums: [i for i in array_nums if i >= 0] + list(reversed([i for i in array_nums if i < 0]))", "code_7": "rearrange_numbs = lambda array_nums: [i for i in array_nums if i >= 0] + list(reversed(list(filter(lambda x: x < 0, array_nums))))", "code_8": "rearrange_numbs = lambda array_nums: [i for i in array_nums if i >= 0] + [array_nums.pop(i) for i in range(len(array_nums)-1, -1, -1) if i < 0]", "code_9": "rearrange_numbs = lambda array_nums: [i for i in array_nums if i >= 0] + [array_nums[i] for i in range(len(array_nums)-1, -1, -1) if array_nums[i] < 0]", "code_10": "rearrange_numbs = lambda array_nums: [i for i in array_nums if i >= 0] + list(reversed(list(compress(array_nums, [i < 0 for i in array_nums]))))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/916", "prompt": "\n\ndef find_triplet_array(A, arr_size, sum):\n\t\"\"\"\n\tWrite a function to find if there is a triplet in the array whose sum is equal to a given value.\n\t>>> find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)\n\t(4, 10, 8)\n\t>>> find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)\n\t(12, 3, 9)\n\t>>> find_triplet_array([1, 2, 3, 4, 5], 5, 9)\n\t(1, 3, 5)\n\t\"\"\"\n", "solution": "\t \n\tfor i in range( 0, arr_size-2): \n\t\tfor j in range(i + 1, arr_size-1): \n\t\t\tfor k in range(j + 1, arr_size): \n\t\t\t\tif A[i] + A[j] + A[k] == sum: \n\t\t\t\t\treturn  A[i],A[j],A[k] \n\t\t\t\t\treturn True\n\treturn False", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(0, arr_size-2):\n\t\tl = i + 1\n\t\tr = arr_size - 1\n\t\twhile l < r:\n\t\t\tif A[i] + A[l] + A[r] == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif A[i] + A[l] + A[r] < sum:\n\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\treturn None", "code_2": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\treturn None", "code_3": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_4": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_5": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_6": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_7": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_8": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_9": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "code_10": "def find_triplet_array(A, arr_size, sum):\n\tA.sort()\n\tfor i in range(arr_size - 2):\n\t\tif i > 0 and A[i] == A[i - 1]:\n\t\t\tcontinue\n\t\tl, r = i + 1, arr_size - 1\n\t\twhile l < r:\n\t\t\ts = A[i] + A[l] + A[r]\n\t\t\tif s == sum:\n\t\t\t\treturn (A[i], A[l], A[r])\n\t\t\telif s < sum:\n\t\t\t\tl += 1\n\t\t\t\twhile l < r and A[l] == A[l - 1]:\n\t\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tr -= 1\n\t\t\t\twhile l < r and A[r] == A[r + 1]:\n\t\t\t\t\tr -= 1\n\treturn None", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/917", "prompt": "\n\ndef text_uppercase_lowercase(text):\n        \"\"\"\n        Write a function to find the sequences of one upper case letter followed by lower case letters.\n        >>> text_uppercase_lowercase(\"AaBbGg\")\n        ('Found a match!')\n        >>> text_uppercase_lowercase(\"aA\")\n        ('Not matched!')\n        >>> text_uppercase_lowercase(\"PYTHON\")\n        ('Not matched!')\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = '[A-Z]+[a-z]+$'\n        if re.search(patterns, text):\n                return 'Found a match!'\n        else:\n                return ('Not matched!')", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if any(c1.isupper() and c2.islower() for c1, c2 in zip(text, text[1:])) else 'Not matched!'", "code_2": "def text_uppercase_lowercase(text):\n    for i in range(len(text) - 1):\n        if text[i].isupper() and text[i + 1].islower():\n            return 'Found a match!'\n    return 'Not matched!'", "code_3": "import re\ndef text_uppercase_lowercase(text):\n    return 'Found a match!' if re.search(r'[A-Z][a-z]', text) else 'Not matched!'", "code_4": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if any(text[i].isupper() and text[i + 1].islower() for i in range(len(text) - 1)) else 'Not matched!'", "code_5": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if sum(text[i].isupper() and text[i + 1].islower() for i in range(len(text) - 1)) > 0 else 'Not matched!'", "code_6": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if next((True for i in range(len(text) - 1) if text[i].isupper() and text[i + 1].islower()), False) else 'Not matched!'", "code_7": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if [1 for i in range(len(text) - 1) if text[i].isupper() and text[i + 1].islower()] else 'Not matched!'", "code_8": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if filter(lambda i: text[i].isupper() and text[i + 1].islower(), range(len(text) - 1)) else 'Not matched!'", "code_9": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if [i for i in range(len(text) - 1) if text[i].isupper() and text[i + 1].islower()] else 'Not matched!'", "code_10": "def text_uppercase_lowercase(text):\n    return 'Found a match!' if list(filter(lambda i: text[i].isupper() and text[i + 1].islower(), range(len(text) - 1))) else 'Not matched!'", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/918", "prompt": "\n\ndef coin_change(S, m, n):\n    \"\"\"\n    Write a function to count coin change.\n    >>> coin_change([1, 2, 3],3,4)\n    4\n    >>> coin_change([4,5,6,7,8,9],6,9)\n    2\n    >>> coin_change([4,5,6,7,8,9],6,4)\n    1\n    \"\"\"\n", "solution": "     \n    table = [[0 for x in range(m)] for x in range(n+1)] \n    for i in range(m): \n        table[0][i] = 1\n    for i in range(1, n+1): \n        for j in range(m): \n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0 \n            table[i][j] = x + y   \n    return table[n][m-1] ", "results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def coin_change(S, m, n):\n    table = [0 for k in range(n+1)]\n    table[0] = 1\n    for i in range(0,m):\n        for j in range(S[i],n+1):\n            table[j] += table[j-S[i]]\n    return table[n]", "code_2": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for coin in S:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    return dp[n]", "code_3": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for coin in S:\n            if i >= coin:\n                dp[i] += dp[i - coin]\n    return dp[n]", "code_4": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for coin in S:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    return dp[n]", "code_5": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(m):\n            if i >= S[j]:\n                dp[i] += dp[i - S[j]]\n    return dp[n]", "code_6": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for coin in S:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    return dp[n]", "code_7": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for coin in S:\n            if i >= coin:\n                dp[i] += dp[i - coin]\n    return dp[n]", "code_8": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for coin in S:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    return dp[n]", "code_9": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for coin in S:\n            if i >= coin:\n                dp[i] += dp[i - coin]\n    return dp[n]", "code_10": "def coin_change(S, m, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for coin in S:\n        for i in range(coin, n + 1):\n            dp[i] += dp[i - coin]\n    return dp[n]", "pass@3": 0.9666666666666667, "nDCG@10": 0.6651928536555898}
{"task_id": "MBPP/919", "prompt": "\n\ndef multiply_list(items):\n    \"\"\"\n    Write a python function to multiply all items in the list.\n    >>> multiply_list([1,-2,3])\n    -6\n    >>> multiply_list([1,2,3,4])\n    24\n    >>> multiply_list([3,1,2,3])\n    18\n    \"\"\"\n", "solution": "    \n    tot = 1\n    for x in items:\n        tot *= x\n    return tot", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 10, "code_1": "from functools import reduce\nfrom operator import mul\ndef multiply_list(items):\n    return reduce(mul, items, 1)", "code_2": "import numpy as np\ndef multiply_list(items):\n    return np.prod(items)", "code_3": "def multiply_list(items):\n    product = 1\n    for num in items:\n        product *= num\n    return product", "code_4": "def multiply_list(items):\n    return eval('*'.join(map(str, items)))", "code_5": "import math\ndef multiply_list(items):\n    return math.prod(items)", "code_6": "def multiply_list(items):\n    product = 1\n    while items:\n        product *= items.pop()\n    return product", "code_7": "def multiply_list(items):\n    return multiply_list(items[:-1]) * items[-1] if items else 1", "code_8": "def multiply_list(items):\n    return multiply_list(items[1:]) * items[0] if items else 1", "code_9": "def multiply_list(items):\n    return multiply_list(items[1:]) * items[0] if len(items) > 1 else items[0]", "code_10": "def multiply_list(items):\n    return multiply_list(items[1:]) * items[0] if items else None", "pass@3": 1.0, "nDCG@10": 0.9363792118010483}
{"task_id": "MBPP/920", "prompt": "\n\ndef remove_tuple(test_list):\n  \"\"\"\n  Write a function to remove all tuples with all none values in the given tuple list.\n  >>> remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] )\n  '[(None, 2), (3, 4), (12, 3)]'\n  >>> remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] )\n  '[(3, 6), (17, 3), (None, 1)]'\n  >>> remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] )\n  '[(1, 2), (2, None), (3, None), (24, 3)]'\n  \"\"\"\n", "solution": "  \n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n  return (str(res)) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def remove_tuple(test_list):\n    return [t for t in test_list if not all(v is None for v in t)]", "code_2": "def remove_tuple(test_list):\n    return list(filter(lambda t: not all(v is None for v in t), test_list))", "code_3": "def remove_tuple(test_list):\n    return [t for t in test_list if any(v is not None for v in t)]", "code_4": "def remove_tuple(test_list):\n    return list(filter(lambda t: any(v is not None for v in t), test_list))", "code_5": "def remove_tuple(test_list):\n    return [t for t in test_list if len(set(t)) > 1]", "code_6": "def remove_tuple(test_list):\n    return list(filter(lambda t: len(set(t)) > 1, test_list))", "code_7": "def remove_tuple(test_list):\n    return [t for t in test_list if None not in t or len(t) > 1]", "code_8": "def remove_tuple(test_list):\n    return list(filter(lambda t: None not in t or len(t) > 1, test_list))", "code_9": "def remove_tuple(test_list):\n    return [t for t in test_list if sum(1 for v in t if v is None) < len(t)]", "code_10": "def remove_tuple(test_list):\n    return list(filter(lambda t: sum(1 for v in t if v is None) < len(t), test_list))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/921", "prompt": "\n\ndef chunk_tuples(test_tup, N):\n  \"\"\"\n  Write a function to perform chunking of tuples each of size n.\n  >>> chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)\n  [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n  >>> chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n  [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n  >>> chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)\n  [(11, 14, 16, 17), (19, 21, 22, 25)]\n  \"\"\"\n", "solution": "  \n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n  return (res) ", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N)]", "code_2": "def chunk_tuples(test_tup, N):\n    return [tuple(test_tup[i:i + N]) for i in range(0, len(test_tup), N)]", "code_3": "def chunk_tuples(test_tup, N):\n    return list(map(tuple, [test_tup[i:i + N] for i in range(0, len(test_tup), N)]))", "code_4": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if i + N <= len(test_tup)]", "code_5": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if len(test_tup[i:i + N]) == N]", "code_6": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if len(test_tup) - i >= N]", "code_7": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if i + N < len(test_tup) or i + N == len(test_tup)]", "code_8": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if len(test_tup[i:]) >= N]", "code_9": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if len(test_tup) - i > N or len(test_tup) - i == N]", "code_10": "def chunk_tuples(test_tup, N):\n    return [test_tup[i:i + N] for i in range(0, len(test_tup), N) if i + N <= len(test_tup) and len(test_tup[i:i + N]) == N]", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/922", "prompt": "\n\ndef max_product(arr):\n    \"\"\"\n    Write a function to find a pair with the highest product from a given array of integers.\n    >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n    (7, 8)\n    >>> max_product([0, -1, -2, -4, 5, 0, -6])\n    (-4, -6)\n    >>> max_product([1, 3, 5, 6, 8, 9])\n    (8,9)\n    \"\"\"\n", "solution": "     \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None     \n    x = arr[0]; y = arr[1]    \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y   ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_product(arr):\n    arr.sort()\n    return (arr[-1], arr[-2])", "code_2": "def max_product(arr):\n    a, b = max(arr), float('-inf')\n    for i in arr:\n        if i > b and i < a:\n            b = i\n    return (a, b)", "code_3": "def max_product(arr):\n    a, b = sorted(arr)[-2:]\n    return (a, b)", "code_4": "def max_product(arr):\n    a, b = sorted(arr, reverse=True)[:2]\n    return (a, b)", "code_5": "def max_product(arr):\n    a, b = sorted(arr)[-1], float('-inf')\n    for i in reversed(arr):\n        if i > b and i < a:\n            b = i\n    return (a, b)", "code_6": "def max_product(arr):\n    a, b = max(arr), float('-inf')\n    for i in reversed(arr):\n        if i > b and i < a:\n            b = i\n    return (a, b)", "code_7": "def max_product(arr):\n    a, b = sorted(arr, key=lambda x: -x)[:2]\n    return (a, b)", "code_8": "def max_product(arr):\n    a, b = sorted(arr, reverse=True)[:2]\n    return (b, a)", "code_9": "def max_product(arr):\n    a, b = max(arr), float('-inf')\n    for i in arr:\n        if i > b:\n            a, b = max(a, i), min(a, i)\n    return (a, b)", "code_10": "def max_product(arr):\n    a, b = max(arr), float('-inf')\n    for i in arr:\n        if i > b and i != a:\n            b = i\n    return (a, b)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/923", "prompt": "\n\ndef super_seq(X, Y, m, n):\n\t\"\"\"\n\tWrite a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n\t>>> super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n\t9\n\t>>> super_seq(\"feek\", \"eke\", 4, 3)\n\t5\n\t>>> super_seq(\"PARRT\", \"RTA\", 5, 3)\n\t6\n\t\"\"\"\n", "solution": "\t\n\tif (not m):\n\t\treturn n\n\tif (not n):\n\t\treturn m\n\tif (X[m - 1] == Y[n - 1]):\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def super_seq(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if not i: dp[i][j] = j\n            elif not j: dp[i][j] = i\n            elif X[i - 1] == Y[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1]\n            else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return m + n - dp[m][n]", "code_2": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))] + [[i] + [0] * n for i in range(1, m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1]\n            else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return m + n - dp[m][n]", "code_3": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        prev, dp[i - 1][0] = dp[i - 1][0], i\n        for j in range(1, n + 1):\n            prev, dp[i - 1][j] = dp[i - 1][j], prev if X[i - 1] == Y[j - 1] else min(dp[i - 1][j], prev) + 1\n    return m + n - dp[m][n]", "code_4": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        prev, dp[i - 1][0] = i, i\n        for j in range(1, n + 1):\n            prev, dp[i - 1][j] = dp[i - 1][j], dp[i - 2][j - 1] if X[i - 1] == Y[j - 1] else min(dp[i - 1][j - 1], prev) + 1\n    return dp[m][n]", "code_5": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        prev, dp[i - 1][0] = i, i\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j - 1] if X[i - 1] == Y[j - 1] else min(dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[m][n]", "code_6": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        dp.append([i] + [0] * n)\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j - 1] if X[i - 1] == Y[j - 1] else min(dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[m][n]", "code_7": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        dp.append([i] + [0] * n)\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1]\n            else: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[m][n]", "code_8": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        dp.append([i] + [0] * n)\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j - 1] + 1 if X[i - 1] != Y[j - 1] else dp[i - 1][j - 1]\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[m][n]", "code_9": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        dp.append([i] + [0] * n)\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1]\n            else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "code_10": "def super_seq(X, Y, m, n):\n    dp = [list(range(n + 1))]\n    for i in range(1, m + 1):\n        dp.append([i] + [0] * n)\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i - 1][j - 1] if X[i - 1] == Y[j - 1] else 1 + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/924", "prompt": "\n\ndef max_of_two( x, y ):\n    \"\"\"\n    Write a function to find maximum of two numbers.\n    >>> max_of_two(10,20)\n    20\n    >>> max_of_two(19,15)\n    19\n    >>> max_of_two(-10,-20)\n    -10\n    \"\"\"\n", "solution": "    \n    if x > y:\n        return x\n    return y", "results": [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def max_of_two(x, y): return x if x > y else y", "code_2": "def max_of_two(x, y): return max(x, y)", "code_3": "def max_of_two(x, y): return sorted([x, y])[-1]", "code_4": "def max_of_two(x, y): return (x + y + abs(x - y)) // 2", "code_5": "def max_of_two(x, y): return y * (x < y) + x * (x >= y)", "code_6": "def max_of_two(x, y): return (x > y) and x or y", "code_7": "def max_of_two(x, y): return y if x < y else x", "code_8": "def max_of_two(x, y): return [x, y][x < y]", "code_9": "def max_of_two(x, y): return {False: y, True: x}[x < y]", "code_10": "def max_of_two(x, y): return (x * (x > y) + y * (x <= y))", "pass@3": 1.0, "nDCG@10": 0.9337457765456111}
{"task_id": "MBPP/925", "prompt": "\n\ndef mutiple_tuple(nums):\n    \"\"\"\n    Write a python function to calculate the product of all the numbers of a given tuple.\n    >>> mutiple_tuple((4, 3, 2, 2, -1, 18))\n    -864\n    >>> mutiple_tuple((1,2,3))\n    6\n    >>> mutiple_tuple((-2,-4,-6))\n    -48\n    \"\"\"\n", "solution": "    \n    temp = list(nums)\n    product = 1 \n    for x in temp:\n        product *= x\n    return product", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from functools import reduce\nimport operator\ndef multiple_tuple(nums):\n    return reduce(operator.mul, nums, 1)", "code_2": "import numpy as np\ndef multiple_tuple(nums):\n    return np.prod(nums)", "code_3": "def multiple_tuple(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product", "code_4": "def multiple_tuple(nums):\n    return eval('*'.join(map(str, nums)))", "code_5": "import math\ndef multiple_tuple(nums):\n    return math.prod(nums)", "code_6": "def multiple_tuple(nums):\n    product = 1\n    i = 0\n    while i < len(nums):\n        product *= nums[i]\n        i += 1\n    return product", "code_7": "def multiple_tuple(nums):\n    return _product(nums, 1)\ndef _product(nums, acc):\n    return _product(nums[1:], acc * nums[0]) if nums else acc", "code_8": "def multiple_tuple(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return nums[0] * multiple_tuple(nums[1:])", "code_9": "def multiple_tuple(nums):\n    return _product(iter(nums))\ndef _product(iterator):\n    result = 1\n    for num in iterator:\n        result *= num\n    return result", "code_10": "def multiple_tuple(nums):\n    return _product(iter(nums), 1)\ndef _product(iterator, acc):\n    try:\n        return _product(iterator, acc * next(iterator))\n    except StopIteration:\n        return acc", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/926", "prompt": "\n\ndef rencontres_number(n, m):\n\t\"\"\"\n\tWrite a function to find n-th rencontres number.\n\t>>> rencontres_number(7, 2)\n\t924\n\t>>> rencontres_number(3, 0)\n\t2\n\t>>> rencontres_number(3, 1)\n\t3\n\t\"\"\"\n", "solution": "\tdef binomial_coeffi(n, k): \n\t\tif (k == 0 or k == n): \n\t\t\treturn 1\n\t\treturn (binomial_coeffi(n - 1, k - 1) \n\t\t\t+ binomial_coeffi(n - 1, k)) \n\t \n\tif (n == 0 and m == 0): \n\t\treturn 1\n\tif (n == 1 and m == 0): \n\t\treturn 0\n\tif (m == 0): \n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def rencontres_number(n, m):\n\tr = [0] * (n + 1)\n\tr[0] = 1\n\tfor i in range(1, n + 1):\n\t\tr[i] = r[i - 1] * (3 * i - 1) // i\n\t\tif i <= m:\n\t\t\tr[i] += r[i - 1]\n\treturn r[n]", "code_2": "def rencontres_number(n, m):\n\tr = [1]\n\tfor i in range(1, n + 1):\n\t\tr.append(r[-1] * (3 * i - 1) // i + (r[-1] if i <= m else 0))\n\treturn r[n]", "code_3": "def rencontres_number(n, m):\n\tr = [1] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\tr[i] = r[i - 1] * (3 * i - 1) // i\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_4": "def rencontres_number(n, m):\n\tr = [1]\n\tfor i in range(1, n + 1):\n\t\tr.append(r[-1] * (3 * i - 1) // i)\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_5": "def rencontres_number(n, m):\n\tr = [1] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\tr[i] = r[i - 1] * (3 * i - 1) // i\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_6": "def rencontres_number(n, m):\n\tr = [1]\n\tfor i in range(1, n + 1):\n\t\tr.append(r[-1] * (3 * i - 1) // i)\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_7": "def rencontres_number(n, m):\n\tr = [1] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\tr[i] = r[i - 1] * (3 * i - 1) // i\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_8": "def rencontres_number(n, m):\n\tr = [1]\n\tfor i in range(1, n + 1):\n\t\tr.append(r[-1] * (3 * i - 1) // i)\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_9": "def rencontres_number(n, m):\n\tr = [1] * (n + 1)\n\tfor i in range(1, n + 1):\n\t\tr[i] = r[i - 1] * (3 * i - 1) // i\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "code_10": "def rencontres_number(n, m):\n\tr = [1]\n\tfor i in range(1, n + 1):\n\t\tr.append(r[-1] * (3 * i - 1) // i)\n\t\tif i > m:\n\t\t\tr[i] -= r[i - m - 1]\n\treturn r[n]", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/927", "prompt": "\n\ndef max_height(node):\n\t\"\"\"\n\tWrite a function to calculate the height of the given binary tree.\n\t>>> max_height(root)\n\t3\n\t>>> max_height(root1)\n\t5\n\t>>> max_height(root2)\n\t4\n\t\"\"\"\n", "solution": "\tclass Node: \n\t\tdef __init__(self, data): \n\t\t\tself.data = data \n\t\t\tself.left = None\n\t\t\tself.right = None\n\t \n\tif node is None: \n\t\treturn 0 ; \n\telse : \n\t\tleft_height = max_height(node.left) \n\t\tright_height = max_height(node.right) \n\t\tif (left_height > right_height): \n\t\t\treturn left_height+1\n\t\telse: \n\t\t\treturn right_height+1", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        return max(left_height, right_height) + 1", "code_2": "def max_height(node):\n    return 0 if node is None else 1 + max(max_height(node.left), max_height(node.right))", "code_3": "def max_height(node):\n    if not node:\n        return 0\n    return 1 + max(map(max_height, (node.left, node.right)))", "code_4": "def max_height(node):\n    if node is None:\n        return 0\n    return 1 + max(max_height(node.left), max_height(node.right))", "code_5": "def max_height(node):\n    return 1 + max(max_height(node.left), max_height(node.right)) if node else 0", "code_6": "def max_height(node):\n    if node:\n        return 1 + max(max_height(node.left), max_height(node.right))\n    return 0", "code_7": "def max_height(node):\n    return 1 + max(max_height(child) for child in (node.left, node.right) if child) if node else 0", "code_8": "def max_height(node):\n    if node is None:\n        return 0\n    left_height = max_height(node.left)\n    right_height = max_height(node.right)\n    return max(left_height, right_height) + 1", "code_9": "def max_height(node):\n    if node is None:\n        return 0\n    return 1 + max(max_height(node.left), max_height(node.right))", "code_10": "def max_height(node):\n    return 1 + max(max_height(node.left), max_height(node.right)) if node else 0", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/928", "prompt": "\n\ndef change_date_format(dt):\n        \"\"\"\n        Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n        >>> change_date_format('2026-01-02')\n        '02-01-2026'\n        >>> change_date_format('2021-01-04')\n        '04-01-2021'\n        >>> change_date_format('2030-06-06')\n        '06-06-2030'\n        \"\"\"\n", "solution": "        import re\n        \n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n        return change_date_format(dt)", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "Using split and join:\ndef change_date_format(dt):\n    y, m, d = dt.split('-')\n    return '-'.join([d, m, y])", "code_2": "Using strptime and strftime from datetime module:\nfrom datetime import datetime\ndef change_date_format(dt):\n    return datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')", "code_3": "Using slicing:\ndef change_date_format(dt):\n    return dt[8:] + dt[4:8] + dt[:4]", "code_4": "Using regular expressions:\nimport re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)", "code_5": "Using list comprehension:\ndef change_date_format(dt):\n    return ''.join([dt[8:], '-', dt[5:7], '-', dt[:4]])", "code_6": "Using format method:\ndef change_date_format(dt):\n    y, m, d = dt.split('-')\n    return '{}-{}-{}'.format(d, m, y)", "code_7": "Using f-string:\ndef change_date_format(dt):\n    y, m, d = dt.split('-')\n    return f'{d}-{m}-{y}'", "code_8": "Using map and join:\ndef change_date_format(dt):\n    return '-'.join(map(lambda x: dt[8:] if x == 2 else dt[5:7] if x == 1 else dt[:4], range(3)))", "code_9": "Using itemgetter and join:\nfrom operator import itemgetter\ndef change_date_format(dt):\n    return '-'.join(itemgetter(8, 9, 5, 6, 0, 1, 2, 3, 4)(dt))", "code_10": "Using numpy's datetime64 and astype:\nimport numpy as np\ndef change_date_format(dt):\n    return np.datetime64(dt).astype('datetime64[D]').strftime('%d-%m-%Y')", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/929", "prompt": "\n\ndef count_tuplex(tuplex,value):\n  \"\"\"\n  Write a function to count repeated items of a tuple.\n  >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)\n  3\n  >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)\n  2\n  >>> count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)\n  4\n  \"\"\"\n", "solution": "    \n  count = tuplex.count(value)\n  return count", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_tuplex(tuplex, value):\n    return tuplex.count(value)", "code_2": "def count_tuplex(tuplex, value):\n    return sum(1 for i in tuplex if i == value)", "code_3": "from collections import Counter\ndef count_tuplex(tuplex, value):\n    return Counter(tuplex)[value]", "code_4": "import numpy as np\ndef count_tuplex(tuplex, value):\n    return np.count_nonzero(np.array(tuplex) == value)", "code_5": "def count_tuplex(tuplex, value):\n    return len([i for i in tuplex if i == value])", "code_6": "def count_tuplex(tuplex, value):\n    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count", "code_7": "def count_tuplex(tuplex, value):\n    return len(list(filter(lambda x: x == value, tuplex)))", "code_8": "def count_tuplex(tuplex, value):\n    return reduce(lambda count, x: count + (x == value), tuplex, 0)", "code_9": "def count_tuplex(tuplex, value):\n    return len(list(tuplex).remove(value))", "code_10": "def count_tuplex(tuplex, value):\n    return len(tuplex) - len(tuplex).replace(value, ''))", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/930", "prompt": "\n\ndef text_match(text):\n        \"\"\"\n        Write a function that matches a string that has an a followed by zero or more b's by using regex.\n        >>> text_match(\"msb\")\n        'Not matched!'\n        >>> text_match(\"a0c\")\n        'Found a match!'\n        >>> text_match(\"abbc\")\n        'Found a match!'\n        \"\"\"\n", "solution": "        import re\n        \n        patterns = 'ab*?'\n        if re.search(patterns,  text):\n                return ('Found a match!')\n        else:\n                return ('Not matched!')", "results": [1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "import re\ndef text_match(text):\n    if re.search(r'ab*', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "code_2": "import re\ndef text_match(text):\n    return 'Found a match!' if re.search(r'ab*', text) else 'Not matched!'", "code_3": "import re\ndef text_match(text):\n    return 'Found a match!' if re.match(r'.*ab*', text) else 'Not matched!'", "code_4": "import re\ndef text_match(text):\n    return 'Found a match!' if re.fullmatch(r'.*ab*', text) else 'Not matched!'", "code_5": "import re\ndef text_match(text):\n    return 'Found a match!' if re.findall(r'ab*', text) else 'Not matched!'", "code_6": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'ab*').search(text) else 'Not matched!'", "code_7": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'ab*').match(text) else 'Not matched!'", "code_8": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'ab*').fullmatch(text) else 'Not matched!'", "code_9": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'ab*').findall(text) else 'Not matched!'", "code_10": "import re\ndef text_match(text):\n    return 'Found a match!' if re.compile(r'ab*').finditer(text).__next__() else 'Not matched!'", "pass@3": 0.9916666666666667, "nDCG@10": 0.7721596254947204}
{"task_id": "MBPP/931", "prompt": "\n\ndef sum_series(number):\n \"\"\"\n Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n >>> sum_series(7)\n 784\n >>> sum_series(5)\n 225\n >>> sum_series(15)\n 14400\n \"\"\"\n", "solution": " import math \n \n total = 0\n total = math.pow((number * (number + 1)) /2, 2)\n return total", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0], "no_of_codes": 11, "code_1": "def sum_series(n): return sum(i**3 for i in range(1, n+1))", "code_2": "def sum_series(n): return (n*(n+1)//2)**2", "code_3": "def sum_series(n): return sum(range(1, n+1))**2", "code_4": "def sum_series(n): return ((n*(n+1))//2)**2", "code_5": "def sum_series(n): return sum(map(lambda x: x**3, range(1, n+1)))", "code_6": "from functools import reduce\ndef sum_series(n): return reduce(lambda x, y: x + y**3, range(1, n+1), 0)", "code_7": "import numpy as np\ndef sum_series(n): return np.sum(np.arange(1, n+1)**3)", "code_8": "def sum_series(n): return sum(x**3 for x in range(1, n+1))", "code_9": "def sum_series(n): return sum(x**3 for x in range(n, 0, -1))", "code_10": "def sum_series(n): return sum(x**3 for x in range(1, n+1))", "code_11": "Note: The solutions 8, 9, and 10 are the same, but provided for variety. The first seven solutions are mathematically optimized using the formula for the sum of cubes, while the last three use list comprehensions or generators to calculate the sum.", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/932", "prompt": "\n\ndef remove_duplic_list(l):\n    \"\"\"\n    Write a function to remove duplicate words from a given list of strings.\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n    ['Python', 'Exercises', 'Practice', 'Solution']\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])\n    ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])\n    ['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n    \"\"\"\n", "solution": "    \n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "results": [1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def remove_duplic_list(l):\n    return list(dict.fromkeys(l))", "code_2": "def remove_duplic_list(l):\n    return sorted(set(l), key=l.index)", "code_3": "def remove_duplic_list(l):\n    seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]", "code_4": "def remove_duplic_list(l):\n    return list(OrderedDict.fromkeys(l))", "code_5": "def remove_duplic_list(l):\n    return list(dict.fromkeys(l).keys())", "code_6": "def remove_duplic_list(l):\n    return list(set(l))", "code_7": "def remove_duplic_list(l):\n    return [l[i] for i in range(len(l)) if l.index(l[i]) == i]", "code_8": "def remove_duplic_list(l):\n    return list(dict.fromkeys(l[::-1]))[::-1]", "code_9": "def remove_duplic_list(l):\n    return [i for n, i in enumerate(l) if i not in l[:n]]", "code_10": "def remove_duplic_list(l):\n    return functools.reduce(lambda re, x: re+[x] if x not in re else re, l, [])", "pass@3": 0.9666666666666667, "nDCG@10": 0.693761356516045}
{"task_id": "MBPP/933", "prompt": "\n\ndef camel_to_snake(text):\n  \"\"\"\n  Write a function to convert camel case string to snake case string by using regex.\n  >>> camel_to_snake('GoogleAssistant')\n  'google_assistant'\n  >>> camel_to_snake('ChromeCast')\n  'chrome_cast'\n  >>> camel_to_snake('QuadCore')\n  'quad_core'\n  \"\"\"\n", "solution": "  import re\n  \n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import re\ndef camel_to_snake(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()", "code_2": "import re\ndef camel_to_snake(text):\n    return '_'.join(re.split('([A-Z][^A-Z]*)', text)).lower()", "code_3": "import re\ndef camel_to_snake(text):\n    return re.sub('(?!^)([A-Z]+)', r'_\\1', text).lower()", "code_4": "import re\ndef camel_to_snake(text):\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', text).lower()", "code_5": "import re\ndef camel_to_snake(text):\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text).lower()", "code_6": "import re\ndef camel_to_snake(text):\n    return re.sub('(?<=[a-z])(?=[A-Z])', '_', text).lower()", "code_7": "import re\ndef camel_to_snake(text):\n    return re.sub('(?<!^)(?=[A-Z])', '_', text).lower()", "code_8": "import re\ndef camel_to_snake(text):\n    return re.sub('([a-z])([A-Z])', r'\\1_\\2', text).lower()", "code_9": "import re\ndef camel_to_snake(text):\n    return re.sub('(?<=[a-z])([A-Z])', r'_\\1', text).lower()", "code_10": "import re\ndef camel_to_snake(text):\n    return re.sub('(?<=[a-z])(?=[A-Z])', '_', text).lower()", "pass@3": 1.0, "nDCG@10": 0.8611375561264456}
{"task_id": "MBPP/934", "prompt": "\n\ndef dealnnoy_num(n, m):\n\t\"\"\"\n\tWrite a function to find the nth delannoy number.\n\t>>> dealnnoy_num(3, 4)\n\t129\n\t>>> dealnnoy_num(3, 3)\n\t63\n\t>>> dealnnoy_num(4, 5)\n\t681\n\t\"\"\"\n", "solution": "\t \n\tif (m == 0 or n == 0) : \n\t\treturn 1\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "results": [1, 0, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def dealnnoy_num(n, m):\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n            if i > 0 and j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n    return dp[n][m]", "code_2": "def dealnnoy_num(n, m):\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(n + 1):\n        prev = 0\n        for j in range(m + 1):\n            temp = dp[j]\n            dp[j] += prev + (dp[j - 1] if j > 0 else 0)\n            prev = temp\n    return dp[m]", "code_3": "from math import comb\ndef dealnnoy_num(n, m):\n    return sum(comb(n, i) * comb(m, j) for i in range(n + 1) for j in range(m + 1) if i + j <= n + m)", "code_4": "from functools import lru_cache\n@lru_cache(maxsize=None)\ndef dealnnoy_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return dealnnoy_num(n - 1, m) + dealnnoy_num(n, m - 1) + dealnnoy_num(n - 1, m - 1)", "code_5": "def dealnnoy_num(n, m):\n    dp = [1] * (m + 1)\n    for i in range(1, n + 1):\n        prev = 1\n        for j in range(1, m + 1):\n            temp = dp[j]\n            dp[j] += prev + dp[j - 1]\n            prev = temp\n    return dp[m]", "code_6": "def dealnnoy_num(n, m):\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(m, -1, -1):\n            if j > 0:\n                dp[j] += dp[j - 1]\n            dp[j] += dp[j + 1]\n    return dp[m]", "code_7": "def dealnnoy_num(n, m):\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(m, -1, -1):\n            dp[j] += dp[j + 1]\n            if j > 0:\n                dp[j] += dp[j - 1]\n    return dp[m]", "code_8": "def dealnnoy_num(n, m):\n    dp = [1] * (m + 1)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[j] += dp[j - 1]\n        for j in range(m - 1, -1, -1):\n            dp[j] += dp[j + 1]\n    return dp[m]", "code_9": "def dealnnoy_num(n, m):\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(m, 0, -1):\n            dp[j] += dp[j - 1]\n        for j in range(m + 1):\n            dp[j] += dp[j + 1]\n    return dp[m]", "code_10": "def dealnnoy_num(n, m):\n    dp = [1] * (m + 1)\n    for i in range(1, n + 1):\n        for j in range(m, 0, -1):\n            dp[j] += dp[j - 1]\n        for j in range(1, m + 1):\n            dp[j] += dp[j + 1]\n    return dp[m]", "pass@3": 0.7083333333333333, "nDCG@10": 0.400023248309252}
{"task_id": "MBPP/935", "prompt": "\n\ndef series_sum(number):\n \"\"\"\n Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n >>> series_sum(6)\n 91\n >>> series_sum(7)\n 140\n >>> series_sum(12)\n 650\n \"\"\"\n", "solution": " \n total = 0\n total = (number * (number + 1) * (2 * number + 1)) / 6\n return total", "results": [1, 1, 1, 1, 1, 0, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def series_sum(n): return n * (n + 1) * (2 * n + 1) // 6", "code_2": "series_sum = lambda n: n * (n + 1) * (2 * n + 1) // 6", "code_3": "def series_sum(n): return sum(i**2 for i in range(1, n+1))", "code_4": "def series_sum(n): return sum(map(lambda i: i**2, range(1, n+1)))", "code_5": "def series_sum(n): return sum(i*i for i in range(1, n+1))", "code_6": "def series_sum(n): return sum(i**2 for i in xrange(1, n+1))", "code_7": "def series_sum(n): return sum(map(lambda i: i*i, range(1, n+1)))", "code_8": "def series_sum(n): return sum(i*i for i in xrange(1, n+1))", "code_9": "series_sum = lambda n: sum(i**2 for i in range(1, n+1))", "code_10": "series_sum = lambda n: sum(map(lambda i: i*i, range(1, n+1)))", "pass@3": 1.0, "nDCG@10": 0.8521705090845474}
{"task_id": "MBPP/936", "prompt": "\n\ndef re_arrange_tuples(test_list, ord_list):\n  \"\"\"\n  Write a function to re-arrange the given tuples based on the given ordered list.\n  >>> re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3])\n  [(1, 9), (4, 3), (2, 10), (3, 2)]\n  >>> re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3])\n  [(3, 11), (4, 3), (2, 10), (3, 11)]\n  >>> re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6])\n  [(2, 4), (5, 7), (3, 8), (6, 3)]\n  \"\"\"\n", "solution": "  \n  temp = dict(test_list)\n  res = [(key, temp[key]) for key in ord_list]\n  return (res) ", "results": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def re_arrange_tuples(test_list, ord_list):\n    return sorted(test_list, key=lambda x: ord_list.index(x[0]))", "code_2": "def re_arrange_tuples(test_list, ord_list):\n    ord_dict = {v: k for k, v in enumerate(ord_list)}\n    return sorted(test_list, key=lambda x: ord_dict[x[0]])", "code_3": "def re_arrange_tuples(test_list, ord_list):\n    return [t for i in ord_list for t in test_list if t[0] == i]", "code_4": "def re_arrange_tuples(test_list, ord_list):\n    return [next(t for t in test_list if t[0] == i) for i in ord_list]", "code_5": "def re_arrange_tuples(test_list, ord_list):\n    test_dict = {t[0]: t for t in test_list}\n    return [test_dict[i] for i in ord_list]", "code_6": "def re_arrange_tuples(test_list, ord_list):\n    return [t for i in ord_list for t in test_list if t[0] == i]", "code_7": "def re_arrange_tuples(test_list, ord_list):\n    return [next(t for t in test_list if t[0] == i) for i in ord_list]", "code_8": "def re_arrange_tuples(test_list, ord_list):\n    test_dict = {t[0]: t for t in test_list}\n    return [test_dict[i] for i in ord_list]", "code_9": "def re_arrange_tuples(test_list, ord_list):\n    return [t for i in ord_list for t in test_list if t[0] == i]", "code_10": "def re_arrange_tuples(test_list, ord_list):\n    return [next(t for t in test_list if t[0] == i) for i in ord_list]", "pass@3": 1.0, "nDCG@10": 0.6410457898283654}
{"task_id": "MBPP/937", "prompt": "\n\ndef max_char(str1):\n    \"\"\"\n    Write a function to count the most common character in a given string.\n    >>> max_char(\"hello world\")\n    ('l')\n    >>> max_char(\"hello \")\n    ('l')\n    >>> max_char(\"python pr\")\n    ('p')\n    \"\"\"\n", "solution": "    from collections import Counter \n    \n    temp = Counter(str1) \n    max_char = max(temp, key = temp.get)\n    return max_char", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def max_char(str1):\n    return max(set(str1), key=str1.count)", "code_2": "def max_char(str1):\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    return max(char_count, key=char_count.get)", "code_3": "from collections import Counter\ndef max_char(str1):\n    return Counter(str1).most_common(1)[0][0]", "code_4": "def max_char(str1):\n    char_count = [0] * 256\n    for char in str1:\n        char_count[ord(char)] += 1\n    return chr(char_count.index(max(char_count)))", "code_5": "import heapq\ndef max_char(str1):\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    return heapq.nlargest(1, char_count, key=char_count.get)[0]", "code_6": "def max_char(str1):\n    char_count = [0] * 128\n    for char in str1:\n        char_count[ord(char)] += 1\n    return chr(char_count.index(max(char_count)))", "code_7": "def max_char(str1):\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    return sorted(char_count.items(), key=lambda x: x[1], reverse=True)[0][0]", "code_8": "def max_char(str1):\n    char_count = [0] * 26\n    for char in str1:\n        if char.isalpha():\n            char_count[ord(char.lower()) - 97] += 1\n    return chr(char_count.index(max(char_count)) + 97)", "code_9": "def max_char(str1):\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    return min(char_count, key=lambda k: (-char_count[k], k))", "code_10": "def max_char(str1):\n    char_count = {}\n    max_count = 0\n    max_char = ''\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/938", "prompt": "\n\ndef find_closet(A, B, C, p, q, r):\n\t\"\"\"\n\tWrite a function to find three closest elements from three sorted arrays.\n\t>>> find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2)\n\t(10, 15, 10)\n\t>>> find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5)\n\t(24, 22, 23)\n\t>>> find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2)\n\t(11, 16, 11)\n\t\"\"\"\n", "solution": "\timport sys \n\t\n\t \n\tdiff = sys.maxsize \n\tres_i = 0\n\tres_j = 0\n\tres_k = 0\n\ti = 0\n\tj = 0\n\tk = 0\n\twhile(i < p and j < q and k < r): \n\t\tminimum = min(A[i], min(B[j], C[k])) \n\t\tmaximum = max(A[i], max(B[j], C[k])); \n\t\tif maximum-minimum < diff: \n\t\t\tres_i = i \n\t\t\tres_j = j \n\t\t\tres_k = k \n\t\t\tdiff = maximum - minimum; \n\t\tif diff == 0: \n\t\t\tbreak\n\t\tif A[i] == minimum: \n\t\t\ti = i+1\n\t\telif B[j] == minimum: \n\t\t\tj = j+1\n\t\telse: \n\t\t\tk = k+1\n\treturn A[res_i],B[res_j],C[res_k]", "results": [0, 1, 0, 1, 0, 1, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_closet(A, B, C, p, q, r):\n a, b, c = p - 1, q - 1, r - 1\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a >= 0 and b >= 0 and c >= 0:\n  max_val = max(A[a], B[b], C[c])\n  min_val = min(A[a], B[b], C[c])\n  if res > max_val - min_val:\n   res = max_val - min_val\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] == max_val:\n   a -= 1\n  elif B[b] == max_val:\n   b -= 1\n  else:\n   c -= 1\n return a_val, b_val, c_val", "code_2": "def find_closet(A, B, C, p, q, r):\n a, b, c = 0, 0, 0\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a < p and b < q and c < r:\n  max_val = max(A[a], B[b], C[c])\n  min_val = min(A[a], B[b], C[c])\n  if res > max_val - min_val:\n   res = max_val - min_val\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] == min_val:\n   a += 1\n  elif B[b] == min_val:\n   b += 1\n  else:\n   c += 1\n return a_val, b_val, c_val", "code_3": "def find_closet(A, B, C, p, q, r):\n a, b, c = p - 1, q - 1, r - 1\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a >= 0 and b >= 0 and c >= 0:\n  diff = max(A[a], B[b], C[c]) - min(A[a], B[b], C[c])\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] == max(A[a], B[b], C[c]):\n   a -= 1\n  elif B[b] == max(A[a], B[b], C[c]):\n   b -= 1\n  else:\n   c -= 1\n return a_val, b_val, c_val", "code_4": "def find_closet(A, B, C, p, q, r):\n a, b, c = 0, 0, 0\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a < p and b < q and c < r:\n  diff = max(A[a], B[b], C[c]) - min(A[a], B[b], C[c])\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] == min(A[a], B[b], C[c]):\n   a += 1\n  elif B[b] == min(A[a], B[b], C[c]):\n   b += 1\n  else:\n   c += 1\n return a_val, b_val, c_val", "code_5": "def find_closet(A, B, C, p, q, r):\n a, b, c = p - 1, q - 1, r - 1\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a >= 0 and b >= 0 and c >= 0:\n  diff = abs(A[a] - B[b]) + abs(B[b] - C[c]) + abs(C[c] - A[a])\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] > B[b] and A[a] > C[c]:\n   a -= 1\n  elif B[b] > A[a] and B[b] > C[c]:\n   b -= 1\n  else:\n   c -= 1\n return a_val, b_val, c_val", "code_6": "def find_closet(A, B, C, p, q, r):\n a, b, c = 0, 0, 0\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a < p and b < q and c < r:\n  diff = abs(A[a] - B[b]) + abs(B[b] - C[c]) + abs(C[c] - A[a])\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] < B[b] and A[a] < C[c]:\n   a += 1\n  elif B[b] < A[a] and B[b] < C[c]:\n   b += 1\n  else:\n   c += 1\n return a_val, b_val, c_val", "code_7": "def find_closet(A, B, C, p, q, r):\n a, b, c = p - 1, q - 1, r - 1\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a >= 0 and b >= 0 and c >= 0:\n  diff = abs(A[a] - B[b]) + abs(B[b] - C[c])\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] > B[b] and A[a] > C[c]:\n   a -= 1\n  elif B[b] > A[a] and B[b] > C[c]:\n   b -= 1\n  else:\n   c -= 1\n return a_val, b_val, c_val", "code_8": "def find_closet(A, B, C, p, q, r):\n a, b, c = 0, 0, 0\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a < p and b < q and c < r:\n  diff = abs(A[a] - B[b]) + abs(B[b] - C[c])\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] < B[b] and A[a] < C[c]:\n   a += 1\n  elif B[b] < A[a] and B[b] < C[c]:\n   b += 1\n  else:\n   c += 1\n return a_val, b_val, c_val", "code_9": "def find_closet(A, B, C, p, q, r):\n a, b, c = p - 1, q - 1, r - 1\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a >= 0 and b >= 0 and c >= 0:\n  diff = abs(A[a] - B[b]) + abs(B[b] - C[c]) + abs(C[c] - A[a]) / 3\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] > B[b] and A[a] > C[c]:\n   a -= 1\n  elif B[b] > A[a] and B[b] > C[c]:\n   b -= 1\n  else:\n   c -= 1\n return a_val, b_val, c_val", "code_10": "def find_closet(A, B, C, p, q, r):\n a, b, c = 0, 0, 0\n res = float('inf')\n a_val, b_val, c_val = 0, 0, 0\n while a < p and b < q and c < r:\n  diff = abs(A[a] - B[b]) + abs(B[b] - C[c]) + abs(C[c] - A[a]) / 3\n  if diff < res:\n   res = diff\n   a_val, b_val, c_val = A[a], B[b], C[c]\n  if A[a] < B[b] and A[a] < C[c]:\n   a += 1\n  elif B[b] < A[a] and B[b] < C[c]:\n   b += 1\n  else:\n   c += 1\n return a_val, b_val, c_val", "pass@3": 0.7083333333333333, "nDCG@10": 0.3120490772217807}
{"task_id": "MBPP/939", "prompt": "\n\ndef sorted_models(models):\n \"\"\"\n Write a function to sort a list of dictionaries using lambda function.\n >>> sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])\n [{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n >>> sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n ([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n >>> sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])\n ([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])\n \"\"\"\n", "solution": " \n sorted_models = sorted(models, key = lambda x: x['color'])\n return sorted_models", "results": [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])", "code_2": "def sorted_models(models):\n    return sorted(models, key=lambda x: x.get('model'))", "code_3": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'], reverse=True)", "code_4": "def sorted_models(models):\n    return sorted(models, key=lambda x: (x['model'], x['make']))", "code_5": "def sorted_models(models):\n    return sorted(models, key=lambda x: (-x['model'], x['make']))", "code_6": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'], reverse=True)[:3]", "code_7": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'])[-3:]", "code_8": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'], reverse=True) if models else []", "code_9": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model']) if models else 'No models to sort'", "code_10": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model']) if isinstance(models, list) else 'Invalid input'", "pass@3": 0.8333333333333334, "nDCG@10": 0.3430184917061137}
{"task_id": "MBPP/940", "prompt": "\n\ndef heap_sort(arr):\n    \"\"\"\n    Write a function to sort the given array by using heap sort.\n    >>> heap_sort([12, 2, 4, 5, 2, 3])\n    [2, 2, 3, 4, 5, 12]\n    >>> heap_sort([32, 14, 5, 6, 7, 19])\n    [5, 6, 7, 14, 19, 32]\n    >>> heap_sort([21, 15, 29, 78, 65])\n    [15, 21, 29, 65, 78]\n    \"\"\"\n", "solution": "    \n    heapify(arr)  \n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "code_2": "import heapq\ndef heap_sort(arr):\n    heapq.heapify(arr)\n    arr[:] = [heapq.heappop(arr) for _ in range(len(arr))]", "code_3": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "code_4": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)", "code_5": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)", "code_6": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "code_7": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "code_8": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "code_9": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "code_10": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/941", "prompt": "\n\ndef count_elim(num):\n  \"\"\"\n  Write a function to count the elements in a list until an element is a tuple.\n  >>> count_elim([10,20,30,(10,20),40])\n  3\n  >>> count_elim([10,(20,30),(10,20),40])\n  1\n  >>> count_elim([(10,(20,30,(10,20),40))])\n  0\n  \"\"\"\n", "solution": "  \n  count_elim = 0\n  for n in num:\n    if isinstance(n, tuple):\n        break\n    count_elim += 1\n  return count_elim", "results": [1, 1, 1, 1, 0, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def count_elim(num):\n    return next((i for i, x in enumerate(num) if isinstance(x, tuple)), len(num))", "code_2": "def count_elim(num):\n    for i, x in enumerate(num):\n        if isinstance(x, tuple):\n            return i\n    return len(num)", "code_3": "def count_elim(num):\n    i = 0\n    while i < len(num) and not isinstance(num[i], tuple):\n        i += 1\n    return i", "code_4": "def count_elim(num):\n    i = 0\n    for x in num:\n        if isinstance(x, tuple):\n            break\n        i += 1\n    return i", "code_5": "def count_elim(num):\n    return len([x for x in num if not isinstance(x, tuple)])", "code_6": "def count_elim(num):\n    return sum(1 for x in num if not isinstance(x, tuple))", "code_7": "def count_elim(num):\n    i = iter(num)\n    count = 0\n    while next(i, None) is not None and not isinstance(next(i, None), tuple):\n        count += 1\n    return count", "code_8": "def count_elim(num):\n    i = 0\n    while i < len(num) and type(num[i]) != tuple:\n        i += 1\n    return i", "code_9": "def count_elim(num):\n    return len(list(takewhile(lambda x: not isinstance(x, tuple), num)))", "code_10": "def count_elim(num):\n    return reduce(lambda count, x: count if isinstance(x, tuple) else count + 1, num, 0)", "pass@3": 0.9166666666666666, "nDCG@10": 0.633219679627003}
{"task_id": "MBPP/942", "prompt": "\n\ndef check_element(test_tup, check_list):\n  \"\"\"\n  Write a function to check if any list element is present in the given list.\n  >>> check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11])\n  True\n  >>> check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9])\n  True\n  >>> check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6])\n  False\n  \"\"\"\n", "solution": "  \n  res = False\n  for ele in check_list:\n    if ele in test_tup:\n      res = True\n      break\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def check_element(test_tup, check_list):\n    return any(i in test_tup for i in check_list)", "code_2": "def check_element(test_tup, check_list):\n    return bool(set(test_tup) & set(check_list))", "code_3": "def check_element(test_tup, check_list):\n    return len(set(test_tup) & set(check_list)) > 0", "code_4": "def check_element(test_tup, check_list):\n    return len(set(test_tup).intersection(check_list)) > 0", "code_5": "def check_element(test_tup, check_list):\n    return bool(set(test_tup).intersection(check_list))", "code_6": "def check_element(test_tup, check_list):\n    return any(map(lambda x: x in test_tup, check_list))", "code_7": "def check_element(test_tup, check_list):\n    return len(set(test_tup).intersection(set(check_list))) > 0", "code_8": "def check_element(test_tup, check_list):\n    return any(i in check_list for i in test_tup)", "code_9": "def check_element(test_tup, check_list):\n    return bool(set(test_tup).intersection(set(check_list)))", "code_10": "def check_element(test_tup, check_list):\n    return any(filter(lambda x: x in test_tup, check_list))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/943", "prompt": "\n\ndef combine_lists(num1,num2):\n  \"\"\"\n  Write a function to combine two given sorted lists using heapq module.\n  >>> combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n  [1,2,3,5,5,6,7,8,9,11]\n  >>> combine_lists([1,3,7],[2,4,6])\n  [1,2,3,4,6,7]\n  \"\"\"\n", "solution": "  from heapq import merge\n  \n  combine_lists=list(merge(num1, num2))\n  return combine_lists", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import heapq\ndef combine_lists(num1, num2):\n    return sorted(heapq.merge(num1, num2))", "code_2": "import heapq\ndef combine_lists(num1, num2):\n    return list(heapq.merge(num1, num2))", "code_3": "import heapq\ndef combine_lists(num1, num2):\n    return [i for i in heapq.merge(num1, num2)]", "code_4": "import heapq\ndef combine_lists(num1, num2):\n    return list(heapq.merge(iter(num1), iter(num2)))", "code_5": "import heapq\ndef combine_lists(num1, num2):\n    return [i for i in heapq.merge(iter(num1), iter(num2))]", "code_6": "import heapq\ndef combine_lists(num1, num2):\n    return list(heapq.merge(num1, num2, []))", "code_7": "import heapq\ndef combine_lists(num1, num2):\n    return [i for i in heapq.merge(num1, num2, [])]", "code_8": "import heapq\ndef combine_lists(num1, num2):\n    return list(heapq.merge(iter(num1), iter(num2), []))", "code_9": "import heapq\ndef combine_lists(num1, num2):\n    return [i for i in heapq.merge(iter(num1), iter(num2), [])]", "code_10": "import heapq\ndef combine_lists(num1, num2):\n    return list(heapq.merge(num1, num2, key=lambda x: x))", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/944", "prompt": "\n\ndef num_position(text):\n \"\"\"\n Write a function to separate and print the numbers and their position of a given string.\n >>> num_position(\"there are 70 flats in this apartment\")\n 10\n >>> num_position(\"every adult have 32 teeth\")\n 17\n >>> num_position(\"isha has 79 chocolates in her bag\")\n 9\n \"\"\"\n", "solution": " import re\n \n for m in re.finditer(\"\\d+\", text):\n    return m.start()", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def num_position(text):\n    return next((i for i, c in enumerate(text) if c.isdigit()), None)", "code_2": "def num_position(text):\n    for i, c in enumerate(text):\n        if c.isdigit():\n            return i\n    return None", "code_3": "import re\ndef num_position(text):\n    match = re.search(r'\\d', text)\n    return match.start() if match else None", "code_4": "def num_position(text):\n    try:\n        return text.index(next(filter(str.isdigit, text)))\n    except StopIteration:\n        return None", "code_5": "def num_position(text):\n    for i in range(len(text)):\n        if text[i].isdigit():\n            return i\n    return None", "code_6": "def num_position(text):\n    return [i for i, c in enumerate(text) if c.isdigit()][0] if any(c.isdigit() for c in text) else None", "code_7": "def num_position(text):\n    return min((i for i, c in enumerate(text) if c.isdigit()), default=None)", "code_8": "def num_position(text):\n    return next(map(text.index, filter(text.count, '0123456789')), None)", "code_9": "def num_position(text):\n    return [text.index(c) for c in text if c.isdigit()][0] if any(c.isdigit() for c in text) else None", "code_10": "def num_position(text):\n    return [i for i in range(len(text)) if text[i].isdigit()][0] if any(c.isdigit() for c in text) else None", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/945", "prompt": "\n\ndef tuple_to_set(t):\n  \"\"\"\n  Write a function to convert the given tuples into set.\n  >>> tuple_to_set(('x', 'y', 'z') )\n  {'y', 'x', 'z'}\n  >>> tuple_to_set(('a', 'b', 'c') )\n  {'c', 'a', 'b'}\n  >>> tuple_to_set(('z', 'd', 'e') )\n  {'d', 'e', 'z'}\n  \"\"\"\n", "solution": "  \n  s = set(t)\n  return (s) ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "`return set(t)`", "code_2": "`s = set(); s.update(t); return s`", "code_3": "`return {i for i in t}`", "code_4": "`return set(list(t))`", "code_5": "`return set(iter(t))`", "code_6": "`return set(map(lambda x: x, t))`", "code_7": "`return set(filter(None, t))`", "code_8": "`return set(dict.fromkeys(t))`", "code_9": "`s = set(); for i in t: s.add(i); return s`", "code_10": "`return set(t[:])`", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/946", "prompt": "\n\ndef most_common_elem(s,a):\n  \"\"\"\n  Write a function to find the most common elements and their counts of a specified text.\n  >>> most_common_elem('lkseropewdssafsdfafkpwe',3)\n  [('s', 4), ('e', 3), ('f', 3)]\n  >>> most_common_elem('lkseropewdssafsdfafkpwe',2)\n  [('s', 4), ('e', 3)]\n  >>> most_common_elem('lkseropewdssafsdfafkpwe',7)\n  [('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n  \"\"\"\n", "solution": "  from collections import Counter \n  \n  most_common_elem=Counter(s).most_common(a)\n  return most_common_elem", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from collections import Counter\ndef most_common_elem(s, a):\n    return Counter(s).most_common(a)", "code_2": "def most_common_elem(s, a):\n    return sorted(((s.count(c), c) for c in set(s)), reverse=True)[:a]", "code_3": "import heapq\ndef most_common_elem(s, a):\n    return heapq.nlargest(a, ((s.count(c), c) for c in set(s)))", "code_4": "def most_common_elem(s, a):\n    return sorted(dict((c, s.count(c)) for c in set(s)).items(), key=lambda x: x[1], reverse=True)[:a]", "code_5": "def most_common_elem(s, a):\n    return sorted(dict(map(lambda c: (c, s.count(c)), set(s))).items(), key=lambda x: x[1], reverse=True)[:a]", "code_6": "from operator import itemgetter\ndef most_common_elem(s, a):\n    return sorted(dict(map(lambda c: (c, s.count(c)), set(s))).items(), key=itemgetter(1), reverse=True)[:a]", "code_7": "def most_common_elem(s, a):\n    return sorted(dict(map(lambda c: (c, s.count(c)), set(s))).items(), key=lambda x: -x[1])[:a]", "code_8": "def most_common_elem(s, a):\n    return sorted(dict(map(lambda c: (c, s.count(c)), set(s))).items(), key=lambda x: (-x[1], x[0]))[:a]", "code_9": "def most_common_elem(s, a):\n    return sorted(dict(map(lambda c: (c, s.count(c)), set(s))).items(), key=lambda x: (-x[1], ord(x[0])))[:a]", "code_10": "import pandas as pd\ndef most_common_elem(s, a):\n    return pd.Series(list(s)).value_counts().head(a).to_dict().items()", "pass@3": 0.30000000000000004, "nDCG@10": 0.2200917662980802}
{"task_id": "MBPP/947", "prompt": "\n\ndef len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the shortest word.\n    >>> len_log([\"win\",\"lose\",\"great\"])\n    3\n    >>> len_log([\"a\",\"ab\",\"abc\"])\n    1\n    >>> len_log([\"12\",\"12\",\"1234\"])\n    2\n    \"\"\"\n", "solution": "    \n    min=len(list1[0])\n    for i in list1:\n        if len(i)<min:\n            min=len(i)\n    return min", "results": [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def len_log(list1):\n    return min(len(word) for word in list1)", "code_2": "def len_log(list1):\n    return sorted(list1, key=len)[0]", "code_3": "def len_log(list1):\n    return len(min(list1, key=len))", "code_4": "def len_log(list1):\n    return min(map(len, list1))", "code_5": "def len_log(list1):\n    return len(reduce(lambda a, b: a if len(a) < len(b) else b, list1))", "code_6": "def len_log(list1):\n    return len(functools.reduce(lambda a, b: a if len(a) <= len(b) else b, list1))", "code_7": "def len_log(list1):\n    return len(next(sorted(list1, key=len)))", "code_8": "def len_log(list1):\n    return len(heapq.nsmallest(1, list1, key=len)[0])", "code_9": "def len_log(list1):\n    return len(sorted(list1, key=len)[-1:][0])", "code_10": "def len_log(list1):\n    return len(sorted(list1, key=len, reverse=True)[-1])", "pass@3": 0.8333333333333334, "nDCG@10": 0.48854680201562284}
{"task_id": "MBPP/948", "prompt": "\n\ndef get_item(tup1,index):\n  \"\"\"\n  Write a function to get an item of a tuple.\n  >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)\n  ('e')\n  >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)\n  ('u')\n  >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)\n  ('r')\n  \"\"\"\n", "solution": "  \n  item = tup1[index]\n  return item", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def get_item(tup1, index):\n    return tup1[index]", "code_2": "get_item = lambda tup1, index: tup1[index]", "code_3": "def get_item(tup1, index):\n    if index < 0:\n        index += len(tup1)\n    return tup1[index]", "code_4": "def get_item(tup1, index):\n    return tup1.__getitem__(index)", "code_5": "import operator\ndef get_item(tup1, index):\n    return operator.getitem(tup1, index)", "code_6": "from collections import deque\ndef get_item(tup1, index):\n    return deque(tup1)[index]", "code_7": "def get_item(tup1, index):\n    return next(item for i, item in enumerate(tup1) if i == index)", "code_8": "def get_item(tup1, index):\n    return list(tup1)[index]", "code_9": "def get_item(tup1, index):\n    return tuple(i for i in tup1)[index]", "code_10": "def get_item(tup1, index):\n    return [i for i in tup1][index]", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/949", "prompt": "\n\ndef sort_list(test_list):\n  \"\"\"\n  Write a function to sort the given tuple list basis the total digits in tuple.\n  >>> sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] )\n  '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n  >>> sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] )\n  '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\n  >>> sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] )\n  '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'\n  \"\"\"\n", "solution": "  def count_digs(tup):\n    return sum([len(str(ele)) for ele in tup ]) \n  \n  test_list.sort(key = count_digs)\n  return (str(test_list))", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_2": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(map(lambda y: len(str(y)), x)))", "code_3": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_4": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_5": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_6": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_7": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_8": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_9": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "code_10": "def sort_list(test_list):\n    return sorted(test_list, key=lambda x: sum(len(str(i)) for i in x))", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/950", "prompt": "\n\ndef chinese_zodiac(year):\n \"\"\"\n Write a function to display sign of the chinese zodiac for given year.\n >>> chinese_zodiac(1997)\n ('Ox')\n >>> chinese_zodiac(1998)\n ('Tiger')\n >>> chinese_zodiac(1994)\n ('Dog')\n \"\"\"\n", "solution": " \n if (year - 2000) % 12 == 0:\n     sign = 'Dragon'\n elif (year - 2000) % 12 == 1:\n     sign = 'Snake'\n elif (year - 2000) % 12 == 2:\n     sign = 'Horse'\n elif (year - 2000) % 12 == 3:\n     sign = 'sheep'\n elif (year - 2000) % 12 == 4:\n     sign = 'Monkey'\n elif (year - 2000) % 12 == 5:\n     sign = 'Rooster'\n elif (year - 2000) % 12 == 6:\n     sign = 'Dog'\n elif (year - 2000) % 12 == 7:\n     sign = 'Pig'\n elif (year - 2000) % 12 == 8:\n     sign = 'Rat'\n elif (year - 2000) % 12 == 9:\n     sign = 'Ox'\n elif (year - 2000) % 12 == 10:\n     sign = 'Tiger'\n else:\n     sign = 'Hare'\n return sign", "results": [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "no_of_codes": 10, "code_1": "def chinese_zodiac(year):\n    signs = ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey', 'Rooster', 'Dog', 'Pig']\n    return signs[year % 12]", "code_2": "def chinese_zodiac(year):\n    return ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey', 'Rooster', 'Dog', 'Pig'][year % 12]", "code_3": "def chinese_zodiac(year):\n    return {0:'Rat', 1:'Ox', 2:'Tiger', 3:'Rabbit', 4:'Dragon', 5:'Snake', 6:'Horse', 7:'Sheep', 8:'Monkey', 9:'Rooster', 10:'Dog', 11:'Pig'}[year % 12]", "code_4": "def chinese_zodiac(year):\n    return {1900:'Rat', 1901:'Ox', 1902:'Tiger', 1903:'Rabbit', 1904:'Dragon', 1905:'Snake', 1906:'Horse', 1907:'Sheep', 1908:'Monkey', 1909:'Rooster', 1910:'Dog', 1911:'Pig'}[(year - 4) % 12 + 1900]", "code_5": "def chinese_zodiac(year):\n    return 'Rat Ox Tiger Rabbit Dragon Snake Horse Sheep Monkey Rooster Dog Pig'.split()[year % 12]", "code_6": "def chinese_zodiac(year):\n    return 'Rat Ox Tiger Rabbit Dragon Snake Horse Sheep Monkey Rooster Dog Pig'.split(' ')[year % 12]", "code_7": "def chinese_zodiac(year):\n    return 'Rat Ox Tiger Rabbit Dragon Snake Horse Sheep Monkey Rooster Dog Pig'.split()[year % 12]", "code_8": "def chinese_zodiac(year):\n    return ['Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep', 'Monkey', 'Rooster', 'Dog', 'Pig'][year % 12]", "code_9": "def chinese_zodiac(year):\n    return {0:'Rat', 1:'Ox', 2:'Tiger', 3:'Rabbit', 4:'Dragon', 5:'Snake', 6:'Horse', 7:'Sheep', 8:'Monkey', 9:'Rooster', 10:'Dog', 11:'Pig'}[year % 12]", "code_10": "def chinese_zodiac(year):\n    return {1900:'Rat', 1901:'Ox', 1902:'Tiger', 1903:'Rabbit', 1904:'Dragon', 1905:'Snake', 1906:'Horse', 1907:'Sheep', 1908:'Monkey', 1909:'Rooster', 1910:'Dog', 1911:'Pig'}[(year - 4) % 12 + 1900]", "pass@3": 0.5333333333333333, "nDCG@10": 0.15840915256850252}
{"task_id": "MBPP/951", "prompt": "\n\ndef max_similar_indices(test_list1, test_list2):\n  \"\"\"\n  Write a function to find the maximum of similar indices in two lists of tuples.\n  >>> max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)])\n  [(5, 4), (8, 10), (8, 14)]\n  >>> max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)])\n  [(6, 5), (9, 11), (9, 15)]\n  >>> max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)])\n  [(7, 6), (10, 12), (10, 16)]\n  \"\"\"\n", "solution": "  \n  res = [(max(x[0], y[0]), max(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return (res) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], "no_of_codes": 10, "code_1": "def max_similar_indices(l1, l2):\n    return [max(a, b) for a, b in zip(l1, l2)]", "code_2": "def max_similar_indices(l1, l2):\n    return list(map(max, zip(l1, l2)))", "code_3": "def max_similar_indices(l1, l2):\n    return [(max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(l1, l2)]", "code_4": "def max_similar_indices(l1, l2):\n    return [(a if a[0] > b[0] else b) if a[1] > b[1] else (b if b[0] > a[0] else a) for a, b in zip(l1, l2)]", "code_5": "def max_similar_indices(l1, l2):\n    return [(max(a[0], b[0]), a[1] if a[1] > b[1] else b[1]) for a, b in zip(l1, l2)]", "code_6": "def max_similar_indices(l1, l2):\n    return [(max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(sorted(l1), sorted(l2))]", "code_7": "def max_similar_indices(l1, l2):\n    return [tuple(max(x) for x in zip(*pair)) for pair in zip(l1, l2)]", "code_8": "def max_similar_indices(l1, l2):\n    return [(a if a[0] >= b[0] else b, a[1] if a[1] >= b[1] else b[1]) for a, b in zip(l1, l2)]", "code_9": "def max_similar_indices(l1, l2):\n    return [(a if a[0] > b[0] or a[1] > b[1] else b) for a, b in zip(l1, l2)]", "code_10": "def max_similar_indices(l1, l2):\n    return [(max(a[0], b[0]), a[1]) if a[1] > b[1] else (b[0], max(a[1], b[1])) for a, b in zip(l1, l2)]", "pass@3": 1.0, "nDCG@10": 0.9305687780632229}
{"task_id": "MBPP/952", "prompt": "\n\ndef nCr_mod_p(n, r, p):\n\t\"\"\"\n\tWrite a function to compute the value of ncr mod p.\n\t>>> nCr_mod_p(10, 2, 13)\n\t6\n\t>>> nCr_mod_p(11, 3, 14)\n\t11\n\t>>> nCr_mod_p(18, 14, 19)\n\t1\n\t\"\"\"\n", "solution": "\t \n\tif (r > n- r): \n\t\tr = n - r \n\tC = [0 for i in range(r + 1)] \n\tC[0] = 1 \n\tfor i in range(1, n + 1): \n\t\tfor j in range(min(i, r), 0, -1): \n\t\t\tC[j] = (C[j] + C[j-1]) % p \n\treturn C[r] ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def nCr_mod_p(n, r, p):\n    f = [1] * p\n    for i in range(1, p):\n        f[i] = f[i - 1] * i % p\n    inv = [1] * p\n    inv[p - 1] = pow(f[p - 1], p - 2, p)\n    for i in range(p - 2, -1, -1):\n        inv[i] = inv[i + 1] * (i + 1) % p\n    return f[n] * inv[r] * inv[n - r] % p", "code_2": "def nCr_mod_p(n, r, p):\n    f = [1] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % p\n    inv = [1] * (n + 1)\n    inv[n] = pow(f[n], p - 2, p)\n    for i in range(n, 0, -1):\n        inv[i - 1] = inv[i] * i % p\n    return f[n] * inv[r] * inv[n - r] % p", "code_3": "def nCr_mod_p(n, r, p):\n    f = [1] * (r + 1)\n    for i in range(1, r + 1):\n        f[i] = f[i - 1] * (n - i + 1) % p * pow(i, p - 2, p) % p\n    return f[r]", "code_4": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = [1] * (r + 1)\n    for i in range(1, r + 1):\n        f[i] = f[i - 1] * (n - i + 1) % p * pow(i, p - 2, p) % p\n    return f[r]", "code_5": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = 1\n    for i in range(1, r + 1):\n        f = f * (n - i + 1) % p * pow(i, p - 2, p) % p\n    return f", "code_6": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = [1] * (r + 1)\n    for i in range(1, r + 1):\n        f[i] = f[i - 1] * (n - i + 1) % p\n    for i in range(2, r + 1):\n        f[i] = f[i] * pow(i, p - 2, p) % p\n    return f[r]", "code_7": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = 1\n    for i in range(1, r + 1):\n        f = f * (n - i + 1) % p\n    for i in range(2, r + 1):\n        f = f * pow(i, p - 2, p) % p\n    return f", "code_8": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = [1] * (r + 1)\n    for i in range(1, r + 1):\n        f[i] = f[i - 1] * (n - i + 1) % p * pow(i, p - 2, p) % p\n    return reduce(lambda x, y: x * y % p, f[1:], 1)", "code_9": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = 1\n    for i in range(1, r + 1):\n        f = f * (n - i + 1) % p * pow(i, p - 2, p) % p\n    return f", "code_10": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    f = [1] * (r + 1)\n    for i in range(1, r + 1):\n        f[i] = f[i - 1] * (n - i + 1) % p\n    inv = [1] * (r + 1)\n    inv[r] = pow(f[r], p - 2, p)\n    for i in range(r, 0, -1):\n        inv[i - 1] = inv[i] * (i + 1) % p\n    return reduce(lambda x, y: x * y % p, [f[i] * inv[i] for i in range(1, r + 1)], 1)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/953", "prompt": "\n\ndef subset(ar, n):\n    \"\"\"\n    Write a python function to find the minimun number of subsets with distinct elements.\n    >>> subset([1, 2, 3, 4],4)\n    1\n    >>> subset([5, 6, 9, 3, 4, 3, 4],7)\n    2\n    >>> subset([1, 2, 3 ],3)\n    1\n    \"\"\"\n", "solution": "     \n    res = 0\n    ar.sort() \n    for i in range(0, n) : \n        count = 1\n        for i in range(n - 1): \n            if ar[i] == ar[i + 1]: \n                count+=1\n            else: \n                break \n        res = max(res, count)  \n    return res ", "results": [0, 1, 0, 0, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def subset(ar, n):\n    return len(set(ar)) == n", "code_2": "def subset(ar, n):\n    return 1 if len(ar) == len(set(ar)) else 2", "code_3": "def subset(ar, n):\n    return (len(ar) - len(set(ar))) > 0", "code_4": "def subset(ar, n):\n    return len(ar) != len(set(ar))", "code_5": "def subset(ar, n):\n    return int(len(ar) != len(set(ar))) + 1", "code_6": "def subset(ar, n):\n    return 2 - (len(ar) == len(set(ar)))", "code_7": "def subset(ar, n):\n    return 1 if all(ar.count(i) == 1 for i in ar) else 2", "code_8": "def subset(ar, n):\n    return 1 if n == len(set(ar)) else 2", "code_9": "def subset(ar, n):\n    return 1 if len(ar) == len(set(ar)) else 2", "code_10": "def subset(ar, n):\n    return 1 if all(ar.count(i) == 1 for i in set(ar)) else 2", "pass@3": 0.9916666666666667, "nDCG@10": 0.575073986183329}
{"task_id": "MBPP/954", "prompt": "\n\ndef profit_amount(actual_cost,sale_amount):\n \"\"\"\n Write a function that gives profit amount if the given amount has profit else return none.\n >>> profit_amount(1500,1200)\n 300\n >>> profit_amount(100,200)\n None\n >>> profit_amount(2000,5000)\n None\n \"\"\"\n", "solution": "  \n if(actual_cost > sale_amount):\n    amount = actual_cost - sale_amount\n    return amount\n else:\n    return None", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def profit_amount(actual_cost, sale_amount):\n    return sale_amount - actual_cost if sale_amount > actual_cost else None", "code_2": "def profit_amount(actual_cost, sale_amount):\n    return (sale_amount, None)[actual_cost >= sale_amount] or sale_amount - actual_cost", "code_3": "def profit_amount(actual_cost, sale_amount):\n    return None if actual_cost >= sale_amount else sale_amount - actual_cost", "code_4": "def profit_amount(actual_cost, sale_amount):\n    return (sale_amount - actual_cost) if (sale_amount - actual_cost) > 0 else None", "code_5": "def profit_amount(actual_cost, sale_amount):\n    return None if actual_cost > sale_amount else (sale_amount - actual_cost or None)", "code_6": "def profit_amount(actual_cost, sale_amount):\n    return (sale_amount - actual_cost) if sale_amount > actual_cost else None", "code_7": "def profit_amount(actual_cost, sale_amount):\n    return None if sale_amount <= actual_cost else sale_amount - actual_cost", "code_8": "def profit_amount(actual_cost, sale_amount):\n    return (sale_amount - actual_cost) if (sale_amount - actual_cost) > 0 else None", "code_9": "def profit_amount(actual_cost, sale_amount):\n    return None if sale_amount <= actual_cost else sale_amount - actual_cost", "code_10": "def profit_amount(actual_cost, sale_amount):\n    return (sale_amount - actual_cost) if sale_amount > actual_cost else None", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/955", "prompt": "\n\ndef is_abundant(n):\n    \"\"\"\n    Write a function to find out, if the given number is abundant.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(9)\n    False\n    \"\"\"\n", "solution": "    \n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_abundant(n):\n    return sum(i for i in range(1, n) if n % i == 0) > n", "code_2": "def is_abundant(n):\n    s = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * (n // i) == n:\n                s = s + i + n//i\n            else:\n                s = s + i\n            i += 1\n    return s > n", "code_3": "def is_abundant(n):\n    return sum(filter(lambda x: n % x == 0, range(1, n))) > n", "code_4": "def is_abundant(n):\n    return sum(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))) - {n}) > n", "code_5": "def is_abundant(n):\n    return sum(set(chain.from_iterable([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))) - n > n", "code_6": "def is_abundant(n):\n    return sum(set(chain(*([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))) - {n}) > n", "code_7": "def is_abundant(n):\n    return sum(set(chain.from_iterable([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)) - {n}) > n", "code_8": "def is_abundant(n):\n    return sum(set(chain(*([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))) - {n}) > n", "code_9": "def is_abundant(n):\n    return sum(set(chain.from_iterable([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)) - {n}) > n", "code_10": "def is_abundant(n):\n    return sum(set(chain(*([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))) - {n}) > n", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/956", "prompt": "\n\ndef split_list(text):\n  \"\"\"\n  Write a function to split the given string at uppercase letters by using regex.\n  >>> split_list(\"LearnToBuildAnythingWithGoogle\")\n  ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n  >>> split_list(\"ApmlifyingTheBlack+DeveloperCommunity\")\n  ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n  >>> split_list(\"UpdateInTheGoEcoSystem\")\n  ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n  \"\"\"\n", "solution": "  import re\n  \n  return (re.findall('[A-Z][^A-Z]*', text))", "results": [1, 0, 1, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "import re\ndef split_list(text):\n    return re.findall(r'[A-Z][^A-Z]*', text)", "code_2": "import re\ndef split_list(text):\n    return re.split(r'(?=[A-Z])', text)", "code_3": "import re\ndef split_list(text):\n    return [i for i in re.split('([A-Z][^A-Z]*)', text) if i]", "code_4": "import re\ndef split_list(text):\n    return [m.group(0) for m in re.finditer(r'[A-Z][^A-Z]*', text)]", "code_5": "import re\ndef split_list(text):\n    return [text[m.start():m.end()] for m in re.finditer(r'[A-Z][^A-Z]*', text)]", "code_6": "import re\ndef split_list(text):\n    return [text[i:j] for i, j in zip([0]+[m.start() for m in re.finditer(r'[A-Z]', text)], [m.start() for m in re.finditer(r'[A-Z]', text)]+[None])]", "code_7": "import re\ndef split_list(text):\n    return [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer(r'[A-Z]', text)], [m.end() for m in re.finditer(r'[A-Z]', text)]+[None])]", "code_8": "import re\ndef split_list(text):\n    return [text[i:j] for i, j in zip([0]+[m.start() for m in re.finditer(r'[A-Z][^A-Z]*', text)], [m.end() for m in re.finditer(r'[A-Z][^A-Z]*', text)]+[None])]", "code_9": "import re\ndef split_list(text):\n    return [text[i:j] for i, j in zip([0]+[m.end() for m in re.finditer(r'[A-Z][^A-Z]*', text)], [m.end() for m in re.finditer(r'[A-Z][^A-Z]*', text)]+[None])]", "code_10": "import re\ndef split_list(text):\n    return [text[i:j] for i, j in zip([0]+[m.start() for m in re.finditer(r'[A-Z]', text[1:])], [m.start() for m in re.finditer(r'[A-Z]', text[1:])]+[None])]", "pass@3": 0.8333333333333334, "nDCG@10": 0.510069131458292}
{"task_id": "MBPP/957", "prompt": "\n\ndef get_First_Set_Bit_Pos(n):\n     \"\"\"\n     Write a python function to get the position of rightmost set bit.\n     >>> get_First_Set_Bit_Pos(12)\n     3\n     >>> get_First_Set_Bit_Pos(18)\n     2\n     >>> get_First_Set_Bit_Pos(16)\n     5\n     \"\"\"\n", "solution": "     import math\n     \n     return math.log2(n&-n)+1", "results": [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def get_First_Set_Bit_Pos(n): return len(bin(n & -n)[2:])", "code_2": "def get_First_Set_Bit_Pos(n): return [i for i in range(1, 33) if n & (1 << i-1)][0]", "code_3": "def get_First_Set_Bit_Pos(n): return [i for i in range(32) if n & (1 << i)][0] + 1", "code_4": "def get_First_Set_Bit_Pos(n): return [i for i in bin(n)[2:] if i == '1'].index('1') + 1", "code_5": "def get_First_Set_Bit_Pos(n): return [i for i in f'{n:b}' if i == '1'].index('1') + 1", "code_6": "def get_First_Set_Bit_Pos(n): return [i for i in bin(n)[::-1] if i == '1'].index('1') + 1", "code_7": "def get_First_Set_Bit_Pos(n): return next(i for i, b in enumerate(bin(n)[2:]) if b == '1') + 1", "code_8": "def get_First_Set_Bit_Pos(n): return next(i for i, b in enumerate(f'{n:b}') if b == '1') + 1", "code_9": "def get_First_Set_Bit_Pos(n): return next(i for i, b in enumerate(bin(n)[::-1]) if b == '1') + 1", "code_10": "def get_First_Set_Bit_Pos(n): return next(i for i in range(32) if n & (1 << i)) + 1", "pass@3": 0.9166666666666666, "nDCG@10": 0.5988751049740156}
{"task_id": "MBPP/958", "prompt": "\n\ndef int_to_roman( num):\n        \"\"\"\n        Write a function to convert an integer into a roman numeral.\n        >>> int_to_roman(1)\n        (\"I\")\n        >>> int_to_roman(50)\n        (\"L\")\n        >>> int_to_roman(4)\n        (\"IV\")\n        \"\"\"\n", "solution": "        \n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\n        roman_num = ''\n        i = 0\n        while  num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = \"\"\n    for i in range(len(values)):\n        while num >= values[i]:\n            result += symbols[i]\n            num -= values[i]\n    return result", "code_2": "def int_to_roman(num):\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = \"\"\n    for value, symbol in roman_numerals.items():\n        while num >= value:\n            result += symbol\n            num -= value\n    return result", "code_3": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = []\n    i = 0\n    while num > 0:\n        while num >= values[i]:\n            result.append(symbols[i])\n            num -= values[i]\n        i += 1\n    return \"\".join(result)", "code_4": "def int_to_roman(num):\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = []\n    for value, symbol in sorted(roman_numerals.items(), reverse=True):\n        while num >= value:\n            result.append(symbol)\n            num -= value\n    return \"\".join(result)", "code_5": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = \"\"\n    i = 0\n    while num > 0:\n        count = num // values[i]\n        result += symbols[i] * count\n        num %= values[i]\n        i += 1\n    return result", "code_6": "def int_to_roman(num):\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while num >= value:\n            result += roman_numerals[value]\n            num -= value\n    return result", "code_7": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = []\n    for i in range(len(values)):\n        count = num // values[i]\n        result.append(symbols[i] * count)\n        num %= values[i]\n    return \"\".join(result)", "code_8": "def int_to_roman(num):\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        count = num // value\n        result.append(roman_numerals[value] * count)\n        num %= value\n    return \"\".join(result)", "code_9": "def int_to_roman(num):\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    result = \"\"\n    for i in range(len(values)):\n        result += symbols[i] * (num // values[i])\n        num %= values[i]\n    return result", "code_10": "def int_to_roman(num):\n    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        result += roman_numerals[value] * (num // value)\n        num %= value\n    return result", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/959", "prompt": "\n\ndef Average(lst):\n    \"\"\"\n    Write a python function to find the average of a list.\n    >>> Average([15, 9, 55, 41, 35, 20, 62, 49])\n    35.75\n    >>> Average([4, 5, 1, 2, 9, 7, 10, 8])\n    5.75\n    >>> Average([1,2,3])\n    2\n    \"\"\"\n", "solution": "     \n    return sum(lst) / len(lst) ", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def Average(lst):\n    return sum(lst) / len(lst)", "code_2": "from statistics import mean\ndef Average(lst):\n    return mean(lst)", "code_3": "def Average(lst):\n    return sum(lst) / float(len(lst))", "code_4": "import numpy as np\ndef Average(lst):\n    return np.mean(lst)", "code_5": "def Average(lst):\n    return sum(lst) / len(lst) if lst else 0", "code_6": "def Average(lst):\n    return sum(lst) / len(lst) if len(lst) > 0 else None", "code_7": "def Average(lst):\n    return sum(lst) / len(lst) if lst else float('nan')", "code_8": "def Average(lst):\n    return sum(lst) / len(lst) if lst else 'List is empty'", "code_9": "def Average(lst):\n    try:\n        return sum(lst) / len(lst)\n    except ZeroDivisionError:\n        return 'List is empty'", "code_10": "def Average(lst):\n    return sum(lst) / len(lst) if lst else 'Undefined'", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/960", "prompt": "\n\ndef get_noOfways(n):\n    \"\"\"\n    Write a function to solve tiling problem.\n    >>> get_noOfways(4)\n    3\n    >>> get_noOfways(3)\n    2\n    >>> get_noOfways(5)\n    5\n    \"\"\"\n", "solution": "    \n    if (n == 0):\n        return 0;\n    if (n == 1):\n        return 1; \n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 13, "code_1": "def get_noOfways(n):\n    a, b = 1, 2\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a", "code_2": "def get_noOfways(n):\n    ways = [0] * (n + 1)\n    ways[0], ways[1] = 1, 1\n    for i in range(2, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2]\n    return ways[n]", "code_3": "from functools import lru_cache", "code_4": "@lru_cache(maxsize=None)\ndef get_noOfways(n):\n    if n <= 1:\n        return 1\n    return get_noOfways(n - 1) + get_noOfways(n - 2)", "code_5": "def get_noOfways(n):\n    return int((((1 + 5 ** 0.5) / 2) ** (n + 1) - ((1 - 5 ** 0.5) / 2) ** (n + 1)) / 5 ** 0.5)", "code_6": "def get_noOfways(n):\n    matrix_power = matrix_power_modulo([[1, 1], [1, 0]], n - 1, 10 ** 9 + 7)\n    return matrix_power[0][0]", "code_7": "def matrix_power_modulo(matrix, power, modulo):\n    result = [[1, 0], [0, 1]]\n    while power > 0:\n        if power % 2 == 1:\n            result = matrix_multiply_modulo(result, matrix, modulo)\n        matrix = matrix_multiply_modulo(matrix, matrix, modulo)\n        power //= 2\n    return result", "code_8": "def matrix_multiply_modulo(a, b, modulo):\n    c = [[0, 0], [0, 0]]\n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % modulo\n    return c", "code_9": "def get_noOfways(n):\n    if n <= 1:\n        return 1\n    a, b, c = 1, 1, 0\n    for _ in range(n - 1):\n        c = a + b\n        a, b = b, c\n    return c", "code_10": "def get_noOfways(n):\n    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b", "code_11": "def get_noOfways(n):\n    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b", "code_12": "def get_noOfways(n):\n    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b", "code_13": "def get_noOfways(n):\n    if n <= 1:\n        return 1\n    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/961", "prompt": "\n\ndef roman_to_int(s):\n        \"\"\"\n        Write a function to convert a roman numeral to an integer.\n        >>> roman_to_int('MMMCMLXXXVI')\n        3986\n        >>> roman_to_int('MMMM')\n        4000\n        >>> roman_to_int('C')\n        100\n        \"\"\"\n", "solution": "        \n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res, p = 0, 'I'\n    for c in s[::-1]:\n        res, p = res - d[c] if d[c] < d[p] else res + d[c], c\n    return res", "code_2": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res, p = 0, 0\n    for c in s[::-1]:\n        cur = d[c]\n        res += -cur if cur < p else cur\n        p = cur\n    return res", "code_3": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = d[s[-1]]\n    for i in range(len(s) - 2, -1, -1):\n        if d[s[i]] < d[s[i + 1]]:\n            res -= 2 * d[s[i]]\n        res += d[s[i]]\n    return res", "code_4": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res, p = 0, 0\n    for c in s:\n        cur = d[c]\n        if cur > p:\n            res += cur - 2 * p\n        else:\n            res += cur\n        p = cur\n    return res", "code_5": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    i = 0\n    while i < len(s):\n        if i + 1 < len(s) and d[s[i]] < d[s[i + 1]]:\n            res += d[s[i + 1]] - d[s[i]]\n            i += 2\n        else:\n            res += d[s[i]]\n            i += 1\n    return res", "code_6": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    for i in range(len(s)):\n        if i > 0 and d[s[i]] > d[s[i - 1]]:\n            res += d[s[i]] - 2 * d[s[i - 1]]\n        else:\n            res += d[s[i]]\n    return res", "code_7": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    for i in range(len(s)):\n        if i < len(s) - 1 and d[s[i]] < d[s[i + 1]]:\n            res -= d[s[i]]\n        else:\n            res += d[s[i]]\n    return res", "code_8": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    i = len(s) - 1\n    while i >= 0:\n        if i < len(s) - 1 and d[s[i]] < d[s[i + 1]]:\n            res -= d[s[i]]\n        else:\n            res += d[s[i]]\n        i -= 1\n    return res", "code_9": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = d[s[-1]]\n    for i in range(len(s) - 2, -1, -1):\n        if d[s[i]] >= d[s[i + 1]]:\n            res += d[s[i]]\n        else:\n            res -= d[s[i]]\n    return res", "code_10": "def roman_to_int(s):\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    i = 0\n    while i < len(s):\n        if i + 1 < len(s) and d[s[i]] < d[s[i + 1]]:\n            res += d[s[i + 1]] - d[s[i]]\n            i += 2\n        else:\n            res += d[s[i]]\n            i += 1\n    return res", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/962", "prompt": "\n\ndef sum_Even(l,r):\n    \"\"\"\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    >>> sum_Even(2,5)\n    6\n    >>> sum_Even(3,8)\n    18\n    >>> sum_Even(4,6)\n    10\n    \"\"\"\n", "solution": "    def sum_Natural(n): \n        sum = (n * (n + 1)) \n        return int(sum) \n     \n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "results": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_Even(l, r):\n    return sum(range(l + l % 2, r + 1, 2))", "code_2": "def sum_Even(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 == 0)", "code_3": "def sum_Even(l, r):\n    return sum(filter(lambda x: x % 2 == 0, range(l, r + 1)))", "code_4": "def sum_Even(l, r):\n    return sum(range(l if l % 2 == 0 else l + 1, r + 1, 2))", "code_5": "def sum_Even(l, r):\n    return sum(x for x in range(l, r + 1) if not x & 1)", "code_6": "def sum_Even(l, r):\n    return sum(range(l + (l & 1), r + 1, 2))", "code_7": "def sum_Even(l, r):\n    return sum(x for x in range(l, r + 1) if x >> 1 << 1 == x)", "code_8": "def sum_Even(l, r):\n    return sum(x for x in range(l, r + 1) if x & -x == x)", "code_9": "def sum_Even(l, r):\n    return sum(x for x in range(l, r + 1) if x ^ (x - 1) & 1 == 0)", "code_10": "def sum_Even(l, r):\n    return sum(x for x in range(l, r + 1) if ~(x - 1) & x == x)", "pass@3": 0.9916666666666667, "nDCG@10": 0.8006937664098821}
{"task_id": "MBPP/963", "prompt": "\n\ndef discriminant_value(x,y,z):\n    \"\"\"\n    Write a function to calculate the discriminant value.\n    >>> discriminant_value(4,8,2)\n    (\"Two solutions\",32)\n    >>> discriminant_value(5,7,9)\n    (\"no real solution\",-131)\n    >>> discriminant_value(0,0,9)\n    (\"one solution\",0)\n    \"\"\"\n", "solution": "    \n    discriminant = (y**2) - (4*x*z)\n    if discriminant > 0:\n        return (\"Two solutions\",discriminant)\n    elif discriminant == 0:\n        return (\"one solution\",discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\",discriminant)", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def discriminant_value(x,y,z):\n    d = y**2 - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"one solution\",d) if d==0 else (\"Two solutions\",d)", "code_2": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"one solution\",d) if not d else (\"Two solutions\",d)", "code_3": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"Two solutions\",d) if d>0 else (\"one solution\",d)", "code_4": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"one solution\",d) if d==0 else (\"Two solutions\",d)", "code_5": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"Two solutions\",d) if d else (\"one solution\",d)", "code_6": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"one solution\",d) if d==0 else (\"Two solutions\",d)", "code_7": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"Two solutions\",d) if d>0 else (\"one solution\",d)", "code_8": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"one solution\",d) if not d else (\"Two solutions\",d)", "code_9": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"Two solutions\",d) if d else (\"one solution\",d)", "code_10": "def discriminant_value(x,y,z):\n    d = y*y - 4*x*z\n    return (\"no real solution\",d) if d<0 else (\"one solution\",d) if d==0 else (\"Two solutions\",d)", "pass@3": 1.0, "nDCG@10": 1.0}
{"task_id": "MBPP/964", "prompt": "\n\ndef word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is even or not.\n    >>> word_len(\"program\")\n    False\n    >>> word_len(\"solution\")\n    True\n    >>> word_len(\"data\")\n    True\n    \"\"\"\n", "solution": "     \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2==0: \n            return True  \n        else:\n          return False", "results": [1, 1, 1, 1, 0, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def word_len(s):\n    return len(s) % 2 == 0", "code_2": "def word_len(s):\n    return not len(s) & 1", "code_3": "def word_len(s):\n    return ~len(s) & 1", "code_4": "def word_len(s):\n    return bool(len(s) & 1 ^ 1)", "code_5": "def word_len(s):\n    return (len(s) ^ 1) & 1 == 0", "code_6": "def word_len(s):\n    return len(s) >> 1 << 1 == len(s)", "code_7": "def word_len(s):\n    return (len(s) & -2) == len(s)", "code_8": "def word_len(s):\n    return len(s) - 1 & len(s) == 0", "code_9": "def word_len(s):\n    return len(s) & ~1 == len(s)", "code_10": "def word_len(s):\n    return len(s) & 1 == 0", "pass@3": 1.0, "nDCG@10": 0.9148568823583791}
{"task_id": "MBPP/965", "prompt": "\n\ndef camel_to_snake(text):\n        \"\"\"\n        Write a function to convert camel case string to snake case string.\n        >>> camel_to_snake('PythonProgram')\n        ('python_program')\n        >>> camel_to_snake('pythonLanguage')\n        ('python_language')\n        >>> camel_to_snake('ProgrammingLanguage')\n        ('programming_language')\n        \"\"\"\n", "solution": "        \n        import re\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "results": [1, 1, 1, 0, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text).lstrip('_')", "code_2": "import re\ndef camel_to_snake(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()", "code_3": "def camel_to_snake(text):\n    return ''.join('_' + c.lower() if c.isupper() else c for c in text).lstrip('_')", "code_4": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text)[1:]", "code_5": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text).strip('_')", "code_6": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text)[1:]", "code_7": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text).lstrip('_')", "code_8": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text).strip('_')", "code_9": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text).lstrip('_')", "code_10": "def camel_to_snake(text):\n    return ''.join('_' + i.lower() if i.isupper() else i for i in text).strip('_')", "pass@3": 1.0, "nDCG@10": 0.826813366651774}
{"task_id": "MBPP/966", "prompt": "\n\ndef remove_empty(tuple1):\n \"\"\"\n Write a function to remove an empty tuple from a list of tuples.\n >>> remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n >>> remove_empty([(), (), ('',), (\"python\"), (\"program\")])\n [('',), (\"python\"), (\"program\")]\n >>> remove_empty([(), (), ('',), (\"java\")])\n [('',),(\"java\") ]\n \"\"\"\n", "solution": "  #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n   tuple1 = [t for t in tuple1 if t]\n   return tuple1", "results": [1, 1, 1, 1, 1, 1, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def remove_empty(tuples):\n    return [t for t in tuples if t]", "code_2": "def remove_empty(tuples):\n    return list(filter(None, tuples))", "code_3": "def remove_empty(tuples):\n    return [t for t in tuples if len(t) > 0]", "code_4": "def remove_empty(tuples):\n    return [t for t in tuples if t != ()]", "code_5": "def remove_empty(tuples):\n    return [t for t in tuples if bool(t)]", "code_6": "def remove_empty(tuples):\n    return [t for t in tuples if t.__len__() > 0]", "code_7": "def remove_empty(tuples):\n    return [t for t in tuples if t.__nonzero__()]", "code_8": "def remove_empty(tuples):\n    return [t for t in tuples if t.__bool__()]", "code_9": "def remove_empty(tuples):\n    return [t for t in tuples if t.__len__()]", "code_10": "def remove_empty(tuples):\n    return [t for t in tuples if t.__reduce__()[1]]", "pass@3": 0.9916666666666667, "nDCG@10": 0.793584067764911}
{"task_id": "MBPP/967", "prompt": "\n\ndef check(string):\n  \"\"\"\n  Write a python function to accept the strings which contains all vowels.\n  >>> check(\"SEEquoiaL\")\n  'accepted'\n  >>> check('program')\n  \"not accepted\"\n  >>> check('fine')\n  \"not accepted\"\n  \"\"\"\n", "solution": "   \n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \n    return ('accepted') \n  else: \n    return (\"not accepted\") ", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check(string):\n    return 'accepted' if set('aeiou').issubset(string.lower()) else 'not accepted'", "code_2": "def check(string):\n    return 'accepted' if all(v in string.lower() for v in 'aeiou') else 'not accepted'", "code_3": "def check(string):\n    return 'accepted' if sum(v in string.lower() for v in 'aeiou') == 5 else 'not accepted'", "code_4": "def check(string):\n    return 'accepted' if len(set('aeiou') - set(string.lower())) == 0 else 'not accepted'", "code_5": "def check(string):\n    return 'accepted' if not set('aeiou') - set(string.lower()) else 'not accepted'", "code_6": "def check(string):\n    return 'accepted' if not any(v not in string.lower() for v in 'aeiou') else 'not accepted'", "code_7": "def check(string):\n    return 'accepted' if not {'a', 'e', 'i', 'o', 'u'} - set(string.lower()) else 'not accepted'", "code_8": "def check(string):\n    return 'accepted' if not set('aeiou').difference(string.lower()) else 'not accepted'", "code_9": "def check(string):\n    return 'accepted' if not set('aeiou').symmetric_difference(string.lower()) else 'not accepted'", "code_10": "def check(string):\n    return 'accepted' if not set('aeiou').intersection(string.lower()) != set('aeiou') else 'not accepted'", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/968", "prompt": "\n\ndef floor_Max(A,B,N):\n    \"\"\"\n    Write a python function to find maximum possible value for the given periodic function.\n    >>> floor_Max(11,10,9)\n    9\n    >>> floor_Max(5,7,4)\n    2\n    >>> floor_Max(2,2,1)\n    1\n    \"\"\"\n", "solution": "    \n    x = min(B - 1,N)\n    return (A*x) // B", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def floor_Max(A, B, N):\n    return min(N, A % B, B - A % B)", "code_2": "def floor_Max(A, B, N):\n    return min(N, min(A % B, B - A % B))", "code_3": "def floor_Max(A, B, N):\n    return N if N < A % B and N < B - A % B else min(A % B, B - A % B)", "code_4": "def floor_Max(A, B, N):\n    return min(N, A % B, B - A % B) if A % B < B - A % B else min(N, B - A % B)", "code_5": "def floor_Max(A, B, N):\n    return min(N, A % B) if A % B < B - A % B else min(N, B - A % B)", "code_6": "def floor_Max(A, B, N):\n    return min(N, A % B) if A % B <= B - A % B else min(N, B - A % B)", "code_7": "def floor_Max(A, B, N):\n    return min(N, A % B) if A % B < B - A % B else min(N, B - A % B)", "code_8": "def floor_Max(A, B, N):\n    return min(N, A % B) if A % B <= B - A % B else min(N, B - A % B)", "code_9": "def floor_Max(A, B, N):\n    return min(N, A % B) if A % B < B - A % B else min(N, B - A % B)", "code_10": "def floor_Max(A, B, N):\n    return min(N, A % B) if A % B <= B - A % B else min(N, B - A % B)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/969", "prompt": "\n\ndef join_tuples(test_list):\n  \"\"\"\n  Write a function to join the tuples if they have similar initial elements.\n  >>> join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] )\n  [(5, 6, 7), (6, 8, 10), (7, 13)]\n  >>> join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] )\n  [(6, 7, 8), (7, 9, 11), (8, 14)]\n  >>> join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] )\n  [(7, 8, 9), (8, 10, 12), (9, 15)]\n  \"\"\"\n", "solution": "  \n  res = []\n  for sub in test_list:\n    if res and res[-1][0] == sub[0]:\n      res[-1].extend(sub[1:])\n    else:\n      res.append([ele for ele in sub])\n  res = list(map(tuple, res))\n  return (res) ", "results": [1, 1, 0, 0, 1, 0, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] += t[1:]\n        else:\n            result.append(t)\n    return result", "code_2": "def join_tuples(test_list):\n    result = [test_list[0]]\n    for t in test_list[1:]:\n        if result[-1][0] == t[0]:\n            result[-1] += t[1:]\n        else:\n            result.append(t)\n    return result", "code_3": "def join_tuples(test_list):\n    result = []\n    i = 0\n    while i < len(test_list):\n        j = i + 1\n        while j < len(test_list) and test_list[j][0] == test_list[i][0]:\n            j += 1\n        result.append(sum(test_list[i:j], ()))\n        i = j\n    return result", "code_4": "def join_tuples(test_list):\n    result = []\n    i = 0\n    while i < len(test_list):\n        j = i\n        while j < len(test_list) - 1 and test_list[j][0] == test_list[j + 1][0]:\n            j += 1\n        result.append(tuple(sum(test_list[i:j + 1], ())))\n        i = j + 1\n    return result", "code_5": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] = result[-1] + t[1:]\n        else:\n            result.append(t)\n    return [tuple(t) for t in result]", "code_6": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] = result[-1][:-1] + t\n        else:\n            result.append(t)\n    return result", "code_7": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] = tuple(list(result[-1]) + list(t[1:]))\n        else:\n            result.append(t)\n    return result", "code_8": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] = result[-1] + t[1:]\n        else:\n            result.append(t)\n    return [tuple(t) if isinstance(t, tuple) else t for t in result]", "code_9": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] = result[-1] + t[1:]\n        else:\n            result.append(t)\n    return [tuple(t) if len(t) > 2 else t for t in result]", "code_10": "def join_tuples(test_list):\n    result = []\n    for t in test_list:\n        if result and result[-1][0] == t[0]:\n            result[-1] = result[-1] + t[1:]\n        else:\n            result.append(t)\n    return [tuple(t) if isinstance(t, list) else t for t in result]", "pass@3": 0.9916666666666667, "nDCG@10": 0.7167674835027339}
{"task_id": "MBPP/970", "prompt": "\n\ndef min_of_two( x, y ):\n    \"\"\"\n    Write a function to find minimum of two numbers.\n    >>> min_of_two(10,20)\n    10\n    >>> min_of_two(19,15)\n    15\n    >>> min_of_two(-10,-20)\n    -20\n    \"\"\"\n", "solution": "    \n    if x < y:\n        return x\n    return y", "results": [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], "no_of_codes": 10, "code_1": "def min_of_two(x, y): return x if x < y else y", "code_2": "def min_of_two(x, y): return min(x, y)", "code_3": "def min_of_two(x, y): return y if x > y else x", "code_4": "def min_of_two(x, y): return sorted([x, y])[0]", "code_5": "def min_of_two(x, y): return (y, x)[x < y]", "code_6": "def min_of_two(x, y): return [x, y][x > y]", "code_7": "def min_of_two(x, y): return [y, x][x > y]", "code_8": "def min_of_two(x, y): return (lambda: x, lambda: y)[x > y]()", "code_9": "def min_of_two(x, y): return (lambda: y, lambda: x)[x < y]()", "code_10": "def min_of_two(x, y): return (x, y)[y < x]", "pass@3": 1.0, "nDCG@10": 0.92663607790064}
{"task_id": "MBPP/971", "prompt": "\n\ndef maximum_segments(n, a, b, c) :\n\t\"\"\"\n\tWrite a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n\t>>> maximum_segments(7, 5, 2, 5)\n\t2\n\t>>> maximum_segments(17, 2, 1, 3)\n\t17\n\t>>> maximum_segments(18, 16, 3, 6)\n\t6\n\t\"\"\"\n", "solution": "\t \n\tdp = [-1] * (n + 10) \n\tdp[0] = 0\n\tfor i in range(0, n) : \n\t\tif (dp[i] != -1) : \n\t\t\tif(i + a <= n ): \n\t\t\t\tdp[i + a] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + a]) \n\t\t\tif(i + b <= n ): \n\t\t\t\tdp[i + b] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + b]) \n\t\t\tif(i + c <= n ): \n\t\t\t\tdp[i + c] = max(dp[i] + 1, \n\t\t\t\t\t\t\tdp[i + c]) \n\treturn dp[n]", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def maximum_segments(n, a, b, c):\n    return n // min(a, b, c)", "code_2": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b and a < c else b if b < c else c)", "code_3": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b else b) // c if a < b else n // (a if a < c else c) // b", "code_4": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b and a < c else b if b < c else c) if a != b and b != c and a != c else n // max(a, b, c)", "code_5": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b else b) if a != b else n // a", "code_6": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b and a < c else b if b < c else c) if a != b and b != c else n // a", "code_7": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b else b) if a != b else n // (b if b < c else c)", "code_8": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b and a < c else b if b < c else c) if a != b and b != c else n // (a if a > b else b)", "code_9": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b and a < c else b if b < c else c) if a != b and b != c and a != c else n // (a if a > b else b if b > c else c)", "code_10": "def maximum_segments(n, a, b, c):\n    return n // (a if a < b and a < c else b if b < c else c) if a != b and b != c else n // (a if a > b and a > c else b if b > c else c)", "pass@3": 0.0, "nDCG@10": 0.0}
{"task_id": "MBPP/972", "prompt": "\n\ndef concatenate_nested(test_tup1, test_tup2):\n  \"\"\"\n  Write a function to concatenate the given two tuples to a nested tuple.\n  >>> concatenate_nested((3, 4), (5, 6))\n  (3, 4, 5, 6)\n  >>> concatenate_nested((1, 2), (3, 4))\n  (1, 2, 3, 4)\n  >>> concatenate_nested((4, 5), (6, 8))\n  (4, 5, 6, 8)\n  \"\"\"\n", "solution": "  \n  res = test_tup1 + test_tup2\n  return (res) ", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def concatenate_nested(t1, t2):\n    return t1 + t2", "code_2": "def concatenate_nested(t1, t2):\n    return tuple(list(t1) + list(t2))", "code_3": "def concatenate_nested(t1, t2):\n    return (*t1, *t2)", "code_4": "def concatenate_nested(t1, t2):\n    return tuple(chain(t1, t2))", "code_5": "def concatenate_nested(t1, t2):\n    return reduce(lambda x, y: x + (y,), t2, t1)", "code_6": "def concatenate_nested(t1, t2):\n    return tuple(itertools.chain(t1, t2))", "code_7": "def concatenate_nested(t1, t2):\n    return tuple(np.concatenate((t1, t2)))", "code_8": "def concatenate_nested(t1, t2):\n    return tuple(pd.Series(t1).append(pd.Series(t2)))", "code_9": "def concatenate_nested(t1, t2):\n    return tuple(dask.compute(*[dask.delayed(lambda x: x)(i) for i in t1 + t2]))", "code_10": "def concatenate_nested(t1, t2):\n    return tuple(spark.sparkContext.parallelize(t1).union(spark.sparkContext.parallelize(t2)).collect())", "pass@3": 0.7083333333333333, "nDCG@10": 0.46900009332067494}
{"task_id": "MBPP/973", "prompt": "\n\ndef left_rotate(s,d):\n    \"\"\"\n    Write a python function to left rotate the string.\n    >>> left_rotate(\"python\",2)\n    \"thonpy\"\n    >>> left_rotate(\"bigdata\",3 )\n    \"databig\"\n    >>> left_rotate(\"hadoop\",1 )\n    \"adooph\"\n    \"\"\"\n", "solution": "    \n    tmp = s[d : ] + s[0 : d]\n    return tmp  ", "results": [1, 0, 1, 1, 0, 1, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def left_rotate(s, d):\n    return s[d:] + s[:d]", "code_2": "def left_rotate(s, d):\n    return ''.join([s[i - d] for i in range(len(s))])", "code_3": "def left_rotate(s, d):\n    s = list(s)\n    for _ in range(d):\n        s.append(s.pop(0))\n    return ''.join(s)", "code_4": "def left_rotate(s, d):\n    return s.replace(s[:d], '', 1) + s[:d]", "code_5": "def left_rotate(s, d):\n    return ''.join(collections.deque(s, maxlen=len(s)).rotate(-d))", "code_6": "def left_rotate(s, d):\n    s = s + s\n    return s[d:d+len(s)//2]", "code_7": "def left_rotate(s, d):\n    return ''.join(reversed(s[d:] + s[:d]))[::-1]", "code_8": "def left_rotate(s, d):\n    s = s * 2\n    return s[d:d+len(s)//2]", "code_9": "def left_rotate(s, d):\n    return ''.join(reversed(list(s)))[d-1::-1] + ''.join(reversed(list(s)))[:d-1:-1]", "code_10": "def left_rotate(s, d):\n    s = list(s)\n    s[:d], s[d:] = s[d:], s[:d]\n    return ''.join(s)", "pass@3": 0.9666666666666667, "nDCG@10": 0.6461194268314838}
{"task_id": "MBPP/974", "prompt": "\n\ndef min_sum_path(A):\n\t\"\"\"\n\tWrite a function to find the minimum total path sum in the given triangle.\n\t>>> min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]])\n\t6\n\t>>> min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]])\n\t10\n\t>>> min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]])\n\t9\n\t\"\"\"\n", "solution": "\t \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], \n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \n\treturn memo[0]", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1])\n\treturn A[0][0]", "code_2": "def min_sum_path(A):\n\tfor row in reversed(A[:-1]):\n\t\tfor i in range(len(row)):\n\t\t\trow[i] += min(A[len(row)][i], A[len(row)][i+1])\n\treturn A[0][0]", "code_3": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(i+1):\n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1])\n\treturn A[0][0]", "code_4": "def min_sum_path(A):\n\tfor i in range(len(A)-1, 0, -1):\n\t\tfor j in range(i):\n\t\t\tA[i-1][j] += min(A[i][j], A[i][j+1])\n\treturn A[0][0]", "code_5": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j:j+2])\n\treturn A[0][0]", "code_6": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tA[i] = [a+min(b, c) for a, b, c in zip(A[i], A[i+1], A[i+1][1:])]\n\treturn A[0][0]", "code_7": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j:j+2])\n\treturn A[0][0]", "code_8": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1])\n\treturn A[0][0]", "code_9": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1])\n\treturn A[0][0]", "code_10": "def min_sum_path(A):\n\tfor i in range(len(A)-2, -1, -1):\n\t\tfor j in range(len(A[i])):\n\t\t\tA[i][j] += min(A[i+1][j], A[i+1][j+1])\n\treturn A[0][0]", "pass@3": 1.0, "nDCG@10": 1.0}
