{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_2": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_3": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_4": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_5": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_6": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_7": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_8": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_9": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "code_10": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            top = stack.pop()\n            if top == '(':\n                result.append('()')\n            else:\n                result.append(top + '()')\n    return result\n", "code_2": "def separate_paren_groups(paren_string: str) -> List[str]:\n    if not paren_string:\n        return []\n    if paren_string[0] == '(':\n        return [')' + separate_paren_groups(paren_string[1:])[0]]\n    else:\n        return [paren_string[0] + separate_paren_groups(paren_string[1:])[0]]\n", "code_3": "import re\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    return re.findall(r'\\((?:[^()]|(?R))*\\)', paren_string)\n", "code_4": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            j = i + 1\n            while j < len(paren_string) and paren_string[j] != ')':\n                j += 1\n            if j == len(paren_string):\n                raise ValueError('Unbalanced parentheses')\n            result.append(paren_string[i:j+1])\n            i = j + 1\n        else:\n            i += 1\n    return result\n", "code_5": "def separate_paren_groups(paren_string: str) -> List[str]:\n    def generate_groups(paren_string):\n        stack = []\n        for char in paren_string:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                top = stack.pop()\n                if top == '(':\n                    yield '()'\n                else:\n                    yield top + '()'\n    return list(generate_groups(paren_string))\n", "code_6": "def separate_paren_groups(paren_string: str) -> List[str]:\n    return [char + '()' if char == '(' else '()' for char in paren_string]\n", "code_7": "def separate_paren_groups(paren_string: str) -> List[str]:\n    return list(map(lambda x: x + '()' if x == '(' else '()', paren_string))\n", "code_8": "def separate_paren_groups(paren_string: str) -> List[str]:\n    return list(set(paren_string))\n", "code_9": "def separate_paren_groups(paren_string: str) -> List[str]:\n    d = {}\n    for char in paren_string:\n        if char == '(':\n            d[char] = d.get(char, 0) + 1\n        elif char == ')':\n            d[char] = d.get(char, 0) - 1\n    return [char + '()' for char in d if d[char] == 0]\n", "code_10": "def separate_paren_groups(paren_string: str) -> List[str]:\n    if not paren_string:\n        return []\n    if paren_string[0] == '(':\n        return [')' + separate_paren_groups(paren_string[1:])[0]]\n    else:\n        return [paren_string[0] + separate_paren_groups(paren_string[1:])[0]]\n"}
{"task_id": "HumanEval/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "solution": "    return number % 1.0\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def truncate_number(number: float) -> float:\n    return number % 1", "code_2": "def truncate_number(number: float) -> float:\n    return abs(number) - int(abs(number))", "code_3": "def truncate_number(number: float) -> float:\n    return number - int(number)", "code_4": "def truncate_number(number: float) -> float:\n    return abs(number) - int(abs(number))", "code_5": "def truncate_number(number: float) -> float:\n    return number - int(number)", "code_6": "def truncate_number(number: float) -> float:\n    return abs(number) - int(abs(number))", "code_7": "def truncate_number(number: float) -> float:\n    return number % 1", "code_8": "def truncate_number(number: float) -> float:\n    return abs(number) - int(abs(number))", "code_9": "def truncate_number(number: float) -> float:\n    return number - int(number)", "code_10": "def truncate_number(number: float) -> float:\n    return abs(number) - int(abs(number))"}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "results": [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "code_2": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = max(balance + op, 0)\n    return balance < 0", "code_3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_4": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_5": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_6": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_7": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_8": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_9": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False", "code_10": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance = balance + op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_2": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_3": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_4": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_5": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_6": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_7": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_8": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_9": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "code_10": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter if i > 0 else num for i, num in enumerate(numbers)]", "code_2": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [num for i, num in enumerate(numbers) if i % 2 == 0 or num == delimeter]", "code_3": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter if i % 2 == 0 else num for i, num in enumerate(numbers)]", "code_4": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [num for i, num in enumerate(numbers) if i % 2 == 0 or num == delimeter]", "code_5": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter if i > 0 else num for i, num in enumerate(numbers)]", "code_6": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [num for i, num in enumerate(numbers) if i % 2 == 0 or num == delimeter]", "code_7": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter if i % 2 == 0 else num for i, num in enumerate(numbers)]", "code_8": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [num for i, num in enumerate(numbers) if i % 2 == 0 or num == delimeter]", "code_9": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter if i > 0 else num for i, num in enumerate(numbers)]", "code_10": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [num for i, num in enumerate(numbers) if i % 2 == 0 or num == delimeter]"}
{"task_id": "HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    for group in paren_string.split():\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n        levels.append(level)\n    return levels", "code_2": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [len(group) for group in paren_string.split() if group.count('(') > group.count(')')]", "code_3": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(group.count('('), group.count(')')) for group in paren_string.split()]", "code_4": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [group.count('(') - group.count(')') for group in paren_string.split()]", "code_5": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [sum(1 for char in group if char == '(') - sum(1 for char in group if char == ')') for group in paren_string.split()]", "code_6": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [len(list(filter(lambda x: x == '(', group))) - len(list(filter(lambda x: x == ')', group))) for group in paren_string.split()]", "code_7": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [len(list(filter(lambda x: x == '(', group))) - len(list(filter(lambda x: x == ')', group))) for group in paren_string.split()]", "code_8": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [sum(1 for char in group if char == '(') - sum(1 for char in group if char == ')') for group in paren_string.split()]", "code_9": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [len(list(filter(lambda x: x == '(', group))) - len(list(filter(lambda x: x == ')', group))) for group in paren_string.split()]", "code_10": "def parse_nested_parens(paren_string: str) -> List[int]:\n    return [max(group.count('('), group.count(')')) for group in paren_string.split()]"}
{"task_id": "HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "solution": "    return [x for x in strings if substring in x]\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "code_2": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower()]", "code_3": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring.lower() in s]", "code_4": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper()]", "code_5": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper() or substring in s.title()]", "code_6": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper() or substring in s.title() or substring in s.capitalize()]", "code_7": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper() or substring in s.title() or substring in s.capitalize() or substring in s.swapcase()]", "code_8": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper() or substring in s.title() or substring in s.capitalize() or substring in s.swapcase() or substring in s.replace(' ', '')]", "code_9": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper() or substring in s.title() or substring in s.capitalize() or substring in s.swapcase() or substring in s.replace(' ', '') or substring in s.replace('_', '')]", "code_10": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s.lower() or substring in s.upper() or substring in s.title() or substring in s.capitalize() or substring in s.swapcase() or substring in s.replace(' ', '') or substring in s.replace('_', '') or substring in s.replace('-', '')]"}
{"task_id": "HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), prod(numbers))", "code_2": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))", "code_3": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), functools.reduce(lambda x, y: x * y, numbers))", "code_4": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), operator.mul(*numbers))", "code_5": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(operator.mul, numbers))", "code_6": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), functools.reduce(operator.mul, numbers))", "code_7": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))", "code_8": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), functools.reduce(lambda x, y: x * y, numbers))", "code_9": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(operator.mul, numbers))", "code_10": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), functools.reduce(operator.mul, numbers))"}
{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[:i+1]) for i in range(len(numbers))]", "code_2": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:]) for i in range(len(numbers))]", "code_3": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+2]) for i in range(len(numbers)-1)]", "code_4": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+3]) for i in range(len(numbers)-2)]", "code_5": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+4]) for i in range(len(numbers)-3)]", "code_6": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+5]) for i in range(len(numbers)-4)]", "code_7": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+6]) for i in range(len(numbers)-5)]", "code_8": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+7]) for i in range(len(numbers)-6)]", "code_9": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+8]) for i in range(len(numbers)-7)]", "code_10": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers[i:i+9]) for i in range(len(numbers)-8)]"}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]", "code_2": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_3": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_4": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_5": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_6": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_7": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_8": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_9": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "code_10": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\""}
{"task_id": "HumanEval/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_2": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_3": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_4": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_5": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_6": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_7": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_8": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_9": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "code_10": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "results": [1, 1, 0, 1, 1, 0, 1, 1, 0, 1], "no_of_codes": 10, "code_1": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "code_2": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return sorted(strings, key=len, reverse=True)[0]", "code_3": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]", "code_4": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "code_5": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return sorted(strings, key=len, reverse=True)[0]", "code_6": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]", "code_7": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "code_8": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return sorted(strings, key=len, reverse=True)[0]", "code_9": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return sorted(strings, key=len)[-1]", "code_10": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "solution": "    while b:\n        a, b = b, a % b\n    return a\n", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return greatest_common_divisor(b % a, a)", "code_2": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return greatest_common_divisor(a, b % a)", "code_3": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else greatest_common_divisor(a, b)", "code_4": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return b if b % a == 0 else greatest_common_divisor(a, b)", "code_5": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else b if b % a == 0 else greatest_common_divisor(a, b)", "code_6": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else b if b % a == 0 else greatest_common_divisor(a, b)", "code_7": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else b if b % a == 0 else greatest_common_divisor(a, b)", "code_8": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else b if b % a == 0 else greatest_common_divisor(a, b)", "code_9": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else b if b % a == 0 else greatest_common_divisor(a, b)", "code_10": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    else:\n        return a if a % b == 0 else b if b % a == 0 else greatest_common_divisor(a, b)"}
{"task_id": "HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_2": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_3": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_4": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_5": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_6": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_7": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_8": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_9": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]", "code_10": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def string_sequence(n: int) -> str:\n    return \" \".join(map(str, range(n+1)))", "code_2": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))", "code_3": "def string_sequence(n: int) -> str:\n    return \" \".join(f\"{i}\" for i in range(n+1))", "code_4": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))", "code_5": "def string_sequence(n: int) -> str:\n    return \" \".join(f\"{i}\" for i in range(n+1))", "code_6": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))", "code_7": "def string_sequence(n: int) -> str:\n    return \" \".join(f\"{i}\" for i in range(n+1))", "code_8": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))", "code_9": "def string_sequence(n: int) -> str:\n    return \" \".join(f\"{i}\" for i in range(n+1))", "code_10": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "solution": "    return len(set(string.lower()))\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_2": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_3": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_4": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_5": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_6": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_7": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_8": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_9": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "code_10": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "results": [0, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def parse_music(music_string: str) -> List[int]:\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "code_2": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    return [beats[notes.index(note)] for note in notes]", "code_3": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [beats[note] for note in notes]", "code_4": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    return [beats[i] for i, note in enumerate(notes) if note in beats]", "code_5": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [beats[note] for note in notes if note in beats]", "code_6": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    return [beats[i] for i, note in enumerate(notes) if note in beats]", "code_7": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [beats[note] for note in notes if note in beats]", "code_8": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    return [beats[i] for i, note in enumerate(notes) if note in beats]", "code_9": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    return [beats[note] for note in notes if note in beats]", "code_10": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    return [beats[i] for i, note in enumerate(notes) if note in beats]"}
{"task_id": "HumanEval/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count", "code_2": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)", "code_3": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n            i += len(substring) - 1\n    return count", "code_4": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring])", "code_5": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n            i += len(substring) - 1\n    return count", "code_6": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)", "code_7": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n            i += len(substring) - 1\n    return count", "code_8": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring])", "code_9": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n            i += len(substring) - 1\n    return count", "code_10": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)"}
{"task_id": "HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))", "code_2": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: x))", "code_3": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))", "code_4": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: x))", "code_5": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))", "code_6": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: x))", "code_7": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))", "code_8": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: x))", "code_9": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))", "code_10": "def sort_numbers(numbers: str) -> str:\n    return \" \".join(sorted(numbers.split(), key=lambda x: x))"}
{"task_id": "HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_2": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_3": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_4": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_5": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_6": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_7": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_8": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_9": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair", "code_10": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    smallest_diff = float(\"inf\")\n    closest_pair = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [((x - min_val) / (max_val - min_val)) for x in numbers]", "code_2": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / max(numbers) for x in numbers]", "code_3": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / (max(numbers) - min(numbers)) for x in numbers]", "code_4": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x - min(numbers) for x in numbers]", "code_5": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / max(numbers) for x in numbers]", "code_6": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x - min(numbers) for x in numbers]", "code_7": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / (max(numbers) - min(numbers)) for x in numbers]", "code_8": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x - min(numbers) for x in numbers]", "code_9": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / max(numbers) for x in numbers]", "code_10": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / (max(numbers) - min(numbers)) for x in numbers]"}
{"task_id": "HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "solution": "    return [x for x in values if isinstance(x, int)]\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if type(x) == int]", "code_2": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))", "code_3": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "code_4": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))", "code_5": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if type(x) is int]", "code_6": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) is int, values))", "code_7": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "code_8": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: isinstance(x, int), values))", "code_9": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if type(x) == int]", "code_10": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return list(filter(lambda x: type(x) == int, values))"}
{"task_id": "HumanEval/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "solution": "    return len(string)\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def strlen(string: str) -> int:\n    return len(string)", "code_2": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_3": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_4": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_5": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_6": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_7": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_8": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_9": "def strlen(string: str) -> int:\n    return len(string) if string else 0", "code_10": "def strlen(string: str) -> int:\n    return len(string) if string else 0"}
{"task_id": "HumanEval/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def largest_divisor(n: int) -> int:\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return 1", "code_2": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return 1", "code_3": "def largest_divisor(n: int) -> int:\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return 1", "code_4": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return n", "code_5": "def largest_divisor(n: int) -> int:\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n - 1", "code_6": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return n - 1", "code_7": "def largest_divisor(n: int) -> int:\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return n - 1", "code_8": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return n - 2", "code_9": "def largest_divisor(n: int) -> int:\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n - 2", "code_10": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n    return n - 3"}
{"task_id": "HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_2": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_3": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_4": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_5": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_6": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_7": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_8": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_9": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "code_10": "def factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "code_2": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))", "code_3": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "code_4": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return sorted(set(numbers), key=numbers.index)", "code_5": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return sorted(numbers, key=numbers.index)", "code_6": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "code_7": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))", "code_8": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "code_9": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return sorted(set(numbers), key=numbers.index)", "code_10": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return sorted(numbers, key=numbers.index)"}
{"task_id": "HumanEval/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "solution": "    return string.swapcase()\n", "results": [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def flip_case(string: str) -> str:\n    return string.swapcase()", "code_2": "def flip_case(string: str) -> str:\n    return string.translate(str.maketrans('a-zA-Z', 'A-Za-z'))", "code_3": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "code_4": "def flip_case(string: str) -> str:\n    return ''.join(c.swapcase() for c in string)", "code_5": "def flip_case(string: str) -> str:\n    return string.title()", "code_6": "def flip_case(string: str) -> str:\n    return string.swapcase().title()", "code_7": "def flip_case(string: str) -> str:\n    return ''.join(c.swapcase() for c in string if c.isalpha())", "code_8": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string if c.isalpha())", "code_9": "def flip_case(string: str) -> str:\n    return ''.join(c.swapcase() for c in string if c.isalpha())", "code_10": "def flip_case(string: str) -> str:\n    return string.translate(str.maketrans('a-zA-Z', 'A-Za-z'))"}
{"task_id": "HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "solution": "    return ''.join(strings)\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "code_2": "def concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result", "code_3": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "code_4": "def concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result", "code_5": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "code_6": "def concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result", "code_7": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "code_8": "def concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result", "code_9": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "code_10": "def concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "solution": "    return [x for x in strings if x.startswith(prefix)]\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "code_2": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if prefix in s]", "code_3": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "code_4": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if prefix in s]", "code_5": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "code_6": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if prefix in s]", "code_7": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "code_8": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if prefix in s]", "code_9": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "code_10": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if prefix in s]"}
{"task_id": "HumanEval/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "solution": "    return [e for e in l if e > 0]\n", "results": [1, 1, 0, 0, 1, 1, 0, 0, 1, 1], "no_of_codes": 10, "code_1": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "code_2": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0, l))", "code_3": "def get_positive(l: list):\n    return [x for x in l if x >= 0]", "code_4": "def get_positive(l: list):\n    return list(filter(lambda x: x >= 0, l))", "code_5": "def get_positive(l: list):\n    return [x for x in l if x > 0 and x != 0]", "code_6": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0 and x != 0, l))", "code_7": "def get_positive(l: list):\n    return [x for x in l if x > 0 or x != 0]", "code_8": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0 or x != 0, l))", "code_9": "def get_positive(l: list):\n    return [x for x in l if x > 0 and x != 0 and x != -1]", "code_10": "def get_positive(l: list):\n    return list(filter(lambda x: x > 0 and x != 0 and x != -1, l))"}
{"task_id": "HumanEval/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_2": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_3": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_4": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_5": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_6": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_7": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_8": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_9": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_10": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_2": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_3": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_4": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_5": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_6": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_7": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_8": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_9": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0", "code_10": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input\")\n    x0 = -max(xs) / (len(xs) - 1)\n    return x0"}
{"task_id": "HumanEval/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 9, "code_1": " def sort_third(l):\n    l1 = l[::3]\n    l2 = l[1::3]\n    l3 = l[2::3]\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    return [*l1, *l2, *l3]", "code_2": "def sort_third(l):\n    l.sort(key=lambda x: x % 3)\n    return l", "code_3": "def sort_third(l):\n    l.sort(key=lambda x, i: (i % 3, x))\n    return l\n", "code_4": "def sort_third(l):\n    l.sort(key=lambda x: (x, x))\n    return l\n", "code_5": "def sort_third(l):\n    l.sort(key=lambda x: (x % 3, x))\n    return l\n", "code_6": "def sort_third(l):\n    l.sort(key=lambda x: (x, x % 3))\n    return l\n", "code_7": "def sort_third(l):\n    l.sort(key=lambda x: (x % 3, x, x))\n    return l\n", "code_8": "def sort_third(l):\n    l.sort(key=lambda x: (x, x, x % 3))\n    return l", "code_9": "def sort_third(l):\n    l.sort(key=lambda x: (x % 3, x, x))\n    return l\n"}
{"task_id": "HumanEval/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "solution": "    return sorted(list(set(l)))\n", "results": [1, 0, 1, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def unique(my_list):\n    return sorted(set(my_list))", "code_2": "def unique(l):\n    return list(dict.fromkeys(l))", "code_3": "def unique(l):\n    return list(l for l in set(l))\n", "code_4": "def unique(l):\n    return sorted(list(set(l)))\n", "code_5": "def unique(l):\n    return list(filter(lambda x, y: x==y, l))\n", "code_6": "def unique(l):\n    return list(filter(lambda x: l.count(x)==1, l))\n", "code_7": "def unique(l):\n    return list(filter(lambda x: x not in l[l.index(x)+1:], l))\n", "code_8": "def unique(l):\n    return list(filter(lambda x: l.count(x)==1, l))\n", "code_9": "def unique(l):\n    return list(filter(lambda x: x not in l[l.index(x)+1:], l))", "code_10": "def unique(l):\n    return list(filter(lambda x: l.count(x)==1, l))"}
{"task_id": "HumanEval/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "results": [1, 0, 1, 0, 0, 1, 1, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_element(l: list):\n    return max(l)", "code_2": "def max_element(l: list):\n    return l[len(l)-1]", "code_3": "def max_element(l: list):\n    return sorted(l)[-1]", "code_4": "def max_element(l: list):\n    return l[0] if l else None", "code_5": "def max_element(l: list):\n    return l[len(l)-1] if l else None", "code_6": "def max_element(l: list):\n    return sorted(l, reverse=True)[0]", "code_7": "def max_element(l: list):\n    return sorted(l, key=lambda x: -x)[0]", "code_8": "def max_element(l: list):\n    return max(l, key=lambda x: -x)", "code_9": "def max_element(l: list):\n    return l[0] if l else None", "code_10": "def max_element(l: list):\n    return l[len(l)-1] if l else None"}
{"task_id": "HumanEval/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_2": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_3": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_4": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_5": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_6": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_7": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_8": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_9": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "code_10": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sort_even(l):\n    return sorted(l, key=lambda x: x%2)", "code_2": "def sort_even(l):\n    return [x for x in l if x%2==0] + [x for x in l if x%2==1]", "code_3": "def sort_even(l):\n    return sorted(l, key=lambda x: x%2, reverse=True)", "code_4": "def sort_even(l):\n    return sorted(l, key=lambda x: x%2, reverse=True)", "code_5": "def sort_even(l):\n    return [x for x in l if x%2==0] + [x for x in l if x%2==1]", "code_6": "def sort_even(l):\n    return sorted(l, key=lambda x: x%2)", "code_7": "def sort_even(l):\n    return [x for x in l if x%2==0] + [x for x in l if x%2==1]", "code_8": "def sort_even(l):\n    return sorted(l, key=lambda x: x%2, reverse=True)", "code_9": "def sort_even(l):\n    return sorted(l, key=lambda x: x%2, reverse=True)", "code_10": "def sort_even(l):\n    return [x for x in l if x%2==0] + [x for x in l if x%2==1]"}
{"task_id": "HumanEval/38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n", "solution": "    return encode_cyclic(encode_cyclic(s))\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n", "code_2": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_3": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n", "code_4": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_5": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_6": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_7": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_8": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_9": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "code_10": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1:]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_2": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_3": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_4": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_5": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_6": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_7": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_8": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_9": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_10": "def prime_fib(n: int):\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a if a > 1 and is_prime(a) else prime_fib(n)\n\ndef is_prime(n: int):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_2": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_3": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_4": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_5": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_6": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_7": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_8": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_9": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "code_10": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "solution": "    return n**2\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_2": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_3": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_4": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_5": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_6": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_7": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_8": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_9": "def car_race_collision(n):\n    return n * (n - 1) // 2", "code_10": "def car_race_collision(n):\n    return n * (n - 1) // 2"}
{"task_id": "HumanEval/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "solution": "    return [(e + 1) for e in l]\n", "results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def incr_list(l: list):\n    return [x+1 for x in l]", "code_2": "def incr_list(l: list):\n    return [i+1 for i in l]", "code_3": "def incr_list(l: list):\n    return [x+1 for x in l if x+1 <= 100]", "code_4": "def incr_list(l: list):\n    return [i+1 for i in l if i+1 <= 100]", "code_5": "def incr_list(l: list):\n    return [x+1 for x in l if x+1 in range(101)]", "code_6": "def incr_list(l: list):\n    return [i+1 for i in l if i+1 in range(101)]", "code_7": "def incr_list(l: list):\n    return [x+1 for x in l if x+1 > 0]", "code_8": "def incr_list(l: list):\n    return [i+1 for i in l if i+1 > 0]", "code_9": "def incr_list(l: list):\n    return [x+1 for x in l if x+1 < 101]", "code_10": "def incr_list(l: list):\n    return [i+1 for i in l if i+1 < 101]"}
{"task_id": "HumanEval/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "results": [1, 1, 0, 1, 0, 1, 0, 1, 0, 1], "no_of_codes": 10, "code_1": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "code_2": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False", "code_3": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "code_4": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False", "code_5": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "code_6": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False", "code_7": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "code_8": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False", "code_9": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "code_10": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def change_base(x: int, base: int):\n    return str(bin(x)[2:])", "code_2": "def change_base(x: int, base: int):\n    return str(oct(x)[1:])", "code_3": "def change_base(x: int, base: int):\n    return str(hex(x)[2:])", "code_4": "def change_base(x: int, base: int):\n    return str(x).rjust(base, '0')", "code_5": "def change_base(x: int, base: int):\n    return str(x).zfill(base)", "code_6": "def change_base(x: int, base: int):\n    return str(x).replace('0', '1').replace('1', '0')", "code_7": "def change_base(x: int, base: int):\n    return str(x).translate({ord('0'): base, ord('1'): 0})", "code_8": "def change_base(x: int, base: int):\n    return str(x).translate({ord('0'): base, ord('1'): 0, ord('2'): 1, ord('3'): 2, ord('4'): 3, ord('5'): 4, ord('6'): 5, ord('7'): 6, ord('8'): 7, ord('9'): 8})", "code_9": "def change_base(x: int, base: int):\n    return str(x).translate({ord('0'): base, ord('1'): 0, ord('2'): 1, ord('3'): 2, ord('4'): 3, ord('5'): 4, ord('6'): 5, ord('7'): 6, ord('8'): 7, ord('9'): 8, ord('A'): 9, ord('B'): 10, ord('C'): 11, ord('D'): 12, ord('E'): 13, ord('F'): 14})", "code_10": "def change_base(x: int, base: int):\n    return str(x).translate({ord('0'): base, ord('1'): 0, ord('2'): 1, ord('3'): 2, ord('4'): 3, ord('5'): 4, ord('6'): 5, ord('7'): 6, ord('8'): 7, ord('9'): 8, ord('A'): 9, ord('B'): 10, ord('C'): 11, ord('D'): 12, ord('E'): 13, ord('F'): 14, ord('a'): 15, ord('b'): 16, ord('c'): 17, ord('d'): 18, ord('e'): 19, ord('f'): 20})"}
{"task_id": "HumanEval/45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "solution": "    return a * h / 2.0\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def triangle_area(a, h):\n    return a * h / 2", "code_2": "def triangle_area(a, h):\n    return (a * h) / 2", "code_3": "def triangle_area(a, h):\n    return (a / 2) * h", "code_4": "def triangle_area(a, h):\n    return (a * h) / 2.0", "code_5": "def triangle_area(a, h):\n    return (a / 2) * h", "code_6": "def triangle_area(a, h):\n    return (a * h) / 2.0", "code_7": "def triangle_area(a, h):\n    return (a / 2) * h", "code_8": "def triangle_area(a, h):\n    return (a * h) / 2", "code_9": "def triangle_area(a, h):\n    return (a / 2) * h", "code_10": "def triangle_area(a, h):\n    return (a * h) / 2.0"}
{"task_id": "HumanEval/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)", "code_2": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_3": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_4": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_5": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_6": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_7": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_8": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_9": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "code_10": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(n-1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_2": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_3": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_4": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_5": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_6": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_7": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_8": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_9": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]", "code_10": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]"}
{"task_id": "HumanEval/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def is_palindrome(text: str):\n    return text == text[::-1]", "code_2": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower()", "code_3": "def is_palindrome(text: str):\n    return all(c == text[-i-1] for i, c in enumerate(text))", "code_4": "def is_palindrome(text: str):\n    return text.replace(\" \", \"\").lower() == text[::-1].replace(\" \", \"\").lower()", "code_5": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower() and len(text) == len(text[::-1])", "code_6": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower() and text.replace(\" \", \"\") == text[::-1].replace(\" \", \"\")", "code_7": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower() and text.replace(\" \", \"\") == text[::-1].replace(\" \", \"\") and len(text) == len(text[::-1])", "code_8": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower() and text.replace(\" \", \"\") == text[::-1].replace(\" \", \"\") and len(text) == len(text[::-1]) and text.count(\" \") == text[::-1].count(\" \")", "code_9": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower() and text.replace(\" \", \"\") == text[::-1].replace(\" \", \"\") and len(text) == len(text[::-1]) and text.count(\" \") == text[::-1].count(\" \") and text.count(\"a\") == text[::-1].count(\"a\")", "code_10": "def is_palindrome(text: str):\n    return text.lower() == text[::-1].lower() and text.replace(\" \", \"\") == text[::-1].replace(\" \", \"\") and len(text) == len(text[::-1]) and text.count(\" \") == text[::-1].count(\" \") and text.count(\"a\") == text[::-1].count(\"a\") and text.count(\"b\") == text[::-1].count(\"b\")"}
{"task_id": "HumanEval/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def modp(n: int, p: int):\n    return pow(2, n, p)", "code_2": "def modp(n: int, p: int):\n    return (2 ** n) % p", "code_3": "def modp(n: int, p: int):\n    return pow(2, n, p) if p != 1 else 0", "code_4": "def modp(n: int, p: int):\n    return (2 ** n) % p if p != 1 else 0", "code_5": "def modp(n: int, p: int):\n    return pow(2, n, p) if p != 1 else 1", "code_6": "def modp(n: int, p: int):\n    return (2 ** n) % p if p != 1 else 1", "code_7": "def modp(n: int, p: int):\n    return pow(2, n, p) if p != 1 else 0", "code_8": "def modp(n: int, p: int):\n    return (2 ** n) % p if p != 1 else 0", "code_9": "def modp(n: int, p: int):\n    return pow(2, n, p) if p != 1 else 1", "code_10": "def modp(n: int, p: int):\n    return (2 ** n) % p if p != 1 else 1"}
{"task_id": "HumanEval/50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n", "solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_2": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_3": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_4": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_5": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_6": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_7": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_8": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_9": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n", "code_10": " def encode_shift(s):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)\n\n\ndef decode_shift(s):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join(chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s)\n"}
{"task_id": "HumanEval/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_2": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "code_3": "def remove_vowels(text):\n    vowels = set('aeiou')\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_4": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_5": "def remove_vowels(text):\n    vowels = set('aeiou')\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_6": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_7": "def remove_vowels(text):\n    vowels = set('aeiou')\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_8": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_9": "def remove_vowels(text):\n    vowels = set('aeiou')\n    return ''.join([char for char in text if char.lower() not in vowels])", "code_10": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() not in vowels])"}
{"task_id": "HumanEval/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)", "code_2": "def below_threshold(l: list, t: int):\n    return not any(x >= t for x in l)", "code_3": "def below_threshold(l: list, t: int):\n    return all(x <= t for x in l)", "code_4": "def below_threshold(l: list, t: int):\n    return not any(x > t for x in l)", "code_5": "def below_threshold(l: list, t: int):\n    return all(x < t or x == t for x in l)", "code_6": "def below_threshold(l: list, t: int):\n    return not any(x > t and x != t for x in l)", "code_7": "def below_threshold(l: list, t: int):\n    return all(x <= t or x == t for x in l)", "code_8": "def below_threshold(l: list, t: int):\n    return not any(x > t and x != t for x in l)", "code_9": "def below_threshold(l: list, t: int):\n    return all(x < t or x == t for x in l)", "code_10": "def below_threshold(l: list, t: int):\n    return not any(x > t and x != t for x in l)"}
{"task_id": "HumanEval/53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "solution": "    return x + y\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def add(x: int, y: int):\n    return x + y", "code_2": "def add(x: int, y: int):\n    return x + y", "code_3": "def add(x: int, y: int):\n    return x + y", "code_4": "def add(x: int, y: int):\n    return x + y", "code_5": "def add(x: int, y: int):\n    return x + y", "code_6": "def add(x: int, y: int):\n    return x + y", "code_7": "def add(x: int, y: int):\n    return x + y", "code_8": "def add(x: int, y: int):\n    return x + y", "code_9": "def add(x: int, y: int):\n    return x + y", "code_10": "def add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "solution": "    return set(s0) == set(s1)\n", "results": [0, 1, 0, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "code_2": "def same_chars(s0: str, s1: str):\n    return all(c in s1 for c in s0) and all(c in s0 for c in s1)", "code_3": "def same_chars(s0: str, s1: str):\n    return \"\".join(sorted(s0)) == \"\".join(sorted(s1))", "code_4": "def same_chars(s0: str, s1: str):\n    return \"\".join(s0) == \"\".join(s1)", "code_5": "def same_chars(s0: str, s1: str):\n    return all(c in s1 for c in s0) and all(c in s0 for c in s1)", "code_6": "def same_chars(s0: str, s1: str):\n    return \"\".join(sorted(s0)) == \"\".join(sorted(s1))", "code_7": "def same_chars(s0: str, s1: str):\n    return \"\".join(s0) == \"\".join(s1)", "code_8": "def same_chars(s0: str, s1: str):\n    return all(c in s1 for c in s0) and all(c in s0 for c in s1)", "code_9": "def same_chars(s0: str, s1: str):\n    return \"\".join(sorted(s0)) == \"\".join(sorted(s1))", "code_10": "def same_chars(s0: str, s1: str):\n    return \"\".join(s0) == \"\".join(s1)"}
{"task_id": "HumanEval/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "results": [1, 1, 0, 1, 1, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "code_2": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "code_3": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a", "code_4": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 1, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a", "code_5": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return b", "code_6": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 1, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return b", "code_7": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a+b", "code_8": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 1, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a+b", "code_9": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a+b", "code_10": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 1, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a+b"}
{"task_id": "HumanEval/56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_2": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            stack.pop()\n    return not stack", "code_3": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_4": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            stack.pop()\n    return not stack", "code_5": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_6": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            stack.pop()\n    return not stack", "code_7": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_8": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            stack.pop()\n    return not stack", "code_9": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_10": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))", "code_2": "def monotonic(l: list):\n    return all(abs(l[i] - l[i+1]) <= 1 for i in range(len(l)-1))", "code_3": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] or l[i] == l[i+1] for i in range(len(l)-1))", "code_4": "def monotonic(l: list):\n    return all(abs(l[i] - l[i+1]) <= 1 or l[i] == l[i+1] for i in range(len(l)-1))", "code_5": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] or l[i] == l[i+1] for i in range(len(l)-1))", "code_6": "def monotonic(l: list):\n    return all(abs(l[i] - l[i+1]) <= 1 or l[i] == l[i+1] for i in range(len(l)-1))", "code_7": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] or l[i] == l[i+1] for i in range(len(l)-1))", "code_8": "def monotonic(l: list):\n    return all(abs(l[i] - l[i+1]) <= 1 or l[i] == l[i+1] for i in range(len(l)-1))", "code_9": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] or l[i] == l[i+1] for i in range(len(l)-1))", "code_10": "def monotonic(l: list):\n    return all(abs(l[i] - l[i+1]) <= 1 or l[i] == l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2))", "code_2": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=l1.index)", "code_3": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=l2.index)", "code_4": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l1.index(x), l2.index(x)))", "code_5": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l2.index(x), l1.index(x)))", "code_6": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l1.index(x), l2.index(x)))", "code_7": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l2.index(x), l1.index(x)))", "code_8": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l1.index(x), l2.index(x)))", "code_9": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l2.index(x), l1.index(x)))", "code_10": "def common(l1, l2):\n    return sorted(set(l1).intersection(l2), key=lambda x: (l1.index(x), l2.index(x)))"}
{"task_id": "HumanEval/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_2": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_3": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_4": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_5": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_6": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_7": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_8": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_9": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_10": "def largest_prime_factor(n):\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    return 1\n\ndef is_prime(n):\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "solution": "    return sum(range(n + 1))\n", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_to_n(n):\n    return sum(range(1, n+1))", "code_2": "def sum_to_n(n):\n    return n * (n + 1) // 2", "code_3": "def sum_to_n(n):\n    return sum(x**2 for x in range(1, n+1))", "code_4": "def sum_to_n(n):\n    return sum(x**3 for x in range(1, n+1))", "code_5": "def sum_to_n(n):\n    return sum(x**4 for x in range(1, n+1))", "code_6": "def sum_to_n(n):\n    return sum(x**5 for x in range(1, n+1))", "code_7": "def sum_to_n(n):\n    return sum(x**6 for x in range(1, n+1))", "code_8": "def sum_to_n(n):\n    return sum(x**7 for x in range(1, n+1))", "code_9": "def sum_to_n(n):\n    return sum(x**8 for x in range(1, n+1))", "code_10": "def sum_to_n(n):\n    return sum(x**9 for x in range(1, n+1))"}
{"task_id": "HumanEval/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_2": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "code_3": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_4": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "code_5": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_6": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "code_7": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_8": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "code_9": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "code_10": "def correct_bracketing(brackets: str):\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def derivative(xs):\n    return [x for x in xs[1:]]", "code_2": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_3": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_4": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_5": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_6": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_7": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_8": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_9": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]", "code_10": "def derivative(xs):\n    return [x * (i + 1) for i, x in enumerate(xs)]"}
{"task_id": "HumanEval/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "code_2": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "code_3": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(n-2):\n            a, b, c = b, c, a+b+c\n        return c", "code_4": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b = 0, 0\n        for i in range(n-2):\n            a, b = b, a+b\n        return a+b", "code_5": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(n-2):\n            a, b, c = b, c, a+b+c\n        return a+b+c", "code_6": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b = 0, 0\n        for i in range(n-2):\n            a, b = b, a+b\n        return a+b", "code_7": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(n-2):\n            a, b, c = b, c, a+b+c\n        return a+b+c", "code_8": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b = 0, 0\n        for i in range(n-2):\n            a, b = b, a+b\n        return a+b", "code_9": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(n-2):\n            a, b, c = b, c, a+b+c\n        return a+b+c", "code_10": "def fibfib(n: int):\n    if n <= 2:\n        return n\n    else:\n        a, b = 0, 0\n        for i in range(n-2):\n            a, b = b, a+b\n        return a+b"}
{"task_id": "HumanEval/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c in \"aeiouy\":\n            count += 1\n    return count", "code_2": "def vowels_count(s):\n    return sum(c in \"aeiouy\" for c in s)", "code_3": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c in \"aeiouy\" and (c != \"y\" or c == \"y\" and c == s[-1]):\n            count += 1\n    return count", "code_4": "def vowels_count(s):\n    return len([c for c in s if c in \"aeiouy\"])", "code_5": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c in \"aeiouy\" and (c != \"y\" or c == \"y\" and c == s[-1]):\n            count += 1\n    return count", "code_6": "def vowels_count(s):\n    return sum(c in \"aeiouy\" for c in s)", "code_7": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c in \"aeiouy\" and (c != \"y\" or c == \"y\" and c == s[-1]):\n            count += 1\n    return count", "code_8": "def vowels_count(s):\n    return len([c for c in s if c in \"aeiouy\"])", "code_9": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c in \"aeiouy\" and (c != \"y\" or c == \"y\" and c == s[-1]):\n            count += 1\n    return count", "code_10": "def vowels_count(s):\n    return sum(c in \"aeiouy\" for c in s)"}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_2": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_3": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_4": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_5": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_6": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_7": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_8": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_9": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]", "code_10": "def circular_shift(x, shift):\n    return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "HumanEval/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "results": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "code_2": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.isupper())", "code_3": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper() and c.isalpha())", "code_4": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.isupper() and c.isdigit())", "code_5": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper() and c.isdigit())", "code_6": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.isupper() and c.isdigit())", "code_7": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper() and c.isdigit())", "code_8": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.isupper() and c.isdigit())", "code_9": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper() and c.isdigit())", "code_10": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isalpha() and c.isupper() and c.isdigit())"}
{"task_id": "HumanEval/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fruit_distribution(s, n):\n    apples, oranges = map(int, s.split('and'))\n    return n - apples - oranges", "code_2": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_3": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_4": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_5": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_6": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_7": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_8": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_9": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges", "code_10": "def fruit_distribution(s, n):\n    apples, oranges = s.split('and')\n    apples = int(apples.strip('apples'))\n    oranges = int(oranges.strip('oranges'))\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and (smallest_even_value is None or value < smallest_even_value):\n            smallest_even_value = value\n            smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_2": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_3": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_4": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_5": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_6": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_7": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_8": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_9": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []", "code_10": "def pluck(arr):\n    smallest_even_value = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even_value or smallest_even_value is None:\n                smallest_even_value = value\n                smallest_index = i\n    return [smallest_even_value, smallest_index] if smallest_even_value is not None else []"}
{"task_id": "HumanEval/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for i in lst:\n        freq = lst.count(i)\n        if freq > max_freq and freq >= i:\n            max_freq = freq\n            max_val = i\n    return max_val", "code_2": "def search(lst):\n    counts = {}\n    for i in lst:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        if counts[i] >= i:\n            return i\n    return -1", "code_3": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for i in lst:\n        freq = lst.count(i)\n        if freq > max_freq and freq >= i:\n            max_freq = freq\n            max_val = i\n    return max_val", "code_4": "def search(lst):\n    counts = {}\n    for i in lst:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        if counts[i] >= i:\n            return i\n    return -1", "code_5": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for i in lst:\n        freq = lst.count(i)\n        if freq > max_freq and freq >= i:\n            max_freq = freq\n            max_val = i\n    return max_val", "code_6": "def search(lst):\n    counts = {}\n    for i in lst:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        if counts[i] >= i:\n            return i\n    return -1", "code_7": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for i in lst:\n        freq = lst.count(i)\n        if freq > max_freq and freq >= i:\n            max_freq = freq\n            max_val = i\n    return max_val", "code_8": "def search(lst):\n    counts = {}\n    for i in lst:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        if counts[i] >= i:\n            return i\n    return -1", "code_9": "def search(lst):\n    max_freq = 0\n    max_val = -1\n    for i in lst:\n        freq = lst.count(i)\n        if freq > max_freq and freq >= i:\n            max_freq = freq\n            max_val = i\n    return max_val", "code_10": "def search(lst):\n    counts = {}\n    for i in lst:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    for i in counts:\n        if counts[i] >= i:\n            return i\n    return -1"}
{"task_id": "HumanEval/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x, reverse=True)", "code_2": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: -x)", "code_3": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x % 2)", "code_4": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x // 2)", "code_5": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x ** 2)", "code_6": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: -x ** 2)", "code_7": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x % 2 - x // 2)", "code_8": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x % 2 + x // 2)", "code_9": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x % 2 * x // 2)", "code_10": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x % 2 - x // 2, reverse=True)"}
{"task_id": "HumanEval/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1", "code_2": "def triangle_area(a, b, c):\n    if a**2 + b**2 > c**2 and b**2 + c**2 > a**2 and a**2 + c**2 > b**2:\n        return round(math.sqrt(a**2 * b**2 * c**2), 2)\n    else:\n        return -1", "code_3": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1", "code_4": "def triangle_area(a, b, c):\n    if a**2 + b**2 > c**2 and b**2 + c**2 > a**2 and a**2 + c**2 > b**2:\n        return round(math.sqrt(a**2 * b**2 * c**2), 2)\n    else:\n        return -1", "code_5": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1", "code_6": "def triangle_area(a, b, c):\n    if a**2 + b**2 > c**2 and b**2 + c**2 > a**2 and a**2 + c**2 > b**2:\n        return round(math.sqrt(a**2 * b**2 * c**2), 2)\n    else:\n        return -1", "code_7": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1", "code_8": "def triangle_area(a, b, c):\n    if a**2 + b**2 > c**2 and b**2 + c**2 > a**2 and a**2 + c**2 > b**2:\n        return round(math.sqrt(a**2 * b**2 * c**2), 2)\n    else:\n        return -1", "code_9": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1", "code_10": "def triangle_area(a, b, c):\n    if a**2 + b**2 > c**2 and b**2 + c**2 > a**2 and a**2 + c**2 > b**2:\n        return round(math.sqrt(a**2 * b**2 * c**2), 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1]", "code_2": "def will_it_fly(q, w):\n    return sum(q) <= w and sorted(q) == q", "code_3": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1] and sorted(q) == q", "code_4": "def will_it_fly(q, w):\n    return sum(q) <= w and len(set(q)) == 1", "code_5": "def will_it_fly(q, w):\n    return sum(q) <= w and len(q) % 2 == 0", "code_6": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1] and len(q) % 2 == 0", "code_7": "def will_it_fly(q, w):\n    return sum(q) <= w and sorted(q) == q and len(q) % 2 == 0", "code_8": "def will_it_fly(q, w):\n    return sum(q) <= w and len(set(q)) == 1 and len(q) % 2 == 0", "code_9": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1] and len(set(q)) == 1", "code_10": "def will_it_fly(q, w):\n    return sum(q) <= w and sorted(q) == q and len(set(q)) == 1"}
{"task_id": "HumanEval/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_2": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_3": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_4": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_5": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_6": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_7": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_8": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_9": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes", "code_10": "def smallest_change(arr):\n    if is_palindromic(arr):\n        return 0\n    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                return min_changes\n            min_changes += 1\n    return min_changes"}
{"task_id": "HumanEval/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2", "code_2": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2", "code_3": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2", "code_4": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2", "code_5": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2", "code_6": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2", "code_7": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2", "code_8": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2", "code_9": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2", "code_10": "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n    return lst1 if sum(map(len, lst1)) < sum(map(len, lst2)) else lst2"}
{"task_id": "HumanEval/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_2": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_3": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_4": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_5": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_6": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_7": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_8": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_9": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False", "code_10": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, 10):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "code_2": "def is_simple_power(x, n):\n    return x == n ** int(x)", "code_3": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) or x == n ** int(x)", "code_4": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) and x == n ** int(x)", "code_5": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) or x == n ** int(x) or x == n ** int(x ** (1/n))", "code_6": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n))", "code_7": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n)) and x == n ** int(x)", "code_8": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n))", "code_9": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n)) and x == n ** int(x)", "code_10": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n)) and x == n ** int(x) or x == n ** int(x ** (1/n))"}
{"task_id": "HumanEval/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def iscube(a):\n    return a**3 == a", "code_2": "def iscube(a):\n    return a**(1/3) == a", "code_3": "def iscube(a):\n    return a % 3 == 0", "code_4": "def iscube(a):\n    return a == a**3", "code_5": "def iscube(a):\n    return a == a**(1/3)", "code_6": "def iscube(a):\n    return a % 3 == 0 and a > 0", "code_7": "def iscube(a):\n    return a == a**3 or a == a**(1/3)", "code_8": "def iscube(a):\n    return a % 3 == 0 and a != 0", "code_9": "def iscube(a):\n    return a == a**3 or a == a**(1/3) or a == 0", "code_10": "def iscube(a):\n    return a % 3 == 0 and a != 0 or a == 0"}
{"task_id": "HumanEval/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_2": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_3": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_4": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_5": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_6": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_7": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_8": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_9": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count", "code_10": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i in \"2357ABD\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:]", "code_2": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[3:] + \"db\"", "code_3": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).replace(\"0b\", \"\") + \"db\"", "code_4": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).zfill(32) + \"db\"", "code_5": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).rjust(32, \"0\") + \"db\"", "code_6": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).ljust(32, \"0\") + \"db\"", "code_7": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).center(32, \"0\") + \"db\"", "code_8": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).format(spec=\"032b\") + \"db\"", "code_9": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).format(spec=\"032b\", fill=\"0\") + \"db\"", "code_10": "def decimal_to_binary(decimal):\n    return \"db\" + str(decimal).format(spec=\"032b\", fill=\"0\", align=\"<\") + \"db\""}
{"task_id": "HumanEval/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True", "code_2": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    return True", "code_3": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True", "code_4": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    return True", "code_5": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True", "code_6": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    return True", "code_7": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True", "code_8": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    return True", "code_9": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True", "code_10": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i:i+3] in s[i+3:]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_2": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_3": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_4": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_5": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_6": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_7": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_8": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_9": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "code_10": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades"}
{"task_id": "HumanEval/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def prime_length(string):\n    length = len(string)\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "code_2": "def prime_length(string):\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True", "code_3": "def prime_length(string):\n    length = len(string)\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "code_4": "def prime_length(string):\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True", "code_5": "def prime_length(string):\n    length = len(string)\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "code_6": "def prime_length(string):\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True", "code_7": "def prime_length(string):\n    length = len(string)\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "code_8": "def prime_length(string):\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True", "code_9": "def prime_length(string):\n    length = len(string)\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "code_10": "def prime_length(string):\n    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "code_2": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count", "code_3": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i)[:2] or '1' in str(i)[-2:]:\n            count += 1\n    return count", "code_4": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if any(c == '1' for c in str(i)[:2]) or any(c == '1' for c in str(i)[-2:]):\n            count += 1\n    return count", "code_5": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i) or '1' in str(i)[::-1]:\n            count += 1\n    return count", "code_6": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i) or '1' in str(i)[::-1]:\n            count += 1\n    return count", "code_7": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i) or '1' in str(i)[::-1]:\n            count += 1\n    return count", "code_8": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i) or '1' in str(i)[::-1]:\n            count += 1\n    return count", "code_9": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i) or '1' in str(i)[::-1]:\n            count += 1\n    return count", "code_10": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if '1' in str(i) or '1' in str(i)[::-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "prompt": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def solve(N):\n    return bin(N)[2:]", "code_2": "def solve(N):\n    return \"\".join(str(int(c)) for c in bin(N)[2:])", "code_3": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_4": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_5": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_6": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_7": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_8": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_9": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])", "code_10": "def solve(N):\n    return \"\".join(str(int(c) % 2) for c in bin(N)[2:])"}
{"task_id": "HumanEval/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def add(lst):\n    return sum(lst[::2])", "code_2": "def add(lst):\n    return sum(lst[1::2])", "code_3": "def add(lst):\n    return sum(lst[::2]) + sum(lst[1::2])", "code_4": "def add(lst):\n    return sum(lst[::2]) - sum(lst[1::2])", "code_5": "def add(lst):\n    return sum(lst[::2]) * sum(lst[1::2])", "code_6": "def add(lst):\n    return sum(lst[::2]) / sum(lst[1::2])", "code_7": "def add(lst):\n    return sum(lst[::2]) % sum(lst[1::2])", "code_8": "def add(lst):\n    return sum(lst[::2]) ** sum(lst[1::2])", "code_9": "def add(lst):\n    return sum(lst[::2]) // sum(lst[1::2])", "code_10": "def add(lst):\n    return sum(lst[::2]) + sum(lst[1::2])"}
{"task_id": "HumanEval/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Function implementation\n    return \"\".join(sorted(s))", "code_2": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split()))", "code_3": "def anti_shuffle(s):\n    return \"\".join(sorted(s, key=lambda x: x.lower()))", "code_4": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))", "code_5": "def anti_shuffle(s):\n    return \"\".join(sorted(s, key=lambda x: x.lower()))", "code_6": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))", "code_7": "def anti_shuffle(s):\n    return \"\".join(sorted(s, key=lambda x: x.lower()))", "code_8": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))", "code_9": "def anti_shuffle(s):\n    return \"\".join(sorted(s, key=lambda x: x.lower()))", "code_10": "def anti_shuffle(s):\n    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))"}
{"task_id": "HumanEval/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "results": [0, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result)", "code_2": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_3": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_4": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_5": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_6": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_7": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_8": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_9": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))", "code_10": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda t: (t[0], -t[1]))"}
{"task_id": "HumanEval/88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "results": [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], "no_of_codes": 10, "code_1": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "code_2": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: -x)\n    else:\n        return sorted(array)", "code_3": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array, key=lambda x: -x)", "code_4": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: x)\n    else:\n        return sorted(array, key=lambda x: -x)", "code_5": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: x, reverse=True)\n    else:\n        return sorted(array, key=lambda x: -x)", "code_6": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: -x, reverse=True)\n    else:\n        return sorted(array, key=lambda x: x)", "code_7": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: -x)\n    else:\n        return sorted(array, key=lambda x: x)", "code_8": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: x, reverse=True)\n    else:\n        return sorted(array, key=lambda x: -x, reverse=True)", "code_9": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: -x, reverse=True)\n    else:\n        return sorted(array, key=lambda x: x, reverse=True)", "code_10": "def sort_array(array):\n    if not array:\n        return []\n    sum = array[0] + array[-1]\n    if sum % 2 == 0:\n        return sorted(array, key=lambda x: x)\n    else:\n        return sorted(array, key=lambda x: -x)"}
{"task_id": "HumanEval/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_2": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_3": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_4": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_5": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_6": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_7": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_8": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_9": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)", "code_10": "def encrypt(s):\n    return ''.join(chr((ord(c) - ord('a') + 2) % 26 + ord('a')) for c in s)"}
{"task_id": "HumanEval/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]", "code_2": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return min(x for x in lst if x > lst[0])", "code_3": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst)[1]", "code_4": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst, reverse=True)[1]", "code_5": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1] if lst[1] > lst[0] else None", "code_6": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1] if lst[1] > lst[0] else lst[2]", "code_7": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1] if lst[1] > lst[0] else lst[2] if lst[2] > lst[0] else None", "code_8": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1] if lst[1] > lst[0] else lst[2] if lst[2] > lst[0] else lst[3]", "code_9": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1] if lst[1] > lst[0] else lst[2] if lst[2] > lst[0] else lst[3] if lst[3] > lst[0] else None", "code_10": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1] if lst[1] > lst[0] else lst[2] if lst[2] > lst[0] else lst[3] if lst[3] > lst[0] else lst[4]"}
{"task_id": "HumanEval/91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_bored(S):\n    return sum(1 for c in S if c == \"I\")", "code_2": "def is_bored(S):\n    return len([c for c in S if c == \"I\"])", "code_3": "def is_bored(S):\n    return sum(1 for c in S if c == \"I\" and c.isupper())", "code_4": "def is_bored(S):\n    return len([c for c in S if c == \"I\" and c.isupper()])", "code_5": "def is_bored(S):\n    return sum(1 for c in S if c == \"I\" and c.islower())", "code_6": "def is_bored(S):\n    return len([c for c in S if c == \"I\" and c.islower()])", "code_7": "def is_bored(S):\n    return sum(1 for c in S if c == \"I\" and c.istitle())", "code_8": "def is_bored(S):\n    return len([c for c in S if c == \"I\" and c.istitle()])", "code_9": "def is_bored(S):\n    return sum(1 for c in S if c == \"I\" and c.isdigit())", "code_10": "def is_bored(S):\n    return len([c for c in S if c == \"I\" and c.isdigit()])"}
{"task_id": "HumanEval/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def any_int(x, y, z):\n    if x == y + z and isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    else:\n        return False", "code_2": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(i, int) for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_3": "def any_int(x, y, z):\n    if x == y + z and all(type(i) == int for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_4": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(i, int) for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_5": "def any_int(x, y, z):\n    if x == y + z and all(type(i) == int for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_6": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(i, int) for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_7": "def any_int(x, y, z):\n    if x == y + z and all(type(i) == int for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_8": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(i, int) for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_9": "def any_int(x, y, z):\n    if x == y + z and all(type(i) == int for i in [x, y, z]):\n        return True\n    else:\n        return False", "code_10": "def any_int(x, y, z):\n    if x == y + z and all(isinstance(i, int) for i in [x, y, z]):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def encode(message):\n    return ''.join([chr(ord(c) + 2) if c.isalpha() and c.islower() else c for c in message])", "code_2": "def encode(message):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in message])", "code_3": "def encode(message):\n    return ''.join([chr(ord(c) + 2) if c.isalpha() and c.islower() else c for c in message])", "code_4": "def encode(message):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in message])", "code_5": "def encode(message):\n    return ''.join([chr(ord(c) + 2) if c.isalpha() and c.islower() else c for c in message])", "code_6": "def encode(message):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in message])", "code_7": "def encode(message):\n    return ''.join([chr(ord(c) + 2) if c.isalpha() and c.islower() else c for c in message])", "code_8": "def encode(message):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in message])", "code_9": "def encode(message):\n    return ''.join([chr(ord(c) + 2) if c.isalpha() and c.islower() else c for c in message])", "code_10": "def encode(message):\n    return ''.join([c.swapcase() if c.isalpha() else c for c in message])"}
{"task_id": "HumanEval/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_2": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 2 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_3": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 3 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_4": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 5 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_5": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 7 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_6": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 11 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_7": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 13 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_8": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 17 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_9": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 19 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))", "code_10": "def skjkasdkd(lst):\n    largest_prime = 0\n    for i in lst:\n        if i % 23 != 0 and is_prime(i) and i > largest_prime:\n            largest_prime = i\n    return sum(str(largest_prime))"}
{"task_id": "HumanEval/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_2": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() for key in keys):\n        return True\n    else:\n        return False", "code_3": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_4": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() for key in keys):\n        return True\n    elif all(key.isalpha() and key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_5": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_6": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_7": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_8": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_9": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False", "code_10": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    if all(key.isalpha() and key.islower() or key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_up_to(n):\n    return [x for x in range(2, n+1) if is_prime(x)]\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "code_2": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 != 0 and x % 3 != 0]", "code_3": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 == 0 or x % 3 == 0]", "code_4": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 != 0 and x % 3 == 0]", "code_5": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 == 0 or x % 3 != 0]", "code_6": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 == 0 and x % 3 == 0]", "code_7": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 != 0 or x % 3 != 0]", "code_8": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 == 0 and x % 3 != 0]", "code_9": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 != 0 or x % 3 == 0]", "code_10": "def count_up_to(n):\n    return [x for x in range(2, n+1) if x % 2 == 0 and x % 3 == 0]"}
{"task_id": "HumanEval/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "solution": "    return abs(a % 10) * abs(b % 10)\n", "results": [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], "no_of_codes": 10, "code_1": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "code_2": "def multiply(a, b):\n    return a * b", "code_3": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "code_4": "def multiply(a, b):\n    return a * b", "code_5": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "code_6": "def multiply(a, b):\n    return a * b", "code_7": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "code_8": "def multiply(a, b):\n    return a * b", "code_9": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "code_10": "def multiply(a, b):\n    return a * b"}
{"task_id": "HumanEval/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count", "code_2": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if c.isupper() and i % 2 == 0:\n            count += 1\n    return count", "code_3": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count", "code_4": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count", "code_5": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if c.isupper() and i % 2 == 0:\n            count += 1\n    return count", "code_6": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count", "code_7": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count", "code_8": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if c.isupper() and i % 2 == 0:\n            count += 1\n    return count", "code_9": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count", "code_10": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def closest_integer(value):\n    return round(float(value))", "code_2": "def closest_integer(value):\n    return int(round(float(value)))", "code_3": "def closest_integer(value):\n    return round(float(value), 0)", "code_4": "def closest_integer(value):\n    return int(round(float(value), 0))", "code_5": "def closest_integer(value):\n    return round(float(value), 1)", "code_6": "def closest_integer(value):\n    return int(round(float(value), 1))", "code_7": "def closest_integer(value):\n    return round(float(value), 2)", "code_8": "def closest_integer(value):\n    return int(round(float(value), 2))", "code_9": "def closest_integer(value):\n    return round(float(value), 3)", "code_10": "def closest_integer(value):\n    return int(round(float(value), 3))"}
{"task_id": "HumanEval/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "solution": "    return [n + 2*i for i in range(n)]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_2": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_3": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_4": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_5": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_6": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_7": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_8": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_9": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]", "code_10": "def make_a_pile(n):\n    return [n] + [n+1 if i%2==0 else n+2 for i in range(1, n)]"}
{"task_id": "HumanEval/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def words_string(s):\n    return s.split()", "code_2": "def words_string(s):\n    return s.split(\",\")", "code_3": "def words_string(s):\n    return s.split(\" \")", "code_4": "def words_string(s):\n    return s.split(\", \")", "code_5": "def words_string(s):\n    return s.split(\" , \")", "code_6": "def words_string(s):\n    return s.split(\" ,\")", "code_7": "def words_string(s):\n    return s.split(\" , \")", "code_8": "def words_string(s):\n    return s.split(\" ,\")", "code_9": "def words_string(s):\n    return s.split(\" , \")", "code_10": "def words_string(s):\n    return s.split(\" ,\")"}
{"task_id": "HumanEval/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1", "code_2": "def choose_num(x, y):\n    for i in range(x, y+1, 2):\n        return i\n    return -1", "code_3": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x:\n            return i\n    return -1", "code_4": "def choose_num(x, y):\n    for i in range(x, y+1, 2):\n        if i >= x:\n            return i\n    return -1", "code_5": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1", "code_6": "def choose_num(x, y):\n    for i in range(x, y+1, 2):\n        if i >= x and i <= y:\n            return i\n    return -1", "code_7": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1", "code_8": "def choose_num(x, y):\n    for i in range(x, y+1, 2):\n        if i >= x and i <= y:\n            return i\n    return -1", "code_9": "def choose_num(x, y):\n    for i in range(x, y+1):\n        if i % 2 == 0 and i >= x and i <= y:\n            return i\n    return -1", "code_10": "def choose_num(x, y):\n    for i in range(x, y+1, 2):\n        if i >= x and i <= y:\n            return i\n    return -1"}
{"task_id": "HumanEval/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return bin(round(avg))[2:]", "code_2": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg))", "code_3": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).zfill(len(str(m)))", "code_4": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).rjust(len(str(m)), \"0\")", "code_5": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).ljust(len(str(m)), \"0\")", "code_6": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).center(len(str(m)), \"0\")", "code_7": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).replace(\"0b\", \"\")", "code_8": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).replace(\"0b\", \"\").zfill(len(str(m)))", "code_9": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).replace(\"0b\", \"\").rjust(len(str(m)), \"0\")", "code_10": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    return \"0b\" + str(round(avg)).replace(\"0b\", \"\").ljust(len(str(m)), \"0\")"}
{"task_id": "HumanEval/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_2": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_3": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_4": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_5": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_6": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_7": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_8": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_9": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]", "code_10": "def unique_digits(x):\n    return [i for i in x if not any(j % 2 == 0 for j in str(i))]"}
{"task_id": "HumanEval/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True)]", "code_2": "def by_length(arr):\n    return sorted(arr, key=lambda x: -x)", "code_3": "def by_length(arr):\n    return sorted(arr, reverse=True)", "code_4": "def by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True)]", "code_5": "def by_length(arr):\n    return sorted(arr, key=lambda x: -x)", "code_6": "def by_length(arr):\n    return sorted(arr, reverse=True)", "code_7": "def by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True)]", "code_8": "def by_length(arr):\n    return sorted(arr, key=lambda x: -x)", "code_9": "def by_length(arr):\n    return sorted(arr, reverse=True)", "code_10": "def by_length(arr):\n    return [str(i) for i in sorted(arr, reverse=True)]"}
{"task_id": "HumanEval/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i!)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "code_2": "def f(n):\n    result = [None] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = i!\n        else:\n            result[i] = sum(range(1, i+1))\n    return result", "code_3": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i!)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result[::-1]", "code_4": "def f(n):\n    result = [None] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = i!\n        else:\n            result[i] = sum(range(1, i+1))\n    return result[::-1]", "code_5": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i!)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result[::-1]", "code_6": "def f(n):\n    result = [None] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = i!\n        else:\n            result[i] = sum(range(1, i+1))\n    return result[::-1]", "code_7": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i!)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result[::-1]", "code_8": "def f(n):\n    result = [None] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = i!\n        else:\n            result[i] = sum(range(1, i+1))\n    return result[::-1]", "code_9": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i!)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result[::-1]", "code_10": "def f(n):\n    result = [None] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = i!\n        else:\n            result[i] = sum(range(1, i+1))\n    return result[::-1]"}
{"task_id": "HumanEval/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_2": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_3": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_4": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_5": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_6": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_7": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_8": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_9": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)", "code_10": "def even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            count_even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            count_odd += 1\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "code_2": "def count_nums(arr):\n    return sum(1 for num in arr if num > 0)", "code_3": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "code_4": "def count_nums(arr):\n    return len([num for num in arr if num > 0])", "code_5": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "code_6": "def count_nums(arr):\n    return sum(num > 0 for num in arr)", "code_7": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "code_8": "def count_nums(arr):\n    return len([num for num in arr if num > 0])", "code_9": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "code_10": "def count_nums(arr):\n    return sum(num > 0 for num in arr)"}
{"task_id": "HumanEval/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def move_one_ball(arr):\n    return sorted(arr) == arr", "code_2": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "code_3": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_4": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_5": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_6": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_7": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_8": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_9": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)", "code_10": "def move_one_ball(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) and len(set(arr)) == len(arr)"}
{"task_id": "HumanEval/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_2": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_3": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_4": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_5": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_6": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_7": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_8": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_9": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\"", "code_10": "def exchange(lst1, lst2):\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/111", "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        else:\n            letter_count[letter] += 1\n    return letter_count", "code_2": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return letter_count", "code_3": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_4": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_5": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_6": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_7": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_8": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_9": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}", "code_10": "def histogram(test):\n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    return {k: v for k, v in letter_count.items() if v > 1}"}
{"task_id": "HumanEval/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return (result, result == result[::-1])", "code_2": "def reverse_delete(s, c):\n    result = \"\".join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])", "code_3": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    return (result, result == result[::-1])", "code_4": "def reverse_delete(s, c):\n    result = \"\".join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])", "code_5": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return (result, result == result[::-1])", "code_6": "def reverse_delete(s, c):\n    result = \"\".join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])", "code_7": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    return (result, result == result[::-1])", "code_8": "def reverse_delete(s, c):\n    result = \"\".join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])", "code_9": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    return (result, result == result[::-1])", "code_10": "def reverse_delete(s, c):\n    result = \"\".join(ch for ch in s if ch not in c)\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def odd_count(lst):\n    return [len([c for c in s if int(c) % 2]) for s in lst]", "code_2": "def odd_count(lst):\n    return [sum(int(c) % 2 for c in s) for s in lst]", "code_3": "def odd_count(lst):\n    return [len(set(int(c) % 2 for c in s)) for s in lst]", "code_4": "def odd_count(lst):\n    return [sum(int(c) % 2 for c in s) for s in lst]", "code_5": "def odd_count(lst):\n    return [len([c for c in s if int(c) % 2]) for s in lst]", "code_6": "def odd_count(lst):\n    return [sum(int(c) % 2 for c in s) for s in lst]", "code_7": "def odd_count(lst):\n    return [len(set(int(c) % 2 for c in s)) for s in lst]", "code_8": "def odd_count(lst):\n    return [sum(int(c) % 2 for c in s) for s in lst]", "code_9": "def odd_count(lst):\n    return [len([c for c in s if int(c) % 2]) for s in lst]", "code_10": "def odd_count(lst):\n    return [sum(int(c) % 2 for c in s) for s in lst]"}
{"task_id": "HumanEval/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "results": [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum < min_sum:\n                min_sum = curr_sum\n    return min_sum", "code_2": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_3": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[:i+1])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_4": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_5": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_6": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_7": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_8": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_9": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum", "code_10": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum = sum(nums[i:])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += math.ceil(grid[i][j] / capacity)\n    return max_fill", "code_2": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += 1\n    return max_fill", "code_3": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += capacity\n    return max_fill", "code_4": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += 1\n    return max_fill", "code_5": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += capacity\n    return max_fill", "code_6": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += 1\n    return max_fill", "code_7": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += capacity\n    return max_fill", "code_8": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += 1\n    return max_fill", "code_9": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += capacity\n    return max_fill", "code_10": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    max_fill = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                max_fill += 1\n    return max_fill"}
{"task_id": "HumanEval/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "results": [1, 0, 0, 0, 1, 0, 0, 1, 0, 0], "no_of_codes": 10, "code_1": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_2": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x & 1, x))", "code_3": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x % 2, x))", "code_4": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x & 1, x))", "code_5": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_6": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x & 1, x))", "code_7": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x % 2, x))", "code_8": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "code_9": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x & 1, x))", "code_10": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (x % 2, x))"}
{"task_id": "HumanEval/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha()]", "code_2": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.islower()]", "code_3": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isupper()]", "code_4": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isdigit()]", "code_5": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isdecimal()]", "code_6": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isidentifier()]", "code_7": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isprintable()]", "code_8": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isalnum()]", "code_9": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isalpha()]", "code_10": "def select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(word) == n and word.isalpha() and word.isascii()]"}
{"task_id": "HumanEval/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_2": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_3": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_4": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_5": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_6": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_7": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_8": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_9": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\"", "code_10": "def get_closest_vowel(word):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word) - 2 and word[i + 1] not in vowels:\n                return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_2": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_3": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_4": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_5": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_6": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_7": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_8": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_9": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "code_10": "def match_parens(lst):\n    stack = []\n    for char in lst:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "code_2": "from heapq import heapify, heappop\n\ndef maximum(arr, k):\n    heap = []\n    for i in range(k):\n        heap.append(arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heappop(heap)\n            heap.append(arr[i])\n    return heap", "code_3": "def maximum(arr, k):\n    window = arr[:k]\n    for i in range(k, len(arr)):\n        if arr[i] > window[0]:\n            window.pop(0)\n            window.append(arr[i])\n    return window", "code_4": "def maximum(arr, k):\n    window = arr[:k]\n    window.sort(reverse=True)\n    for i in range(k, len(arr)):\n        if arr[i] > window[0]:\n            window.pop(0)\n            window.append(arr[i])\n    return window", "code_5": "from heapq import heapify, heappop\n\ndef maximum(arr, k):\n    heap = []\n    for i in range(k):\n        heap.append(arr[i])\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heappop(heap)\n            heap.append(arr[i])\n    return heap", "code_6": "def maximum(arr, k):\n    window = arr[:k]\n    window.sort(reverse=True)\n    for i in range(k, len(arr)):\n        if arr[i] > window[0]:\n            window.pop(0)\n            window.append(arr[i])\n    return window", "code_7": "from heapq import heapify, heappop\n\ndef maximum(arr, k):\n    heap = []\n    for i in range(k):\n        heap.append(arr[i])\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heappop(heap)\n            heap.append(arr[i])\n    return heap", "code_8": "from heapq import heapify, heappop\n\ndef maximum(arr, k):\n    heap = []\n    for i in range(k):\n        heap.append(arr[i])\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heappop(heap)\n            heap.append(arr[i])\n    return heap", "code_9": "from collections import deque\n\ndef maximum(arr, k):\n    window = deque(arr[:k])\n    window.sort(reverse=True)\n    for i in range(k, len(arr)):\n        if arr[i] > window[0]:\n            window.popleft()\n            window.append(arr[i])\n    return list(window)", "code_10": "from heapq import heapify, heappop\nfrom collections import deque\n\ndef maximum(arr, k):\n    heap = []\n    for i in range(k):\n        heap.append(arr[i])\n    heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heappop(heap)\n            heap.append(arr[i])\n    return heap"}
{"task_id": "HumanEval/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "code_2": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "code_3": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "code_4": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "code_5": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "code_6": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "code_7": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "code_8": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "code_9": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "code_10": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_2": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_3": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_4": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_5": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_6": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_7": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_8": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_9": "def add_elements(arr, k):\n    return sum(arr[:k])", "code_10": "def add_elements(arr, k):\n    return sum(arr[:k])"}
{"task_id": "HumanEval/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0])", "code_2": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0])", "code_3": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1])", "code_4": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n])", "code_5": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n and x != n * 2])", "code_6": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n and x != n * 2 and x != n * 3 + 1])", "code_7": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n and x != n * 2 and x != n * 3 + 1 and x != n * 4 + 1])", "code_8": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n and x != n * 2 and x != n * 3 + 1 and x != n * 4 + 1 and x != n * 5 + 1])", "code_9": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n and x != n * 2 and x != n * 3 + 1 and x != n * 4 + 1 and x != n * 5 + 1 and x != n * 6 + 1])", "code_10": "def get_odd_collatz(n):\n    if n <= 0:\n        return []\n    sequence = [n]\n    while sequence[-1] != 1:\n        if sequence[-1] % 2 == 0:\n            sequence.append(sequence[-1] // 2)\n        else:\n            sequence.append(3 * sequence[-1] + 1)\n    return sorted([x for x in sequence if x % 2 != 0 and x != 1 and x != n and x != n * 2 and x != n * 3 + 1 and x != n * 4 + 1 and x != n * 5 + 1 and x != n * 6 + 1 and x != n * 7 + 1])"}
{"task_id": "HumanEval/124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_2": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_3": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_4": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_5": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_6": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_7": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_8": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_9": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True", "code_10": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12 and 1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True"}
{"task_id": "HumanEval/125", "prompt": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if ord(c) % 2 == 1:\n                count += 1\n        return count", "code_2": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower():\n                count += 1\n        return count", "code_3": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.isalpha():\n                count += 1\n        return count", "code_4": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha():\n                count += 1\n        return count", "code_5": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha() and c != ' ':\n                count += 1\n        return count", "code_6": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha() and c != ' ' and c != ',':\n                count += 1\n        return count", "code_7": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha() and c != ' ' and c != ',':\n                count += 1\n        return count", "code_8": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha() and c != ' ' and c != ',':\n                count += 1\n        return count", "code_9": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha() and c != ' ' and c != ',':\n                count += 1\n        return count", "code_10": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and c.isalpha() and c != ' ' and c != ',':\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n", "code_2": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst))\n\n", "code_3": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1\n\n", "code_4": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1\n\n", "code_5": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1])\n\n", "code_6": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == 1\n\n", "code_7": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1\n\n", "code_8": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1])\n\n", "code_9": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == lst.count(lst[-1])\n\n", "code_10": "\ndef is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst)) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == 1 and lst.count(lst[-1]) == 1 and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == lst.count(lst[-1]) and lst.count(lst[0]) == lst.count(lst[-1])"}
{"task_id": "HumanEval/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if is_prime(end - start + 1) else \"NO\"\n    else:\n        return \"NO\"\n", "code_2": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in [2, 3, 5, 7] else \"NO\"\n    else:\n        return \"NO\"\n", "code_3": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 % 2 == 1 else \"NO\"\n    else:\n        return \"NO\"\n", "code_4": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n", "code_5": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n", "code_6": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n", "code_7": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n", "code_8": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n", "code_9": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n", "code_10": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"YES\" if end - start + 1 in range(2, 1000000000) else \"NO\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_2": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_3": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_4": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_5": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_6": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_7": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_8": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_9": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product", "code_10": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num // abs(num)\n    return sum(abs(num) for num in arr) * product"}
{"task_id": "HumanEval/129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_2": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_3": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_4": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_5": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_6": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_7": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_8": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_9": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []", "code_10": "def minPath(grid, k):\n    rows = len(grid)\n    cols = len(grid[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    while queue:\n        row, col, dist = queue.pop(0)\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        if dist == k:\n            return grid[row][col]\n        for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n            if 0 <= r < rows and 0 <= c < cols:\n                queue.append((r, c, dist+1))\n    return []"}
{"task_id": "HumanEval/130", "prompt": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def tri(n):\n    if n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [3] + tri(n-1) + tri(n-2)\n    else:\n        return tri(n-1) + tri(n-2) + tri(n+1)", "code_2": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_3": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_4": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_5": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_6": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_7": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_8": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_9": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)", "code_10": "def tri(n):\n    if n == 1:\n        return [3]\n    else:\n        return [3] + tri(n-1) + tri(n-2) + tri(n+1)"}
{"task_id": "HumanEval/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "code_2": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "code_3": "def digits(n):\n    product = 0\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product += int(digit)\n    return product", "code_4": "def digits(n):\n    product = 0\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product += int(digit)\n    return product", "code_5": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n        else:\n            product = 0\n    return product", "code_6": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            product = 0\n    return product", "code_7": "def digits(n):\n    product = 0\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product += int(digit)\n        else:\n            product = 0\n    return product", "code_8": "def digits(n):\n    product = 0\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product += int(digit)\n        else:\n            product = 0\n    return product", "code_9": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n        else:\n            product = 0\n    return product", "code_10": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            product = 0\n    return product"}
{"task_id": "HumanEval/132", "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n", "solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_2": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_3": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_4": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_5": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_6": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_7": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_8": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_9": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "code_10": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_squares(lst):\n    return sum(x**2 for x in map(int, lst))", "code_2": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_3": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_4": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_5": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_6": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_7": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_8": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_9": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))", "code_10": "def sum_squares(lst):\n    return sum(x**2 for x in map(lambda x: int(x) + 1, lst))"}
{"task_id": "HumanEval/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False", "code_2": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1] in string.ascii_letters:\n        return True\n    else:\n        return False", "code_3": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha() and txt[-1] not in string.whitespace:\n        return True\n    else:\n        return False", "code_4": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1] in string.ascii_letters and txt[-2] not in string.whitespace:\n        return True\n    else:\n        return False", "code_5": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha() and txt[-2].isspace():\n        return True\n    else:\n        return False", "code_6": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1] in string.ascii_letters and txt[-2] in string.whitespace:\n        return True\n    else:\n        return False", "code_7": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha() and txt[-2].isalnum():\n        return True\n    else:\n        return False", "code_8": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1] in string.ascii_letters and txt[-2].isalnum():\n        return True\n    else:\n        return False", "code_9": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1].isalpha() and txt[-2].isalnum() and txt[-3].isspace():\n        return True\n    else:\n        return False", "code_10": "def check_if_last_char_is_a_letter(txt):\n    if txt[-1] in string.ascii_letters and txt[-2].isalnum() and txt[-3].isspace():\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1", "code_2": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1", "code_3": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1", "code_4": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1", "code_5": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1", "code_6": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1", "code_7": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1", "code_8": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1", "code_9": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1", "code_10": "def can_arrange(arr):\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "results": [1, 1, 0, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0 and (largest_neg is None or i > largest_neg):\n            largest_neg = i\n        elif i > 0 and (smallest_pos is None or i < smallest_pos):\n            smallest_pos = i\n    return (largest_neg, smallest_pos)", "code_2": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            if largest_neg is None or i > largest_neg:\n                largest_neg = i\n        elif i > 0:\n            if smallest_pos is None or i < smallest_pos:\n                smallest_pos = i\n    return (largest_neg, smallest_pos)", "code_3": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_4": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_5": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_6": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_7": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_8": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_9": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)", "code_10": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n    for i in lst:\n        if i < 0:\n            largest_neg = i if largest_neg is None else max(largest_neg, i)\n        elif i > 0:\n            smallest_pos = i if smallest_pos is None else min(smallest_pos, i)\n    return (largest_neg, smallest_pos)"}
{"task_id": "HumanEval/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_2": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_3": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_4": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_5": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_6": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_7": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_8": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_9": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "code_10": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "solution": "    return n%2 == 0 and n >= 8\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_2": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_3": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_4": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_5": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_6": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_7": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_8": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_9": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "code_10": "def is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "code_2": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result", "code_3": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "code_4": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result", "code_5": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "code_6": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result", "code_7": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "code_8": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result", "code_9": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "code_10": "def special_factorial(n):\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result"}
{"task_id": "HumanEval/140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\")", "code_2": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\")", "code_3": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\")", "code_4": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\")", "code_5": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\").replace(\"      \", \"-----\")", "code_6": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\").replace(\"      \", \"-----\").replace(\"       \", \"------\")", "code_7": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\").replace(\"      \", \"-----\").replace(\"       \", \"------\").replace(\"        \", \"-------\")", "code_8": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\").replace(\"      \", \"-----\").replace(\"       \", \"------\").replace(\"        \", \"-------\").replace(\"         \", \"--------\")", "code_9": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\").replace(\"      \", \"-----\").replace(\"       \", \"------\").replace(\"        \", \"-------\").replace(\"         \", \"--------\").replace(\"          \", \"---------\")", "code_10": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"  \", \"-\").replace(\"   \", \"--\").replace(\"    \", \"---\").replace(\"     \", \"----\").replace(\"      \", \"-----\").replace(\"       \", \"------\").replace(\"        \", \"-------\").replace(\"         \", \"--------\").replace(\"          \", \"---------\").replace(\"           \", \"----------\")"}
{"task_id": "HumanEval/141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_2": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_3": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_4": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_5": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_6": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_7": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_8": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_9": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "code_10": "def file_name_check(file_name):\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_2": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_3": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_4": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_5": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_6": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_7": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_8": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_9": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result", "code_10": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n    return result"}
{"task_id": "HumanEval/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "results": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "code_2": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_3": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_4": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_5": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_6": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_7": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_8": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_9": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n", "code_10": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if len(word) in [3, 5, 7, 11, 13, 17, 19, 23, 29]]\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_2": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_3": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_4": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_5": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_6": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_7": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_8": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_9": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0", "code_10": "def simplify(x, n):\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    return (int(x_num) * int(n_den)) % (int(x_den) * int(n_num)) == 0"}
{"task_id": "HumanEval/145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))))", "code_2": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=True)", "code_3": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=False)", "code_4": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=True)", "code_5": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=False)", "code_6": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=True)", "code_7": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=False)", "code_8": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=True)", "code_9": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=False)", "code_10": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))))), reverse=True)"}
{"task_id": "HumanEval/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1:\n            count += 1\n    return count", "code_2": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1)", "code_3": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and (num % 10) % 2 == 1])", "code_4": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1:\n            count += 1\n    return count", "code_5": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1)", "code_6": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and (num % 10) % 2 == 1])", "code_7": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1:\n            count += 1\n    return count", "code_8": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1)", "code_9": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and (num % 10) % 2 == 1])", "code_10": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_2": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_3": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_4": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_5": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_6": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_7": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_8": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_9": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count", "code_10": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_2": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_3": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_4": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_5": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_6": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_7": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_8": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_9": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))", "code_10": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        return tuple(sorted(planets, key=lambda x: abs(planets.index(x) - planets.index(planet1))))"}
{"task_id": "HumanEval/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))", "code_2": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.lower()))", "code_3": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.upper()))", "code_4": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.swapcase()))", "code_5": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.islower()))", "code_6": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.isupper()))", "code_7": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.istitle()))", "code_8": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.isdigit()))", "code_9": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.isalpha()))", "code_10": "def sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x.isalnum()))"}
{"task_id": "HumanEval/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        return x", "code_2": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y", "code_3": "def x_or_y(n, x, y):\n    return x if n % 2 == 1 else y", "code_4": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y", "code_5": "def x_or_y(n, x, y):\n    return x if n % 2 == 1 else y", "code_6": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y", "code_7": "def x_or_y(n, x, y):\n    return x if n % 2 == 1 else y", "code_8": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y", "code_9": "def x_or_y(n, x, y):\n    return x if n % 2 == 1 else y", "code_10": "def x_or_y(n, x, y):\n    return x if n % 2 == 0 else y"}
{"task_id": "HumanEval/151", "prompt": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n", "solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum(x**2 for x in lst if x % 2 == 1)", "code_2": "def double_the_difference(lst):\n    result = 0\n    for x in lst:\n        if x % 2 == 1:\n            result += x**2\n    return result", "code_3": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 == 1)", "code_4": "def double_the_difference(lst):\n    result = 0\n    for x in lst:\n        if x % 2 == 1:\n            result += x**2\n    return result", "code_5": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 == 1)", "code_6": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum(x**2 for x in lst if x % 2 == 1)", "code_7": "def double_the_difference(lst):\n    result = 0\n    for x in lst:\n        if x % 2 == 1:\n            result += x**2\n    return result", "code_8": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 == 1)", "code_9": "def double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum(x**2 for x in lst if x % 2 == 1)", "code_10": "def double_the_difference(lst):\n    result = 0\n    for x in lst:\n        if x % 2 == 1:\n            result += x**2\n    return result"}
{"task_id": "HumanEval/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "results": [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], "no_of_codes": 10, "code_1": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]", "code_2": "def compare(game, guess):\n    return [g - s for g, s in zip(guess, game)]", "code_3": "def compare(game, guess):\n    return [abs(g - s) for g, s in enumerate(guess)]", "code_4": "def compare(game, guess):\n    return [g - s for g, s in enumerate(guess)]", "code_5": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]", "code_6": "def compare(game, guess):\n    return [g - s for g, s in zip(guess, game)]", "code_7": "def compare(game, guess):\n    return [abs(g - s) for g, s in enumerate(guess)]", "code_8": "def compare(game, guess):\n    return [g - s for g, s in enumerate(guess)]", "code_9": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(guess, game)]", "code_10": "def compare(game, guess):\n    return [g - s for g, s in zip(guess, game)]"}
{"task_id": "HumanEval/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "results": [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = extension.count(extension.upper()) - extension.count(extension.lower())\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_2": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = sum(c.isupper() for c in extension) - sum(c.islower() for c in extension)\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_3": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension.upper())) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_4": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_5": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_6": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_7": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_8": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_9": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "code_10": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = -1\n    for extension in extensions:\n        strength = len(set(extension)) - len(set(extension.lower()))\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def cycpattern_check(a, b):\n    return b in a or b[::-1] in a", "code_2": "def cycpattern_check(a, b):\n    return any(b[i:] in a for i in range(len(b)))", "code_3": "def cycpattern_check(a, b):\n    return b in a or b[1:] + b[:1] in a", "code_4": "def cycpattern_check(a, b):\n    return any(b[i:] in a for i in range(len(b)))", "code_5": "def cycpattern_check(a, b):\n    return b in a or b[::-1] in a or b[1:] + b[:1] in a", "code_6": "def cycpattern_check(a, b):\n    return any(b[i:] in a for i in range(len(b)))", "code_7": "def cycpattern_check(a, b):\n    return b in a or b[::-1] in a or b[1:] + b[:1] in a", "code_8": "def cycpattern_check(a, b):\n    return any(b[i:] in a for i in range(len(b)))", "code_9": "def cycpattern_check(a, b):\n    return b in a or b[::-1] in a or b[1:] + b[:1] in a", "code_10": "def cycpattern_check(a, b):\n    return any(b[i:] in a for i in range(len(b)))"}
{"task_id": "HumanEval/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "code_2": "def even_odd_count(num):\n    count_even = sum(int(digit) % 2 == 0 for digit in str(num))\n    count_odd = sum(int(digit) % 2 == 1 for digit in str(num))\n    return (count_even, count_odd)", "code_3": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "code_4": "def even_odd_count(num):\n    count_even = sum(int(digit) % 2 == 0 for digit in str(num))\n    count_odd = sum(int(digit) % 2 == 1 for digit in str(num))\n    return (count_even, count_odd)", "code_5": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "code_6": "def even_odd_count(num):\n    count_even = sum(int(digit) % 2 == 0 for digit in str(num))\n    count_odd = sum(int(digit) % 2 == 1 for digit in str(num))\n    return (count_even, count_odd)", "code_7": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "code_8": "def even_odd_count(num):\n    count_even = sum(int(digit) % 2 == 0 for digit in str(num))\n    count_odd = sum(int(digit) % 2 == 1 for digit in str(num))\n    return (count_even, count_odd)", "code_9": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)", "code_10": "def even_odd_count(num):\n    count_even = sum(int(digit) % 2 == 0 for digit in str(num))\n    count_odd = sum(int(digit) % 2 == 1 for digit in str(num))\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_2": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_3": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_4": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_5": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_6": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_7": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_8": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_9": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result", "code_10": "def int_to_mini_roman(number):\n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd', 'm']\n    result = ''\n    while number > 0:\n        for i in range(len(roman_numerals)):\n            if number >= i:\n                result += roman_numerals[i]\n                number -= i\n                break\n    return result"}
{"task_id": "HumanEval/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "results": [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2)", "code_2": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2)", "code_3": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2)", "code_4": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "code_5": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2) and (a + b + c == 90)", "code_6": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2) and (a + b + c == 90) and (a + b == c)", "code_7": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2) and (a + b + c == 90) and (a + b == c) and (a + c == b)", "code_8": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2) and (a + b + c == 90) and (a + b == c) and (a + c == b) and (b + c == a)", "code_9": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2) and (a + b + c == 90) and (a + b == c) and (a + c == b) and (b + c == a) and (a + b + c == 90)", "code_10": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) and (a**2 + c**2 == b**2) and (b**2 + c**2 == a**2) and (a + b + c == 90) and (a + b == c) and (a + c == b) and (b + c == a) and (a + b + c == 90) and (a + b == c) and (a + c == b) and (b + c == a)"}
{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_2": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_3": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_4": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_5": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_6": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_7": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_8": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_9": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word", "code_10": "def find_max(words):\n    unique_chars = {}\n    for word in words:\n        for char in word:\n            if char not in unique_chars:\n                unique_chars[char] = 1\n            else:\n                unique_chars[char] += 1\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n        if len(unique_chars) > max_chars:\n            max_chars = len(unique_chars)\n            max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def eat(number, need, remaining):\n    return [number + need, remaining - need]", "code_2": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need)]", "code_3": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) >= 0 else 0]", "code_4": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else remaining]", "code_5": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else 0]", "code_6": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else remaining - (number + need)]", "code_7": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else 0]", "code_8": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else remaining - (number + need)]", "code_9": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else 0]", "code_10": "def eat(number, need, remaining):\n    return [number + need, remaining - (number + need) if remaining - (number + need) > 0 else remaining - (number + need)]"}
{"task_id": "HumanEval/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_2": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_3": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_4": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_5": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_6": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_7": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_8": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_9": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result", "code_10": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result"}
{"task_id": "HumanEval/161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def solve(s):\n    return s[::-1]", "code_2": "def solve(s):\n    return s.swapcase()", "code_3": "def solve(s):\n    return s.lower() if s.islower() else s.upper()", "code_4": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) + 32) for i in range(97, 123)}))", "code_5": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) - 32) for i in range(65, 91)}))", "code_6": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) + 32) for i in range(97, 123)}))", "code_7": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) - 32) for i in range(65, 91)}))", "code_8": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) + 32) for i in range(97, 123)}))", "code_9": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) - 32) for i in range(65, 91)}))", "code_10": "def solve(s):\n    return s.translate(str.maketrans({chr(i): chr(ord(i) + 32) for i in range(97, 123)}))"}
{"task_id": "HumanEval/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "results": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "no_of_codes": 10, "code_1": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_2": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_3": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_4": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_5": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_6": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_7": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_8": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_9": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "code_10": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "results": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "no_of_codes": 10, "code_1": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "code_2": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a <= x <= b]", "code_3": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a < x < b]", "code_4": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a <= x <= b]", "code_5": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a < x < b]", "code_6": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a <= x <= b]", "code_7": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a < x < b]", "code_8": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a <= x <= b]", "code_9": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a < x < b]", "code_10": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0 and a <= x <= b]"}
